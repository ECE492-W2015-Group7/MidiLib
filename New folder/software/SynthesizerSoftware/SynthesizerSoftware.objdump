
SynthesizerSoftware.elf:     file format elf32-littlenios2
SynthesizerSoftware.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0008019c

Program Header:
    LOAD off    0x00001020 vaddr 0x00104020 paddr 0x00080000 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r-x
    LOAD off    0x0000219c vaddr 0x0008019c paddr 0x0008019c align 2**12
         filesz 0x0000eea8 memsz 0x0000eea8 flags r-x
    LOAD off    0x00011044 vaddr 0x0008f044 paddr 0x00090b44 align 2**12
         filesz 0x00001b00 memsz 0x00001b00 flags rw-
    LOAD off    0x00013644 vaddr 0x00092644 paddr 0x00092644 align 2**12
         filesz 0x00000000 memsz 0x00007568 flags rw-
    LOAD off    0x00013000 vaddr 0x00104000 paddr 0x00104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00104000  00104000  00013000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00104020  00080000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ecac  0008019c  0008019c  0000219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001fc  0008ee48  0008ee48  00010e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b00  0008f044  00090b44  00011044  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007568  00092644  00092644  00013644  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00013020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a98  00000000  00000000  00013048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001d22  00000000  00000000  00013ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027a8a  00000000  00000000  00015802  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006a8b  00000000  00000000  0003d28c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014818  00000000  00000000  00043d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ebc  00000000  00000000  00058530  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001a42  00000000  00000000  0005a3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000054f6  00000000  00000000  0005be2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00061324  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000310  00000000  00000000  00061338  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000657e8  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000657ee  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000657fa  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000657fb  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000657fc  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00065800  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00065804  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00065808  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00065813  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0006581e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  00065829  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004c  00000000  00000000  00065836  2**0
                  CONTENTS, READONLY
 29 .jdi          00005058  00000000  00000000  00065882  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00075889  00000000  00000000  0006a8da  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00104000 l    d  .entry	00000000 .entry
00104020 l    d  .exceptions	00000000 .exceptions
0008019c l    d  .text	00000000 .text
0008ee48 l    d  .rodata	00000000 .rodata
0008f044 l    d  .rwdata	00000000 .rwdata
00092644 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 MIDISynthesizer.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0008f044 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00081d20 l     F .text	00000058 std
00081e2c l     F .text	00000008 __fp_lock
00081e34 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00082e64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00082ec4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00082fc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000830ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000831cc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008332c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00083578 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00090ab8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00083830 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00090abc l     O .rwdata	00000004 lockid
00092664 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00090ac0 l     O .rwdata	00000004 lockid
0009266c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00085268 l     F .text	00000044 OS_InitMisc
000852ac l     F .text	0000006c OS_InitRdyList
00085410 l     F .text	000000e0 OS_InitTCBList
0008518c l     F .text	000000dc OS_InitEventList
00085318 l     F .text	0000007c OS_InitTaskIdle
00085394 l     F .text	0000007c OS_InitTaskStat
00085684 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000875a4 l     F .text	00000110 OS_FlagTaskRdy
000872fc l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008f9f4 l     O .rwdata	0000106c jtag_uart_0
00090a60 l     O .rwdata	00000030 audio_and_video_config_0
0008bef8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008c1b0 l     F .text	000002c4 altera_avalon_jtag_uart_irq
0008c474 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008cc8c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008d738 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008dbdc l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008dd2c l     F .text	000000f8 alt_file_locked
0008dfb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0008ead8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
0008ec8c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
0008edd8 l     F .text	00000040 alt_sim_halt
0008cee0 g     F .text	00000038 alt_up_av_config_reset
0008d384 g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
00090b0e g     O .rwdata	00000002 OSTaskNameSize
00082bcc g     F .text	00000070 _isatty_r
0008cf50 g     F .text	00000030 alt_up_av_config_disable_interrupt
0008338c g     F .text	000000c8 alt_main
000803e8 g     F .text	000000a0 _puts_r
0009991c g     O .bss	00000100 alt_irq
00082c3c g     F .text	00000078 _lseek_r
00087e98 g     F .text	000000d4 OS_MemInit
00090b44 g       *ABS*	00000000 __flash_rwdata_start
0008bdf8 g     F .text	00000064 OSTimeSet
00083de4 g     F .text	000006b4 OSEventPendMulti
00099bac g       *ABS*	00000000 __alt_heap_start
0008d020 g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
0008e5b8 g     F .text	00000020 OSTaskCreateHook
000926f8 g     O .bss	00002000 task1_stk
00090ae6 g     O .rwdata	00000002 OSMboxEn
000844ec g     F .text	0000007c OSIntEnter
00082808 g     F .text	00000068 __sseek
00081d88 g     F .text	000000a4 __sinit
00090af6 g     O .rwdata	00000002 OSQEn
00081e88 g     F .text	0000009c __sfmoreglue
00083aa0 g     F .text	000000d0 __malloc_unlock
0008e614 g     F .text	0000001c OSTaskStatHook
00092674 g     O .bss	00000001 OSLockNesting
00090b34 g     O .rwdata	00000002 OSDataSize
00092675 g     O .bss	00000001 OSRunning
00081270 g     F .text	000000e0 memmove
0008e64c g     F .text	0000001c OSInitHookBegin
00090b2c g     O .rwdata	00000002 OSTmrSize
00081e78 g     F .text	00000010 _cleanup
00092678 g     O .bss	00000004 OSIdleCtr
0008e284 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
000859b8 g     F .text	000002e0 OS_TCBInit
00104000 g     F .entry	0000000c __reset
00090b32 g     O .rwdata	00000002 OSTmrWheelTblSize
00080000 g       *ABS*	00000000 __flash_exceptions_start
00090ad2 g     O .rwdata	00000002 OSEventSize
0009267c g     O .bss	00000001 OSPrioHighRdy
00082b58 g     F .text	00000074 _fstat_r
0008e5d8 g     F .text	00000020 OSTaskDelHook
00092650 g     O .bss	00000004 errno
0008e264 g       .text	00000000 OSStartHighRdy
0008a5b0 g     F .text	00000200 OSTaskCreateExt
00086e18 g     F .text	00000068 OSFlagPendGetFlagsRdy
00090b12 g     O .rwdata	00000002 OSTaskStatStkSize
00085e24 g     F .text	00000334 OSFlagAccept
000885d4 g     F .text	000000c8 OSQFlush
00087f6c g     F .text	00000154 OSQAccept
0009265c g     O .bss	00000004 alt_argv
00098a90 g       *ABS*	00000000 _gp
0008a3dc g     F .text	000001d4 OSTaskCreate
00089e68 g     F .text	00000574 OSTaskChangePrio
00092670 g     O .bss	00000004 alt_heapsem
00085c98 g     F .text	0000018c OSDebugInit
0008a7b0 g     F .text	0000040c OSTaskDel
0008f874 g     O .rwdata	00000180 alt_fd_list
000966f8 g     O .bss	00000370 OSFlagTbl
00084f68 g     F .text	000000b8 OS_EventTaskRemove
0008d860 g     F .text	00000094 alt_find_dev
000811d0 g     F .text	000000a0 memcpy
00090afc g     O .rwdata	00000002 OSRdyTblSize
00081e6c g     F .text	0000000c _cleanup_r
0008dcb4 g     F .text	00000078 alt_io_redirect
0008ee48 g       *ABS*	00000000 __DTOR_END__
00080488 g     F .text	00000014 puts
00083b70 g     F .text	00000130 OSEventNameGet
00090ae0 g     O .rwdata	00000002 OSFlagMax
00084568 g     F .text	00000100 OSIntExit
00090b1a g     O .rwdata	00000002 OSTCBSize
0009267d g     O .bss	00000001 OSPrioCur
0008c6f0 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0008edc8 g     F .text	00000008 __udivsi3
00083028 g     F .text	000000c4 isatty
00090b00 g     O .rwdata	00000002 OSStkWidth
00090af4 g     O .rwdata	00000002 OSPtrSize
00090ad4 g     O .rwdata	00000002 OSEventTblSize
0008e1d8 g       .text	00000000 OSCtxSw
00092644 g     O .bss	00000004 __malloc_top_pad
00092680 g     O .bss	00000004 OSTCBList
00092654 g     O .bss	00000004 alt_fd_list_lock
0008ce54 g     F .text	0000008c alt_up_av_config_read_data
00080510 g     F .text	0000049c __sfvwrite_r
00096a68 g     O .bss	00000c30 OSMemTbl
00092684 g     O .bss	00000001 OSTickStepState
00081944 g     F .text	00000070 _sbrk_r
00090af8 g     O .rwdata	00000002 OSQMax
00097698 g     O .bss	00000800 OSTaskStatStk
00087a80 g     F .text	0000010c OSMemNameGet
00090ad8 g     O .rwdata	00000002 OSFlagEn
00082cb4 g     F .text	00000078 _read_r
00090b1e g     O .rwdata	00000002 OSTimeTickHookEn
00088b38 g     F .text	00000180 OSQPost
000876b4 g     F .text	000000ac OS_FlagUnlink
00090ab0 g     O .rwdata	00000004 alt_max_fd
00085544 g     F .text	0000006c OS_MemCopy
000855b0 g     F .text	000000d4 OS_Sched
00082a34 g     F .text	00000110 _fclose_r
0008797c g     F .text	00000104 OSMemGet
0008aee4 g     F .text	000001c4 OSTaskNameSet
00081cec g     F .text	00000034 fflush
00092648 g     O .bss	00000004 __malloc_max_sbrked_mem
00092688 g     O .bss	00000004 OSCtxSwCtr
0008e630 g     F .text	0000001c OSTimeTickHook
00090ae2 g     O .rwdata	00000002 OSFlagNameSize
00085020 g     F .text	00000104 OS_EventTaskRemoveMulti
00084e14 g     F .text	00000154 OS_EventTaskWaitMulti
00090afa g     O .rwdata	00000002 OSQSize
00083238 g     F .text	000000f4 lseek
00089714 g     F .text	0000027c OSSemPend
00090a94 g     O .rwdata	00000004 _global_impure_ptr
00081350 g     F .text	000005f4 _realloc_r
00090ae4 g     O .rwdata	00000002 OSLowestPrio
00099bac g       *ABS*	00000000 __bss_end
0008dae4 g     F .text	000000f8 alt_iic_isr_register
0008e6a0 g     F .text	00000020 OSTCBInitHook
00090b2a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0008e0a8 g     F .text	00000110 alt_tick
00090acc g     O .rwdata	00000002 OSEventEn
00090b26 g     O .rwdata	00000002 OSTmrCfgNameSize
00081e54 g     F .text	00000018 __fp_lock_all
0008da9c g     F .text	00000048 alt_ic_irq_enabled
000874c0 g     F .text	000000e4 OS_FlagInit
0008e010 g     F .text	00000098 alt_alarm_stop
00090b08 g     O .rwdata	00000002 OSTaskIdleStkSize
000926c4 g     O .bss	00000004 alt_irq_active
000892a0 g     F .text	000000c0 OSSemAccept
00087cac g     F .text	000000f0 OSMemPut
00087760 g     F .text	0000021c OSMemCreate
0009268c g     O .bss	00000004 OSIdleCtrMax
001040ec g     F .exceptions	000000d0 alt_irq_handler
0008f84c g     O .rwdata	00000028 alt_dev_null
00090b1c g     O .rwdata	00000002 OSTicksPerSec
0008e1d8 g       .text	00000000 OSIntCtxSw
0008d668 g     F .text	0000001c alt_dcache_flush_all
00092690 g     O .bss	00000004 OSTCBFreeList
00090b44 g       *ABS*	00000000 __ram_rwdata_end
00089990 g     F .text	0000017c OSSemPendAbort
00090aa8 g     O .rwdata	00000008 alt_dev_list
0008370c g     F .text	00000124 write
00090b20 g     O .rwdata	00000002 OSVersionNbr
0008f044 g       *ABS*	00000000 __ram_rodata_end
00082ef0 g     F .text	000000d8 fstat
00090ac8 g     O .rwdata	00000004 OSEndiannessTest
0008edd0 g     F .text	00000008 __umodsi3
00090ada g     O .rwdata	00000002 OSFlagGrpSize
00099bac g       *ABS*	00000000 end
0008c078 g     F .text	00000138 altera_avalon_jtag_uart_init
00085828 g     F .text	000000c8 OS_TaskStat
0008ee44 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
0008ccfc g     F .text	00000090 alt_avalon_timer_sc_init
0008c9b0 g     F .text	000002dc altera_avalon_jtag_uart_write
00081d78 g     F .text	00000004 __sfp_lock_acquire
000810ec g     F .text	000000e4 memchr
000854f0 g     F .text	00000054 OS_MemClr
0008e2a8 g     F .text	00000310 OSTaskStkInit
000801d8 g     F .text	0000012c task1
00082140 g     F .text	00000314 _free_r
00084b70 g     F .text	00000194 OS_EventTaskRdy
0008eadc g     F .text	000001b0 __call_exitprocs
00092694 g     O .bss	00000001 OSCPUUsage
00090a9c g     O .rwdata	00000004 __malloc_sbrk_base
0008019c g     F .text	0000003c _start
00080304 g     F .text	00000038 task2
000926c8 g     O .bss	00000004 _alt_tick_rate
0008869c g     F .text	00000320 OSQPend
0008b8a8 g     F .text	0000014c OSTimeDly
0008cdf0 g     F .text	00000064 alt_up_av_config_write_data
000926cc g     O .bss	00000004 _alt_nticks
00083454 g     F .text	00000124 read
0008be90 g     F .text	00000068 alt_sys_init
0008e9a4 g     F .text	00000134 __register_exitproc
00092695 g     O .bss	00000001 OSTaskCtr
0008d4b0 g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
0008b9f4 g     F .text	00000190 OSTimeDlyHMSM
0008c588 g     F .text	00000074 altera_avalon_jtag_uart_close
00082d2c g     F .text	00000038 __mulsi3
0008f044 g       *ABS*	00000000 __ram_rwdata_start
0008ee48 g       *ABS*	00000000 __ram_rodata_start
000926d0 g     O .bss	00000028 __malloc_current_mallinfo
00090ace g     O .rwdata	00000002 OSEventMax
00089b0c g     F .text	00000128 OSSemPost
000846f4 g     F .text	000000e4 OSSchedUnlock
0008bf30 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008e7e0 g     F .text	00000104 alt_get_fd
00092698 g     O .bss	00000004 OSMemFreeList
00084848 g     F .text	000000ac OSStatInit
00087228 g     F .text	000000d4 OSFlagQuery
00090b04 g     O .rwdata	00000002 OSTaskCreateExtEn
000829c4 g     F .text	00000070 _close_r
0008e930 g     F .text	00000074 memcmp
00084b54 g     F .text	0000001c OS_Dummy
0008bfe0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00099bac g       *ABS*	00000000 __alt_stack_base
0008c028 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000819b4 g     F .text	0000013c __swsetup_r
00097e98 g     O .bss	000001e0 OSQTbl
00081f24 g     F .text	000000f0 __sfp
0008f444 g     O .rwdata	00000408 __malloc_av_
00081d84 g     F .text	00000004 __sinit_lock_release
0009269c g     O .bss	00000004 OSTCBHighRdy
000828ec g     F .text	00000060 __sread
000926a0 g     O .bss	00000004 OSQFreeList
0008e6c0 g     F .text	00000120 alt_find_file
0008d684 g     F .text	000000b4 alt_dev_llist_insert
00083998 g     F .text	00000108 __malloc_lock
00083650 g     F .text	000000bc sbrk
00083ca0 g     F .text	00000144 OSEventNameSet
00081af0 g     F .text	000001fc _fflush_r
000926a4 g     O .bss	00000001 OSRdyGrp
00092644 g       *ABS*	00000000 __bss_start
00082768 g     F .text	00000098 memset
0008033c g     F .text	000000ac main
00092660 g     O .bss	00000004 alt_envp
0009264c g     O .bss	00000004 __malloc_max_total_mem
0008bf88 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0008eeec g     O .rodata	00000100 OSUnMapTbl
00090afe g     O .rwdata	00000002 OSSemEn
00086e80 g     F .text	000003a8 OSFlagPost
00082800 g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
00082b44 g     F .text	00000014 fclose
00084d04 g     F .text	00000110 OS_EventTaskWait
000946f8 g     O .bss	00002000 task2_stk
000858f0 g     F .text	000000c8 OS_TaskStatStkChk
00099a1c g     O .bss	00000190 _atexit0
0008abbc g     F .text	00000170 OSTaskDelReq
000809ac g     F .text	00000740 _malloc_r
00090ab4 g     O .rwdata	00000004 alt_errno
000847d8 g     F .text	00000070 OSStart
0008393c g     F .text	0000005c __env_unlock
0008251c g     F .text	000000b8 _fwalk
0008b0a8 g     F .text	00000218 OSTaskResume
00087d9c g     F .text	000000fc OSMemQuery
00090b10 g     O .rwdata	00000002 OSTaskStatEn
00090aea g     O .rwdata	00000002 OSMemMax
00088cb8 g     F .text	00000188 OSQPostFront
0008ed08 g     F .text	00000060 __divsi3
000926a5 g     O .bss	00000003 OSRdyTbl
00090ac4 g     O .rwdata	00000002 OSDebugEn
00082014 g     F .text	0000012c _malloc_trim_r
0008ee48 g       *ABS*	00000000 __CTOR_END__
00090adc g     O .rwdata	00000002 OSFlagNodeSize
00090b24 g     O .rwdata	00000002 OSTmrCfgMax
000880c0 g     F .text	00000214 OSQCreate
0008ad2c g     F .text	000001b8 OSTaskNameGet
0008ee48 g       *ABS*	00000000 __flash_rodata_start
00088e40 g     F .text	00000234 OSQPostOpt
000848f4 g     F .text	00000240 OSTimeTick
00090b0c g     O .rwdata	00000002 OSTaskMax
0008ee48 g       *ABS*	00000000 __DTOR_LIST__
00089360 g     F .text	00000114 OSSemCreate
00090b30 g     O .rwdata	00000002 OSTmrWheelSize
00090b06 g     O .rwdata	00000002 OSTaskDelEn
00080000 g       *ABS*	00000000 __alt_mem_sram_0
0008cd8c g     F .text	00000064 alt_up_av_config_open_dev
00089c34 g     F .text	00000130 OSSemQuery
000882d4 g     F .text	00000300 OSQDel
000889bc g     F .text	0000017c OSQPendAbort
0008be5c g     F .text	00000034 alt_irq_init
000835d8 g     F .text	00000078 alt_release_fd
0008e8e4 g     F .text	00000014 atexit
0008294c g     F .text	00000078 _write_r
0008cfe8 g     F .text	00000038 alt_up_av_config_read_ready
00084668 g     F .text	0000008c OSSchedLock
00086158 g     F .text	0000013c OSFlagCreate
00090a90 g     O .rwdata	00000004 _impure_ptr
00092658 g     O .bss	00000004 alt_argc
0008d7fc g     F .text	00000064 _do_dtors
00090ad6 g     O .rwdata	00000002 OSEventMultiEn
00086294 g     F .text	000002a8 OSFlagDel
000926a8 g     O .bss	00000004 OSEventFreeList
00104020 g       .exceptions	00000000 alt_irq_entry
000867d4 g     F .text	00000644 OSFlagPend
00090b22 g     O .rwdata	00000002 OSTmrEn
00081e3c g     F .text	00000018 __fp_unlock_all
00090aa0 g     O .rwdata	00000008 alt_fs_list
000856f4 g     F .text	00000080 OS_StrCopy
00090aec g     O .rwdata	00000002 OSMemNameSize
0008e668 g     F .text	0000001c OSInitHookEnd
00104020 g       *ABS*	00000000 __ram_exceptions_start
00090b18 g     O .rwdata	00000002 OSTCBPrioTblMax
00090b14 g     O .rwdata	00000002 OSTaskStatStkChkEn
0008cf18 g     F .text	00000038 alt_up_av_config_enable_interrupt
0008d910 g     F .text	00000050 alt_ic_isr_register
00090ae8 g     O .rwdata	00000002 OSMemEn
00090af2 g     O .rwdata	00000002 OSMutexEn
0008cf80 g     F .text	00000068 alt_up_av_config_read_acknowledge
0008d320 g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
00090b44 g       *ABS*	00000000 _edata
00099bac g       *ABS*	00000000 _end
000926ac g     O .bss	00000001 OSIntNesting
001041bc g       *ABS*	00000000 __ram_exceptions_end
0008c5fc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008bb84 g     F .text	00000210 OSTimeDlyResume
00086680 g     F .text	00000154 OSFlagNameSet
0008b2c0 g     F .text	000001fc OSTaskStkChk
0008d9fc g     F .text	000000a0 alt_ic_irq_disable
00090aee g     O .rwdata	00000002 OSMemSize
00082870 g     F .text	0000007c __swrite
00090a98 g     O .rwdata	00000004 __malloc_trim_threshold
0008e1b8 g     F .text	00000020 altera_nios2_qsys_irq_init
000926b0 g     O .bss	00000004 OSTCBCur
0008e8f8 g     F .text	00000038 exit
00090af0 g     O .rwdata	00000002 OSMemTblSize
00082454 g     F .text	000000c8 _fwalk_reent
0008d44c g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
0008ed68 g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00104020 g     F .exceptions	00000000 alt_exception
00081d7c g     F .text	00000004 __sfp_lock_release
00084498 g     F .text	00000054 OSInit
0008b6e8 g     F .text	00000144 OSTaskQuery
000891f4 g     F .text	000000ac OS_QInit
00085774 g     F .text	00000058 OS_StrLen
00087b8c g     F .text	00000120 OSMemNameSet
00090b0a g     O .rwdata	00000002 OSTaskProfileEn
000926b4 g     O .bss	00000004 OSTime
00098078 g     O .bss	00000800 OSTaskIdleStk
0008ee18 g     F .text	0000002c _exit
0008d514 g     F .text	00000154 alt_alarm_start
0008653c g     F .text	00000144 OSFlagNameGet
0008bd94 g     F .text	00000064 OSTimeGet
000825d4 g     F .text	00000194 __smakebuf_r
0008049c g     F .text	00000074 strlen
0008e5f8 g     F .text	0000001c OSTaskSwHook
0008de24 g     F .text	0000018c open
00098878 g     O .bss	00000b40 OSEventTbl
000993b8 g     O .bss	00000510 OSTCBTbl
00089d64 g     F .text	00000104 OSSemSet
0008d0cc g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
0008d8f4 g     F .text	0000001c alt_icache_flush_all
00090b38 g     O .rwdata	00000004 alt_priority_mask
00089474 g     F .text	000002a0 OSSemDel
000926b8 g     O .bss	00000004 OSFlagFreeList
0008d960 g     F .text	0000009c alt_ic_irq_enable
00090ad0 g     O .rwdata	00000002 OSEventNameSize
000926bc g     O .bss	00000001 OSStatRdy
0008d3e8 g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
000998c8 g     O .bss	00000054 OSTCBPrioTbl
00083890 g     F .text	000000ac __env_lock
00090b16 g     O .rwdata	00000002 OSTaskSwHookEn
00090b3c g     O .rwdata	00000008 alt_alarm_list
00090ade g     O .rwdata	00000002 OSFlagWidth
0008d798 g     F .text	00000064 _do_ctors
00082d64 g     F .text	00000100 close
00092668 g     O .bss	00000004 alt_envsem
000926c0 g     O .bss	00000004 OSIdleCtrRun
00084b34 g     F .text	00000020 OSVersion
00090b28 g     O .rwdata	00000002 OSTmrCfgWheelSize
0008314c g     F .text	00000080 alt_load
0008b82c g     F .text	0000007c OS_TaskStkClr
0008d1c4 g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
00090b02 g     O .rwdata	00000002 OSTaskCreateEn
00085124 g     F .text	00000068 OS_EventWaitListInit
0008e684 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00081d80 g     F .text	00000004 __sinit_lock_acquire
0008b4bc g     F .text	0000022c OSTaskSuspend
0008d2bc g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
000857cc g     F .text	0000005c OS_TaskIdle
00090b2e g     O .rwdata	00000002 OSTmrTblSize
00089074 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

00104000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  104000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
  104004:	08406714 	ori	at,at,412
    jmp r1
  104008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  10402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  10403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  10404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  10405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  10406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  10407c:	10000326 	beq	r2,zero,10408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  104080:	20000226 	beq	r4,zero,10408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  104084:	01040ec0 	call	1040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  104088:	00000306 	br	104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  10408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  10409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  1040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  1040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1040e8:	ef80083a 	eret

001040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1040ec:	defff904 	addi	sp,sp,-28
  1040f0:	dfc00615 	stw	ra,24(sp)
  1040f4:	df000515 	stw	fp,20(sp)
  1040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  1040fc:	00844ec0 	call	844ec <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  104100:	0005313a 	rdctl	r2,ipending
  104104:	e0bffc15 	stw	r2,-16(fp)

  return active;
  104108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  10410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  104110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  104114:	00800044 	movi	r2,1
  104118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  10411c:	e0ffff17 	ldw	r3,-4(fp)
  104120:	e0bffe17 	ldw	r2,-8(fp)
  104124:	1884703a 	and	r2,r3,r2
  104128:	1005003a 	cmpeq	r2,r2,zero
  10412c:	1000161e 	bne	r2,zero,104188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  104130:	e0bffd17 	ldw	r2,-12(fp)
  104134:	00c002b4 	movhi	r3,10
  104138:	18e64704 	addi	r3,r3,-26340
  10413c:	100490fa 	slli	r2,r2,3
  104140:	10c5883a 	add	r2,r2,r3
  104144:	11400017 	ldw	r5,0(r2)
  104148:	e0bffd17 	ldw	r2,-12(fp)
  10414c:	00c002b4 	movhi	r3,10
  104150:	18e64704 	addi	r3,r3,-26340
  104154:	100490fa 	slli	r2,r2,3
  104158:	10c5883a 	add	r2,r2,r3
  10415c:	10800104 	addi	r2,r2,4
  104160:	11000017 	ldw	r4,0(r2)
  104164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  104168:	0005313a 	rdctl	r2,ipending
  10416c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  104170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  104174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  104178:	e0bfff17 	ldw	r2,-4(fp)
  10417c:	1004c03a 	cmpne	r2,r2,zero
  104180:	103fe31e 	bne	r2,zero,104110 <alt_irq_handler+0x24>
  104184:	00000706 	br	1041a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  104188:	e0bffe17 	ldw	r2,-8(fp)
  10418c:	1085883a 	add	r2,r2,r2
  104190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  104194:	e0bffd17 	ldw	r2,-12(fp)
  104198:	10800044 	addi	r2,r2,1
  10419c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  1041a0:	003fde06 	br	10411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  1041a4:	00845680 	call	84568 <OSIntExit>
}
  1041a8:	e037883a 	mov	sp,fp
  1041ac:	dfc00117 	ldw	ra,4(sp)
  1041b0:	df000017 	ldw	fp,0(sp)
  1041b4:	dec00204 	addi	sp,sp,8
  1041b8:	f800283a 	ret

Disassembly of section .text:

0008019c <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   8019c:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801a0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801a4:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801a8:	d6a2a414 	ori	gp,gp,35472
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801ac:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801b0:	10899114 	ori	r2,r2,9796

    movhi r3, %hi(__bss_end)
   801b4:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801b8:	18e6eb14 	ori	r3,r3,39852

    beq r2, r3, 1f
   801bc:	10c00326 	beq	r2,r3,801cc <_start+0x30>

0:
    stw zero, (r2)
   801c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801c8:	10fffd36 	bltu	r2,r3,801c0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801cc:	008314c0 	call	8314c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801d0:	008338c0 	call	8338c <alt_main>

000801d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801d4:	003fff06 	br	801d4 <alt_after_alt_main>

000801d8 <task1>:
/*Defines the buffer size */
#define     BUFFER_SIZE    128

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
   801d8:	deff7904 	addi	sp,sp,-540
   801dc:	dfc08615 	stw	ra,536(sp)
   801e0:	df008515 	stw	fp,532(sp)
   801e4:	df008504 	addi	fp,sp,532
   801e8:	e13fff15 	stw	r4,-4(fp)
	alt_up_av_config_dev * audio_config_dev;



	    unsigned int l_buf[BUFFER_SIZE];
	    int i = 0;
   801ec:	e03f7c15 	stw	zero,-528(fp)
	    int writeSizeL = 0;
   801f0:	e03f7b15 	stw	zero,-532(fp)
//	    if ( audio_dev == NULL)
//	        printf("Error: could not open audio device \n");
//	    else
//	        printf("Opened audio device \n");

	    audio_config_dev = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
   801f4:	01000274 	movhi	r4,9
   801f8:	213b9204 	addi	r4,r4,-4536
   801fc:	008cd8c0 	call	8cd8c <alt_up_av_config_open_dev>
   80200:	e0bf7d15 	stw	r2,-524(fp)
	    if ( audio_config_dev == NULL)
   80204:	e0bf7d17 	ldw	r2,-524(fp)
   80208:	1004c03a 	cmpne	r2,r2,zero
   8020c:	1000041e 	bne	r2,zero,80220 <task1+0x48>
	        printf("Error: could not open audio config device \n");
   80210:	01000274 	movhi	r4,9
   80214:	213b9a04 	addi	r4,r4,-4504
   80218:	00804880 	call	80488 <puts>
   8021c:	00000306 	br	8022c <task1+0x54>
	    else
	        printf("Opened audio config device \n");
   80220:	01000274 	movhi	r4,9
   80224:	213ba504 	addi	r4,r4,-4460
   80228:	00804880 	call	80488 <puts>

	    /* Configure WM8731 */
	    //alt_up_audio_reset_audio_core(audio_dev);
	    alt_up_av_config_reset(audio_config_dev);
   8022c:	e13f7d17 	ldw	r4,-524(fp)
   80230:	008cee00 	call	8cee0 <alt_up_av_config_reset>

	    /* Write to configuration registers in the audio codec; see datasheet for what these values mean */
	    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x0, 0x17);
   80234:	e13f7d17 	ldw	r4,-524(fp)
   80238:	000b883a 	mov	r5,zero
   8023c:	018005c4 	movi	r6,23
   80240:	008d0200 	call	8d020 <alt_up_av_config_write_audio_cfg_register>
	    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x1, 0x17);
   80244:	e13f7d17 	ldw	r4,-524(fp)
   80248:	01400044 	movi	r5,1
   8024c:	018005c4 	movi	r6,23
   80250:	008d0200 	call	8d020 <alt_up_av_config_write_audio_cfg_register>
	    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x2, 0x79);
   80254:	e13f7d17 	ldw	r4,-524(fp)
   80258:	01400084 	movi	r5,2
   8025c:	01801e44 	movi	r6,121
   80260:	008d0200 	call	8d020 <alt_up_av_config_write_audio_cfg_register>
	    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x3, 0x79);
   80264:	e13f7d17 	ldw	r4,-524(fp)
   80268:	014000c4 	movi	r5,3
   8026c:	01801e44 	movi	r6,121
   80270:	008d0200 	call	8d020 <alt_up_av_config_write_audio_cfg_register>
	    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x4, 0x15);
   80274:	e13f7d17 	ldw	r4,-524(fp)
   80278:	01400104 	movi	r5,4
   8027c:	01800544 	movi	r6,21
   80280:	008d0200 	call	8d020 <alt_up_av_config_write_audio_cfg_register>
	    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x5, 0x06);
   80284:	e13f7d17 	ldw	r4,-524(fp)
   80288:	01400144 	movi	r5,5
   8028c:	01800184 	movi	r6,6
   80290:	008d0200 	call	8d020 <alt_up_av_config_write_audio_cfg_register>
	    alt_up_av_config_write_audio_cfg_register(audio_config_dev, 0x6, 0x00);
   80294:	e13f7d17 	ldw	r4,-524(fp)
   80298:	01400184 	movi	r5,6
   8029c:	000d883a 	mov	r6,zero
   802a0:	008d0200 	call	8d020 <alt_up_av_config_write_audio_cfg_register>
	    {
	            //read the data from the left buffer
	          //  writeSizeL = alt_up_audio_read_fifo(audio_dev, l_buf, BUFFER_SIZE, ALT_UP_AUDIO_LEFT);

	            //shift values to a proper base value
	            for (i = 0; i < writeSizeL; i = i+1)
   802a4:	e03f7c15 	stw	zero,-528(fp)
   802a8:	00001206 	br	802f4 <task1+0x11c>
	            {
	                l_buf[i] = l_buf[i] + 0x7fff;
   802ac:	e13f7c17 	ldw	r4,-528(fp)
   802b0:	e0bf7c17 	ldw	r2,-528(fp)
   802b4:	1085883a 	add	r2,r2,r2
   802b8:	1085883a 	add	r2,r2,r2
   802bc:	e0ff7b04 	addi	r3,fp,-532
   802c0:	10c5883a 	add	r2,r2,r3
   802c4:	10800404 	addi	r2,r2,16
   802c8:	10800017 	ldw	r2,0(r2)
   802cc:	10dfffc4 	addi	r3,r2,32767
   802d0:	2105883a 	add	r2,r4,r4
   802d4:	1085883a 	add	r2,r2,r2
   802d8:	e13f7b04 	addi	r4,fp,-532
   802dc:	1105883a 	add	r2,r2,r4
   802e0:	10800404 	addi	r2,r2,16
   802e4:	10c00015 	stw	r3,0(r2)
	    {
	            //read the data from the left buffer
	          //  writeSizeL = alt_up_audio_read_fifo(audio_dev, l_buf, BUFFER_SIZE, ALT_UP_AUDIO_LEFT);

	            //shift values to a proper base value
	            for (i = 0; i < writeSizeL; i = i+1)
   802e8:	e0bf7c17 	ldw	r2,-528(fp)
   802ec:	10800044 	addi	r2,r2,1
   802f0:	e0bf7c15 	stw	r2,-528(fp)
   802f4:	e0ff7c17 	ldw	r3,-528(fp)
   802f8:	e0bf7b17 	ldw	r2,-532(fp)
   802fc:	18bfeb16 	blt	r3,r2,802ac <task1+0xd4>

	            //write data to the L and R buffers; R buffer will receive a copy of L buffer data
	            //alt_up_audio_write_fifo (audio_dev, l_buf, writeSizeL, ALT_UP_AUDIO_RIGHT);
	          //  alt_up_audio_write_fifo (audio_dev, l_buf, writeSizeL, ALT_UP_AUDIO_LEFT);

	    }
   80300:	003fe806 	br	802a4 <task1+0xcc>

00080304 <task2>:


}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
   80304:	defffd04 	addi	sp,sp,-12
   80308:	dfc00215 	stw	ra,8(sp)
   8030c:	df000115 	stw	fp,4(sp)
   80310:	df000104 	addi	fp,sp,4
   80314:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
   80318:	01000274 	movhi	r4,9
   8031c:	213bac04 	addi	r4,r4,-4432
   80320:	00804880 	call	80488 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
   80324:	0009883a 	mov	r4,zero
   80328:	000b883a 	mov	r5,zero
   8032c:	018000c4 	movi	r6,3
   80330:	000f883a 	mov	r7,zero
   80334:	008b9f40 	call	8b9f4 <OSTimeDlyHMSM>
  }
   80338:	003ff706 	br	80318 <task2+0x14>

0008033c <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
   8033c:	defff904 	addi	sp,sp,-28
   80340:	dfc00615 	stw	ra,24(sp)
   80344:	df000515 	stw	fp,20(sp)
   80348:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
   8034c:	01800274 	movhi	r6,9
   80350:	3191bd04 	addi	r6,r6,18164
   80354:	00800044 	movi	r2,1
   80358:	d8800015 	stw	r2,0(sp)
   8035c:	00800274 	movhi	r2,9
   80360:	1089be04 	addi	r2,r2,9976
   80364:	d8800115 	stw	r2,4(sp)
   80368:	00820004 	movi	r2,2048
   8036c:	d8800215 	stw	r2,8(sp)
   80370:	d8000315 	stw	zero,12(sp)
   80374:	d8000415 	stw	zero,16(sp)
   80378:	01000234 	movhi	r4,8
   8037c:	21007604 	addi	r4,r4,472
   80380:	000b883a 	mov	r5,zero
   80384:	01c00044 	movi	r7,1
   80388:	008a5b00 	call	8a5b0 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
   8038c:	01800274 	movhi	r6,9
   80390:	3199bd04 	addi	r6,r6,26356
   80394:	00800084 	movi	r2,2
   80398:	d8800015 	stw	r2,0(sp)
   8039c:	00800274 	movhi	r2,9
   803a0:	1091be04 	addi	r2,r2,18168
   803a4:	d8800115 	stw	r2,4(sp)
   803a8:	00820004 	movi	r2,2048
   803ac:	d8800215 	stw	r2,8(sp)
   803b0:	d8000315 	stw	zero,12(sp)
   803b4:	d8000415 	stw	zero,16(sp)
   803b8:	01000234 	movhi	r4,8
   803bc:	2100c104 	addi	r4,r4,772
   803c0:	000b883a 	mov	r5,zero
   803c4:	01c00084 	movi	r7,2
   803c8:	008a5b00 	call	8a5b0 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
   803cc:	00847d80 	call	847d8 <OSStart>
  return 0;
   803d0:	0005883a 	mov	r2,zero
}
   803d4:	e037883a 	mov	sp,fp
   803d8:	dfc00117 	ldw	ra,4(sp)
   803dc:	df000017 	ldw	fp,0(sp)
   803e0:	dec00204 	addi	sp,sp,8
   803e4:	f800283a 	ret

000803e8 <_puts_r>:
   803e8:	defff604 	addi	sp,sp,-40
   803ec:	dc400715 	stw	r17,28(sp)
   803f0:	2023883a 	mov	r17,r4
   803f4:	2809883a 	mov	r4,r5
   803f8:	dfc00915 	stw	ra,36(sp)
   803fc:	dcc00815 	stw	r19,32(sp)
   80400:	2827883a 	mov	r19,r5
   80404:	008049c0 	call	8049c <strlen>
   80408:	89400217 	ldw	r5,8(r17)
   8040c:	00c00274 	movhi	r3,9
   80410:	18fbb104 	addi	r3,r3,-4412
   80414:	01c00044 	movi	r7,1
   80418:	12000044 	addi	r8,r2,1
   8041c:	d8c00515 	stw	r3,20(sp)
   80420:	d9c00615 	stw	r7,24(sp)
   80424:	d8c00304 	addi	r3,sp,12
   80428:	01c00084 	movi	r7,2
   8042c:	8809883a 	mov	r4,r17
   80430:	d80d883a 	mov	r6,sp
   80434:	d8c00015 	stw	r3,0(sp)
   80438:	dcc00315 	stw	r19,12(sp)
   8043c:	da000215 	stw	r8,8(sp)
   80440:	d9c00115 	stw	r7,4(sp)
   80444:	d8800415 	stw	r2,16(sp)
   80448:	00805100 	call	80510 <__sfvwrite_r>
   8044c:	00ffffc4 	movi	r3,-1
   80450:	10000626 	beq	r2,zero,8046c <_puts_r+0x84>
   80454:	1805883a 	mov	r2,r3
   80458:	dfc00917 	ldw	ra,36(sp)
   8045c:	dcc00817 	ldw	r19,32(sp)
   80460:	dc400717 	ldw	r17,28(sp)
   80464:	dec00a04 	addi	sp,sp,40
   80468:	f800283a 	ret
   8046c:	00c00284 	movi	r3,10
   80470:	1805883a 	mov	r2,r3
   80474:	dfc00917 	ldw	ra,36(sp)
   80478:	dcc00817 	ldw	r19,32(sp)
   8047c:	dc400717 	ldw	r17,28(sp)
   80480:	dec00a04 	addi	sp,sp,40
   80484:	f800283a 	ret

00080488 <puts>:
   80488:	00800274 	movhi	r2,9
   8048c:	1082a404 	addi	r2,r2,2704
   80490:	200b883a 	mov	r5,r4
   80494:	11000017 	ldw	r4,0(r2)
   80498:	00803e81 	jmpi	803e8 <_puts_r>

0008049c <strlen>:
   8049c:	208000cc 	andi	r2,r4,3
   804a0:	2011883a 	mov	r8,r4
   804a4:	1000161e 	bne	r2,zero,80500 <strlen+0x64>
   804a8:	20c00017 	ldw	r3,0(r4)
   804ac:	017fbff4 	movhi	r5,65279
   804b0:	297fbfc4 	addi	r5,r5,-257
   804b4:	01e02074 	movhi	r7,32897
   804b8:	39e02004 	addi	r7,r7,-32640
   804bc:	1945883a 	add	r2,r3,r5
   804c0:	11c4703a 	and	r2,r2,r7
   804c4:	00c6303a 	nor	r3,zero,r3
   804c8:	1886703a 	and	r3,r3,r2
   804cc:	18000c1e 	bne	r3,zero,80500 <strlen+0x64>
   804d0:	280d883a 	mov	r6,r5
   804d4:	380b883a 	mov	r5,r7
   804d8:	21000104 	addi	r4,r4,4
   804dc:	20800017 	ldw	r2,0(r4)
   804e0:	1187883a 	add	r3,r2,r6
   804e4:	1946703a 	and	r3,r3,r5
   804e8:	0084303a 	nor	r2,zero,r2
   804ec:	10c4703a 	and	r2,r2,r3
   804f0:	103ff926 	beq	r2,zero,804d8 <strlen+0x3c>
   804f4:	20800007 	ldb	r2,0(r4)
   804f8:	10000326 	beq	r2,zero,80508 <strlen+0x6c>
   804fc:	21000044 	addi	r4,r4,1
   80500:	20800007 	ldb	r2,0(r4)
   80504:	103ffd1e 	bne	r2,zero,804fc <strlen+0x60>
   80508:	2205c83a 	sub	r2,r4,r8
   8050c:	f800283a 	ret

00080510 <__sfvwrite_r>:
   80510:	30800217 	ldw	r2,8(r6)
   80514:	defff504 	addi	sp,sp,-44
   80518:	df000915 	stw	fp,36(sp)
   8051c:	dd800715 	stw	r22,28(sp)
   80520:	dc800315 	stw	r18,12(sp)
   80524:	dfc00a15 	stw	ra,40(sp)
   80528:	ddc00815 	stw	r23,32(sp)
   8052c:	dd400615 	stw	r21,24(sp)
   80530:	dd000515 	stw	r20,20(sp)
   80534:	dcc00415 	stw	r19,16(sp)
   80538:	dc400215 	stw	r17,8(sp)
   8053c:	dc000115 	stw	r16,4(sp)
   80540:	302d883a 	mov	r22,r6
   80544:	2039883a 	mov	fp,r4
   80548:	2825883a 	mov	r18,r5
   8054c:	10001c26 	beq	r2,zero,805c0 <__sfvwrite_r+0xb0>
   80550:	29c0030b 	ldhu	r7,12(r5)
   80554:	3880020c 	andi	r2,r7,8
   80558:	10002726 	beq	r2,zero,805f8 <__sfvwrite_r+0xe8>
   8055c:	28800417 	ldw	r2,16(r5)
   80560:	10002526 	beq	r2,zero,805f8 <__sfvwrite_r+0xe8>
   80564:	3880008c 	andi	r2,r7,2
   80568:	b5400017 	ldw	r21,0(r22)
   8056c:	10002826 	beq	r2,zero,80610 <__sfvwrite_r+0x100>
   80570:	0021883a 	mov	r16,zero
   80574:	0023883a 	mov	r17,zero
   80578:	880d883a 	mov	r6,r17
   8057c:	e009883a 	mov	r4,fp
   80580:	00810004 	movi	r2,1024
   80584:	80006e26 	beq	r16,zero,80740 <__sfvwrite_r+0x230>
   80588:	800f883a 	mov	r7,r16
   8058c:	91400717 	ldw	r5,28(r18)
   80590:	1400012e 	bgeu	r2,r16,80598 <__sfvwrite_r+0x88>
   80594:	100f883a 	mov	r7,r2
   80598:	90c00917 	ldw	r3,36(r18)
   8059c:	183ee83a 	callr	r3
   805a0:	1007883a 	mov	r3,r2
   805a4:	80a1c83a 	sub	r16,r16,r2
   805a8:	88a3883a 	add	r17,r17,r2
   805ac:	00806d0e 	bge	zero,r2,80764 <__sfvwrite_r+0x254>
   805b0:	b0800217 	ldw	r2,8(r22)
   805b4:	10c5c83a 	sub	r2,r2,r3
   805b8:	b0800215 	stw	r2,8(r22)
   805bc:	103fee1e 	bne	r2,zero,80578 <__sfvwrite_r+0x68>
   805c0:	0009883a 	mov	r4,zero
   805c4:	2005883a 	mov	r2,r4
   805c8:	dfc00a17 	ldw	ra,40(sp)
   805cc:	df000917 	ldw	fp,36(sp)
   805d0:	ddc00817 	ldw	r23,32(sp)
   805d4:	dd800717 	ldw	r22,28(sp)
   805d8:	dd400617 	ldw	r21,24(sp)
   805dc:	dd000517 	ldw	r20,20(sp)
   805e0:	dcc00417 	ldw	r19,16(sp)
   805e4:	dc800317 	ldw	r18,12(sp)
   805e8:	dc400217 	ldw	r17,8(sp)
   805ec:	dc000117 	ldw	r16,4(sp)
   805f0:	dec00b04 	addi	sp,sp,44
   805f4:	f800283a 	ret
   805f8:	00819b40 	call	819b4 <__swsetup_r>
   805fc:	1000e41e 	bne	r2,zero,80990 <__sfvwrite_r+0x480>
   80600:	91c0030b 	ldhu	r7,12(r18)
   80604:	b5400017 	ldw	r21,0(r22)
   80608:	3880008c 	andi	r2,r7,2
   8060c:	103fd81e 	bne	r2,zero,80570 <__sfvwrite_r+0x60>
   80610:	3880004c 	andi	r2,r7,1
   80614:	1005003a 	cmpeq	r2,r2,zero
   80618:	10005726 	beq	r2,zero,80778 <__sfvwrite_r+0x268>
   8061c:	0029883a 	mov	r20,zero
   80620:	002f883a 	mov	r23,zero
   80624:	a0004226 	beq	r20,zero,80730 <__sfvwrite_r+0x220>
   80628:	3880800c 	andi	r2,r7,512
   8062c:	94000217 	ldw	r16,8(r18)
   80630:	10008b26 	beq	r2,zero,80860 <__sfvwrite_r+0x350>
   80634:	800d883a 	mov	r6,r16
   80638:	a400a536 	bltu	r20,r16,808d0 <__sfvwrite_r+0x3c0>
   8063c:	3881200c 	andi	r2,r7,1152
   80640:	10002726 	beq	r2,zero,806e0 <__sfvwrite_r+0x1d0>
   80644:	90800517 	ldw	r2,20(r18)
   80648:	92000417 	ldw	r8,16(r18)
   8064c:	91400017 	ldw	r5,0(r18)
   80650:	1087883a 	add	r3,r2,r2
   80654:	1887883a 	add	r3,r3,r2
   80658:	1808d7fa 	srli	r4,r3,31
   8065c:	2a21c83a 	sub	r16,r5,r8
   80660:	80800044 	addi	r2,r16,1
   80664:	20c9883a 	add	r4,r4,r3
   80668:	2027d07a 	srai	r19,r4,1
   8066c:	a085883a 	add	r2,r20,r2
   80670:	980d883a 	mov	r6,r19
   80674:	9880022e 	bgeu	r19,r2,80680 <__sfvwrite_r+0x170>
   80678:	1027883a 	mov	r19,r2
   8067c:	100d883a 	mov	r6,r2
   80680:	3881000c 	andi	r2,r7,1024
   80684:	1000b826 	beq	r2,zero,80968 <__sfvwrite_r+0x458>
   80688:	300b883a 	mov	r5,r6
   8068c:	e009883a 	mov	r4,fp
   80690:	00809ac0 	call	809ac <_malloc_r>
   80694:	10003126 	beq	r2,zero,8075c <__sfvwrite_r+0x24c>
   80698:	91400417 	ldw	r5,16(r18)
   8069c:	1009883a 	mov	r4,r2
   806a0:	800d883a 	mov	r6,r16
   806a4:	1023883a 	mov	r17,r2
   806a8:	00811d00 	call	811d0 <memcpy>
   806ac:	90c0030b 	ldhu	r3,12(r18)
   806b0:	00beffc4 	movi	r2,-1025
   806b4:	1886703a 	and	r3,r3,r2
   806b8:	18c02014 	ori	r3,r3,128
   806bc:	90c0030d 	sth	r3,12(r18)
   806c0:	9c07c83a 	sub	r3,r19,r16
   806c4:	8c05883a 	add	r2,r17,r16
   806c8:	a00d883a 	mov	r6,r20
   806cc:	a021883a 	mov	r16,r20
   806d0:	90800015 	stw	r2,0(r18)
   806d4:	90c00215 	stw	r3,8(r18)
   806d8:	94400415 	stw	r17,16(r18)
   806dc:	94c00515 	stw	r19,20(r18)
   806e0:	91000017 	ldw	r4,0(r18)
   806e4:	b80b883a 	mov	r5,r23
   806e8:	a023883a 	mov	r17,r20
   806ec:	00812700 	call	81270 <memmove>
   806f0:	90c00217 	ldw	r3,8(r18)
   806f4:	90800017 	ldw	r2,0(r18)
   806f8:	a027883a 	mov	r19,r20
   806fc:	1c07c83a 	sub	r3,r3,r16
   80700:	1405883a 	add	r2,r2,r16
   80704:	90c00215 	stw	r3,8(r18)
   80708:	a021883a 	mov	r16,r20
   8070c:	90800015 	stw	r2,0(r18)
   80710:	b0800217 	ldw	r2,8(r22)
   80714:	1405c83a 	sub	r2,r2,r16
   80718:	b0800215 	stw	r2,8(r22)
   8071c:	103fa826 	beq	r2,zero,805c0 <__sfvwrite_r+0xb0>
   80720:	a469c83a 	sub	r20,r20,r17
   80724:	91c0030b 	ldhu	r7,12(r18)
   80728:	bcef883a 	add	r23,r23,r19
   8072c:	a03fbe1e 	bne	r20,zero,80628 <__sfvwrite_r+0x118>
   80730:	adc00017 	ldw	r23,0(r21)
   80734:	ad000117 	ldw	r20,4(r21)
   80738:	ad400204 	addi	r21,r21,8
   8073c:	003fb906 	br	80624 <__sfvwrite_r+0x114>
   80740:	ac400017 	ldw	r17,0(r21)
   80744:	ac000117 	ldw	r16,4(r21)
   80748:	ad400204 	addi	r21,r21,8
   8074c:	003f8a06 	br	80578 <__sfvwrite_r+0x68>
   80750:	91400417 	ldw	r5,16(r18)
   80754:	e009883a 	mov	r4,fp
   80758:	00821400 	call	82140 <_free_r>
   8075c:	00800304 	movi	r2,12
   80760:	e0800015 	stw	r2,0(fp)
   80764:	9080030b 	ldhu	r2,12(r18)
   80768:	013fffc4 	movi	r4,-1
   8076c:	10801014 	ori	r2,r2,64
   80770:	9080030d 	sth	r2,12(r18)
   80774:	003f9306 	br	805c4 <__sfvwrite_r+0xb4>
   80778:	0027883a 	mov	r19,zero
   8077c:	002f883a 	mov	r23,zero
   80780:	d8000015 	stw	zero,0(sp)
   80784:	0029883a 	mov	r20,zero
   80788:	98001e26 	beq	r19,zero,80804 <__sfvwrite_r+0x2f4>
   8078c:	d8c00017 	ldw	r3,0(sp)
   80790:	1804c03a 	cmpne	r2,r3,zero
   80794:	10005e26 	beq	r2,zero,80910 <__sfvwrite_r+0x400>
   80798:	9821883a 	mov	r16,r19
   8079c:	a4c0012e 	bgeu	r20,r19,807a4 <__sfvwrite_r+0x294>
   807a0:	a021883a 	mov	r16,r20
   807a4:	91000017 	ldw	r4,0(r18)
   807a8:	90800417 	ldw	r2,16(r18)
   807ac:	91800217 	ldw	r6,8(r18)
   807b0:	91c00517 	ldw	r7,20(r18)
   807b4:	1100022e 	bgeu	r2,r4,807c0 <__sfvwrite_r+0x2b0>
   807b8:	31e3883a 	add	r17,r6,r7
   807bc:	8c001616 	blt	r17,r16,80818 <__sfvwrite_r+0x308>
   807c0:	81c03816 	blt	r16,r7,808a4 <__sfvwrite_r+0x394>
   807c4:	90c00917 	ldw	r3,36(r18)
   807c8:	91400717 	ldw	r5,28(r18)
   807cc:	e009883a 	mov	r4,fp
   807d0:	b80d883a 	mov	r6,r23
   807d4:	183ee83a 	callr	r3
   807d8:	1023883a 	mov	r17,r2
   807dc:	00bfe10e 	bge	zero,r2,80764 <__sfvwrite_r+0x254>
   807e0:	a469c83a 	sub	r20,r20,r17
   807e4:	a0001826 	beq	r20,zero,80848 <__sfvwrite_r+0x338>
   807e8:	b0800217 	ldw	r2,8(r22)
   807ec:	1445c83a 	sub	r2,r2,r17
   807f0:	b0800215 	stw	r2,8(r22)
   807f4:	103f7226 	beq	r2,zero,805c0 <__sfvwrite_r+0xb0>
   807f8:	9c67c83a 	sub	r19,r19,r17
   807fc:	bc6f883a 	add	r23,r23,r17
   80800:	983fe21e 	bne	r19,zero,8078c <__sfvwrite_r+0x27c>
   80804:	adc00017 	ldw	r23,0(r21)
   80808:	acc00117 	ldw	r19,4(r21)
   8080c:	ad400204 	addi	r21,r21,8
   80810:	d8000015 	stw	zero,0(sp)
   80814:	003fdc06 	br	80788 <__sfvwrite_r+0x278>
   80818:	b80b883a 	mov	r5,r23
   8081c:	880d883a 	mov	r6,r17
   80820:	00812700 	call	81270 <memmove>
   80824:	90c00017 	ldw	r3,0(r18)
   80828:	e009883a 	mov	r4,fp
   8082c:	900b883a 	mov	r5,r18
   80830:	1c47883a 	add	r3,r3,r17
   80834:	90c00015 	stw	r3,0(r18)
   80838:	0081af00 	call	81af0 <_fflush_r>
   8083c:	103fc91e 	bne	r2,zero,80764 <__sfvwrite_r+0x254>
   80840:	a469c83a 	sub	r20,r20,r17
   80844:	a03fe81e 	bne	r20,zero,807e8 <__sfvwrite_r+0x2d8>
   80848:	e009883a 	mov	r4,fp
   8084c:	900b883a 	mov	r5,r18
   80850:	0081af00 	call	81af0 <_fflush_r>
   80854:	103fc31e 	bne	r2,zero,80764 <__sfvwrite_r+0x254>
   80858:	d8000015 	stw	zero,0(sp)
   8085c:	003fe206 	br	807e8 <__sfvwrite_r+0x2d8>
   80860:	91000017 	ldw	r4,0(r18)
   80864:	90800417 	ldw	r2,16(r18)
   80868:	1100022e 	bgeu	r2,r4,80874 <__sfvwrite_r+0x364>
   8086c:	8023883a 	mov	r17,r16
   80870:	85003136 	bltu	r16,r20,80938 <__sfvwrite_r+0x428>
   80874:	91c00517 	ldw	r7,20(r18)
   80878:	a1c01836 	bltu	r20,r7,808dc <__sfvwrite_r+0x3cc>
   8087c:	90c00917 	ldw	r3,36(r18)
   80880:	91400717 	ldw	r5,28(r18)
   80884:	e009883a 	mov	r4,fp
   80888:	b80d883a 	mov	r6,r23
   8088c:	183ee83a 	callr	r3
   80890:	1021883a 	mov	r16,r2
   80894:	00bfb30e 	bge	zero,r2,80764 <__sfvwrite_r+0x254>
   80898:	1023883a 	mov	r17,r2
   8089c:	1027883a 	mov	r19,r2
   808a0:	003f9b06 	br	80710 <__sfvwrite_r+0x200>
   808a4:	b80b883a 	mov	r5,r23
   808a8:	800d883a 	mov	r6,r16
   808ac:	00812700 	call	81270 <memmove>
   808b0:	90c00217 	ldw	r3,8(r18)
   808b4:	90800017 	ldw	r2,0(r18)
   808b8:	8023883a 	mov	r17,r16
   808bc:	1c07c83a 	sub	r3,r3,r16
   808c0:	1405883a 	add	r2,r2,r16
   808c4:	90c00215 	stw	r3,8(r18)
   808c8:	90800015 	stw	r2,0(r18)
   808cc:	003fc406 	br	807e0 <__sfvwrite_r+0x2d0>
   808d0:	a00d883a 	mov	r6,r20
   808d4:	a021883a 	mov	r16,r20
   808d8:	003f8106 	br	806e0 <__sfvwrite_r+0x1d0>
   808dc:	b80b883a 	mov	r5,r23
   808e0:	a00d883a 	mov	r6,r20
   808e4:	00812700 	call	81270 <memmove>
   808e8:	90c00217 	ldw	r3,8(r18)
   808ec:	90800017 	ldw	r2,0(r18)
   808f0:	a021883a 	mov	r16,r20
   808f4:	1d07c83a 	sub	r3,r3,r20
   808f8:	1505883a 	add	r2,r2,r20
   808fc:	a023883a 	mov	r17,r20
   80900:	a027883a 	mov	r19,r20
   80904:	90c00215 	stw	r3,8(r18)
   80908:	90800015 	stw	r2,0(r18)
   8090c:	003f8006 	br	80710 <__sfvwrite_r+0x200>
   80910:	b809883a 	mov	r4,r23
   80914:	01400284 	movi	r5,10
   80918:	980d883a 	mov	r6,r19
   8091c:	00810ec0 	call	810ec <memchr>
   80920:	10001726 	beq	r2,zero,80980 <__sfvwrite_r+0x470>
   80924:	15c5c83a 	sub	r2,r2,r23
   80928:	15000044 	addi	r20,r2,1
   8092c:	00800044 	movi	r2,1
   80930:	d8800015 	stw	r2,0(sp)
   80934:	003f9806 	br	80798 <__sfvwrite_r+0x288>
   80938:	b80b883a 	mov	r5,r23
   8093c:	800d883a 	mov	r6,r16
   80940:	00812700 	call	81270 <memmove>
   80944:	90c00017 	ldw	r3,0(r18)
   80948:	e009883a 	mov	r4,fp
   8094c:	900b883a 	mov	r5,r18
   80950:	1c07883a 	add	r3,r3,r16
   80954:	90c00015 	stw	r3,0(r18)
   80958:	8027883a 	mov	r19,r16
   8095c:	0081af00 	call	81af0 <_fflush_r>
   80960:	103f6b26 	beq	r2,zero,80710 <__sfvwrite_r+0x200>
   80964:	003f7f06 	br	80764 <__sfvwrite_r+0x254>
   80968:	400b883a 	mov	r5,r8
   8096c:	e009883a 	mov	r4,fp
   80970:	00813500 	call	81350 <_realloc_r>
   80974:	103f7626 	beq	r2,zero,80750 <__sfvwrite_r+0x240>
   80978:	1023883a 	mov	r17,r2
   8097c:	003f5006 	br	806c0 <__sfvwrite_r+0x1b0>
   80980:	00c00044 	movi	r3,1
   80984:	9d000044 	addi	r20,r19,1
   80988:	d8c00015 	stw	r3,0(sp)
   8098c:	003f8206 	br	80798 <__sfvwrite_r+0x288>
   80990:	9080030b 	ldhu	r2,12(r18)
   80994:	00c00244 	movi	r3,9
   80998:	013fffc4 	movi	r4,-1
   8099c:	10801014 	ori	r2,r2,64
   809a0:	9080030d 	sth	r2,12(r18)
   809a4:	e0c00015 	stw	r3,0(fp)
   809a8:	003f0606 	br	805c4 <__sfvwrite_r+0xb4>

000809ac <_malloc_r>:
   809ac:	defff604 	addi	sp,sp,-40
   809b0:	28c002c4 	addi	r3,r5,11
   809b4:	00800584 	movi	r2,22
   809b8:	dc800215 	stw	r18,8(sp)
   809bc:	dfc00915 	stw	ra,36(sp)
   809c0:	df000815 	stw	fp,32(sp)
   809c4:	ddc00715 	stw	r23,28(sp)
   809c8:	dd800615 	stw	r22,24(sp)
   809cc:	dd400515 	stw	r21,20(sp)
   809d0:	dd000415 	stw	r20,16(sp)
   809d4:	dcc00315 	stw	r19,12(sp)
   809d8:	dc400115 	stw	r17,4(sp)
   809dc:	dc000015 	stw	r16,0(sp)
   809e0:	2025883a 	mov	r18,r4
   809e4:	10c01236 	bltu	r2,r3,80a30 <_malloc_r+0x84>
   809e8:	04400404 	movi	r17,16
   809ec:	8940142e 	bgeu	r17,r5,80a40 <_malloc_r+0x94>
   809f0:	00800304 	movi	r2,12
   809f4:	0007883a 	mov	r3,zero
   809f8:	90800015 	stw	r2,0(r18)
   809fc:	1805883a 	mov	r2,r3
   80a00:	dfc00917 	ldw	ra,36(sp)
   80a04:	df000817 	ldw	fp,32(sp)
   80a08:	ddc00717 	ldw	r23,28(sp)
   80a0c:	dd800617 	ldw	r22,24(sp)
   80a10:	dd400517 	ldw	r21,20(sp)
   80a14:	dd000417 	ldw	r20,16(sp)
   80a18:	dcc00317 	ldw	r19,12(sp)
   80a1c:	dc800217 	ldw	r18,8(sp)
   80a20:	dc400117 	ldw	r17,4(sp)
   80a24:	dc000017 	ldw	r16,0(sp)
   80a28:	dec00a04 	addi	sp,sp,40
   80a2c:	f800283a 	ret
   80a30:	00bffe04 	movi	r2,-8
   80a34:	18a2703a 	and	r17,r3,r2
   80a38:	883fed16 	blt	r17,zero,809f0 <_malloc_r+0x44>
   80a3c:	897fec36 	bltu	r17,r5,809f0 <_malloc_r+0x44>
   80a40:	9009883a 	mov	r4,r18
   80a44:	00839980 	call	83998 <__malloc_lock>
   80a48:	00807dc4 	movi	r2,503
   80a4c:	14402b2e 	bgeu	r2,r17,80afc <_malloc_r+0x150>
   80a50:	8806d27a 	srli	r3,r17,9
   80a54:	18003f1e 	bne	r3,zero,80b54 <_malloc_r+0x1a8>
   80a58:	880cd0fa 	srli	r6,r17,3
   80a5c:	300490fa 	slli	r2,r6,3
   80a60:	02c00274 	movhi	r11,9
   80a64:	5afd1104 	addi	r11,r11,-3004
   80a68:	12cb883a 	add	r5,r2,r11
   80a6c:	2c000317 	ldw	r16,12(r5)
   80a70:	580f883a 	mov	r7,r11
   80a74:	2c00041e 	bne	r5,r16,80a88 <_malloc_r+0xdc>
   80a78:	00000a06 	br	80aa4 <_malloc_r+0xf8>
   80a7c:	1800860e 	bge	r3,zero,80c98 <_malloc_r+0x2ec>
   80a80:	84000317 	ldw	r16,12(r16)
   80a84:	2c000726 	beq	r5,r16,80aa4 <_malloc_r+0xf8>
   80a88:	80800117 	ldw	r2,4(r16)
   80a8c:	00ffff04 	movi	r3,-4
   80a90:	10c8703a 	and	r4,r2,r3
   80a94:	2447c83a 	sub	r3,r4,r17
   80a98:	008003c4 	movi	r2,15
   80a9c:	10fff70e 	bge	r2,r3,80a7c <_malloc_r+0xd0>
   80aa0:	31bfffc4 	addi	r6,r6,-1
   80aa4:	32400044 	addi	r9,r6,1
   80aa8:	02800274 	movhi	r10,9
   80aac:	52bd1304 	addi	r10,r10,-2996
   80ab0:	54000217 	ldw	r16,8(r10)
   80ab4:	8280a026 	beq	r16,r10,80d38 <_malloc_r+0x38c>
   80ab8:	80800117 	ldw	r2,4(r16)
   80abc:	00ffff04 	movi	r3,-4
   80ac0:	10ca703a 	and	r5,r2,r3
   80ac4:	2c4dc83a 	sub	r6,r5,r17
   80ac8:	008003c4 	movi	r2,15
   80acc:	11808316 	blt	r2,r6,80cdc <_malloc_r+0x330>
   80ad0:	52800315 	stw	r10,12(r10)
   80ad4:	52800215 	stw	r10,8(r10)
   80ad8:	30002916 	blt	r6,zero,80b80 <_malloc_r+0x1d4>
   80adc:	8147883a 	add	r3,r16,r5
   80ae0:	18800117 	ldw	r2,4(r3)
   80ae4:	9009883a 	mov	r4,r18
   80ae8:	10800054 	ori	r2,r2,1
   80aec:	18800115 	stw	r2,4(r3)
   80af0:	0083aa00 	call	83aa0 <__malloc_unlock>
   80af4:	80c00204 	addi	r3,r16,8
   80af8:	003fc006 	br	809fc <_malloc_r+0x50>
   80afc:	02c00274 	movhi	r11,9
   80b00:	5afd1104 	addi	r11,r11,-3004
   80b04:	8ac5883a 	add	r2,r17,r11
   80b08:	14000317 	ldw	r16,12(r2)
   80b0c:	580f883a 	mov	r7,r11
   80b10:	8806d0fa 	srli	r3,r17,3
   80b14:	14006c26 	beq	r2,r16,80cc8 <_malloc_r+0x31c>
   80b18:	80c00117 	ldw	r3,4(r16)
   80b1c:	00bfff04 	movi	r2,-4
   80b20:	81800317 	ldw	r6,12(r16)
   80b24:	1886703a 	and	r3,r3,r2
   80b28:	80c7883a 	add	r3,r16,r3
   80b2c:	18800117 	ldw	r2,4(r3)
   80b30:	81400217 	ldw	r5,8(r16)
   80b34:	9009883a 	mov	r4,r18
   80b38:	10800054 	ori	r2,r2,1
   80b3c:	18800115 	stw	r2,4(r3)
   80b40:	31400215 	stw	r5,8(r6)
   80b44:	29800315 	stw	r6,12(r5)
   80b48:	0083aa00 	call	83aa0 <__malloc_unlock>
   80b4c:	80c00204 	addi	r3,r16,8
   80b50:	003faa06 	br	809fc <_malloc_r+0x50>
   80b54:	00800104 	movi	r2,4
   80b58:	10c0052e 	bgeu	r2,r3,80b70 <_malloc_r+0x1c4>
   80b5c:	00800504 	movi	r2,20
   80b60:	10c07836 	bltu	r2,r3,80d44 <_malloc_r+0x398>
   80b64:	198016c4 	addi	r6,r3,91
   80b68:	300490fa 	slli	r2,r6,3
   80b6c:	003fbc06 	br	80a60 <_malloc_r+0xb4>
   80b70:	8804d1ba 	srli	r2,r17,6
   80b74:	11800e04 	addi	r6,r2,56
   80b78:	300490fa 	slli	r2,r6,3
   80b7c:	003fb806 	br	80a60 <_malloc_r+0xb4>
   80b80:	00807fc4 	movi	r2,511
   80b84:	1140bb36 	bltu	r2,r5,80e74 <_malloc_r+0x4c8>
   80b88:	2806d0fa 	srli	r3,r5,3
   80b8c:	573ffe04 	addi	fp,r10,-8
   80b90:	00800044 	movi	r2,1
   80b94:	180890fa 	slli	r4,r3,3
   80b98:	1807d0ba 	srai	r3,r3,2
   80b9c:	e1c00117 	ldw	r7,4(fp)
   80ba0:	5909883a 	add	r4,r11,r4
   80ba4:	21400217 	ldw	r5,8(r4)
   80ba8:	10c4983a 	sll	r2,r2,r3
   80bac:	81000315 	stw	r4,12(r16)
   80bb0:	81400215 	stw	r5,8(r16)
   80bb4:	388eb03a 	or	r7,r7,r2
   80bb8:	2c000315 	stw	r16,12(r5)
   80bbc:	24000215 	stw	r16,8(r4)
   80bc0:	e1c00115 	stw	r7,4(fp)
   80bc4:	4807883a 	mov	r3,r9
   80bc8:	4800cd16 	blt	r9,zero,80f00 <_malloc_r+0x554>
   80bcc:	1807d0ba 	srai	r3,r3,2
   80bd0:	00800044 	movi	r2,1
   80bd4:	10c8983a 	sll	r4,r2,r3
   80bd8:	39004436 	bltu	r7,r4,80cec <_malloc_r+0x340>
   80bdc:	21c4703a 	and	r2,r4,r7
   80be0:	10000a1e 	bne	r2,zero,80c0c <_malloc_r+0x260>
   80be4:	2109883a 	add	r4,r4,r4
   80be8:	00bfff04 	movi	r2,-4
   80bec:	4884703a 	and	r2,r9,r2
   80bf0:	3906703a 	and	r3,r7,r4
   80bf4:	12400104 	addi	r9,r2,4
   80bf8:	1800041e 	bne	r3,zero,80c0c <_malloc_r+0x260>
   80bfc:	2109883a 	add	r4,r4,r4
   80c00:	3904703a 	and	r2,r7,r4
   80c04:	4a400104 	addi	r9,r9,4
   80c08:	103ffc26 	beq	r2,zero,80bfc <_malloc_r+0x250>
   80c0c:	480490fa 	slli	r2,r9,3
   80c10:	4819883a 	mov	r12,r9
   80c14:	023fff04 	movi	r8,-4
   80c18:	589b883a 	add	r13,r11,r2
   80c1c:	6807883a 	mov	r3,r13
   80c20:	014003c4 	movi	r5,15
   80c24:	1c000317 	ldw	r16,12(r3)
   80c28:	1c00041e 	bne	r3,r16,80c3c <_malloc_r+0x290>
   80c2c:	0000a706 	br	80ecc <_malloc_r+0x520>
   80c30:	3000ab0e 	bge	r6,zero,80ee0 <_malloc_r+0x534>
   80c34:	84000317 	ldw	r16,12(r16)
   80c38:	1c00a426 	beq	r3,r16,80ecc <_malloc_r+0x520>
   80c3c:	80800117 	ldw	r2,4(r16)
   80c40:	1204703a 	and	r2,r2,r8
   80c44:	144dc83a 	sub	r6,r2,r17
   80c48:	29bff90e 	bge	r5,r6,80c30 <_malloc_r+0x284>
   80c4c:	81000317 	ldw	r4,12(r16)
   80c50:	80c00217 	ldw	r3,8(r16)
   80c54:	89400054 	ori	r5,r17,1
   80c58:	8445883a 	add	r2,r16,r17
   80c5c:	20c00215 	stw	r3,8(r4)
   80c60:	19000315 	stw	r4,12(r3)
   80c64:	81400115 	stw	r5,4(r16)
   80c68:	1187883a 	add	r3,r2,r6
   80c6c:	31000054 	ori	r4,r6,1
   80c70:	50800315 	stw	r2,12(r10)
   80c74:	50800215 	stw	r2,8(r10)
   80c78:	19800015 	stw	r6,0(r3)
   80c7c:	11000115 	stw	r4,4(r2)
   80c80:	12800215 	stw	r10,8(r2)
   80c84:	12800315 	stw	r10,12(r2)
   80c88:	9009883a 	mov	r4,r18
   80c8c:	0083aa00 	call	83aa0 <__malloc_unlock>
   80c90:	80c00204 	addi	r3,r16,8
   80c94:	003f5906 	br	809fc <_malloc_r+0x50>
   80c98:	8109883a 	add	r4,r16,r4
   80c9c:	20800117 	ldw	r2,4(r4)
   80ca0:	80c00217 	ldw	r3,8(r16)
   80ca4:	81400317 	ldw	r5,12(r16)
   80ca8:	10800054 	ori	r2,r2,1
   80cac:	20800115 	stw	r2,4(r4)
   80cb0:	28c00215 	stw	r3,8(r5)
   80cb4:	19400315 	stw	r5,12(r3)
   80cb8:	9009883a 	mov	r4,r18
   80cbc:	0083aa00 	call	83aa0 <__malloc_unlock>
   80cc0:	80c00204 	addi	r3,r16,8
   80cc4:	003f4d06 	br	809fc <_malloc_r+0x50>
   80cc8:	80800204 	addi	r2,r16,8
   80ccc:	14000317 	ldw	r16,12(r2)
   80cd0:	143f911e 	bne	r2,r16,80b18 <_malloc_r+0x16c>
   80cd4:	1a400084 	addi	r9,r3,2
   80cd8:	003f7306 	br	80aa8 <_malloc_r+0xfc>
   80cdc:	88c00054 	ori	r3,r17,1
   80ce0:	8445883a 	add	r2,r16,r17
   80ce4:	80c00115 	stw	r3,4(r16)
   80ce8:	003fdf06 	br	80c68 <_malloc_r+0x2bc>
   80cec:	e4000217 	ldw	r16,8(fp)
   80cf0:	00bfff04 	movi	r2,-4
   80cf4:	80c00117 	ldw	r3,4(r16)
   80cf8:	802d883a 	mov	r22,r16
   80cfc:	18aa703a 	and	r21,r3,r2
   80d00:	ac401636 	bltu	r21,r17,80d5c <_malloc_r+0x3b0>
   80d04:	ac49c83a 	sub	r4,r21,r17
   80d08:	008003c4 	movi	r2,15
   80d0c:	1100130e 	bge	r2,r4,80d5c <_malloc_r+0x3b0>
   80d10:	88800054 	ori	r2,r17,1
   80d14:	8447883a 	add	r3,r16,r17
   80d18:	80800115 	stw	r2,4(r16)
   80d1c:	20800054 	ori	r2,r4,1
   80d20:	18800115 	stw	r2,4(r3)
   80d24:	e0c00215 	stw	r3,8(fp)
   80d28:	9009883a 	mov	r4,r18
   80d2c:	0083aa00 	call	83aa0 <__malloc_unlock>
   80d30:	80c00204 	addi	r3,r16,8
   80d34:	003f3106 	br	809fc <_malloc_r+0x50>
   80d38:	39c00117 	ldw	r7,4(r7)
   80d3c:	573ffe04 	addi	fp,r10,-8
   80d40:	003fa006 	br	80bc4 <_malloc_r+0x218>
   80d44:	00801504 	movi	r2,84
   80d48:	10c06736 	bltu	r2,r3,80ee8 <_malloc_r+0x53c>
   80d4c:	8804d33a 	srli	r2,r17,12
   80d50:	11801b84 	addi	r6,r2,110
   80d54:	300490fa 	slli	r2,r6,3
   80d58:	003f4106 	br	80a60 <_malloc_r+0xb4>
   80d5c:	d0a6ed17 	ldw	r2,-25676(gp)
   80d60:	d0e00317 	ldw	r3,-32756(gp)
   80d64:	053fffc4 	movi	r20,-1
   80d68:	10800404 	addi	r2,r2,16
   80d6c:	88a7883a 	add	r19,r17,r2
   80d70:	1d000326 	beq	r3,r20,80d80 <_malloc_r+0x3d4>
   80d74:	98c3ffc4 	addi	r3,r19,4095
   80d78:	00bc0004 	movi	r2,-4096
   80d7c:	18a6703a 	and	r19,r3,r2
   80d80:	9009883a 	mov	r4,r18
   80d84:	980b883a 	mov	r5,r19
   80d88:	00819440 	call	81944 <_sbrk_r>
   80d8c:	1009883a 	mov	r4,r2
   80d90:	15000426 	beq	r2,r20,80da4 <_malloc_r+0x3f8>
   80d94:	854b883a 	add	r5,r16,r21
   80d98:	1029883a 	mov	r20,r2
   80d9c:	11405a2e 	bgeu	r2,r5,80f08 <_malloc_r+0x55c>
   80da0:	87000c26 	beq	r16,fp,80dd4 <_malloc_r+0x428>
   80da4:	e4000217 	ldw	r16,8(fp)
   80da8:	80c00117 	ldw	r3,4(r16)
   80dac:	00bfff04 	movi	r2,-4
   80db0:	1884703a 	and	r2,r3,r2
   80db4:	14400336 	bltu	r2,r17,80dc4 <_malloc_r+0x418>
   80db8:	1449c83a 	sub	r4,r2,r17
   80dbc:	008003c4 	movi	r2,15
   80dc0:	113fd316 	blt	r2,r4,80d10 <_malloc_r+0x364>
   80dc4:	9009883a 	mov	r4,r18
   80dc8:	0083aa00 	call	83aa0 <__malloc_unlock>
   80dcc:	0007883a 	mov	r3,zero
   80dd0:	003f0a06 	br	809fc <_malloc_r+0x50>
   80dd4:	05c00274 	movhi	r23,9
   80dd8:	bdc9b404 	addi	r23,r23,9936
   80ddc:	b8800017 	ldw	r2,0(r23)
   80de0:	988d883a 	add	r6,r19,r2
   80de4:	b9800015 	stw	r6,0(r23)
   80de8:	d0e00317 	ldw	r3,-32756(gp)
   80dec:	00bfffc4 	movi	r2,-1
   80df0:	18808e26 	beq	r3,r2,8102c <_malloc_r+0x680>
   80df4:	2145c83a 	sub	r2,r4,r5
   80df8:	3085883a 	add	r2,r6,r2
   80dfc:	b8800015 	stw	r2,0(r23)
   80e00:	20c001cc 	andi	r3,r4,7
   80e04:	18005f1e 	bne	r3,zero,80f84 <_malloc_r+0x5d8>
   80e08:	000b883a 	mov	r5,zero
   80e0c:	a4c5883a 	add	r2,r20,r19
   80e10:	1083ffcc 	andi	r2,r2,4095
   80e14:	00c40004 	movi	r3,4096
   80e18:	1887c83a 	sub	r3,r3,r2
   80e1c:	28e7883a 	add	r19,r5,r3
   80e20:	9009883a 	mov	r4,r18
   80e24:	980b883a 	mov	r5,r19
   80e28:	00819440 	call	81944 <_sbrk_r>
   80e2c:	1007883a 	mov	r3,r2
   80e30:	00bfffc4 	movi	r2,-1
   80e34:	18807a26 	beq	r3,r2,81020 <_malloc_r+0x674>
   80e38:	1d05c83a 	sub	r2,r3,r20
   80e3c:	9885883a 	add	r2,r19,r2
   80e40:	10c00054 	ori	r3,r2,1
   80e44:	b8800017 	ldw	r2,0(r23)
   80e48:	a021883a 	mov	r16,r20
   80e4c:	a0c00115 	stw	r3,4(r20)
   80e50:	9885883a 	add	r2,r19,r2
   80e54:	b8800015 	stw	r2,0(r23)
   80e58:	e5000215 	stw	r20,8(fp)
   80e5c:	b7003626 	beq	r22,fp,80f38 <_malloc_r+0x58c>
   80e60:	018003c4 	movi	r6,15
   80e64:	35404b36 	bltu	r6,r21,80f94 <_malloc_r+0x5e8>
   80e68:	00800044 	movi	r2,1
   80e6c:	a0800115 	stw	r2,4(r20)
   80e70:	003fcd06 	br	80da8 <_malloc_r+0x3fc>
   80e74:	2808d27a 	srli	r4,r5,9
   80e78:	2000371e 	bne	r4,zero,80f58 <_malloc_r+0x5ac>
   80e7c:	2808d0fa 	srli	r4,r5,3
   80e80:	200690fa 	slli	r3,r4,3
   80e84:	1ad1883a 	add	r8,r3,r11
   80e88:	41800217 	ldw	r6,8(r8)
   80e8c:	41805b26 	beq	r8,r6,80ffc <_malloc_r+0x650>
   80e90:	30800117 	ldw	r2,4(r6)
   80e94:	00ffff04 	movi	r3,-4
   80e98:	10c4703a 	and	r2,r2,r3
   80e9c:	2880022e 	bgeu	r5,r2,80ea8 <_malloc_r+0x4fc>
   80ea0:	31800217 	ldw	r6,8(r6)
   80ea4:	41bffa1e 	bne	r8,r6,80e90 <_malloc_r+0x4e4>
   80ea8:	32000317 	ldw	r8,12(r6)
   80eac:	39c00117 	ldw	r7,4(r7)
   80eb0:	82000315 	stw	r8,12(r16)
   80eb4:	81800215 	stw	r6,8(r16)
   80eb8:	07000274 	movhi	fp,9
   80ebc:	e73d1104 	addi	fp,fp,-3004
   80ec0:	34000315 	stw	r16,12(r6)
   80ec4:	44000215 	stw	r16,8(r8)
   80ec8:	003f3e06 	br	80bc4 <_malloc_r+0x218>
   80ecc:	63000044 	addi	r12,r12,1
   80ed0:	608000cc 	andi	r2,r12,3
   80ed4:	10005d26 	beq	r2,zero,8104c <_malloc_r+0x6a0>
   80ed8:	18c00204 	addi	r3,r3,8
   80edc:	003f5106 	br	80c24 <_malloc_r+0x278>
   80ee0:	8089883a 	add	r4,r16,r2
   80ee4:	003f6d06 	br	80c9c <_malloc_r+0x2f0>
   80ee8:	00805504 	movi	r2,340
   80eec:	10c02036 	bltu	r2,r3,80f70 <_malloc_r+0x5c4>
   80ef0:	8804d3fa 	srli	r2,r17,15
   80ef4:	11801dc4 	addi	r6,r2,119
   80ef8:	300490fa 	slli	r2,r6,3
   80efc:	003ed806 	br	80a60 <_malloc_r+0xb4>
   80f00:	48c000c4 	addi	r3,r9,3
   80f04:	003f3106 	br	80bcc <_malloc_r+0x220>
   80f08:	05c00274 	movhi	r23,9
   80f0c:	bdc9b404 	addi	r23,r23,9936
   80f10:	b8800017 	ldw	r2,0(r23)
   80f14:	988d883a 	add	r6,r19,r2
   80f18:	b9800015 	stw	r6,0(r23)
   80f1c:	293fb21e 	bne	r5,r4,80de8 <_malloc_r+0x43c>
   80f20:	2083ffcc 	andi	r2,r4,4095
   80f24:	103fb01e 	bne	r2,zero,80de8 <_malloc_r+0x43c>
   80f28:	e4000217 	ldw	r16,8(fp)
   80f2c:	9d45883a 	add	r2,r19,r21
   80f30:	10800054 	ori	r2,r2,1
   80f34:	80800115 	stw	r2,4(r16)
   80f38:	b8c00017 	ldw	r3,0(r23)
   80f3c:	d0a6ee17 	ldw	r2,-25672(gp)
   80f40:	10c0012e 	bgeu	r2,r3,80f48 <_malloc_r+0x59c>
   80f44:	d0e6ee15 	stw	r3,-25672(gp)
   80f48:	d0a6ef17 	ldw	r2,-25668(gp)
   80f4c:	10ff962e 	bgeu	r2,r3,80da8 <_malloc_r+0x3fc>
   80f50:	d0e6ef15 	stw	r3,-25668(gp)
   80f54:	003f9406 	br	80da8 <_malloc_r+0x3fc>
   80f58:	00800104 	movi	r2,4
   80f5c:	11001e36 	bltu	r2,r4,80fd8 <_malloc_r+0x62c>
   80f60:	2804d1ba 	srli	r2,r5,6
   80f64:	11000e04 	addi	r4,r2,56
   80f68:	200690fa 	slli	r3,r4,3
   80f6c:	003fc506 	br	80e84 <_malloc_r+0x4d8>
   80f70:	00815504 	movi	r2,1364
   80f74:	10c01d2e 	bgeu	r2,r3,80fec <_malloc_r+0x640>
   80f78:	01801f84 	movi	r6,126
   80f7c:	0080fc04 	movi	r2,1008
   80f80:	003eb706 	br	80a60 <_malloc_r+0xb4>
   80f84:	00800204 	movi	r2,8
   80f88:	10cbc83a 	sub	r5,r2,r3
   80f8c:	2169883a 	add	r20,r4,r5
   80f90:	003f9e06 	br	80e0c <_malloc_r+0x460>
   80f94:	00bffe04 	movi	r2,-8
   80f98:	a93ffd04 	addi	r4,r21,-12
   80f9c:	2088703a 	and	r4,r4,r2
   80fa0:	b10b883a 	add	r5,r22,r4
   80fa4:	00c00144 	movi	r3,5
   80fa8:	28c00215 	stw	r3,8(r5)
   80fac:	28c00115 	stw	r3,4(r5)
   80fb0:	b0800117 	ldw	r2,4(r22)
   80fb4:	1080004c 	andi	r2,r2,1
   80fb8:	2084b03a 	or	r2,r4,r2
   80fbc:	b0800115 	stw	r2,4(r22)
   80fc0:	313fdd2e 	bgeu	r6,r4,80f38 <_malloc_r+0x58c>
   80fc4:	b1400204 	addi	r5,r22,8
   80fc8:	9009883a 	mov	r4,r18
   80fcc:	00821400 	call	82140 <_free_r>
   80fd0:	e4000217 	ldw	r16,8(fp)
   80fd4:	003fd806 	br	80f38 <_malloc_r+0x58c>
   80fd8:	00800504 	movi	r2,20
   80fdc:	11001536 	bltu	r2,r4,81034 <_malloc_r+0x688>
   80fe0:	210016c4 	addi	r4,r4,91
   80fe4:	200690fa 	slli	r3,r4,3
   80fe8:	003fa606 	br	80e84 <_malloc_r+0x4d8>
   80fec:	8804d4ba 	srli	r2,r17,18
   80ff0:	11801f04 	addi	r6,r2,124
   80ff4:	300490fa 	slli	r2,r6,3
   80ff8:	003e9906 	br	80a60 <_malloc_r+0xb4>
   80ffc:	2009d0ba 	srai	r4,r4,2
   81000:	01400274 	movhi	r5,9
   81004:	297d1104 	addi	r5,r5,-3004
   81008:	00c00044 	movi	r3,1
   8100c:	28800117 	ldw	r2,4(r5)
   81010:	1906983a 	sll	r3,r3,r4
   81014:	10c4b03a 	or	r2,r2,r3
   81018:	28800115 	stw	r2,4(r5)
   8101c:	003fa306 	br	80eac <_malloc_r+0x500>
   81020:	0027883a 	mov	r19,zero
   81024:	00c00044 	movi	r3,1
   81028:	003f8606 	br	80e44 <_malloc_r+0x498>
   8102c:	d1200315 	stw	r4,-32756(gp)
   81030:	003f7306 	br	80e00 <_malloc_r+0x454>
   81034:	00801504 	movi	r2,84
   81038:	11001936 	bltu	r2,r4,810a0 <_malloc_r+0x6f4>
   8103c:	2804d33a 	srli	r2,r5,12
   81040:	11001b84 	addi	r4,r2,110
   81044:	200690fa 	slli	r3,r4,3
   81048:	003f8e06 	br	80e84 <_malloc_r+0x4d8>
   8104c:	480b883a 	mov	r5,r9
   81050:	6807883a 	mov	r3,r13
   81054:	288000cc 	andi	r2,r5,3
   81058:	18fffe04 	addi	r3,r3,-8
   8105c:	297fffc4 	addi	r5,r5,-1
   81060:	10001526 	beq	r2,zero,810b8 <_malloc_r+0x70c>
   81064:	18800217 	ldw	r2,8(r3)
   81068:	10fffa26 	beq	r2,r3,81054 <_malloc_r+0x6a8>
   8106c:	2109883a 	add	r4,r4,r4
   81070:	393f1e36 	bltu	r7,r4,80cec <_malloc_r+0x340>
   81074:	203f1d26 	beq	r4,zero,80cec <_malloc_r+0x340>
   81078:	21c4703a 	and	r2,r4,r7
   8107c:	10000226 	beq	r2,zero,81088 <_malloc_r+0x6dc>
   81080:	6013883a 	mov	r9,r12
   81084:	003ee106 	br	80c0c <_malloc_r+0x260>
   81088:	2109883a 	add	r4,r4,r4
   8108c:	3904703a 	and	r2,r7,r4
   81090:	63000104 	addi	r12,r12,4
   81094:	103ffc26 	beq	r2,zero,81088 <_malloc_r+0x6dc>
   81098:	6013883a 	mov	r9,r12
   8109c:	003edb06 	br	80c0c <_malloc_r+0x260>
   810a0:	00805504 	movi	r2,340
   810a4:	11000836 	bltu	r2,r4,810c8 <_malloc_r+0x71c>
   810a8:	2804d3fa 	srli	r2,r5,15
   810ac:	11001dc4 	addi	r4,r2,119
   810b0:	200690fa 	slli	r3,r4,3
   810b4:	003f7306 	br	80e84 <_malloc_r+0x4d8>
   810b8:	0104303a 	nor	r2,zero,r4
   810bc:	388e703a 	and	r7,r7,r2
   810c0:	e1c00115 	stw	r7,4(fp)
   810c4:	003fe906 	br	8106c <_malloc_r+0x6c0>
   810c8:	00815504 	movi	r2,1364
   810cc:	1100032e 	bgeu	r2,r4,810dc <_malloc_r+0x730>
   810d0:	01001f84 	movi	r4,126
   810d4:	00c0fc04 	movi	r3,1008
   810d8:	003f6a06 	br	80e84 <_malloc_r+0x4d8>
   810dc:	2804d4ba 	srli	r2,r5,18
   810e0:	11001f04 	addi	r4,r2,124
   810e4:	200690fa 	slli	r3,r4,3
   810e8:	003f6606 	br	80e84 <_malloc_r+0x4d8>

000810ec <memchr>:
   810ec:	008000c4 	movi	r2,3
   810f0:	29403fcc 	andi	r5,r5,255
   810f4:	2007883a 	mov	r3,r4
   810f8:	1180022e 	bgeu	r2,r6,81104 <memchr+0x18>
   810fc:	2084703a 	and	r2,r4,r2
   81100:	10000b26 	beq	r2,zero,81130 <memchr+0x44>
   81104:	313fffc4 	addi	r4,r6,-1
   81108:	3000051e 	bne	r6,zero,81120 <memchr+0x34>
   8110c:	00002c06 	br	811c0 <memchr+0xd4>
   81110:	213fffc4 	addi	r4,r4,-1
   81114:	00bfffc4 	movi	r2,-1
   81118:	18c00044 	addi	r3,r3,1
   8111c:	20802826 	beq	r4,r2,811c0 <memchr+0xd4>
   81120:	18800003 	ldbu	r2,0(r3)
   81124:	28bffa1e 	bne	r5,r2,81110 <memchr+0x24>
   81128:	1805883a 	mov	r2,r3
   8112c:	f800283a 	ret
   81130:	0011883a 	mov	r8,zero
   81134:	0007883a 	mov	r3,zero
   81138:	01c00104 	movi	r7,4
   8113c:	4004923a 	slli	r2,r8,8
   81140:	18c00044 	addi	r3,r3,1
   81144:	1151883a 	add	r8,r2,r5
   81148:	19fffc1e 	bne	r3,r7,8113c <memchr+0x50>
   8114c:	02bfbff4 	movhi	r10,65279
   81150:	52bfbfc4 	addi	r10,r10,-257
   81154:	02602074 	movhi	r9,32897
   81158:	4a602004 	addi	r9,r9,-32640
   8115c:	02c000c4 	movi	r11,3
   81160:	20800017 	ldw	r2,0(r4)
   81164:	31bfff04 	addi	r6,r6,-4
   81168:	200f883a 	mov	r7,r4
   8116c:	1204f03a 	xor	r2,r2,r8
   81170:	1287883a 	add	r3,r2,r10
   81174:	1a46703a 	and	r3,r3,r9
   81178:	0084303a 	nor	r2,zero,r2
   8117c:	10c4703a 	and	r2,r2,r3
   81180:	10000b26 	beq	r2,zero,811b0 <memchr+0xc4>
   81184:	20800003 	ldbu	r2,0(r4)
   81188:	28800f26 	beq	r5,r2,811c8 <memchr+0xdc>
   8118c:	20800043 	ldbu	r2,1(r4)
   81190:	21c00044 	addi	r7,r4,1
   81194:	28800c26 	beq	r5,r2,811c8 <memchr+0xdc>
   81198:	20800083 	ldbu	r2,2(r4)
   8119c:	21c00084 	addi	r7,r4,2
   811a0:	28800926 	beq	r5,r2,811c8 <memchr+0xdc>
   811a4:	208000c3 	ldbu	r2,3(r4)
   811a8:	21c000c4 	addi	r7,r4,3
   811ac:	28800626 	beq	r5,r2,811c8 <memchr+0xdc>
   811b0:	21000104 	addi	r4,r4,4
   811b4:	59bfea36 	bltu	r11,r6,81160 <memchr+0x74>
   811b8:	2007883a 	mov	r3,r4
   811bc:	003fd106 	br	81104 <memchr+0x18>
   811c0:	0005883a 	mov	r2,zero
   811c4:	f800283a 	ret
   811c8:	3805883a 	mov	r2,r7
   811cc:	f800283a 	ret

000811d0 <memcpy>:
   811d0:	01c003c4 	movi	r7,15
   811d4:	2007883a 	mov	r3,r4
   811d8:	3980032e 	bgeu	r7,r6,811e8 <memcpy+0x18>
   811dc:	2904b03a 	or	r2,r5,r4
   811e0:	108000cc 	andi	r2,r2,3
   811e4:	10000926 	beq	r2,zero,8120c <memcpy+0x3c>
   811e8:	30000626 	beq	r6,zero,81204 <memcpy+0x34>
   811ec:	30cd883a 	add	r6,r6,r3
   811f0:	28800003 	ldbu	r2,0(r5)
   811f4:	29400044 	addi	r5,r5,1
   811f8:	18800005 	stb	r2,0(r3)
   811fc:	18c00044 	addi	r3,r3,1
   81200:	30fffb1e 	bne	r6,r3,811f0 <memcpy+0x20>
   81204:	2005883a 	mov	r2,r4
   81208:	f800283a 	ret
   8120c:	3811883a 	mov	r8,r7
   81210:	200f883a 	mov	r7,r4
   81214:	28c00017 	ldw	r3,0(r5)
   81218:	31bffc04 	addi	r6,r6,-16
   8121c:	38c00015 	stw	r3,0(r7)
   81220:	28800117 	ldw	r2,4(r5)
   81224:	38800115 	stw	r2,4(r7)
   81228:	28c00217 	ldw	r3,8(r5)
   8122c:	38c00215 	stw	r3,8(r7)
   81230:	28800317 	ldw	r2,12(r5)
   81234:	29400404 	addi	r5,r5,16
   81238:	38800315 	stw	r2,12(r7)
   8123c:	39c00404 	addi	r7,r7,16
   81240:	41bff436 	bltu	r8,r6,81214 <memcpy+0x44>
   81244:	008000c4 	movi	r2,3
   81248:	1180072e 	bgeu	r2,r6,81268 <memcpy+0x98>
   8124c:	1007883a 	mov	r3,r2
   81250:	28800017 	ldw	r2,0(r5)
   81254:	31bfff04 	addi	r6,r6,-4
   81258:	29400104 	addi	r5,r5,4
   8125c:	38800015 	stw	r2,0(r7)
   81260:	39c00104 	addi	r7,r7,4
   81264:	19bffa36 	bltu	r3,r6,81250 <memcpy+0x80>
   81268:	3807883a 	mov	r3,r7
   8126c:	003fde06 	br	811e8 <memcpy+0x18>

00081270 <memmove>:
   81270:	2807883a 	mov	r3,r5
   81274:	2011883a 	mov	r8,r4
   81278:	29000c2e 	bgeu	r5,r4,812ac <memmove+0x3c>
   8127c:	298f883a 	add	r7,r5,r6
   81280:	21c00a2e 	bgeu	r4,r7,812ac <memmove+0x3c>
   81284:	30000726 	beq	r6,zero,812a4 <memmove+0x34>
   81288:	2187883a 	add	r3,r4,r6
   8128c:	198dc83a 	sub	r6,r3,r6
   81290:	39ffffc4 	addi	r7,r7,-1
   81294:	38800003 	ldbu	r2,0(r7)
   81298:	18ffffc4 	addi	r3,r3,-1
   8129c:	18800005 	stb	r2,0(r3)
   812a0:	19bffb1e 	bne	r3,r6,81290 <memmove+0x20>
   812a4:	2005883a 	mov	r2,r4
   812a8:	f800283a 	ret
   812ac:	01c003c4 	movi	r7,15
   812b0:	39800a36 	bltu	r7,r6,812dc <memmove+0x6c>
   812b4:	303ffb26 	beq	r6,zero,812a4 <memmove+0x34>
   812b8:	400f883a 	mov	r7,r8
   812bc:	320d883a 	add	r6,r6,r8
   812c0:	28800003 	ldbu	r2,0(r5)
   812c4:	29400044 	addi	r5,r5,1
   812c8:	38800005 	stb	r2,0(r7)
   812cc:	39c00044 	addi	r7,r7,1
   812d0:	39bffb1e 	bne	r7,r6,812c0 <memmove+0x50>
   812d4:	2005883a 	mov	r2,r4
   812d8:	f800283a 	ret
   812dc:	1904b03a 	or	r2,r3,r4
   812e0:	108000cc 	andi	r2,r2,3
   812e4:	103ff31e 	bne	r2,zero,812b4 <memmove+0x44>
   812e8:	3811883a 	mov	r8,r7
   812ec:	180b883a 	mov	r5,r3
   812f0:	200f883a 	mov	r7,r4
   812f4:	28c00017 	ldw	r3,0(r5)
   812f8:	31bffc04 	addi	r6,r6,-16
   812fc:	38c00015 	stw	r3,0(r7)
   81300:	28800117 	ldw	r2,4(r5)
   81304:	38800115 	stw	r2,4(r7)
   81308:	28c00217 	ldw	r3,8(r5)
   8130c:	38c00215 	stw	r3,8(r7)
   81310:	28800317 	ldw	r2,12(r5)
   81314:	29400404 	addi	r5,r5,16
   81318:	38800315 	stw	r2,12(r7)
   8131c:	39c00404 	addi	r7,r7,16
   81320:	41bff436 	bltu	r8,r6,812f4 <memmove+0x84>
   81324:	008000c4 	movi	r2,3
   81328:	1180072e 	bgeu	r2,r6,81348 <memmove+0xd8>
   8132c:	1007883a 	mov	r3,r2
   81330:	28800017 	ldw	r2,0(r5)
   81334:	31bfff04 	addi	r6,r6,-4
   81338:	29400104 	addi	r5,r5,4
   8133c:	38800015 	stw	r2,0(r7)
   81340:	39c00104 	addi	r7,r7,4
   81344:	19bffa36 	bltu	r3,r6,81330 <memmove+0xc0>
   81348:	3811883a 	mov	r8,r7
   8134c:	003fd906 	br	812b4 <memmove+0x44>

00081350 <_realloc_r>:
   81350:	defff404 	addi	sp,sp,-48
   81354:	dd800815 	stw	r22,32(sp)
   81358:	dc800415 	stw	r18,16(sp)
   8135c:	dc400315 	stw	r17,12(sp)
   81360:	dfc00b15 	stw	ra,44(sp)
   81364:	df000a15 	stw	fp,40(sp)
   81368:	ddc00915 	stw	r23,36(sp)
   8136c:	dd400715 	stw	r21,28(sp)
   81370:	dd000615 	stw	r20,24(sp)
   81374:	dcc00515 	stw	r19,20(sp)
   81378:	dc000215 	stw	r16,8(sp)
   8137c:	2825883a 	mov	r18,r5
   81380:	3023883a 	mov	r17,r6
   81384:	202d883a 	mov	r22,r4
   81388:	2800c926 	beq	r5,zero,816b0 <_realloc_r+0x360>
   8138c:	00839980 	call	83998 <__malloc_lock>
   81390:	943ffe04 	addi	r16,r18,-8
   81394:	88c002c4 	addi	r3,r17,11
   81398:	00800584 	movi	r2,22
   8139c:	82000117 	ldw	r8,4(r16)
   813a0:	10c01b2e 	bgeu	r2,r3,81410 <_realloc_r+0xc0>
   813a4:	00bffe04 	movi	r2,-8
   813a8:	188e703a 	and	r7,r3,r2
   813ac:	3839883a 	mov	fp,r7
   813b0:	38001a16 	blt	r7,zero,8141c <_realloc_r+0xcc>
   813b4:	e4401936 	bltu	fp,r17,8141c <_realloc_r+0xcc>
   813b8:	013fff04 	movi	r4,-4
   813bc:	4126703a 	and	r19,r8,r4
   813c0:	99c02616 	blt	r19,r7,8145c <_realloc_r+0x10c>
   813c4:	802b883a 	mov	r21,r16
   813c8:	9829883a 	mov	r20,r19
   813cc:	84000204 	addi	r16,r16,8
   813d0:	a80f883a 	mov	r7,r21
   813d4:	a70dc83a 	sub	r6,r20,fp
   813d8:	008003c4 	movi	r2,15
   813dc:	1180c136 	bltu	r2,r6,816e4 <_realloc_r+0x394>
   813e0:	38800117 	ldw	r2,4(r7)
   813e4:	a549883a 	add	r4,r20,r21
   813e8:	1080004c 	andi	r2,r2,1
   813ec:	a084b03a 	or	r2,r20,r2
   813f0:	38800115 	stw	r2,4(r7)
   813f4:	20c00117 	ldw	r3,4(r4)
   813f8:	18c00054 	ori	r3,r3,1
   813fc:	20c00115 	stw	r3,4(r4)
   81400:	b009883a 	mov	r4,r22
   81404:	0083aa00 	call	83aa0 <__malloc_unlock>
   81408:	8023883a 	mov	r17,r16
   8140c:	00000606 	br	81428 <_realloc_r+0xd8>
   81410:	01c00404 	movi	r7,16
   81414:	3839883a 	mov	fp,r7
   81418:	e47fe72e 	bgeu	fp,r17,813b8 <_realloc_r+0x68>
   8141c:	00800304 	movi	r2,12
   81420:	0023883a 	mov	r17,zero
   81424:	b0800015 	stw	r2,0(r22)
   81428:	8805883a 	mov	r2,r17
   8142c:	dfc00b17 	ldw	ra,44(sp)
   81430:	df000a17 	ldw	fp,40(sp)
   81434:	ddc00917 	ldw	r23,36(sp)
   81438:	dd800817 	ldw	r22,32(sp)
   8143c:	dd400717 	ldw	r21,28(sp)
   81440:	dd000617 	ldw	r20,24(sp)
   81444:	dcc00517 	ldw	r19,20(sp)
   81448:	dc800417 	ldw	r18,16(sp)
   8144c:	dc400317 	ldw	r17,12(sp)
   81450:	dc000217 	ldw	r16,8(sp)
   81454:	dec00c04 	addi	sp,sp,48
   81458:	f800283a 	ret
   8145c:	00800274 	movhi	r2,9
   81460:	10bd1104 	addi	r2,r2,-3004
   81464:	12400217 	ldw	r9,8(r2)
   81468:	84cd883a 	add	r6,r16,r19
   8146c:	802b883a 	mov	r21,r16
   81470:	3240b926 	beq	r6,r9,81758 <_realloc_r+0x408>
   81474:	31400117 	ldw	r5,4(r6)
   81478:	00bfff84 	movi	r2,-2
   8147c:	2884703a 	and	r2,r5,r2
   81480:	1185883a 	add	r2,r2,r6
   81484:	10c00117 	ldw	r3,4(r2)
   81488:	18c0004c 	andi	r3,r3,1
   8148c:	1807003a 	cmpeq	r3,r3,zero
   81490:	1800a326 	beq	r3,zero,81720 <_realloc_r+0x3d0>
   81494:	2908703a 	and	r4,r5,r4
   81498:	9929883a 	add	r20,r19,r4
   8149c:	a1c0a30e 	bge	r20,r7,8172c <_realloc_r+0x3dc>
   814a0:	4080004c 	andi	r2,r8,1
   814a4:	1000551e 	bne	r2,zero,815fc <_realloc_r+0x2ac>
   814a8:	80800017 	ldw	r2,0(r16)
   814ac:	80afc83a 	sub	r23,r16,r2
   814b0:	b8c00117 	ldw	r3,4(r23)
   814b4:	00bfff04 	movi	r2,-4
   814b8:	1884703a 	and	r2,r3,r2
   814bc:	30002e26 	beq	r6,zero,81578 <_realloc_r+0x228>
   814c0:	3240b926 	beq	r6,r9,817a8 <_realloc_r+0x458>
   814c4:	98a9883a 	add	r20,r19,r2
   814c8:	2509883a 	add	r4,r4,r20
   814cc:	d9000015 	stw	r4,0(sp)
   814d0:	21c02a16 	blt	r4,r7,8157c <_realloc_r+0x22c>
   814d4:	30800317 	ldw	r2,12(r6)
   814d8:	30c00217 	ldw	r3,8(r6)
   814dc:	01400904 	movi	r5,36
   814e0:	99bfff04 	addi	r6,r19,-4
   814e4:	18800315 	stw	r2,12(r3)
   814e8:	10c00215 	stw	r3,8(r2)
   814ec:	b9000317 	ldw	r4,12(r23)
   814f0:	b8800217 	ldw	r2,8(r23)
   814f4:	b82b883a 	mov	r21,r23
   814f8:	bc000204 	addi	r16,r23,8
   814fc:	20800215 	stw	r2,8(r4)
   81500:	11000315 	stw	r4,12(r2)
   81504:	2980e436 	bltu	r5,r6,81898 <_realloc_r+0x548>
   81508:	008004c4 	movi	r2,19
   8150c:	9009883a 	mov	r4,r18
   81510:	8011883a 	mov	r8,r16
   81514:	11800f2e 	bgeu	r2,r6,81554 <_realloc_r+0x204>
   81518:	90800017 	ldw	r2,0(r18)
   8151c:	ba000404 	addi	r8,r23,16
   81520:	91000204 	addi	r4,r18,8
   81524:	b8800215 	stw	r2,8(r23)
   81528:	90c00117 	ldw	r3,4(r18)
   8152c:	008006c4 	movi	r2,27
   81530:	b8c00315 	stw	r3,12(r23)
   81534:	1180072e 	bgeu	r2,r6,81554 <_realloc_r+0x204>
   81538:	90c00217 	ldw	r3,8(r18)
   8153c:	ba000604 	addi	r8,r23,24
   81540:	91000404 	addi	r4,r18,16
   81544:	b8c00415 	stw	r3,16(r23)
   81548:	90800317 	ldw	r2,12(r18)
   8154c:	b8800515 	stw	r2,20(r23)
   81550:	3140e726 	beq	r6,r5,818f0 <_realloc_r+0x5a0>
   81554:	20800017 	ldw	r2,0(r4)
   81558:	dd000017 	ldw	r20,0(sp)
   8155c:	b80f883a 	mov	r7,r23
   81560:	40800015 	stw	r2,0(r8)
   81564:	20c00117 	ldw	r3,4(r4)
   81568:	40c00115 	stw	r3,4(r8)
   8156c:	20800217 	ldw	r2,8(r4)
   81570:	40800215 	stw	r2,8(r8)
   81574:	003f9706 	br	813d4 <_realloc_r+0x84>
   81578:	98a9883a 	add	r20,r19,r2
   8157c:	a1c01f16 	blt	r20,r7,815fc <_realloc_r+0x2ac>
   81580:	b8c00317 	ldw	r3,12(r23)
   81584:	b8800217 	ldw	r2,8(r23)
   81588:	99bfff04 	addi	r6,r19,-4
   8158c:	01400904 	movi	r5,36
   81590:	b82b883a 	mov	r21,r23
   81594:	18800215 	stw	r2,8(r3)
   81598:	10c00315 	stw	r3,12(r2)
   8159c:	bc000204 	addi	r16,r23,8
   815a0:	2980c336 	bltu	r5,r6,818b0 <_realloc_r+0x560>
   815a4:	008004c4 	movi	r2,19
   815a8:	9009883a 	mov	r4,r18
   815ac:	8011883a 	mov	r8,r16
   815b0:	11800f2e 	bgeu	r2,r6,815f0 <_realloc_r+0x2a0>
   815b4:	90800017 	ldw	r2,0(r18)
   815b8:	ba000404 	addi	r8,r23,16
   815bc:	91000204 	addi	r4,r18,8
   815c0:	b8800215 	stw	r2,8(r23)
   815c4:	90c00117 	ldw	r3,4(r18)
   815c8:	008006c4 	movi	r2,27
   815cc:	b8c00315 	stw	r3,12(r23)
   815d0:	1180072e 	bgeu	r2,r6,815f0 <_realloc_r+0x2a0>
   815d4:	90c00217 	ldw	r3,8(r18)
   815d8:	ba000604 	addi	r8,r23,24
   815dc:	91000404 	addi	r4,r18,16
   815e0:	b8c00415 	stw	r3,16(r23)
   815e4:	90800317 	ldw	r2,12(r18)
   815e8:	b8800515 	stw	r2,20(r23)
   815ec:	3140c726 	beq	r6,r5,8190c <_realloc_r+0x5bc>
   815f0:	20800017 	ldw	r2,0(r4)
   815f4:	b80f883a 	mov	r7,r23
   815f8:	003fd906 	br	81560 <_realloc_r+0x210>
   815fc:	880b883a 	mov	r5,r17
   81600:	b009883a 	mov	r4,r22
   81604:	00809ac0 	call	809ac <_malloc_r>
   81608:	1023883a 	mov	r17,r2
   8160c:	10002526 	beq	r2,zero,816a4 <_realloc_r+0x354>
   81610:	80800117 	ldw	r2,4(r16)
   81614:	00ffff84 	movi	r3,-2
   81618:	893ffe04 	addi	r4,r17,-8
   8161c:	10c4703a 	and	r2,r2,r3
   81620:	8085883a 	add	r2,r16,r2
   81624:	20809526 	beq	r4,r2,8187c <_realloc_r+0x52c>
   81628:	99bfff04 	addi	r6,r19,-4
   8162c:	01c00904 	movi	r7,36
   81630:	39804536 	bltu	r7,r6,81748 <_realloc_r+0x3f8>
   81634:	008004c4 	movi	r2,19
   81638:	9009883a 	mov	r4,r18
   8163c:	880b883a 	mov	r5,r17
   81640:	11800f2e 	bgeu	r2,r6,81680 <_realloc_r+0x330>
   81644:	90800017 	ldw	r2,0(r18)
   81648:	89400204 	addi	r5,r17,8
   8164c:	91000204 	addi	r4,r18,8
   81650:	88800015 	stw	r2,0(r17)
   81654:	90c00117 	ldw	r3,4(r18)
   81658:	008006c4 	movi	r2,27
   8165c:	88c00115 	stw	r3,4(r17)
   81660:	1180072e 	bgeu	r2,r6,81680 <_realloc_r+0x330>
   81664:	90c00217 	ldw	r3,8(r18)
   81668:	89400404 	addi	r5,r17,16
   8166c:	91000404 	addi	r4,r18,16
   81670:	88c00215 	stw	r3,8(r17)
   81674:	90800317 	ldw	r2,12(r18)
   81678:	88800315 	stw	r2,12(r17)
   8167c:	31c09126 	beq	r6,r7,818c4 <_realloc_r+0x574>
   81680:	20800017 	ldw	r2,0(r4)
   81684:	28800015 	stw	r2,0(r5)
   81688:	20c00117 	ldw	r3,4(r4)
   8168c:	28c00115 	stw	r3,4(r5)
   81690:	20800217 	ldw	r2,8(r4)
   81694:	28800215 	stw	r2,8(r5)
   81698:	900b883a 	mov	r5,r18
   8169c:	b009883a 	mov	r4,r22
   816a0:	00821400 	call	82140 <_free_r>
   816a4:	b009883a 	mov	r4,r22
   816a8:	0083aa00 	call	83aa0 <__malloc_unlock>
   816ac:	003f5e06 	br	81428 <_realloc_r+0xd8>
   816b0:	300b883a 	mov	r5,r6
   816b4:	dfc00b17 	ldw	ra,44(sp)
   816b8:	df000a17 	ldw	fp,40(sp)
   816bc:	ddc00917 	ldw	r23,36(sp)
   816c0:	dd800817 	ldw	r22,32(sp)
   816c4:	dd400717 	ldw	r21,28(sp)
   816c8:	dd000617 	ldw	r20,24(sp)
   816cc:	dcc00517 	ldw	r19,20(sp)
   816d0:	dc800417 	ldw	r18,16(sp)
   816d4:	dc400317 	ldw	r17,12(sp)
   816d8:	dc000217 	ldw	r16,8(sp)
   816dc:	dec00c04 	addi	sp,sp,48
   816e0:	00809ac1 	jmpi	809ac <_malloc_r>
   816e4:	38800117 	ldw	r2,4(r7)
   816e8:	e54b883a 	add	r5,fp,r21
   816ec:	31000054 	ori	r4,r6,1
   816f0:	1080004c 	andi	r2,r2,1
   816f4:	1704b03a 	or	r2,r2,fp
   816f8:	38800115 	stw	r2,4(r7)
   816fc:	29000115 	stw	r4,4(r5)
   81700:	2987883a 	add	r3,r5,r6
   81704:	18800117 	ldw	r2,4(r3)
   81708:	29400204 	addi	r5,r5,8
   8170c:	b009883a 	mov	r4,r22
   81710:	10800054 	ori	r2,r2,1
   81714:	18800115 	stw	r2,4(r3)
   81718:	00821400 	call	82140 <_free_r>
   8171c:	003f3806 	br	81400 <_realloc_r+0xb0>
   81720:	000d883a 	mov	r6,zero
   81724:	0009883a 	mov	r4,zero
   81728:	003f5d06 	br	814a0 <_realloc_r+0x150>
   8172c:	30c00217 	ldw	r3,8(r6)
   81730:	30800317 	ldw	r2,12(r6)
   81734:	800f883a 	mov	r7,r16
   81738:	84000204 	addi	r16,r16,8
   8173c:	10c00215 	stw	r3,8(r2)
   81740:	18800315 	stw	r2,12(r3)
   81744:	003f2306 	br	813d4 <_realloc_r+0x84>
   81748:	8809883a 	mov	r4,r17
   8174c:	900b883a 	mov	r5,r18
   81750:	00812700 	call	81270 <memmove>
   81754:	003fd006 	br	81698 <_realloc_r+0x348>
   81758:	30800117 	ldw	r2,4(r6)
   8175c:	e0c00404 	addi	r3,fp,16
   81760:	1108703a 	and	r4,r2,r4
   81764:	9905883a 	add	r2,r19,r4
   81768:	10ff4d16 	blt	r2,r3,814a0 <_realloc_r+0x150>
   8176c:	1705c83a 	sub	r2,r2,fp
   81770:	870b883a 	add	r5,r16,fp
   81774:	10800054 	ori	r2,r2,1
   81778:	28800115 	stw	r2,4(r5)
   8177c:	80c00117 	ldw	r3,4(r16)
   81780:	00800274 	movhi	r2,9
   81784:	10bd1104 	addi	r2,r2,-3004
   81788:	b009883a 	mov	r4,r22
   8178c:	18c0004c 	andi	r3,r3,1
   81790:	e0c6b03a 	or	r3,fp,r3
   81794:	11400215 	stw	r5,8(r2)
   81798:	80c00115 	stw	r3,4(r16)
   8179c:	0083aa00 	call	83aa0 <__malloc_unlock>
   817a0:	84400204 	addi	r17,r16,8
   817a4:	003f2006 	br	81428 <_realloc_r+0xd8>
   817a8:	98a9883a 	add	r20,r19,r2
   817ac:	2509883a 	add	r4,r4,r20
   817b0:	e0800404 	addi	r2,fp,16
   817b4:	d9000115 	stw	r4,4(sp)
   817b8:	20bf7016 	blt	r4,r2,8157c <_realloc_r+0x22c>
   817bc:	b8c00317 	ldw	r3,12(r23)
   817c0:	b8800217 	ldw	r2,8(r23)
   817c4:	99bfff04 	addi	r6,r19,-4
   817c8:	01400904 	movi	r5,36
   817cc:	18800215 	stw	r2,8(r3)
   817d0:	10c00315 	stw	r3,12(r2)
   817d4:	bc400204 	addi	r17,r23,8
   817d8:	29804136 	bltu	r5,r6,818e0 <_realloc_r+0x590>
   817dc:	008004c4 	movi	r2,19
   817e0:	9009883a 	mov	r4,r18
   817e4:	880f883a 	mov	r7,r17
   817e8:	11800f2e 	bgeu	r2,r6,81828 <_realloc_r+0x4d8>
   817ec:	90800017 	ldw	r2,0(r18)
   817f0:	b9c00404 	addi	r7,r23,16
   817f4:	91000204 	addi	r4,r18,8
   817f8:	b8800215 	stw	r2,8(r23)
   817fc:	90c00117 	ldw	r3,4(r18)
   81800:	008006c4 	movi	r2,27
   81804:	b8c00315 	stw	r3,12(r23)
   81808:	1180072e 	bgeu	r2,r6,81828 <_realloc_r+0x4d8>
   8180c:	90c00217 	ldw	r3,8(r18)
   81810:	b9c00604 	addi	r7,r23,24
   81814:	91000404 	addi	r4,r18,16
   81818:	b8c00415 	stw	r3,16(r23)
   8181c:	90800317 	ldw	r2,12(r18)
   81820:	b8800515 	stw	r2,20(r23)
   81824:	31404026 	beq	r6,r5,81928 <_realloc_r+0x5d8>
   81828:	20800017 	ldw	r2,0(r4)
   8182c:	38800015 	stw	r2,0(r7)
   81830:	20c00117 	ldw	r3,4(r4)
   81834:	38c00115 	stw	r3,4(r7)
   81838:	20800217 	ldw	r2,8(r4)
   8183c:	38800215 	stw	r2,8(r7)
   81840:	d8c00117 	ldw	r3,4(sp)
   81844:	bf0b883a 	add	r5,r23,fp
   81848:	b009883a 	mov	r4,r22
   8184c:	1f05c83a 	sub	r2,r3,fp
   81850:	10800054 	ori	r2,r2,1
   81854:	28800115 	stw	r2,4(r5)
   81858:	b8c00117 	ldw	r3,4(r23)
   8185c:	00800274 	movhi	r2,9
   81860:	10bd1104 	addi	r2,r2,-3004
   81864:	11400215 	stw	r5,8(r2)
   81868:	18c0004c 	andi	r3,r3,1
   8186c:	e0c6b03a 	or	r3,fp,r3
   81870:	b8c00115 	stw	r3,4(r23)
   81874:	0083aa00 	call	83aa0 <__malloc_unlock>
   81878:	003eeb06 	br	81428 <_realloc_r+0xd8>
   8187c:	20800117 	ldw	r2,4(r4)
   81880:	00ffff04 	movi	r3,-4
   81884:	800f883a 	mov	r7,r16
   81888:	10c4703a 	and	r2,r2,r3
   8188c:	98a9883a 	add	r20,r19,r2
   81890:	84000204 	addi	r16,r16,8
   81894:	003ecf06 	br	813d4 <_realloc_r+0x84>
   81898:	900b883a 	mov	r5,r18
   8189c:	8009883a 	mov	r4,r16
   818a0:	00812700 	call	81270 <memmove>
   818a4:	dd000017 	ldw	r20,0(sp)
   818a8:	b80f883a 	mov	r7,r23
   818ac:	003ec906 	br	813d4 <_realloc_r+0x84>
   818b0:	900b883a 	mov	r5,r18
   818b4:	8009883a 	mov	r4,r16
   818b8:	00812700 	call	81270 <memmove>
   818bc:	b80f883a 	mov	r7,r23
   818c0:	003ec406 	br	813d4 <_realloc_r+0x84>
   818c4:	90c00417 	ldw	r3,16(r18)
   818c8:	89400604 	addi	r5,r17,24
   818cc:	91000604 	addi	r4,r18,24
   818d0:	88c00415 	stw	r3,16(r17)
   818d4:	90800517 	ldw	r2,20(r18)
   818d8:	88800515 	stw	r2,20(r17)
   818dc:	003f6806 	br	81680 <_realloc_r+0x330>
   818e0:	900b883a 	mov	r5,r18
   818e4:	8809883a 	mov	r4,r17
   818e8:	00812700 	call	81270 <memmove>
   818ec:	003fd406 	br	81840 <_realloc_r+0x4f0>
   818f0:	90c00417 	ldw	r3,16(r18)
   818f4:	91000604 	addi	r4,r18,24
   818f8:	ba000804 	addi	r8,r23,32
   818fc:	b8c00615 	stw	r3,24(r23)
   81900:	90800517 	ldw	r2,20(r18)
   81904:	b8800715 	stw	r2,28(r23)
   81908:	003f1206 	br	81554 <_realloc_r+0x204>
   8190c:	90c00417 	ldw	r3,16(r18)
   81910:	91000604 	addi	r4,r18,24
   81914:	ba000804 	addi	r8,r23,32
   81918:	b8c00615 	stw	r3,24(r23)
   8191c:	90800517 	ldw	r2,20(r18)
   81920:	b8800715 	stw	r2,28(r23)
   81924:	003f3206 	br	815f0 <_realloc_r+0x2a0>
   81928:	90c00417 	ldw	r3,16(r18)
   8192c:	91000604 	addi	r4,r18,24
   81930:	b9c00804 	addi	r7,r23,32
   81934:	b8c00615 	stw	r3,24(r23)
   81938:	90800517 	ldw	r2,20(r18)
   8193c:	b8800715 	stw	r2,28(r23)
   81940:	003fb906 	br	81828 <_realloc_r+0x4d8>

00081944 <_sbrk_r>:
   81944:	defffd04 	addi	sp,sp,-12
   81948:	dc000015 	stw	r16,0(sp)
   8194c:	04000274 	movhi	r16,9
   81950:	84099404 	addi	r16,r16,9808
   81954:	dc400115 	stw	r17,4(sp)
   81958:	80000015 	stw	zero,0(r16)
   8195c:	2023883a 	mov	r17,r4
   81960:	2809883a 	mov	r4,r5
   81964:	dfc00215 	stw	ra,8(sp)
   81968:	00836500 	call	83650 <sbrk>
   8196c:	1007883a 	mov	r3,r2
   81970:	00bfffc4 	movi	r2,-1
   81974:	18800626 	beq	r3,r2,81990 <_sbrk_r+0x4c>
   81978:	1805883a 	mov	r2,r3
   8197c:	dfc00217 	ldw	ra,8(sp)
   81980:	dc400117 	ldw	r17,4(sp)
   81984:	dc000017 	ldw	r16,0(sp)
   81988:	dec00304 	addi	sp,sp,12
   8198c:	f800283a 	ret
   81990:	80800017 	ldw	r2,0(r16)
   81994:	103ff826 	beq	r2,zero,81978 <_sbrk_r+0x34>
   81998:	88800015 	stw	r2,0(r17)
   8199c:	1805883a 	mov	r2,r3
   819a0:	dfc00217 	ldw	ra,8(sp)
   819a4:	dc400117 	ldw	r17,4(sp)
   819a8:	dc000017 	ldw	r16,0(sp)
   819ac:	dec00304 	addi	sp,sp,12
   819b0:	f800283a 	ret

000819b4 <__swsetup_r>:
   819b4:	00800274 	movhi	r2,9
   819b8:	1082a404 	addi	r2,r2,2704
   819bc:	10c00017 	ldw	r3,0(r2)
   819c0:	defffd04 	addi	sp,sp,-12
   819c4:	dc400115 	stw	r17,4(sp)
   819c8:	dc000015 	stw	r16,0(sp)
   819cc:	dfc00215 	stw	ra,8(sp)
   819d0:	2023883a 	mov	r17,r4
   819d4:	2821883a 	mov	r16,r5
   819d8:	18000226 	beq	r3,zero,819e4 <__swsetup_r+0x30>
   819dc:	18800e17 	ldw	r2,56(r3)
   819e0:	10001f26 	beq	r2,zero,81a60 <__swsetup_r+0xac>
   819e4:	8100030b 	ldhu	r4,12(r16)
   819e8:	2080020c 	andi	r2,r4,8
   819ec:	10002826 	beq	r2,zero,81a90 <__swsetup_r+0xdc>
   819f0:	81400417 	ldw	r5,16(r16)
   819f4:	28001d26 	beq	r5,zero,81a6c <__swsetup_r+0xb8>
   819f8:	2080004c 	andi	r2,r4,1
   819fc:	1005003a 	cmpeq	r2,r2,zero
   81a00:	10000b26 	beq	r2,zero,81a30 <__swsetup_r+0x7c>
   81a04:	2080008c 	andi	r2,r4,2
   81a08:	10001226 	beq	r2,zero,81a54 <__swsetup_r+0xa0>
   81a0c:	0005883a 	mov	r2,zero
   81a10:	80800215 	stw	r2,8(r16)
   81a14:	28000b26 	beq	r5,zero,81a44 <__swsetup_r+0x90>
   81a18:	0005883a 	mov	r2,zero
   81a1c:	dfc00217 	ldw	ra,8(sp)
   81a20:	dc400117 	ldw	r17,4(sp)
   81a24:	dc000017 	ldw	r16,0(sp)
   81a28:	dec00304 	addi	sp,sp,12
   81a2c:	f800283a 	ret
   81a30:	80800517 	ldw	r2,20(r16)
   81a34:	80000215 	stw	zero,8(r16)
   81a38:	0085c83a 	sub	r2,zero,r2
   81a3c:	80800615 	stw	r2,24(r16)
   81a40:	283ff51e 	bne	r5,zero,81a18 <__swsetup_r+0x64>
   81a44:	2080200c 	andi	r2,r4,128
   81a48:	103ff326 	beq	r2,zero,81a18 <__swsetup_r+0x64>
   81a4c:	00bfffc4 	movi	r2,-1
   81a50:	003ff206 	br	81a1c <__swsetup_r+0x68>
   81a54:	80800517 	ldw	r2,20(r16)
   81a58:	80800215 	stw	r2,8(r16)
   81a5c:	003fed06 	br	81a14 <__swsetup_r+0x60>
   81a60:	1809883a 	mov	r4,r3
   81a64:	0081d880 	call	81d88 <__sinit>
   81a68:	003fde06 	br	819e4 <__swsetup_r+0x30>
   81a6c:	20c0a00c 	andi	r3,r4,640
   81a70:	00808004 	movi	r2,512
   81a74:	18bfe026 	beq	r3,r2,819f8 <__swsetup_r+0x44>
   81a78:	8809883a 	mov	r4,r17
   81a7c:	800b883a 	mov	r5,r16
   81a80:	00825d40 	call	825d4 <__smakebuf_r>
   81a84:	8100030b 	ldhu	r4,12(r16)
   81a88:	81400417 	ldw	r5,16(r16)
   81a8c:	003fda06 	br	819f8 <__swsetup_r+0x44>
   81a90:	2080040c 	andi	r2,r4,16
   81a94:	103fed26 	beq	r2,zero,81a4c <__swsetup_r+0x98>
   81a98:	2080010c 	andi	r2,r4,4
   81a9c:	10001226 	beq	r2,zero,81ae8 <__swsetup_r+0x134>
   81aa0:	81400c17 	ldw	r5,48(r16)
   81aa4:	28000526 	beq	r5,zero,81abc <__swsetup_r+0x108>
   81aa8:	80801004 	addi	r2,r16,64
   81aac:	28800226 	beq	r5,r2,81ab8 <__swsetup_r+0x104>
   81ab0:	8809883a 	mov	r4,r17
   81ab4:	00821400 	call	82140 <_free_r>
   81ab8:	80000c15 	stw	zero,48(r16)
   81abc:	8080030b 	ldhu	r2,12(r16)
   81ac0:	81400417 	ldw	r5,16(r16)
   81ac4:	80000115 	stw	zero,4(r16)
   81ac8:	10bff6cc 	andi	r2,r2,65499
   81acc:	8080030d 	sth	r2,12(r16)
   81ad0:	81400015 	stw	r5,0(r16)
   81ad4:	8080030b 	ldhu	r2,12(r16)
   81ad8:	10800214 	ori	r2,r2,8
   81adc:	113fffcc 	andi	r4,r2,65535
   81ae0:	8080030d 	sth	r2,12(r16)
   81ae4:	003fc306 	br	819f4 <__swsetup_r+0x40>
   81ae8:	81400417 	ldw	r5,16(r16)
   81aec:	003ff906 	br	81ad4 <__swsetup_r+0x120>

00081af0 <_fflush_r>:
   81af0:	defffb04 	addi	sp,sp,-20
   81af4:	dcc00315 	stw	r19,12(sp)
   81af8:	dc800215 	stw	r18,8(sp)
   81afc:	dfc00415 	stw	ra,16(sp)
   81b00:	dc400115 	stw	r17,4(sp)
   81b04:	dc000015 	stw	r16,0(sp)
   81b08:	2027883a 	mov	r19,r4
   81b0c:	2825883a 	mov	r18,r5
   81b10:	20000226 	beq	r4,zero,81b1c <_fflush_r+0x2c>
   81b14:	20800e17 	ldw	r2,56(r4)
   81b18:	10005626 	beq	r2,zero,81c74 <_fflush_r+0x184>
   81b1c:	9100030b 	ldhu	r4,12(r18)
   81b20:	20ffffcc 	andi	r3,r4,65535
   81b24:	18e0001c 	xori	r3,r3,32768
   81b28:	18e00004 	addi	r3,r3,-32768
   81b2c:	1880020c 	andi	r2,r3,8
   81b30:	1000261e 	bne	r2,zero,81bcc <_fflush_r+0xdc>
   81b34:	90c00117 	ldw	r3,4(r18)
   81b38:	20820014 	ori	r2,r4,2048
   81b3c:	9080030d 	sth	r2,12(r18)
   81b40:	1009883a 	mov	r4,r2
   81b44:	00c0400e 	bge	zero,r3,81c48 <_fflush_r+0x158>
   81b48:	92000a17 	ldw	r8,40(r18)
   81b4c:	40004026 	beq	r8,zero,81c50 <_fflush_r+0x160>
   81b50:	2084000c 	andi	r2,r4,4096
   81b54:	10005326 	beq	r2,zero,81ca4 <_fflush_r+0x1b4>
   81b58:	94001417 	ldw	r16,80(r18)
   81b5c:	9080030b 	ldhu	r2,12(r18)
   81b60:	1080010c 	andi	r2,r2,4
   81b64:	1000481e 	bne	r2,zero,81c88 <_fflush_r+0x198>
   81b68:	91400717 	ldw	r5,28(r18)
   81b6c:	9809883a 	mov	r4,r19
   81b70:	800d883a 	mov	r6,r16
   81b74:	000f883a 	mov	r7,zero
   81b78:	403ee83a 	callr	r8
   81b7c:	8080261e 	bne	r16,r2,81c18 <_fflush_r+0x128>
   81b80:	9080030b 	ldhu	r2,12(r18)
   81b84:	91000417 	ldw	r4,16(r18)
   81b88:	90000115 	stw	zero,4(r18)
   81b8c:	10bdffcc 	andi	r2,r2,63487
   81b90:	10ffffcc 	andi	r3,r2,65535
   81b94:	18c4000c 	andi	r3,r3,4096
   81b98:	9080030d 	sth	r2,12(r18)
   81b9c:	91000015 	stw	r4,0(r18)
   81ba0:	18002b26 	beq	r3,zero,81c50 <_fflush_r+0x160>
   81ba4:	0007883a 	mov	r3,zero
   81ba8:	1805883a 	mov	r2,r3
   81bac:	94001415 	stw	r16,80(r18)
   81bb0:	dfc00417 	ldw	ra,16(sp)
   81bb4:	dcc00317 	ldw	r19,12(sp)
   81bb8:	dc800217 	ldw	r18,8(sp)
   81bbc:	dc400117 	ldw	r17,4(sp)
   81bc0:	dc000017 	ldw	r16,0(sp)
   81bc4:	dec00504 	addi	sp,sp,20
   81bc8:	f800283a 	ret
   81bcc:	94400417 	ldw	r17,16(r18)
   81bd0:	88001f26 	beq	r17,zero,81c50 <_fflush_r+0x160>
   81bd4:	90800017 	ldw	r2,0(r18)
   81bd8:	18c000cc 	andi	r3,r3,3
   81bdc:	94400015 	stw	r17,0(r18)
   81be0:	1461c83a 	sub	r16,r2,r17
   81be4:	18002526 	beq	r3,zero,81c7c <_fflush_r+0x18c>
   81be8:	0005883a 	mov	r2,zero
   81bec:	90800215 	stw	r2,8(r18)
   81bf0:	0400170e 	bge	zero,r16,81c50 <_fflush_r+0x160>
   81bf4:	90c00917 	ldw	r3,36(r18)
   81bf8:	91400717 	ldw	r5,28(r18)
   81bfc:	880d883a 	mov	r6,r17
   81c00:	800f883a 	mov	r7,r16
   81c04:	9809883a 	mov	r4,r19
   81c08:	183ee83a 	callr	r3
   81c0c:	88a3883a 	add	r17,r17,r2
   81c10:	80a1c83a 	sub	r16,r16,r2
   81c14:	00bff616 	blt	zero,r2,81bf0 <_fflush_r+0x100>
   81c18:	9080030b 	ldhu	r2,12(r18)
   81c1c:	00ffffc4 	movi	r3,-1
   81c20:	10801014 	ori	r2,r2,64
   81c24:	9080030d 	sth	r2,12(r18)
   81c28:	1805883a 	mov	r2,r3
   81c2c:	dfc00417 	ldw	ra,16(sp)
   81c30:	dcc00317 	ldw	r19,12(sp)
   81c34:	dc800217 	ldw	r18,8(sp)
   81c38:	dc400117 	ldw	r17,4(sp)
   81c3c:	dc000017 	ldw	r16,0(sp)
   81c40:	dec00504 	addi	sp,sp,20
   81c44:	f800283a 	ret
   81c48:	90800f17 	ldw	r2,60(r18)
   81c4c:	00bfbe16 	blt	zero,r2,81b48 <_fflush_r+0x58>
   81c50:	0007883a 	mov	r3,zero
   81c54:	1805883a 	mov	r2,r3
   81c58:	dfc00417 	ldw	ra,16(sp)
   81c5c:	dcc00317 	ldw	r19,12(sp)
   81c60:	dc800217 	ldw	r18,8(sp)
   81c64:	dc400117 	ldw	r17,4(sp)
   81c68:	dc000017 	ldw	r16,0(sp)
   81c6c:	dec00504 	addi	sp,sp,20
   81c70:	f800283a 	ret
   81c74:	0081d880 	call	81d88 <__sinit>
   81c78:	003fa806 	br	81b1c <_fflush_r+0x2c>
   81c7c:	90800517 	ldw	r2,20(r18)
   81c80:	90800215 	stw	r2,8(r18)
   81c84:	003fda06 	br	81bf0 <_fflush_r+0x100>
   81c88:	90800117 	ldw	r2,4(r18)
   81c8c:	90c00c17 	ldw	r3,48(r18)
   81c90:	80a1c83a 	sub	r16,r16,r2
   81c94:	183fb426 	beq	r3,zero,81b68 <_fflush_r+0x78>
   81c98:	90800f17 	ldw	r2,60(r18)
   81c9c:	80a1c83a 	sub	r16,r16,r2
   81ca0:	003fb106 	br	81b68 <_fflush_r+0x78>
   81ca4:	91400717 	ldw	r5,28(r18)
   81ca8:	9809883a 	mov	r4,r19
   81cac:	000d883a 	mov	r6,zero
   81cb0:	01c00044 	movi	r7,1
   81cb4:	403ee83a 	callr	r8
   81cb8:	1021883a 	mov	r16,r2
   81cbc:	00bfffc4 	movi	r2,-1
   81cc0:	80800226 	beq	r16,r2,81ccc <_fflush_r+0x1dc>
   81cc4:	92000a17 	ldw	r8,40(r18)
   81cc8:	003fa406 	br	81b5c <_fflush_r+0x6c>
   81ccc:	98c00017 	ldw	r3,0(r19)
   81cd0:	00800744 	movi	r2,29
   81cd4:	18bfde26 	beq	r3,r2,81c50 <_fflush_r+0x160>
   81cd8:	9080030b 	ldhu	r2,12(r18)
   81cdc:	8007883a 	mov	r3,r16
   81ce0:	10801014 	ori	r2,r2,64
   81ce4:	9080030d 	sth	r2,12(r18)
   81ce8:	003fcf06 	br	81c28 <_fflush_r+0x138>

00081cec <fflush>:
   81cec:	01400234 	movhi	r5,8
   81cf0:	2946bc04 	addi	r5,r5,6896
   81cf4:	2007883a 	mov	r3,r4
   81cf8:	20000526 	beq	r4,zero,81d10 <fflush+0x24>
   81cfc:	00800274 	movhi	r2,9
   81d00:	1082a404 	addi	r2,r2,2704
   81d04:	11000017 	ldw	r4,0(r2)
   81d08:	180b883a 	mov	r5,r3
   81d0c:	0081af01 	jmpi	81af0 <_fflush_r>
   81d10:	00800274 	movhi	r2,9
   81d14:	1082a504 	addi	r2,r2,2708
   81d18:	11000017 	ldw	r4,0(r2)
   81d1c:	00824541 	jmpi	82454 <_fwalk_reent>

00081d20 <std>:
   81d20:	00800234 	movhi	r2,8
   81d24:	108a0004 	addi	r2,r2,10240
   81d28:	20800b15 	stw	r2,44(r4)
   81d2c:	00800234 	movhi	r2,8
   81d30:	108a3b04 	addi	r2,r2,10476
   81d34:	20800815 	stw	r2,32(r4)
   81d38:	00c00234 	movhi	r3,8
   81d3c:	18ca1c04 	addi	r3,r3,10352
   81d40:	00800234 	movhi	r2,8
   81d44:	108a0204 	addi	r2,r2,10248
   81d48:	2140030d 	sth	r5,12(r4)
   81d4c:	2180038d 	sth	r6,14(r4)
   81d50:	20c00915 	stw	r3,36(r4)
   81d54:	20800a15 	stw	r2,40(r4)
   81d58:	20000015 	stw	zero,0(r4)
   81d5c:	20000115 	stw	zero,4(r4)
   81d60:	20000215 	stw	zero,8(r4)
   81d64:	20000415 	stw	zero,16(r4)
   81d68:	20000515 	stw	zero,20(r4)
   81d6c:	20000615 	stw	zero,24(r4)
   81d70:	21000715 	stw	r4,28(r4)
   81d74:	f800283a 	ret

00081d78 <__sfp_lock_acquire>:
   81d78:	f800283a 	ret

00081d7c <__sfp_lock_release>:
   81d7c:	f800283a 	ret

00081d80 <__sinit_lock_acquire>:
   81d80:	f800283a 	ret

00081d84 <__sinit_lock_release>:
   81d84:	f800283a 	ret

00081d88 <__sinit>:
   81d88:	20800e17 	ldw	r2,56(r4)
   81d8c:	defffd04 	addi	sp,sp,-12
   81d90:	dc400115 	stw	r17,4(sp)
   81d94:	dc000015 	stw	r16,0(sp)
   81d98:	dfc00215 	stw	ra,8(sp)
   81d9c:	04400044 	movi	r17,1
   81da0:	01400104 	movi	r5,4
   81da4:	000d883a 	mov	r6,zero
   81da8:	2021883a 	mov	r16,r4
   81dac:	2200bb04 	addi	r8,r4,748
   81db0:	200f883a 	mov	r7,r4
   81db4:	10000526 	beq	r2,zero,81dcc <__sinit+0x44>
   81db8:	dfc00217 	ldw	ra,8(sp)
   81dbc:	dc400117 	ldw	r17,4(sp)
   81dc0:	dc000017 	ldw	r16,0(sp)
   81dc4:	dec00304 	addi	sp,sp,12
   81dc8:	f800283a 	ret
   81dcc:	21000117 	ldw	r4,4(r4)
   81dd0:	00800234 	movhi	r2,8
   81dd4:	10879b04 	addi	r2,r2,7788
   81dd8:	00c000c4 	movi	r3,3
   81ddc:	80800f15 	stw	r2,60(r16)
   81de0:	80c0b915 	stw	r3,740(r16)
   81de4:	8200ba15 	stw	r8,744(r16)
   81de8:	84400e15 	stw	r17,56(r16)
   81dec:	8000b815 	stw	zero,736(r16)
   81df0:	0081d200 	call	81d20 <std>
   81df4:	81000217 	ldw	r4,8(r16)
   81df8:	880d883a 	mov	r6,r17
   81dfc:	800f883a 	mov	r7,r16
   81e00:	01400284 	movi	r5,10
   81e04:	0081d200 	call	81d20 <std>
   81e08:	81000317 	ldw	r4,12(r16)
   81e0c:	800f883a 	mov	r7,r16
   81e10:	01400484 	movi	r5,18
   81e14:	01800084 	movi	r6,2
   81e18:	dfc00217 	ldw	ra,8(sp)
   81e1c:	dc400117 	ldw	r17,4(sp)
   81e20:	dc000017 	ldw	r16,0(sp)
   81e24:	dec00304 	addi	sp,sp,12
   81e28:	0081d201 	jmpi	81d20 <std>

00081e2c <__fp_lock>:
   81e2c:	0005883a 	mov	r2,zero
   81e30:	f800283a 	ret

00081e34 <__fp_unlock>:
   81e34:	0005883a 	mov	r2,zero
   81e38:	f800283a 	ret

00081e3c <__fp_unlock_all>:
   81e3c:	00800274 	movhi	r2,9
   81e40:	1082a404 	addi	r2,r2,2704
   81e44:	11000017 	ldw	r4,0(r2)
   81e48:	01400234 	movhi	r5,8
   81e4c:	29478d04 	addi	r5,r5,7732
   81e50:	008251c1 	jmpi	8251c <_fwalk>

00081e54 <__fp_lock_all>:
   81e54:	00800274 	movhi	r2,9
   81e58:	1082a404 	addi	r2,r2,2704
   81e5c:	11000017 	ldw	r4,0(r2)
   81e60:	01400234 	movhi	r5,8
   81e64:	29478b04 	addi	r5,r5,7724
   81e68:	008251c1 	jmpi	8251c <_fwalk>

00081e6c <_cleanup_r>:
   81e6c:	01400234 	movhi	r5,8
   81e70:	294ad104 	addi	r5,r5,11076
   81e74:	008251c1 	jmpi	8251c <_fwalk>

00081e78 <_cleanup>:
   81e78:	00800274 	movhi	r2,9
   81e7c:	1082a504 	addi	r2,r2,2708
   81e80:	11000017 	ldw	r4,0(r2)
   81e84:	0081e6c1 	jmpi	81e6c <_cleanup_r>

00081e88 <__sfmoreglue>:
   81e88:	defffc04 	addi	sp,sp,-16
   81e8c:	dc000015 	stw	r16,0(sp)
   81e90:	2821883a 	mov	r16,r5
   81e94:	dc400115 	stw	r17,4(sp)
   81e98:	01401704 	movi	r5,92
   81e9c:	2023883a 	mov	r17,r4
   81ea0:	8009883a 	mov	r4,r16
   81ea4:	dfc00315 	stw	ra,12(sp)
   81ea8:	dcc00215 	stw	r19,8(sp)
   81eac:	0082d2c0 	call	82d2c <__mulsi3>
   81eb0:	11400304 	addi	r5,r2,12
   81eb4:	8809883a 	mov	r4,r17
   81eb8:	1027883a 	mov	r19,r2
   81ebc:	00809ac0 	call	809ac <_malloc_r>
   81ec0:	10c00304 	addi	r3,r2,12
   81ec4:	1023883a 	mov	r17,r2
   81ec8:	1809883a 	mov	r4,r3
   81ecc:	980d883a 	mov	r6,r19
   81ed0:	000b883a 	mov	r5,zero
   81ed4:	10000b26 	beq	r2,zero,81f04 <__sfmoreglue+0x7c>
   81ed8:	14000115 	stw	r16,4(r2)
   81edc:	10c00215 	stw	r3,8(r2)
   81ee0:	10000015 	stw	zero,0(r2)
   81ee4:	00827680 	call	82768 <memset>
   81ee8:	8805883a 	mov	r2,r17
   81eec:	dfc00317 	ldw	ra,12(sp)
   81ef0:	dcc00217 	ldw	r19,8(sp)
   81ef4:	dc400117 	ldw	r17,4(sp)
   81ef8:	dc000017 	ldw	r16,0(sp)
   81efc:	dec00404 	addi	sp,sp,16
   81f00:	f800283a 	ret
   81f04:	0023883a 	mov	r17,zero
   81f08:	8805883a 	mov	r2,r17
   81f0c:	dfc00317 	ldw	ra,12(sp)
   81f10:	dcc00217 	ldw	r19,8(sp)
   81f14:	dc400117 	ldw	r17,4(sp)
   81f18:	dc000017 	ldw	r16,0(sp)
   81f1c:	dec00404 	addi	sp,sp,16
   81f20:	f800283a 	ret

00081f24 <__sfp>:
   81f24:	defffd04 	addi	sp,sp,-12
   81f28:	00800274 	movhi	r2,9
   81f2c:	1082a504 	addi	r2,r2,2708
   81f30:	dc000015 	stw	r16,0(sp)
   81f34:	14000017 	ldw	r16,0(r2)
   81f38:	dc400115 	stw	r17,4(sp)
   81f3c:	dfc00215 	stw	ra,8(sp)
   81f40:	80800e17 	ldw	r2,56(r16)
   81f44:	2023883a 	mov	r17,r4
   81f48:	10002626 	beq	r2,zero,81fe4 <__sfp+0xc0>
   81f4c:	8400b804 	addi	r16,r16,736
   81f50:	80800117 	ldw	r2,4(r16)
   81f54:	81000217 	ldw	r4,8(r16)
   81f58:	10ffffc4 	addi	r3,r2,-1
   81f5c:	18000916 	blt	r3,zero,81f84 <__sfp+0x60>
   81f60:	2080030f 	ldh	r2,12(r4)
   81f64:	10000b26 	beq	r2,zero,81f94 <__sfp+0x70>
   81f68:	017fffc4 	movi	r5,-1
   81f6c:	00000206 	br	81f78 <__sfp+0x54>
   81f70:	2080030f 	ldh	r2,12(r4)
   81f74:	10000726 	beq	r2,zero,81f94 <__sfp+0x70>
   81f78:	18ffffc4 	addi	r3,r3,-1
   81f7c:	21001704 	addi	r4,r4,92
   81f80:	197ffb1e 	bne	r3,r5,81f70 <__sfp+0x4c>
   81f84:	80800017 	ldw	r2,0(r16)
   81f88:	10001926 	beq	r2,zero,81ff0 <__sfp+0xcc>
   81f8c:	1021883a 	mov	r16,r2
   81f90:	003fef06 	br	81f50 <__sfp+0x2c>
   81f94:	00bfffc4 	movi	r2,-1
   81f98:	00c00044 	movi	r3,1
   81f9c:	2080038d 	sth	r2,14(r4)
   81fa0:	20c0030d 	sth	r3,12(r4)
   81fa4:	20000015 	stw	zero,0(r4)
   81fa8:	20000215 	stw	zero,8(r4)
   81fac:	20000115 	stw	zero,4(r4)
   81fb0:	20000415 	stw	zero,16(r4)
   81fb4:	20000515 	stw	zero,20(r4)
   81fb8:	20000615 	stw	zero,24(r4)
   81fbc:	20000c15 	stw	zero,48(r4)
   81fc0:	20000d15 	stw	zero,52(r4)
   81fc4:	20001115 	stw	zero,68(r4)
   81fc8:	20001215 	stw	zero,72(r4)
   81fcc:	2005883a 	mov	r2,r4
   81fd0:	dfc00217 	ldw	ra,8(sp)
   81fd4:	dc400117 	ldw	r17,4(sp)
   81fd8:	dc000017 	ldw	r16,0(sp)
   81fdc:	dec00304 	addi	sp,sp,12
   81fe0:	f800283a 	ret
   81fe4:	8009883a 	mov	r4,r16
   81fe8:	0081d880 	call	81d88 <__sinit>
   81fec:	003fd706 	br	81f4c <__sfp+0x28>
   81ff0:	8809883a 	mov	r4,r17
   81ff4:	01400104 	movi	r5,4
   81ff8:	0081e880 	call	81e88 <__sfmoreglue>
   81ffc:	80800015 	stw	r2,0(r16)
   82000:	103fe21e 	bne	r2,zero,81f8c <__sfp+0x68>
   82004:	00800304 	movi	r2,12
   82008:	0009883a 	mov	r4,zero
   8200c:	88800015 	stw	r2,0(r17)
   82010:	003fee06 	br	81fcc <__sfp+0xa8>

00082014 <_malloc_trim_r>:
   82014:	defffb04 	addi	sp,sp,-20
   82018:	dcc00315 	stw	r19,12(sp)
   8201c:	04c00274 	movhi	r19,9
   82020:	9cfd1104 	addi	r19,r19,-3004
   82024:	dc800215 	stw	r18,8(sp)
   82028:	dc400115 	stw	r17,4(sp)
   8202c:	dc000015 	stw	r16,0(sp)
   82030:	2823883a 	mov	r17,r5
   82034:	2025883a 	mov	r18,r4
   82038:	dfc00415 	stw	ra,16(sp)
   8203c:	00839980 	call	83998 <__malloc_lock>
   82040:	98800217 	ldw	r2,8(r19)
   82044:	9009883a 	mov	r4,r18
   82048:	000b883a 	mov	r5,zero
   8204c:	10c00117 	ldw	r3,4(r2)
   82050:	00bfff04 	movi	r2,-4
   82054:	18a0703a 	and	r16,r3,r2
   82058:	8463c83a 	sub	r17,r16,r17
   8205c:	8c43fbc4 	addi	r17,r17,4079
   82060:	8822d33a 	srli	r17,r17,12
   82064:	0083ffc4 	movi	r2,4095
   82068:	8c7fffc4 	addi	r17,r17,-1
   8206c:	8822933a 	slli	r17,r17,12
   82070:	1440060e 	bge	r2,r17,8208c <_malloc_trim_r+0x78>
   82074:	00819440 	call	81944 <_sbrk_r>
   82078:	98c00217 	ldw	r3,8(r19)
   8207c:	9009883a 	mov	r4,r18
   82080:	044bc83a 	sub	r5,zero,r17
   82084:	80c7883a 	add	r3,r16,r3
   82088:	10c00926 	beq	r2,r3,820b0 <_malloc_trim_r+0x9c>
   8208c:	0083aa00 	call	83aa0 <__malloc_unlock>
   82090:	0005883a 	mov	r2,zero
   82094:	dfc00417 	ldw	ra,16(sp)
   82098:	dcc00317 	ldw	r19,12(sp)
   8209c:	dc800217 	ldw	r18,8(sp)
   820a0:	dc400117 	ldw	r17,4(sp)
   820a4:	dc000017 	ldw	r16,0(sp)
   820a8:	dec00504 	addi	sp,sp,20
   820ac:	f800283a 	ret
   820b0:	9009883a 	mov	r4,r18
   820b4:	00819440 	call	81944 <_sbrk_r>
   820b8:	844dc83a 	sub	r6,r16,r17
   820bc:	00ffffc4 	movi	r3,-1
   820c0:	9009883a 	mov	r4,r18
   820c4:	000b883a 	mov	r5,zero
   820c8:	01c00274 	movhi	r7,9
   820cc:	39c9b404 	addi	r7,r7,9936
   820d0:	31800054 	ori	r6,r6,1
   820d4:	10c00926 	beq	r2,r3,820fc <_malloc_trim_r+0xe8>
   820d8:	38800017 	ldw	r2,0(r7)
   820dc:	98c00217 	ldw	r3,8(r19)
   820e0:	9009883a 	mov	r4,r18
   820e4:	1445c83a 	sub	r2,r2,r17
   820e8:	38800015 	stw	r2,0(r7)
   820ec:	19800115 	stw	r6,4(r3)
   820f0:	0083aa00 	call	83aa0 <__malloc_unlock>
   820f4:	00800044 	movi	r2,1
   820f8:	003fe606 	br	82094 <_malloc_trim_r+0x80>
   820fc:	00819440 	call	81944 <_sbrk_r>
   82100:	99800217 	ldw	r6,8(r19)
   82104:	100f883a 	mov	r7,r2
   82108:	9009883a 	mov	r4,r18
   8210c:	1187c83a 	sub	r3,r2,r6
   82110:	008003c4 	movi	r2,15
   82114:	19400054 	ori	r5,r3,1
   82118:	10ffdc0e 	bge	r2,r3,8208c <_malloc_trim_r+0x78>
   8211c:	00800274 	movhi	r2,9
   82120:	1082a704 	addi	r2,r2,2716
   82124:	10c00017 	ldw	r3,0(r2)
   82128:	00800274 	movhi	r2,9
   8212c:	1089b404 	addi	r2,r2,9936
   82130:	31400115 	stw	r5,4(r6)
   82134:	38c7c83a 	sub	r3,r7,r3
   82138:	10c00015 	stw	r3,0(r2)
   8213c:	003fd306 	br	8208c <_malloc_trim_r+0x78>

00082140 <_free_r>:
   82140:	defffd04 	addi	sp,sp,-12
   82144:	dc400115 	stw	r17,4(sp)
   82148:	dc000015 	stw	r16,0(sp)
   8214c:	dfc00215 	stw	ra,8(sp)
   82150:	2821883a 	mov	r16,r5
   82154:	2023883a 	mov	r17,r4
   82158:	28005a26 	beq	r5,zero,822c4 <_free_r+0x184>
   8215c:	00839980 	call	83998 <__malloc_lock>
   82160:	823ffe04 	addi	r8,r16,-8
   82164:	41400117 	ldw	r5,4(r8)
   82168:	00bfff84 	movi	r2,-2
   8216c:	02800274 	movhi	r10,9
   82170:	52bd1104 	addi	r10,r10,-3004
   82174:	288e703a 	and	r7,r5,r2
   82178:	41cd883a 	add	r6,r8,r7
   8217c:	30c00117 	ldw	r3,4(r6)
   82180:	51000217 	ldw	r4,8(r10)
   82184:	00bfff04 	movi	r2,-4
   82188:	1892703a 	and	r9,r3,r2
   8218c:	5017883a 	mov	r11,r10
   82190:	31006726 	beq	r6,r4,82330 <_free_r+0x1f0>
   82194:	2880004c 	andi	r2,r5,1
   82198:	1005003a 	cmpeq	r2,r2,zero
   8219c:	32400115 	stw	r9,4(r6)
   821a0:	10001a1e 	bne	r2,zero,8220c <_free_r+0xcc>
   821a4:	000b883a 	mov	r5,zero
   821a8:	3247883a 	add	r3,r6,r9
   821ac:	18800117 	ldw	r2,4(r3)
   821b0:	1080004c 	andi	r2,r2,1
   821b4:	1000231e 	bne	r2,zero,82244 <_free_r+0x104>
   821b8:	280ac03a 	cmpne	r5,r5,zero
   821bc:	3a4f883a 	add	r7,r7,r9
   821c0:	2800451e 	bne	r5,zero,822d8 <_free_r+0x198>
   821c4:	31000217 	ldw	r4,8(r6)
   821c8:	00800274 	movhi	r2,9
   821cc:	10bd1304 	addi	r2,r2,-2996
   821d0:	20807b26 	beq	r4,r2,823c0 <_free_r+0x280>
   821d4:	30800317 	ldw	r2,12(r6)
   821d8:	3a07883a 	add	r3,r7,r8
   821dc:	19c00015 	stw	r7,0(r3)
   821e0:	11000215 	stw	r4,8(r2)
   821e4:	20800315 	stw	r2,12(r4)
   821e8:	38800054 	ori	r2,r7,1
   821ec:	40800115 	stw	r2,4(r8)
   821f0:	28001a26 	beq	r5,zero,8225c <_free_r+0x11c>
   821f4:	8809883a 	mov	r4,r17
   821f8:	dfc00217 	ldw	ra,8(sp)
   821fc:	dc400117 	ldw	r17,4(sp)
   82200:	dc000017 	ldw	r16,0(sp)
   82204:	dec00304 	addi	sp,sp,12
   82208:	0083aa01 	jmpi	83aa0 <__malloc_unlock>
   8220c:	80bffe17 	ldw	r2,-8(r16)
   82210:	50c00204 	addi	r3,r10,8
   82214:	4091c83a 	sub	r8,r8,r2
   82218:	41000217 	ldw	r4,8(r8)
   8221c:	388f883a 	add	r7,r7,r2
   82220:	20c06126 	beq	r4,r3,823a8 <_free_r+0x268>
   82224:	40800317 	ldw	r2,12(r8)
   82228:	3247883a 	add	r3,r6,r9
   8222c:	000b883a 	mov	r5,zero
   82230:	11000215 	stw	r4,8(r2)
   82234:	20800315 	stw	r2,12(r4)
   82238:	18800117 	ldw	r2,4(r3)
   8223c:	1080004c 	andi	r2,r2,1
   82240:	103fdd26 	beq	r2,zero,821b8 <_free_r+0x78>
   82244:	38800054 	ori	r2,r7,1
   82248:	3a07883a 	add	r3,r7,r8
   8224c:	280ac03a 	cmpne	r5,r5,zero
   82250:	40800115 	stw	r2,4(r8)
   82254:	19c00015 	stw	r7,0(r3)
   82258:	283fe61e 	bne	r5,zero,821f4 <_free_r+0xb4>
   8225c:	00807fc4 	movi	r2,511
   82260:	11c01f2e 	bgeu	r2,r7,822e0 <_free_r+0x1a0>
   82264:	3806d27a 	srli	r3,r7,9
   82268:	1800481e 	bne	r3,zero,8238c <_free_r+0x24c>
   8226c:	3804d0fa 	srli	r2,r7,3
   82270:	100690fa 	slli	r3,r2,3
   82274:	1acd883a 	add	r6,r3,r11
   82278:	31400217 	ldw	r5,8(r6)
   8227c:	31405926 	beq	r6,r5,823e4 <_free_r+0x2a4>
   82280:	28800117 	ldw	r2,4(r5)
   82284:	00ffff04 	movi	r3,-4
   82288:	10c4703a 	and	r2,r2,r3
   8228c:	3880022e 	bgeu	r7,r2,82298 <_free_r+0x158>
   82290:	29400217 	ldw	r5,8(r5)
   82294:	317ffa1e 	bne	r6,r5,82280 <_free_r+0x140>
   82298:	29800317 	ldw	r6,12(r5)
   8229c:	41800315 	stw	r6,12(r8)
   822a0:	41400215 	stw	r5,8(r8)
   822a4:	8809883a 	mov	r4,r17
   822a8:	2a000315 	stw	r8,12(r5)
   822ac:	32000215 	stw	r8,8(r6)
   822b0:	dfc00217 	ldw	ra,8(sp)
   822b4:	dc400117 	ldw	r17,4(sp)
   822b8:	dc000017 	ldw	r16,0(sp)
   822bc:	dec00304 	addi	sp,sp,12
   822c0:	0083aa01 	jmpi	83aa0 <__malloc_unlock>
   822c4:	dfc00217 	ldw	ra,8(sp)
   822c8:	dc400117 	ldw	r17,4(sp)
   822cc:	dc000017 	ldw	r16,0(sp)
   822d0:	dec00304 	addi	sp,sp,12
   822d4:	f800283a 	ret
   822d8:	31000217 	ldw	r4,8(r6)
   822dc:	003fbd06 	br	821d4 <_free_r+0x94>
   822e0:	3806d0fa 	srli	r3,r7,3
   822e4:	00800044 	movi	r2,1
   822e8:	51400117 	ldw	r5,4(r10)
   822ec:	180890fa 	slli	r4,r3,3
   822f0:	1807d0ba 	srai	r3,r3,2
   822f4:	22c9883a 	add	r4,r4,r11
   822f8:	21800217 	ldw	r6,8(r4)
   822fc:	10c4983a 	sll	r2,r2,r3
   82300:	41000315 	stw	r4,12(r8)
   82304:	41800215 	stw	r6,8(r8)
   82308:	288ab03a 	or	r5,r5,r2
   8230c:	22000215 	stw	r8,8(r4)
   82310:	8809883a 	mov	r4,r17
   82314:	51400115 	stw	r5,4(r10)
   82318:	32000315 	stw	r8,12(r6)
   8231c:	dfc00217 	ldw	ra,8(sp)
   82320:	dc400117 	ldw	r17,4(sp)
   82324:	dc000017 	ldw	r16,0(sp)
   82328:	dec00304 	addi	sp,sp,12
   8232c:	0083aa01 	jmpi	83aa0 <__malloc_unlock>
   82330:	2880004c 	andi	r2,r5,1
   82334:	3a4d883a 	add	r6,r7,r9
   82338:	1000071e 	bne	r2,zero,82358 <_free_r+0x218>
   8233c:	80bffe17 	ldw	r2,-8(r16)
   82340:	4091c83a 	sub	r8,r8,r2
   82344:	41000317 	ldw	r4,12(r8)
   82348:	40c00217 	ldw	r3,8(r8)
   8234c:	308d883a 	add	r6,r6,r2
   82350:	20c00215 	stw	r3,8(r4)
   82354:	19000315 	stw	r4,12(r3)
   82358:	00800274 	movhi	r2,9
   8235c:	1082a604 	addi	r2,r2,2712
   82360:	11000017 	ldw	r4,0(r2)
   82364:	30c00054 	ori	r3,r6,1
   82368:	52000215 	stw	r8,8(r10)
   8236c:	40c00115 	stw	r3,4(r8)
   82370:	313fa036 	bltu	r6,r4,821f4 <_free_r+0xb4>
   82374:	00800274 	movhi	r2,9
   82378:	10899104 	addi	r2,r2,9796
   8237c:	11400017 	ldw	r5,0(r2)
   82380:	8809883a 	mov	r4,r17
   82384:	00820140 	call	82014 <_malloc_trim_r>
   82388:	003f9a06 	br	821f4 <_free_r+0xb4>
   8238c:	00800104 	movi	r2,4
   82390:	10c0072e 	bgeu	r2,r3,823b0 <_free_r+0x270>
   82394:	00800504 	movi	r2,20
   82398:	10c01936 	bltu	r2,r3,82400 <_free_r+0x2c0>
   8239c:	188016c4 	addi	r2,r3,91
   823a0:	100690fa 	slli	r3,r2,3
   823a4:	003fb306 	br	82274 <_free_r+0x134>
   823a8:	01400044 	movi	r5,1
   823ac:	003f7e06 	br	821a8 <_free_r+0x68>
   823b0:	3804d1ba 	srli	r2,r7,6
   823b4:	10800e04 	addi	r2,r2,56
   823b8:	100690fa 	slli	r3,r2,3
   823bc:	003fad06 	br	82274 <_free_r+0x134>
   823c0:	22000315 	stw	r8,12(r4)
   823c4:	22000215 	stw	r8,8(r4)
   823c8:	3a05883a 	add	r2,r7,r8
   823cc:	38c00054 	ori	r3,r7,1
   823d0:	11c00015 	stw	r7,0(r2)
   823d4:	41000215 	stw	r4,8(r8)
   823d8:	40c00115 	stw	r3,4(r8)
   823dc:	41000315 	stw	r4,12(r8)
   823e0:	003f8406 	br	821f4 <_free_r+0xb4>
   823e4:	1005d0ba 	srai	r2,r2,2
   823e8:	00c00044 	movi	r3,1
   823ec:	51000117 	ldw	r4,4(r10)
   823f0:	1886983a 	sll	r3,r3,r2
   823f4:	20c8b03a 	or	r4,r4,r3
   823f8:	51000115 	stw	r4,4(r10)
   823fc:	003fa706 	br	8229c <_free_r+0x15c>
   82400:	00801504 	movi	r2,84
   82404:	10c00436 	bltu	r2,r3,82418 <_free_r+0x2d8>
   82408:	3804d33a 	srli	r2,r7,12
   8240c:	10801b84 	addi	r2,r2,110
   82410:	100690fa 	slli	r3,r2,3
   82414:	003f9706 	br	82274 <_free_r+0x134>
   82418:	00805504 	movi	r2,340
   8241c:	10c00436 	bltu	r2,r3,82430 <_free_r+0x2f0>
   82420:	3804d3fa 	srli	r2,r7,15
   82424:	10801dc4 	addi	r2,r2,119
   82428:	100690fa 	slli	r3,r2,3
   8242c:	003f9106 	br	82274 <_free_r+0x134>
   82430:	00815504 	movi	r2,1364
   82434:	10c0032e 	bgeu	r2,r3,82444 <_free_r+0x304>
   82438:	00801f84 	movi	r2,126
   8243c:	00c0fc04 	movi	r3,1008
   82440:	003f8c06 	br	82274 <_free_r+0x134>
   82444:	3804d4ba 	srli	r2,r7,18
   82448:	10801f04 	addi	r2,r2,124
   8244c:	100690fa 	slli	r3,r2,3
   82450:	003f8806 	br	82274 <_free_r+0x134>

00082454 <_fwalk_reent>:
   82454:	defff704 	addi	sp,sp,-36
   82458:	dcc00315 	stw	r19,12(sp)
   8245c:	24c0b804 	addi	r19,r4,736
   82460:	dd800615 	stw	r22,24(sp)
   82464:	dd400515 	stw	r21,20(sp)
   82468:	dfc00815 	stw	ra,32(sp)
   8246c:	ddc00715 	stw	r23,28(sp)
   82470:	dd000415 	stw	r20,16(sp)
   82474:	dc800215 	stw	r18,8(sp)
   82478:	dc400115 	stw	r17,4(sp)
   8247c:	dc000015 	stw	r16,0(sp)
   82480:	202b883a 	mov	r21,r4
   82484:	282d883a 	mov	r22,r5
   82488:	0081d780 	call	81d78 <__sfp_lock_acquire>
   8248c:	98002126 	beq	r19,zero,82514 <_fwalk_reent+0xc0>
   82490:	002f883a 	mov	r23,zero
   82494:	9c800117 	ldw	r18,4(r19)
   82498:	9c000217 	ldw	r16,8(r19)
   8249c:	90bfffc4 	addi	r2,r18,-1
   824a0:	10000d16 	blt	r2,zero,824d8 <_fwalk_reent+0x84>
   824a4:	0023883a 	mov	r17,zero
   824a8:	053fffc4 	movi	r20,-1
   824ac:	8080030f 	ldh	r2,12(r16)
   824b0:	8c400044 	addi	r17,r17,1
   824b4:	10000626 	beq	r2,zero,824d0 <_fwalk_reent+0x7c>
   824b8:	8080038f 	ldh	r2,14(r16)
   824bc:	800b883a 	mov	r5,r16
   824c0:	a809883a 	mov	r4,r21
   824c4:	15000226 	beq	r2,r20,824d0 <_fwalk_reent+0x7c>
   824c8:	b03ee83a 	callr	r22
   824cc:	b8aeb03a 	or	r23,r23,r2
   824d0:	84001704 	addi	r16,r16,92
   824d4:	947ff51e 	bne	r18,r17,824ac <_fwalk_reent+0x58>
   824d8:	9cc00017 	ldw	r19,0(r19)
   824dc:	983fed1e 	bne	r19,zero,82494 <_fwalk_reent+0x40>
   824e0:	0081d7c0 	call	81d7c <__sfp_lock_release>
   824e4:	b805883a 	mov	r2,r23
   824e8:	dfc00817 	ldw	ra,32(sp)
   824ec:	ddc00717 	ldw	r23,28(sp)
   824f0:	dd800617 	ldw	r22,24(sp)
   824f4:	dd400517 	ldw	r21,20(sp)
   824f8:	dd000417 	ldw	r20,16(sp)
   824fc:	dcc00317 	ldw	r19,12(sp)
   82500:	dc800217 	ldw	r18,8(sp)
   82504:	dc400117 	ldw	r17,4(sp)
   82508:	dc000017 	ldw	r16,0(sp)
   8250c:	dec00904 	addi	sp,sp,36
   82510:	f800283a 	ret
   82514:	002f883a 	mov	r23,zero
   82518:	003ff106 	br	824e0 <_fwalk_reent+0x8c>

0008251c <_fwalk>:
   8251c:	defff804 	addi	sp,sp,-32
   82520:	dcc00315 	stw	r19,12(sp)
   82524:	24c0b804 	addi	r19,r4,736
   82528:	dd400515 	stw	r21,20(sp)
   8252c:	dfc00715 	stw	ra,28(sp)
   82530:	dd800615 	stw	r22,24(sp)
   82534:	dd000415 	stw	r20,16(sp)
   82538:	dc800215 	stw	r18,8(sp)
   8253c:	dc400115 	stw	r17,4(sp)
   82540:	dc000015 	stw	r16,0(sp)
   82544:	282b883a 	mov	r21,r5
   82548:	0081d780 	call	81d78 <__sfp_lock_acquire>
   8254c:	98001f26 	beq	r19,zero,825cc <_fwalk+0xb0>
   82550:	002d883a 	mov	r22,zero
   82554:	9c800117 	ldw	r18,4(r19)
   82558:	9c000217 	ldw	r16,8(r19)
   8255c:	90bfffc4 	addi	r2,r18,-1
   82560:	10000c16 	blt	r2,zero,82594 <_fwalk+0x78>
   82564:	0023883a 	mov	r17,zero
   82568:	053fffc4 	movi	r20,-1
   8256c:	8080030f 	ldh	r2,12(r16)
   82570:	8c400044 	addi	r17,r17,1
   82574:	10000526 	beq	r2,zero,8258c <_fwalk+0x70>
   82578:	8080038f 	ldh	r2,14(r16)
   8257c:	8009883a 	mov	r4,r16
   82580:	15000226 	beq	r2,r20,8258c <_fwalk+0x70>
   82584:	a83ee83a 	callr	r21
   82588:	b0acb03a 	or	r22,r22,r2
   8258c:	84001704 	addi	r16,r16,92
   82590:	947ff61e 	bne	r18,r17,8256c <_fwalk+0x50>
   82594:	9cc00017 	ldw	r19,0(r19)
   82598:	983fee1e 	bne	r19,zero,82554 <_fwalk+0x38>
   8259c:	0081d7c0 	call	81d7c <__sfp_lock_release>
   825a0:	b005883a 	mov	r2,r22
   825a4:	dfc00717 	ldw	ra,28(sp)
   825a8:	dd800617 	ldw	r22,24(sp)
   825ac:	dd400517 	ldw	r21,20(sp)
   825b0:	dd000417 	ldw	r20,16(sp)
   825b4:	dcc00317 	ldw	r19,12(sp)
   825b8:	dc800217 	ldw	r18,8(sp)
   825bc:	dc400117 	ldw	r17,4(sp)
   825c0:	dc000017 	ldw	r16,0(sp)
   825c4:	dec00804 	addi	sp,sp,32
   825c8:	f800283a 	ret
   825cc:	002d883a 	mov	r22,zero
   825d0:	003ff206 	br	8259c <_fwalk+0x80>

000825d4 <__smakebuf_r>:
   825d4:	2880030b 	ldhu	r2,12(r5)
   825d8:	deffed04 	addi	sp,sp,-76
   825dc:	dc401015 	stw	r17,64(sp)
   825e0:	1080008c 	andi	r2,r2,2
   825e4:	dc000f15 	stw	r16,60(sp)
   825e8:	dfc01215 	stw	ra,72(sp)
   825ec:	dc801115 	stw	r18,68(sp)
   825f0:	2821883a 	mov	r16,r5
   825f4:	2023883a 	mov	r17,r4
   825f8:	10000b26 	beq	r2,zero,82628 <__smakebuf_r+0x54>
   825fc:	28c010c4 	addi	r3,r5,67
   82600:	00800044 	movi	r2,1
   82604:	28800515 	stw	r2,20(r5)
   82608:	28c00415 	stw	r3,16(r5)
   8260c:	28c00015 	stw	r3,0(r5)
   82610:	dfc01217 	ldw	ra,72(sp)
   82614:	dc801117 	ldw	r18,68(sp)
   82618:	dc401017 	ldw	r17,64(sp)
   8261c:	dc000f17 	ldw	r16,60(sp)
   82620:	dec01304 	addi	sp,sp,76
   82624:	f800283a 	ret
   82628:	2940038f 	ldh	r5,14(r5)
   8262c:	28002116 	blt	r5,zero,826b4 <__smakebuf_r+0xe0>
   82630:	d80d883a 	mov	r6,sp
   82634:	0082b580 	call	82b58 <_fstat_r>
   82638:	10001e16 	blt	r2,zero,826b4 <__smakebuf_r+0xe0>
   8263c:	d8800117 	ldw	r2,4(sp)
   82640:	00e00014 	movui	r3,32768
   82644:	113c000c 	andi	r4,r2,61440
   82648:	20c03126 	beq	r4,r3,82710 <__smakebuf_r+0x13c>
   8264c:	8080030b 	ldhu	r2,12(r16)
   82650:	00c80004 	movi	r3,8192
   82654:	10820014 	ori	r2,r2,2048
   82658:	8080030d 	sth	r2,12(r16)
   8265c:	20c01e26 	beq	r4,r3,826d8 <__smakebuf_r+0x104>
   82660:	04810004 	movi	r18,1024
   82664:	8809883a 	mov	r4,r17
   82668:	900b883a 	mov	r5,r18
   8266c:	00809ac0 	call	809ac <_malloc_r>
   82670:	1009883a 	mov	r4,r2
   82674:	10003126 	beq	r2,zero,8273c <__smakebuf_r+0x168>
   82678:	80c0030b 	ldhu	r3,12(r16)
   8267c:	00800234 	movhi	r2,8
   82680:	10879b04 	addi	r2,r2,7788
   82684:	88800f15 	stw	r2,60(r17)
   82688:	18c02014 	ori	r3,r3,128
   8268c:	84800515 	stw	r18,20(r16)
   82690:	80c0030d 	sth	r3,12(r16)
   82694:	81000415 	stw	r4,16(r16)
   82698:	81000015 	stw	r4,0(r16)
   8269c:	dfc01217 	ldw	ra,72(sp)
   826a0:	dc801117 	ldw	r18,68(sp)
   826a4:	dc401017 	ldw	r17,64(sp)
   826a8:	dc000f17 	ldw	r16,60(sp)
   826ac:	dec01304 	addi	sp,sp,76
   826b0:	f800283a 	ret
   826b4:	80c0030b 	ldhu	r3,12(r16)
   826b8:	1880200c 	andi	r2,r3,128
   826bc:	10000426 	beq	r2,zero,826d0 <__smakebuf_r+0xfc>
   826c0:	04801004 	movi	r18,64
   826c4:	18820014 	ori	r2,r3,2048
   826c8:	8080030d 	sth	r2,12(r16)
   826cc:	003fe506 	br	82664 <__smakebuf_r+0x90>
   826d0:	04810004 	movi	r18,1024
   826d4:	003ffb06 	br	826c4 <__smakebuf_r+0xf0>
   826d8:	8140038f 	ldh	r5,14(r16)
   826dc:	8809883a 	mov	r4,r17
   826e0:	0082bcc0 	call	82bcc <_isatty_r>
   826e4:	103fde26 	beq	r2,zero,82660 <__smakebuf_r+0x8c>
   826e8:	8080030b 	ldhu	r2,12(r16)
   826ec:	80c010c4 	addi	r3,r16,67
   826f0:	04810004 	movi	r18,1024
   826f4:	10800054 	ori	r2,r2,1
   826f8:	8080030d 	sth	r2,12(r16)
   826fc:	00800044 	movi	r2,1
   82700:	80c00415 	stw	r3,16(r16)
   82704:	80800515 	stw	r2,20(r16)
   82708:	80c00015 	stw	r3,0(r16)
   8270c:	003fd506 	br	82664 <__smakebuf_r+0x90>
   82710:	80c00a17 	ldw	r3,40(r16)
   82714:	00800234 	movhi	r2,8
   82718:	108a0204 	addi	r2,r2,10248
   8271c:	18bfcb1e 	bne	r3,r2,8264c <__smakebuf_r+0x78>
   82720:	8080030b 	ldhu	r2,12(r16)
   82724:	00c10004 	movi	r3,1024
   82728:	1825883a 	mov	r18,r3
   8272c:	10c4b03a 	or	r2,r2,r3
   82730:	8080030d 	sth	r2,12(r16)
   82734:	80c01315 	stw	r3,76(r16)
   82738:	003fca06 	br	82664 <__smakebuf_r+0x90>
   8273c:	8100030b 	ldhu	r4,12(r16)
   82740:	2080800c 	andi	r2,r4,512
   82744:	103fb21e 	bne	r2,zero,82610 <__smakebuf_r+0x3c>
   82748:	80c010c4 	addi	r3,r16,67
   8274c:	21000094 	ori	r4,r4,2
   82750:	00800044 	movi	r2,1
   82754:	80800515 	stw	r2,20(r16)
   82758:	8100030d 	sth	r4,12(r16)
   8275c:	80c00415 	stw	r3,16(r16)
   82760:	80c00015 	stw	r3,0(r16)
   82764:	003faa06 	br	82610 <__smakebuf_r+0x3c>

00082768 <memset>:
   82768:	008000c4 	movi	r2,3
   8276c:	29403fcc 	andi	r5,r5,255
   82770:	2007883a 	mov	r3,r4
   82774:	1180022e 	bgeu	r2,r6,82780 <memset+0x18>
   82778:	2084703a 	and	r2,r4,r2
   8277c:	10000826 	beq	r2,zero,827a0 <memset+0x38>
   82780:	30000526 	beq	r6,zero,82798 <memset+0x30>
   82784:	2805883a 	mov	r2,r5
   82788:	30cd883a 	add	r6,r6,r3
   8278c:	18800005 	stb	r2,0(r3)
   82790:	18c00044 	addi	r3,r3,1
   82794:	19bffd1e 	bne	r3,r6,8278c <memset+0x24>
   82798:	2005883a 	mov	r2,r4
   8279c:	f800283a 	ret
   827a0:	2804923a 	slli	r2,r5,8
   827a4:	020003c4 	movi	r8,15
   827a8:	200f883a 	mov	r7,r4
   827ac:	2884b03a 	or	r2,r5,r2
   827b0:	1006943a 	slli	r3,r2,16
   827b4:	10c6b03a 	or	r3,r2,r3
   827b8:	41800a2e 	bgeu	r8,r6,827e4 <memset+0x7c>
   827bc:	4005883a 	mov	r2,r8
   827c0:	31bffc04 	addi	r6,r6,-16
   827c4:	38c00015 	stw	r3,0(r7)
   827c8:	38c00115 	stw	r3,4(r7)
   827cc:	38c00215 	stw	r3,8(r7)
   827d0:	38c00315 	stw	r3,12(r7)
   827d4:	39c00404 	addi	r7,r7,16
   827d8:	11bff936 	bltu	r2,r6,827c0 <memset+0x58>
   827dc:	008000c4 	movi	r2,3
   827e0:	1180052e 	bgeu	r2,r6,827f8 <memset+0x90>
   827e4:	31bfff04 	addi	r6,r6,-4
   827e8:	008000c4 	movi	r2,3
   827ec:	38c00015 	stw	r3,0(r7)
   827f0:	39c00104 	addi	r7,r7,4
   827f4:	11bffb36 	bltu	r2,r6,827e4 <memset+0x7c>
   827f8:	3807883a 	mov	r3,r7
   827fc:	003fe006 	br	82780 <memset+0x18>

00082800 <__sclose>:
   82800:	2940038f 	ldh	r5,14(r5)
   82804:	00829c41 	jmpi	829c4 <_close_r>

00082808 <__sseek>:
   82808:	defffe04 	addi	sp,sp,-8
   8280c:	dc000015 	stw	r16,0(sp)
   82810:	2821883a 	mov	r16,r5
   82814:	2940038f 	ldh	r5,14(r5)
   82818:	dfc00115 	stw	ra,4(sp)
   8281c:	0082c3c0 	call	82c3c <_lseek_r>
   82820:	1007883a 	mov	r3,r2
   82824:	00bfffc4 	movi	r2,-1
   82828:	18800926 	beq	r3,r2,82850 <__sseek+0x48>
   8282c:	8080030b 	ldhu	r2,12(r16)
   82830:	80c01415 	stw	r3,80(r16)
   82834:	10840014 	ori	r2,r2,4096
   82838:	8080030d 	sth	r2,12(r16)
   8283c:	1805883a 	mov	r2,r3
   82840:	dfc00117 	ldw	ra,4(sp)
   82844:	dc000017 	ldw	r16,0(sp)
   82848:	dec00204 	addi	sp,sp,8
   8284c:	f800283a 	ret
   82850:	8080030b 	ldhu	r2,12(r16)
   82854:	10bbffcc 	andi	r2,r2,61439
   82858:	8080030d 	sth	r2,12(r16)
   8285c:	1805883a 	mov	r2,r3
   82860:	dfc00117 	ldw	ra,4(sp)
   82864:	dc000017 	ldw	r16,0(sp)
   82868:	dec00204 	addi	sp,sp,8
   8286c:	f800283a 	ret

00082870 <__swrite>:
   82870:	2880030b 	ldhu	r2,12(r5)
   82874:	defffb04 	addi	sp,sp,-20
   82878:	dcc00315 	stw	r19,12(sp)
   8287c:	1080400c 	andi	r2,r2,256
   82880:	dc800215 	stw	r18,8(sp)
   82884:	dc400115 	stw	r17,4(sp)
   82888:	dc000015 	stw	r16,0(sp)
   8288c:	3027883a 	mov	r19,r6
   82890:	3825883a 	mov	r18,r7
   82894:	dfc00415 	stw	ra,16(sp)
   82898:	2821883a 	mov	r16,r5
   8289c:	000d883a 	mov	r6,zero
   828a0:	01c00084 	movi	r7,2
   828a4:	2023883a 	mov	r17,r4
   828a8:	10000226 	beq	r2,zero,828b4 <__swrite+0x44>
   828ac:	2940038f 	ldh	r5,14(r5)
   828b0:	0082c3c0 	call	82c3c <_lseek_r>
   828b4:	8080030b 	ldhu	r2,12(r16)
   828b8:	8140038f 	ldh	r5,14(r16)
   828bc:	8809883a 	mov	r4,r17
   828c0:	10bbffcc 	andi	r2,r2,61439
   828c4:	980d883a 	mov	r6,r19
   828c8:	900f883a 	mov	r7,r18
   828cc:	8080030d 	sth	r2,12(r16)
   828d0:	dfc00417 	ldw	ra,16(sp)
   828d4:	dcc00317 	ldw	r19,12(sp)
   828d8:	dc800217 	ldw	r18,8(sp)
   828dc:	dc400117 	ldw	r17,4(sp)
   828e0:	dc000017 	ldw	r16,0(sp)
   828e4:	dec00504 	addi	sp,sp,20
   828e8:	008294c1 	jmpi	8294c <_write_r>

000828ec <__sread>:
   828ec:	defffe04 	addi	sp,sp,-8
   828f0:	dc000015 	stw	r16,0(sp)
   828f4:	2821883a 	mov	r16,r5
   828f8:	2940038f 	ldh	r5,14(r5)
   828fc:	dfc00115 	stw	ra,4(sp)
   82900:	0082cb40 	call	82cb4 <_read_r>
   82904:	1007883a 	mov	r3,r2
   82908:	10000816 	blt	r2,zero,8292c <__sread+0x40>
   8290c:	80801417 	ldw	r2,80(r16)
   82910:	10c5883a 	add	r2,r2,r3
   82914:	80801415 	stw	r2,80(r16)
   82918:	1805883a 	mov	r2,r3
   8291c:	dfc00117 	ldw	ra,4(sp)
   82920:	dc000017 	ldw	r16,0(sp)
   82924:	dec00204 	addi	sp,sp,8
   82928:	f800283a 	ret
   8292c:	8080030b 	ldhu	r2,12(r16)
   82930:	10bbffcc 	andi	r2,r2,61439
   82934:	8080030d 	sth	r2,12(r16)
   82938:	1805883a 	mov	r2,r3
   8293c:	dfc00117 	ldw	ra,4(sp)
   82940:	dc000017 	ldw	r16,0(sp)
   82944:	dec00204 	addi	sp,sp,8
   82948:	f800283a 	ret

0008294c <_write_r>:
   8294c:	defffd04 	addi	sp,sp,-12
   82950:	dc000015 	stw	r16,0(sp)
   82954:	04000274 	movhi	r16,9
   82958:	84099404 	addi	r16,r16,9808
   8295c:	dc400115 	stw	r17,4(sp)
   82960:	80000015 	stw	zero,0(r16)
   82964:	2023883a 	mov	r17,r4
   82968:	2809883a 	mov	r4,r5
   8296c:	300b883a 	mov	r5,r6
   82970:	380d883a 	mov	r6,r7
   82974:	dfc00215 	stw	ra,8(sp)
   82978:	008370c0 	call	8370c <write>
   8297c:	1007883a 	mov	r3,r2
   82980:	00bfffc4 	movi	r2,-1
   82984:	18800626 	beq	r3,r2,829a0 <_write_r+0x54>
   82988:	1805883a 	mov	r2,r3
   8298c:	dfc00217 	ldw	ra,8(sp)
   82990:	dc400117 	ldw	r17,4(sp)
   82994:	dc000017 	ldw	r16,0(sp)
   82998:	dec00304 	addi	sp,sp,12
   8299c:	f800283a 	ret
   829a0:	80800017 	ldw	r2,0(r16)
   829a4:	103ff826 	beq	r2,zero,82988 <_write_r+0x3c>
   829a8:	88800015 	stw	r2,0(r17)
   829ac:	1805883a 	mov	r2,r3
   829b0:	dfc00217 	ldw	ra,8(sp)
   829b4:	dc400117 	ldw	r17,4(sp)
   829b8:	dc000017 	ldw	r16,0(sp)
   829bc:	dec00304 	addi	sp,sp,12
   829c0:	f800283a 	ret

000829c4 <_close_r>:
   829c4:	defffd04 	addi	sp,sp,-12
   829c8:	dc000015 	stw	r16,0(sp)
   829cc:	04000274 	movhi	r16,9
   829d0:	84099404 	addi	r16,r16,9808
   829d4:	dc400115 	stw	r17,4(sp)
   829d8:	80000015 	stw	zero,0(r16)
   829dc:	2023883a 	mov	r17,r4
   829e0:	2809883a 	mov	r4,r5
   829e4:	dfc00215 	stw	ra,8(sp)
   829e8:	0082d640 	call	82d64 <close>
   829ec:	1007883a 	mov	r3,r2
   829f0:	00bfffc4 	movi	r2,-1
   829f4:	18800626 	beq	r3,r2,82a10 <_close_r+0x4c>
   829f8:	1805883a 	mov	r2,r3
   829fc:	dfc00217 	ldw	ra,8(sp)
   82a00:	dc400117 	ldw	r17,4(sp)
   82a04:	dc000017 	ldw	r16,0(sp)
   82a08:	dec00304 	addi	sp,sp,12
   82a0c:	f800283a 	ret
   82a10:	80800017 	ldw	r2,0(r16)
   82a14:	103ff826 	beq	r2,zero,829f8 <_close_r+0x34>
   82a18:	88800015 	stw	r2,0(r17)
   82a1c:	1805883a 	mov	r2,r3
   82a20:	dfc00217 	ldw	ra,8(sp)
   82a24:	dc400117 	ldw	r17,4(sp)
   82a28:	dc000017 	ldw	r16,0(sp)
   82a2c:	dec00304 	addi	sp,sp,12
   82a30:	f800283a 	ret

00082a34 <_fclose_r>:
   82a34:	defffc04 	addi	sp,sp,-16
   82a38:	dc400115 	stw	r17,4(sp)
   82a3c:	dc000015 	stw	r16,0(sp)
   82a40:	dfc00315 	stw	ra,12(sp)
   82a44:	dc800215 	stw	r18,8(sp)
   82a48:	2821883a 	mov	r16,r5
   82a4c:	2023883a 	mov	r17,r4
   82a50:	28002926 	beq	r5,zero,82af8 <_fclose_r+0xc4>
   82a54:	0081d780 	call	81d78 <__sfp_lock_acquire>
   82a58:	88000226 	beq	r17,zero,82a64 <_fclose_r+0x30>
   82a5c:	88800e17 	ldw	r2,56(r17)
   82a60:	10002d26 	beq	r2,zero,82b18 <_fclose_r+0xe4>
   82a64:	8080030f 	ldh	r2,12(r16)
   82a68:	10002226 	beq	r2,zero,82af4 <_fclose_r+0xc0>
   82a6c:	8809883a 	mov	r4,r17
   82a70:	800b883a 	mov	r5,r16
   82a74:	0081af00 	call	81af0 <_fflush_r>
   82a78:	1025883a 	mov	r18,r2
   82a7c:	80800b17 	ldw	r2,44(r16)
   82a80:	10000426 	beq	r2,zero,82a94 <_fclose_r+0x60>
   82a84:	81400717 	ldw	r5,28(r16)
   82a88:	8809883a 	mov	r4,r17
   82a8c:	103ee83a 	callr	r2
   82a90:	10002a16 	blt	r2,zero,82b3c <_fclose_r+0x108>
   82a94:	8080030b 	ldhu	r2,12(r16)
   82a98:	1080200c 	andi	r2,r2,128
   82a9c:	1000231e 	bne	r2,zero,82b2c <_fclose_r+0xf8>
   82aa0:	81400c17 	ldw	r5,48(r16)
   82aa4:	28000526 	beq	r5,zero,82abc <_fclose_r+0x88>
   82aa8:	80801004 	addi	r2,r16,64
   82aac:	28800226 	beq	r5,r2,82ab8 <_fclose_r+0x84>
   82ab0:	8809883a 	mov	r4,r17
   82ab4:	00821400 	call	82140 <_free_r>
   82ab8:	80000c15 	stw	zero,48(r16)
   82abc:	81401117 	ldw	r5,68(r16)
   82ac0:	28000326 	beq	r5,zero,82ad0 <_fclose_r+0x9c>
   82ac4:	8809883a 	mov	r4,r17
   82ac8:	00821400 	call	82140 <_free_r>
   82acc:	80001115 	stw	zero,68(r16)
   82ad0:	8000030d 	sth	zero,12(r16)
   82ad4:	0081d7c0 	call	81d7c <__sfp_lock_release>
   82ad8:	9005883a 	mov	r2,r18
   82adc:	dfc00317 	ldw	ra,12(sp)
   82ae0:	dc800217 	ldw	r18,8(sp)
   82ae4:	dc400117 	ldw	r17,4(sp)
   82ae8:	dc000017 	ldw	r16,0(sp)
   82aec:	dec00404 	addi	sp,sp,16
   82af0:	f800283a 	ret
   82af4:	0081d7c0 	call	81d7c <__sfp_lock_release>
   82af8:	0025883a 	mov	r18,zero
   82afc:	9005883a 	mov	r2,r18
   82b00:	dfc00317 	ldw	ra,12(sp)
   82b04:	dc800217 	ldw	r18,8(sp)
   82b08:	dc400117 	ldw	r17,4(sp)
   82b0c:	dc000017 	ldw	r16,0(sp)
   82b10:	dec00404 	addi	sp,sp,16
   82b14:	f800283a 	ret
   82b18:	8809883a 	mov	r4,r17
   82b1c:	0081d880 	call	81d88 <__sinit>
   82b20:	8080030f 	ldh	r2,12(r16)
   82b24:	103fd11e 	bne	r2,zero,82a6c <_fclose_r+0x38>
   82b28:	003ff206 	br	82af4 <_fclose_r+0xc0>
   82b2c:	81400417 	ldw	r5,16(r16)
   82b30:	8809883a 	mov	r4,r17
   82b34:	00821400 	call	82140 <_free_r>
   82b38:	003fd906 	br	82aa0 <_fclose_r+0x6c>
   82b3c:	04bfffc4 	movi	r18,-1
   82b40:	003fd406 	br	82a94 <_fclose_r+0x60>

00082b44 <fclose>:
   82b44:	00800274 	movhi	r2,9
   82b48:	1082a404 	addi	r2,r2,2704
   82b4c:	200b883a 	mov	r5,r4
   82b50:	11000017 	ldw	r4,0(r2)
   82b54:	0082a341 	jmpi	82a34 <_fclose_r>

00082b58 <_fstat_r>:
   82b58:	defffd04 	addi	sp,sp,-12
   82b5c:	dc000015 	stw	r16,0(sp)
   82b60:	04000274 	movhi	r16,9
   82b64:	84099404 	addi	r16,r16,9808
   82b68:	dc400115 	stw	r17,4(sp)
   82b6c:	80000015 	stw	zero,0(r16)
   82b70:	2023883a 	mov	r17,r4
   82b74:	2809883a 	mov	r4,r5
   82b78:	300b883a 	mov	r5,r6
   82b7c:	dfc00215 	stw	ra,8(sp)
   82b80:	0082ef00 	call	82ef0 <fstat>
   82b84:	1007883a 	mov	r3,r2
   82b88:	00bfffc4 	movi	r2,-1
   82b8c:	18800626 	beq	r3,r2,82ba8 <_fstat_r+0x50>
   82b90:	1805883a 	mov	r2,r3
   82b94:	dfc00217 	ldw	ra,8(sp)
   82b98:	dc400117 	ldw	r17,4(sp)
   82b9c:	dc000017 	ldw	r16,0(sp)
   82ba0:	dec00304 	addi	sp,sp,12
   82ba4:	f800283a 	ret
   82ba8:	80800017 	ldw	r2,0(r16)
   82bac:	103ff826 	beq	r2,zero,82b90 <_fstat_r+0x38>
   82bb0:	88800015 	stw	r2,0(r17)
   82bb4:	1805883a 	mov	r2,r3
   82bb8:	dfc00217 	ldw	ra,8(sp)
   82bbc:	dc400117 	ldw	r17,4(sp)
   82bc0:	dc000017 	ldw	r16,0(sp)
   82bc4:	dec00304 	addi	sp,sp,12
   82bc8:	f800283a 	ret

00082bcc <_isatty_r>:
   82bcc:	defffd04 	addi	sp,sp,-12
   82bd0:	dc000015 	stw	r16,0(sp)
   82bd4:	04000274 	movhi	r16,9
   82bd8:	84099404 	addi	r16,r16,9808
   82bdc:	dc400115 	stw	r17,4(sp)
   82be0:	80000015 	stw	zero,0(r16)
   82be4:	2023883a 	mov	r17,r4
   82be8:	2809883a 	mov	r4,r5
   82bec:	dfc00215 	stw	ra,8(sp)
   82bf0:	00830280 	call	83028 <isatty>
   82bf4:	1007883a 	mov	r3,r2
   82bf8:	00bfffc4 	movi	r2,-1
   82bfc:	18800626 	beq	r3,r2,82c18 <_isatty_r+0x4c>
   82c00:	1805883a 	mov	r2,r3
   82c04:	dfc00217 	ldw	ra,8(sp)
   82c08:	dc400117 	ldw	r17,4(sp)
   82c0c:	dc000017 	ldw	r16,0(sp)
   82c10:	dec00304 	addi	sp,sp,12
   82c14:	f800283a 	ret
   82c18:	80800017 	ldw	r2,0(r16)
   82c1c:	103ff826 	beq	r2,zero,82c00 <_isatty_r+0x34>
   82c20:	88800015 	stw	r2,0(r17)
   82c24:	1805883a 	mov	r2,r3
   82c28:	dfc00217 	ldw	ra,8(sp)
   82c2c:	dc400117 	ldw	r17,4(sp)
   82c30:	dc000017 	ldw	r16,0(sp)
   82c34:	dec00304 	addi	sp,sp,12
   82c38:	f800283a 	ret

00082c3c <_lseek_r>:
   82c3c:	defffd04 	addi	sp,sp,-12
   82c40:	dc000015 	stw	r16,0(sp)
   82c44:	04000274 	movhi	r16,9
   82c48:	84099404 	addi	r16,r16,9808
   82c4c:	dc400115 	stw	r17,4(sp)
   82c50:	80000015 	stw	zero,0(r16)
   82c54:	2023883a 	mov	r17,r4
   82c58:	2809883a 	mov	r4,r5
   82c5c:	300b883a 	mov	r5,r6
   82c60:	380d883a 	mov	r6,r7
   82c64:	dfc00215 	stw	ra,8(sp)
   82c68:	00832380 	call	83238 <lseek>
   82c6c:	1007883a 	mov	r3,r2
   82c70:	00bfffc4 	movi	r2,-1
   82c74:	18800626 	beq	r3,r2,82c90 <_lseek_r+0x54>
   82c78:	1805883a 	mov	r2,r3
   82c7c:	dfc00217 	ldw	ra,8(sp)
   82c80:	dc400117 	ldw	r17,4(sp)
   82c84:	dc000017 	ldw	r16,0(sp)
   82c88:	dec00304 	addi	sp,sp,12
   82c8c:	f800283a 	ret
   82c90:	80800017 	ldw	r2,0(r16)
   82c94:	103ff826 	beq	r2,zero,82c78 <_lseek_r+0x3c>
   82c98:	88800015 	stw	r2,0(r17)
   82c9c:	1805883a 	mov	r2,r3
   82ca0:	dfc00217 	ldw	ra,8(sp)
   82ca4:	dc400117 	ldw	r17,4(sp)
   82ca8:	dc000017 	ldw	r16,0(sp)
   82cac:	dec00304 	addi	sp,sp,12
   82cb0:	f800283a 	ret

00082cb4 <_read_r>:
   82cb4:	defffd04 	addi	sp,sp,-12
   82cb8:	dc000015 	stw	r16,0(sp)
   82cbc:	04000274 	movhi	r16,9
   82cc0:	84099404 	addi	r16,r16,9808
   82cc4:	dc400115 	stw	r17,4(sp)
   82cc8:	80000015 	stw	zero,0(r16)
   82ccc:	2023883a 	mov	r17,r4
   82cd0:	2809883a 	mov	r4,r5
   82cd4:	300b883a 	mov	r5,r6
   82cd8:	380d883a 	mov	r6,r7
   82cdc:	dfc00215 	stw	ra,8(sp)
   82ce0:	00834540 	call	83454 <read>
   82ce4:	1007883a 	mov	r3,r2
   82ce8:	00bfffc4 	movi	r2,-1
   82cec:	18800626 	beq	r3,r2,82d08 <_read_r+0x54>
   82cf0:	1805883a 	mov	r2,r3
   82cf4:	dfc00217 	ldw	ra,8(sp)
   82cf8:	dc400117 	ldw	r17,4(sp)
   82cfc:	dc000017 	ldw	r16,0(sp)
   82d00:	dec00304 	addi	sp,sp,12
   82d04:	f800283a 	ret
   82d08:	80800017 	ldw	r2,0(r16)
   82d0c:	103ff826 	beq	r2,zero,82cf0 <_read_r+0x3c>
   82d10:	88800015 	stw	r2,0(r17)
   82d14:	1805883a 	mov	r2,r3
   82d18:	dfc00217 	ldw	ra,8(sp)
   82d1c:	dc400117 	ldw	r17,4(sp)
   82d20:	dc000017 	ldw	r16,0(sp)
   82d24:	dec00304 	addi	sp,sp,12
   82d28:	f800283a 	ret

00082d2c <__mulsi3>:
   82d2c:	20000a26 	beq	r4,zero,82d58 <__mulsi3+0x2c>
   82d30:	0007883a 	mov	r3,zero
   82d34:	2080004c 	andi	r2,r4,1
   82d38:	1005003a 	cmpeq	r2,r2,zero
   82d3c:	2008d07a 	srli	r4,r4,1
   82d40:	1000011e 	bne	r2,zero,82d48 <__mulsi3+0x1c>
   82d44:	1947883a 	add	r3,r3,r5
   82d48:	294b883a 	add	r5,r5,r5
   82d4c:	203ff91e 	bne	r4,zero,82d34 <__mulsi3+0x8>
   82d50:	1805883a 	mov	r2,r3
   82d54:	f800283a 	ret
   82d58:	0007883a 	mov	r3,zero
   82d5c:	1805883a 	mov	r2,r3
   82d60:	f800283a 	ret

00082d64 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   82d64:	defff804 	addi	sp,sp,-32
   82d68:	dfc00715 	stw	ra,28(sp)
   82d6c:	df000615 	stw	fp,24(sp)
   82d70:	df000604 	addi	fp,sp,24
   82d74:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   82d78:	e0bffc17 	ldw	r2,-16(fp)
   82d7c:	1004803a 	cmplt	r2,r2,zero
   82d80:	1000091e 	bne	r2,zero,82da8 <close+0x44>
   82d84:	e13ffc17 	ldw	r4,-16(fp)
   82d88:	01400304 	movi	r5,12
   82d8c:	0082d2c0 	call	82d2c <__mulsi3>
   82d90:	1007883a 	mov	r3,r2
   82d94:	00800274 	movhi	r2,9
   82d98:	10be1d04 	addi	r2,r2,-1932
   82d9c:	1887883a 	add	r3,r3,r2
   82da0:	e0ffff15 	stw	r3,-4(fp)
   82da4:	00000106 	br	82dac <close+0x48>
   82da8:	e03fff15 	stw	zero,-4(fp)
   82dac:	e0bfff17 	ldw	r2,-4(fp)
   82db0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   82db4:	e0bffb17 	ldw	r2,-20(fp)
   82db8:	1005003a 	cmpeq	r2,r2,zero
   82dbc:	10001d1e 	bne	r2,zero,82e34 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   82dc0:	e0bffb17 	ldw	r2,-20(fp)
   82dc4:	10800017 	ldw	r2,0(r2)
   82dc8:	10800417 	ldw	r2,16(r2)
   82dcc:	1005003a 	cmpeq	r2,r2,zero
   82dd0:	1000071e 	bne	r2,zero,82df0 <close+0x8c>
   82dd4:	e0bffb17 	ldw	r2,-20(fp)
   82dd8:	10800017 	ldw	r2,0(r2)
   82ddc:	10800417 	ldw	r2,16(r2)
   82de0:	e13ffb17 	ldw	r4,-20(fp)
   82de4:	103ee83a 	callr	r2
   82de8:	e0bffe15 	stw	r2,-8(fp)
   82dec:	00000106 	br	82df4 <close+0x90>
   82df0:	e03ffe15 	stw	zero,-8(fp)
   82df4:	e0bffe17 	ldw	r2,-8(fp)
   82df8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   82dfc:	e13ffc17 	ldw	r4,-16(fp)
   82e00:	00835d80 	call	835d8 <alt_release_fd>
    if (rval < 0)
   82e04:	e0bffa17 	ldw	r2,-24(fp)
   82e08:	1004403a 	cmpge	r2,r2,zero
   82e0c:	1000071e 	bne	r2,zero,82e2c <close+0xc8>
    {
      ALT_ERRNO = -rval;
   82e10:	0082e640 	call	82e64 <alt_get_errno>
   82e14:	e0fffa17 	ldw	r3,-24(fp)
   82e18:	00c7c83a 	sub	r3,zero,r3
   82e1c:	10c00015 	stw	r3,0(r2)
      return -1;
   82e20:	00bfffc4 	movi	r2,-1
   82e24:	e0bffd15 	stw	r2,-12(fp)
   82e28:	00000806 	br	82e4c <close+0xe8>
    }
    return 0;
   82e2c:	e03ffd15 	stw	zero,-12(fp)
   82e30:	00000606 	br	82e4c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   82e34:	0082e640 	call	82e64 <alt_get_errno>
   82e38:	1007883a 	mov	r3,r2
   82e3c:	00801444 	movi	r2,81
   82e40:	18800015 	stw	r2,0(r3)
    return -1;
   82e44:	00bfffc4 	movi	r2,-1
   82e48:	e0bffd15 	stw	r2,-12(fp)
   82e4c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   82e50:	e037883a 	mov	sp,fp
   82e54:	dfc00117 	ldw	ra,4(sp)
   82e58:	df000017 	ldw	fp,0(sp)
   82e5c:	dec00204 	addi	sp,sp,8
   82e60:	f800283a 	ret

00082e64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82e64:	defffd04 	addi	sp,sp,-12
   82e68:	dfc00215 	stw	ra,8(sp)
   82e6c:	df000115 	stw	fp,4(sp)
   82e70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   82e74:	00800274 	movhi	r2,9
   82e78:	1082ad04 	addi	r2,r2,2740
   82e7c:	10800017 	ldw	r2,0(r2)
   82e80:	1005003a 	cmpeq	r2,r2,zero
   82e84:	1000061e 	bne	r2,zero,82ea0 <alt_get_errno+0x3c>
   82e88:	00800274 	movhi	r2,9
   82e8c:	1082ad04 	addi	r2,r2,2740
   82e90:	10800017 	ldw	r2,0(r2)
   82e94:	103ee83a 	callr	r2
   82e98:	e0bfff15 	stw	r2,-4(fp)
   82e9c:	00000306 	br	82eac <alt_get_errno+0x48>
   82ea0:	00800274 	movhi	r2,9
   82ea4:	10899404 	addi	r2,r2,9808
   82ea8:	e0bfff15 	stw	r2,-4(fp)
   82eac:	e0bfff17 	ldw	r2,-4(fp)
}
   82eb0:	e037883a 	mov	sp,fp
   82eb4:	dfc00117 	ldw	ra,4(sp)
   82eb8:	df000017 	ldw	fp,0(sp)
   82ebc:	dec00204 	addi	sp,sp,8
   82ec0:	f800283a 	ret

00082ec4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   82ec4:	defffc04 	addi	sp,sp,-16
   82ec8:	df000315 	stw	fp,12(sp)
   82ecc:	df000304 	addi	fp,sp,12
   82ed0:	e13ffd15 	stw	r4,-12(fp)
   82ed4:	e17ffe15 	stw	r5,-8(fp)
   82ed8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   82edc:	e0bfff17 	ldw	r2,-4(fp)
}
   82ee0:	e037883a 	mov	sp,fp
   82ee4:	df000017 	ldw	fp,0(sp)
   82ee8:	dec00104 	addi	sp,sp,4
   82eec:	f800283a 	ret

00082ef0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   82ef0:	defff904 	addi	sp,sp,-28
   82ef4:	dfc00615 	stw	ra,24(sp)
   82ef8:	df000515 	stw	fp,20(sp)
   82efc:	df000504 	addi	fp,sp,20
   82f00:	e13ffc15 	stw	r4,-16(fp)
   82f04:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   82f08:	e0bffc17 	ldw	r2,-16(fp)
   82f0c:	1004803a 	cmplt	r2,r2,zero
   82f10:	1000091e 	bne	r2,zero,82f38 <fstat+0x48>
   82f14:	e13ffc17 	ldw	r4,-16(fp)
   82f18:	01400304 	movi	r5,12
   82f1c:	0082d2c0 	call	82d2c <__mulsi3>
   82f20:	1007883a 	mov	r3,r2
   82f24:	00800274 	movhi	r2,9
   82f28:	10be1d04 	addi	r2,r2,-1932
   82f2c:	1887883a 	add	r3,r3,r2
   82f30:	e0ffff15 	stw	r3,-4(fp)
   82f34:	00000106 	br	82f3c <fstat+0x4c>
   82f38:	e03fff15 	stw	zero,-4(fp)
   82f3c:	e0bfff17 	ldw	r2,-4(fp)
   82f40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   82f44:	e0bffb17 	ldw	r2,-20(fp)
   82f48:	1005003a 	cmpeq	r2,r2,zero
   82f4c:	1000121e 	bne	r2,zero,82f98 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   82f50:	e0bffb17 	ldw	r2,-20(fp)
   82f54:	10800017 	ldw	r2,0(r2)
   82f58:	10800817 	ldw	r2,32(r2)
   82f5c:	1005003a 	cmpeq	r2,r2,zero
   82f60:	1000081e 	bne	r2,zero,82f84 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   82f64:	e0bffb17 	ldw	r2,-20(fp)
   82f68:	10800017 	ldw	r2,0(r2)
   82f6c:	10800817 	ldw	r2,32(r2)
   82f70:	e13ffb17 	ldw	r4,-20(fp)
   82f74:	e17ffd17 	ldw	r5,-12(fp)
   82f78:	103ee83a 	callr	r2
   82f7c:	e0bffe15 	stw	r2,-8(fp)
   82f80:	00000b06 	br	82fb0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   82f84:	e0fffd17 	ldw	r3,-12(fp)
   82f88:	00880004 	movi	r2,8192
   82f8c:	18800115 	stw	r2,4(r3)
      return 0;
   82f90:	e03ffe15 	stw	zero,-8(fp)
   82f94:	00000606 	br	82fb0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   82f98:	0082fc80 	call	82fc8 <alt_get_errno>
   82f9c:	1007883a 	mov	r3,r2
   82fa0:	00801444 	movi	r2,81
   82fa4:	18800015 	stw	r2,0(r3)
    return -1;
   82fa8:	00bfffc4 	movi	r2,-1
   82fac:	e0bffe15 	stw	r2,-8(fp)
   82fb0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   82fb4:	e037883a 	mov	sp,fp
   82fb8:	dfc00117 	ldw	ra,4(sp)
   82fbc:	df000017 	ldw	fp,0(sp)
   82fc0:	dec00204 	addi	sp,sp,8
   82fc4:	f800283a 	ret

00082fc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82fc8:	defffd04 	addi	sp,sp,-12
   82fcc:	dfc00215 	stw	ra,8(sp)
   82fd0:	df000115 	stw	fp,4(sp)
   82fd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   82fd8:	00800274 	movhi	r2,9
   82fdc:	1082ad04 	addi	r2,r2,2740
   82fe0:	10800017 	ldw	r2,0(r2)
   82fe4:	1005003a 	cmpeq	r2,r2,zero
   82fe8:	1000061e 	bne	r2,zero,83004 <alt_get_errno+0x3c>
   82fec:	00800274 	movhi	r2,9
   82ff0:	1082ad04 	addi	r2,r2,2740
   82ff4:	10800017 	ldw	r2,0(r2)
   82ff8:	103ee83a 	callr	r2
   82ffc:	e0bfff15 	stw	r2,-4(fp)
   83000:	00000306 	br	83010 <alt_get_errno+0x48>
   83004:	00800274 	movhi	r2,9
   83008:	10899404 	addi	r2,r2,9808
   8300c:	e0bfff15 	stw	r2,-4(fp)
   83010:	e0bfff17 	ldw	r2,-4(fp)
}
   83014:	e037883a 	mov	sp,fp
   83018:	dfc00117 	ldw	ra,4(sp)
   8301c:	df000017 	ldw	fp,0(sp)
   83020:	dec00204 	addi	sp,sp,8
   83024:	f800283a 	ret

00083028 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   83028:	deffeb04 	addi	sp,sp,-84
   8302c:	dfc01415 	stw	ra,80(sp)
   83030:	df001315 	stw	fp,76(sp)
   83034:	df001304 	addi	fp,sp,76
   83038:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8303c:	e0bffd17 	ldw	r2,-12(fp)
   83040:	1004803a 	cmplt	r2,r2,zero
   83044:	1000091e 	bne	r2,zero,8306c <isatty+0x44>
   83048:	e13ffd17 	ldw	r4,-12(fp)
   8304c:	01400304 	movi	r5,12
   83050:	0082d2c0 	call	82d2c <__mulsi3>
   83054:	1007883a 	mov	r3,r2
   83058:	00800274 	movhi	r2,9
   8305c:	10be1d04 	addi	r2,r2,-1932
   83060:	1887883a 	add	r3,r3,r2
   83064:	e0ffff15 	stw	r3,-4(fp)
   83068:	00000106 	br	83070 <isatty+0x48>
   8306c:	e03fff15 	stw	zero,-4(fp)
   83070:	e0bfff17 	ldw	r2,-4(fp)
   83074:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   83078:	e0bfed17 	ldw	r2,-76(fp)
   8307c:	1005003a 	cmpeq	r2,r2,zero
   83080:	10000f1e 	bne	r2,zero,830c0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   83084:	e0bfed17 	ldw	r2,-76(fp)
   83088:	10800017 	ldw	r2,0(r2)
   8308c:	10800817 	ldw	r2,32(r2)
   83090:	1004c03a 	cmpne	r2,r2,zero
   83094:	1000031e 	bne	r2,zero,830a4 <isatty+0x7c>
    {
      return 1;
   83098:	00800044 	movi	r2,1
   8309c:	e0bffe15 	stw	r2,-8(fp)
   830a0:	00000c06 	br	830d4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   830a4:	e17fee04 	addi	r5,fp,-72
   830a8:	e13ffd17 	ldw	r4,-12(fp)
   830ac:	0082ef00 	call	82ef0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   830b0:	e0bfef17 	ldw	r2,-68(fp)
   830b4:	10880020 	cmpeqi	r2,r2,8192
   830b8:	e0bffe15 	stw	r2,-8(fp)
   830bc:	00000506 	br	830d4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   830c0:	00830ec0 	call	830ec <alt_get_errno>
   830c4:	1007883a 	mov	r3,r2
   830c8:	00801444 	movi	r2,81
   830cc:	18800015 	stw	r2,0(r3)
    return 0;
   830d0:	e03ffe15 	stw	zero,-8(fp)
   830d4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   830d8:	e037883a 	mov	sp,fp
   830dc:	dfc00117 	ldw	ra,4(sp)
   830e0:	df000017 	ldw	fp,0(sp)
   830e4:	dec00204 	addi	sp,sp,8
   830e8:	f800283a 	ret

000830ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   830ec:	defffd04 	addi	sp,sp,-12
   830f0:	dfc00215 	stw	ra,8(sp)
   830f4:	df000115 	stw	fp,4(sp)
   830f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   830fc:	00800274 	movhi	r2,9
   83100:	1082ad04 	addi	r2,r2,2740
   83104:	10800017 	ldw	r2,0(r2)
   83108:	1005003a 	cmpeq	r2,r2,zero
   8310c:	1000061e 	bne	r2,zero,83128 <alt_get_errno+0x3c>
   83110:	00800274 	movhi	r2,9
   83114:	1082ad04 	addi	r2,r2,2740
   83118:	10800017 	ldw	r2,0(r2)
   8311c:	103ee83a 	callr	r2
   83120:	e0bfff15 	stw	r2,-4(fp)
   83124:	00000306 	br	83134 <alt_get_errno+0x48>
   83128:	00800274 	movhi	r2,9
   8312c:	10899404 	addi	r2,r2,9808
   83130:	e0bfff15 	stw	r2,-4(fp)
   83134:	e0bfff17 	ldw	r2,-4(fp)
}
   83138:	e037883a 	mov	sp,fp
   8313c:	dfc00117 	ldw	ra,4(sp)
   83140:	df000017 	ldw	fp,0(sp)
   83144:	dec00204 	addi	sp,sp,8
   83148:	f800283a 	ret

0008314c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8314c:	defffe04 	addi	sp,sp,-8
   83150:	dfc00115 	stw	ra,4(sp)
   83154:	df000015 	stw	fp,0(sp)
   83158:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8315c:	01000274 	movhi	r4,9
   83160:	2102d104 	addi	r4,r4,2884
   83164:	01400274 	movhi	r5,9
   83168:	297c1104 	addi	r5,r5,-4028
   8316c:	01800274 	movhi	r6,9
   83170:	3182d104 	addi	r6,r6,2884
   83174:	00831cc0 	call	831cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   83178:	01000234 	movhi	r4,8
   8317c:	21000004 	addi	r4,r4,0
   83180:	01400434 	movhi	r5,16
   83184:	29500804 	addi	r5,r5,16416
   83188:	01800434 	movhi	r6,16
   8318c:	31906f04 	addi	r6,r6,16828
   83190:	00831cc0 	call	831cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   83194:	01000274 	movhi	r4,9
   83198:	213b9204 	addi	r4,r4,-4536
   8319c:	01400274 	movhi	r5,9
   831a0:	297b9204 	addi	r5,r5,-4536
   831a4:	01800274 	movhi	r6,9
   831a8:	31bc1104 	addi	r6,r6,-4028
   831ac:	00831cc0 	call	831cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   831b0:	008d6680 	call	8d668 <alt_dcache_flush_all>
  alt_icache_flush_all();
   831b4:	008d8f40 	call	8d8f4 <alt_icache_flush_all>
}
   831b8:	e037883a 	mov	sp,fp
   831bc:	dfc00117 	ldw	ra,4(sp)
   831c0:	df000017 	ldw	fp,0(sp)
   831c4:	dec00204 	addi	sp,sp,8
   831c8:	f800283a 	ret

000831cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   831cc:	defffc04 	addi	sp,sp,-16
   831d0:	df000315 	stw	fp,12(sp)
   831d4:	df000304 	addi	fp,sp,12
   831d8:	e13ffd15 	stw	r4,-12(fp)
   831dc:	e17ffe15 	stw	r5,-8(fp)
   831e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   831e4:	e0fffe17 	ldw	r3,-8(fp)
   831e8:	e0bffd17 	ldw	r2,-12(fp)
   831ec:	18800e26 	beq	r3,r2,83228 <alt_load_section+0x5c>
  {
    while( to != end )
   831f0:	00000a06 	br	8321c <alt_load_section+0x50>
    {
      *to++ = *from++;
   831f4:	e0bffd17 	ldw	r2,-12(fp)
   831f8:	10c00017 	ldw	r3,0(r2)
   831fc:	e0bffe17 	ldw	r2,-8(fp)
   83200:	10c00015 	stw	r3,0(r2)
   83204:	e0bffe17 	ldw	r2,-8(fp)
   83208:	10800104 	addi	r2,r2,4
   8320c:	e0bffe15 	stw	r2,-8(fp)
   83210:	e0bffd17 	ldw	r2,-12(fp)
   83214:	10800104 	addi	r2,r2,4
   83218:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8321c:	e0fffe17 	ldw	r3,-8(fp)
   83220:	e0bfff17 	ldw	r2,-4(fp)
   83224:	18bff31e 	bne	r3,r2,831f4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   83228:	e037883a 	mov	sp,fp
   8322c:	df000017 	ldw	fp,0(sp)
   83230:	dec00104 	addi	sp,sp,4
   83234:	f800283a 	ret

00083238 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   83238:	defff804 	addi	sp,sp,-32
   8323c:	dfc00715 	stw	ra,28(sp)
   83240:	df000615 	stw	fp,24(sp)
   83244:	df000604 	addi	fp,sp,24
   83248:	e13ffc15 	stw	r4,-16(fp)
   8324c:	e17ffd15 	stw	r5,-12(fp)
   83250:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   83254:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83258:	e0bffc17 	ldw	r2,-16(fp)
   8325c:	1004803a 	cmplt	r2,r2,zero
   83260:	1000091e 	bne	r2,zero,83288 <lseek+0x50>
   83264:	e13ffc17 	ldw	r4,-16(fp)
   83268:	01400304 	movi	r5,12
   8326c:	0082d2c0 	call	82d2c <__mulsi3>
   83270:	1007883a 	mov	r3,r2
   83274:	00800274 	movhi	r2,9
   83278:	10be1d04 	addi	r2,r2,-1932
   8327c:	1887883a 	add	r3,r3,r2
   83280:	e0ffff15 	stw	r3,-4(fp)
   83284:	00000106 	br	8328c <lseek+0x54>
   83288:	e03fff15 	stw	zero,-4(fp)
   8328c:	e0bfff17 	ldw	r2,-4(fp)
   83290:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   83294:	e0bffb17 	ldw	r2,-20(fp)
   83298:	1005003a 	cmpeq	r2,r2,zero
   8329c:	1000111e 	bne	r2,zero,832e4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   832a0:	e0bffb17 	ldw	r2,-20(fp)
   832a4:	10800017 	ldw	r2,0(r2)
   832a8:	10800717 	ldw	r2,28(r2)
   832ac:	1005003a 	cmpeq	r2,r2,zero
   832b0:	1000091e 	bne	r2,zero,832d8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   832b4:	e0bffb17 	ldw	r2,-20(fp)
   832b8:	10800017 	ldw	r2,0(r2)
   832bc:	10800717 	ldw	r2,28(r2)
   832c0:	e13ffb17 	ldw	r4,-20(fp)
   832c4:	e17ffd17 	ldw	r5,-12(fp)
   832c8:	e1bffe17 	ldw	r6,-8(fp)
   832cc:	103ee83a 	callr	r2
   832d0:	e0bffa15 	stw	r2,-24(fp)
   832d4:	00000506 	br	832ec <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   832d8:	00bfde84 	movi	r2,-134
   832dc:	e0bffa15 	stw	r2,-24(fp)
   832e0:	00000206 	br	832ec <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   832e4:	00bfebc4 	movi	r2,-81
   832e8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   832ec:	e0bffa17 	ldw	r2,-24(fp)
   832f0:	1004403a 	cmpge	r2,r2,zero
   832f4:	1000071e 	bne	r2,zero,83314 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   832f8:	008332c0 	call	8332c <alt_get_errno>
   832fc:	1007883a 	mov	r3,r2
   83300:	e0bffa17 	ldw	r2,-24(fp)
   83304:	0085c83a 	sub	r2,zero,r2
   83308:	18800015 	stw	r2,0(r3)
    rc = -1;
   8330c:	00bfffc4 	movi	r2,-1
   83310:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   83314:	e0bffa17 	ldw	r2,-24(fp)
}
   83318:	e037883a 	mov	sp,fp
   8331c:	dfc00117 	ldw	ra,4(sp)
   83320:	df000017 	ldw	fp,0(sp)
   83324:	dec00204 	addi	sp,sp,8
   83328:	f800283a 	ret

0008332c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8332c:	defffd04 	addi	sp,sp,-12
   83330:	dfc00215 	stw	ra,8(sp)
   83334:	df000115 	stw	fp,4(sp)
   83338:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8333c:	00800274 	movhi	r2,9
   83340:	1082ad04 	addi	r2,r2,2740
   83344:	10800017 	ldw	r2,0(r2)
   83348:	1005003a 	cmpeq	r2,r2,zero
   8334c:	1000061e 	bne	r2,zero,83368 <alt_get_errno+0x3c>
   83350:	00800274 	movhi	r2,9
   83354:	1082ad04 	addi	r2,r2,2740
   83358:	10800017 	ldw	r2,0(r2)
   8335c:	103ee83a 	callr	r2
   83360:	e0bfff15 	stw	r2,-4(fp)
   83364:	00000306 	br	83374 <alt_get_errno+0x48>
   83368:	00800274 	movhi	r2,9
   8336c:	10899404 	addi	r2,r2,9808
   83370:	e0bfff15 	stw	r2,-4(fp)
   83374:	e0bfff17 	ldw	r2,-4(fp)
}
   83378:	e037883a 	mov	sp,fp
   8337c:	dfc00117 	ldw	ra,4(sp)
   83380:	df000017 	ldw	fp,0(sp)
   83384:	dec00204 	addi	sp,sp,8
   83388:	f800283a 	ret

0008338c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8338c:	defffb04 	addi	sp,sp,-20
   83390:	dfc00415 	stw	ra,16(sp)
   83394:	df000315 	stw	fp,12(sp)
   83398:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8339c:	0009883a 	mov	r4,zero
   833a0:	008be5c0 	call	8be5c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   833a4:	00844980 	call	84498 <OSInit>
   833a8:	01000044 	movi	r4,1
   833ac:	00893600 	call	89360 <OSSemCreate>
   833b0:	1007883a 	mov	r3,r2
   833b4:	00800274 	movhi	r2,9
   833b8:	10899a04 	addi	r2,r2,9832
   833bc:	10c00015 	stw	r3,0(r2)
   833c0:	01000044 	movi	r4,1
   833c4:	00893600 	call	89360 <OSSemCreate>
   833c8:	1007883a 	mov	r3,r2
   833cc:	00800274 	movhi	r2,9
   833d0:	10899c04 	addi	r2,r2,9840
   833d4:	10c00015 	stw	r3,0(r2)
   833d8:	00800274 	movhi	r2,9
   833dc:	10899504 	addi	r2,r2,9812
   833e0:	e0bffd15 	stw	r2,-12(fp)
   833e4:	00800044 	movi	r2,1
   833e8:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   833ec:	e13ffe0b 	ldhu	r4,-8(fp)
   833f0:	00893600 	call	89360 <OSSemCreate>
   833f4:	1007883a 	mov	r3,r2
   833f8:	e0bffd17 	ldw	r2,-12(fp)
   833fc:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   83400:	008be900 	call	8be90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   83404:	01000274 	movhi	r4,9
   83408:	213bb604 	addi	r4,r4,-4392
   8340c:	01400274 	movhi	r5,9
   83410:	297bb604 	addi	r5,r5,-4392
   83414:	01800274 	movhi	r6,9
   83418:	31bbb604 	addi	r6,r6,-4392
   8341c:	008dcb40 	call	8dcb4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   83420:	008d7980 	call	8d798 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   83424:	01000274 	movhi	r4,9
   83428:	2135ff04 	addi	r4,r4,-10244
   8342c:	008e8e40 	call	8e8e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   83430:	d126f217 	ldw	r4,-25656(gp)
   83434:	d166f317 	ldw	r5,-25652(gp)
   83438:	d1a6f417 	ldw	r6,-25648(gp)
   8343c:	008033c0 	call	8033c <main>
   83440:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   83444:	01000044 	movi	r4,1
   83448:	0082d640 	call	82d64 <close>
  exit (result);
   8344c:	e13fff17 	ldw	r4,-4(fp)
   83450:	008e8f80 	call	8e8f8 <exit>

00083454 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   83454:	defff704 	addi	sp,sp,-36
   83458:	dfc00815 	stw	ra,32(sp)
   8345c:	df000715 	stw	fp,28(sp)
   83460:	df000704 	addi	fp,sp,28
   83464:	e13ffb15 	stw	r4,-20(fp)
   83468:	e17ffc15 	stw	r5,-16(fp)
   8346c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83470:	e0bffb17 	ldw	r2,-20(fp)
   83474:	1004803a 	cmplt	r2,r2,zero
   83478:	1000091e 	bne	r2,zero,834a0 <read+0x4c>
   8347c:	e13ffb17 	ldw	r4,-20(fp)
   83480:	01400304 	movi	r5,12
   83484:	0082d2c0 	call	82d2c <__mulsi3>
   83488:	1007883a 	mov	r3,r2
   8348c:	00800274 	movhi	r2,9
   83490:	10be1d04 	addi	r2,r2,-1932
   83494:	1887883a 	add	r3,r3,r2
   83498:	e0ffff15 	stw	r3,-4(fp)
   8349c:	00000106 	br	834a4 <read+0x50>
   834a0:	e03fff15 	stw	zero,-4(fp)
   834a4:	e0bfff17 	ldw	r2,-4(fp)
   834a8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   834ac:	e0bffa17 	ldw	r2,-24(fp)
   834b0:	1005003a 	cmpeq	r2,r2,zero
   834b4:	1000241e 	bne	r2,zero,83548 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   834b8:	e0bffa17 	ldw	r2,-24(fp)
   834bc:	10800217 	ldw	r2,8(r2)
   834c0:	108000cc 	andi	r2,r2,3
   834c4:	10800060 	cmpeqi	r2,r2,1
   834c8:	10001a1e 	bne	r2,zero,83534 <read+0xe0>
   834cc:	e0bffa17 	ldw	r2,-24(fp)
   834d0:	10800017 	ldw	r2,0(r2)
   834d4:	10800517 	ldw	r2,20(r2)
   834d8:	1005003a 	cmpeq	r2,r2,zero
   834dc:	1000151e 	bne	r2,zero,83534 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   834e0:	e0bffa17 	ldw	r2,-24(fp)
   834e4:	10800017 	ldw	r2,0(r2)
   834e8:	10800517 	ldw	r2,20(r2)
   834ec:	e17ffc17 	ldw	r5,-16(fp)
   834f0:	e1bffd17 	ldw	r6,-12(fp)
   834f4:	e13ffa17 	ldw	r4,-24(fp)
   834f8:	103ee83a 	callr	r2
   834fc:	e0bff915 	stw	r2,-28(fp)
   83500:	e0bff917 	ldw	r2,-28(fp)
   83504:	1004403a 	cmpge	r2,r2,zero
   83508:	1000071e 	bne	r2,zero,83528 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8350c:	00835780 	call	83578 <alt_get_errno>
   83510:	e0fff917 	ldw	r3,-28(fp)
   83514:	00c7c83a 	sub	r3,zero,r3
   83518:	10c00015 	stw	r3,0(r2)
          return -1;
   8351c:	00bfffc4 	movi	r2,-1
   83520:	e0bffe15 	stw	r2,-8(fp)
   83524:	00000e06 	br	83560 <read+0x10c>
        }
        return rval;
   83528:	e0bff917 	ldw	r2,-28(fp)
   8352c:	e0bffe15 	stw	r2,-8(fp)
   83530:	00000b06 	br	83560 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   83534:	00835780 	call	83578 <alt_get_errno>
   83538:	1007883a 	mov	r3,r2
   8353c:	00800344 	movi	r2,13
   83540:	18800015 	stw	r2,0(r3)
   83544:	00000406 	br	83558 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   83548:	00835780 	call	83578 <alt_get_errno>
   8354c:	1007883a 	mov	r3,r2
   83550:	00801444 	movi	r2,81
   83554:	18800015 	stw	r2,0(r3)
  }
  return -1;
   83558:	00bfffc4 	movi	r2,-1
   8355c:	e0bffe15 	stw	r2,-8(fp)
   83560:	e0bffe17 	ldw	r2,-8(fp)
}
   83564:	e037883a 	mov	sp,fp
   83568:	dfc00117 	ldw	ra,4(sp)
   8356c:	df000017 	ldw	fp,0(sp)
   83570:	dec00204 	addi	sp,sp,8
   83574:	f800283a 	ret

00083578 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83578:	defffd04 	addi	sp,sp,-12
   8357c:	dfc00215 	stw	ra,8(sp)
   83580:	df000115 	stw	fp,4(sp)
   83584:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   83588:	00800274 	movhi	r2,9
   8358c:	1082ad04 	addi	r2,r2,2740
   83590:	10800017 	ldw	r2,0(r2)
   83594:	1005003a 	cmpeq	r2,r2,zero
   83598:	1000061e 	bne	r2,zero,835b4 <alt_get_errno+0x3c>
   8359c:	00800274 	movhi	r2,9
   835a0:	1082ad04 	addi	r2,r2,2740
   835a4:	10800017 	ldw	r2,0(r2)
   835a8:	103ee83a 	callr	r2
   835ac:	e0bfff15 	stw	r2,-4(fp)
   835b0:	00000306 	br	835c0 <alt_get_errno+0x48>
   835b4:	00800274 	movhi	r2,9
   835b8:	10899404 	addi	r2,r2,9808
   835bc:	e0bfff15 	stw	r2,-4(fp)
   835c0:	e0bfff17 	ldw	r2,-4(fp)
}
   835c4:	e037883a 	mov	sp,fp
   835c8:	dfc00117 	ldw	ra,4(sp)
   835cc:	df000017 	ldw	fp,0(sp)
   835d0:	dec00204 	addi	sp,sp,8
   835d4:	f800283a 	ret

000835d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   835d8:	defffc04 	addi	sp,sp,-16
   835dc:	dfc00315 	stw	ra,12(sp)
   835e0:	df000215 	stw	fp,8(sp)
   835e4:	dc000115 	stw	r16,4(sp)
   835e8:	df000104 	addi	fp,sp,4
   835ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   835f0:	e0bfff17 	ldw	r2,-4(fp)
   835f4:	108000d0 	cmplti	r2,r2,3
   835f8:	10000f1e 	bne	r2,zero,83638 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   835fc:	e13fff17 	ldw	r4,-4(fp)
   83600:	04000274 	movhi	r16,9
   83604:	843e1d04 	addi	r16,r16,-1932
   83608:	01400304 	movi	r5,12
   8360c:	0082d2c0 	call	82d2c <__mulsi3>
   83610:	1405883a 	add	r2,r2,r16
   83614:	10800204 	addi	r2,r2,8
   83618:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8361c:	e13fff17 	ldw	r4,-4(fp)
   83620:	04000274 	movhi	r16,9
   83624:	843e1d04 	addi	r16,r16,-1932
   83628:	01400304 	movi	r5,12
   8362c:	0082d2c0 	call	82d2c <__mulsi3>
   83630:	1405883a 	add	r2,r2,r16
   83634:	10000015 	stw	zero,0(r2)
  }
}
   83638:	e037883a 	mov	sp,fp
   8363c:	dfc00217 	ldw	ra,8(sp)
   83640:	df000117 	ldw	fp,4(sp)
   83644:	dc000017 	ldw	r16,0(sp)
   83648:	dec00304 	addi	sp,sp,12
   8364c:	f800283a 	ret

00083650 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   83650:	defff804 	addi	sp,sp,-32
   83654:	df000715 	stw	fp,28(sp)
   83658:	df000704 	addi	fp,sp,28
   8365c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83660:	0005303a 	rdctl	r2,status
   83664:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83668:	e0fffb17 	ldw	r3,-20(fp)
   8366c:	00bfff84 	movi	r2,-2
   83670:	1884703a 	and	r2,r3,r2
   83674:	1001703a 	wrctl	status,r2
  
  return context;
   83678:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8367c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   83680:	d0a00a17 	ldw	r2,-32728(gp)
   83684:	10c000c4 	addi	r3,r2,3
   83688:	00bfff04 	movi	r2,-4
   8368c:	1884703a 	and	r2,r3,r2
   83690:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   83694:	d0e00a17 	ldw	r3,-32728(gp)
   83698:	e0bffe17 	ldw	r2,-8(fp)
   8369c:	1887883a 	add	r3,r3,r2
   836a0:	00800434 	movhi	r2,16
   836a4:	10800004 	addi	r2,r2,0
   836a8:	10c0072e 	bgeu	r2,r3,836c8 <sbrk+0x78>
   836ac:	e0bffd17 	ldw	r2,-12(fp)
   836b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   836b4:	e0bffa17 	ldw	r2,-24(fp)
   836b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   836bc:	00bfffc4 	movi	r2,-1
   836c0:	e0bfff15 	stw	r2,-4(fp)
   836c4:	00000c06 	br	836f8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   836c8:	d0a00a17 	ldw	r2,-32728(gp)
   836cc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   836d0:	d0e00a17 	ldw	r3,-32728(gp)
   836d4:	e0bffe17 	ldw	r2,-8(fp)
   836d8:	1885883a 	add	r2,r3,r2
   836dc:	d0a00a15 	stw	r2,-32728(gp)
   836e0:	e0bffd17 	ldw	r2,-12(fp)
   836e4:	e0bff915 	stw	r2,-28(fp)
   836e8:	e0bff917 	ldw	r2,-28(fp)
   836ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   836f0:	e0bffc17 	ldw	r2,-16(fp)
   836f4:	e0bfff15 	stw	r2,-4(fp)
   836f8:	e0bfff17 	ldw	r2,-4(fp)
} 
   836fc:	e037883a 	mov	sp,fp
   83700:	df000017 	ldw	fp,0(sp)
   83704:	dec00104 	addi	sp,sp,4
   83708:	f800283a 	ret

0008370c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8370c:	defff704 	addi	sp,sp,-36
   83710:	dfc00815 	stw	ra,32(sp)
   83714:	df000715 	stw	fp,28(sp)
   83718:	df000704 	addi	fp,sp,28
   8371c:	e13ffb15 	stw	r4,-20(fp)
   83720:	e17ffc15 	stw	r5,-16(fp)
   83724:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83728:	e0bffb17 	ldw	r2,-20(fp)
   8372c:	1004803a 	cmplt	r2,r2,zero
   83730:	1000091e 	bne	r2,zero,83758 <write+0x4c>
   83734:	e13ffb17 	ldw	r4,-20(fp)
   83738:	01400304 	movi	r5,12
   8373c:	0082d2c0 	call	82d2c <__mulsi3>
   83740:	1007883a 	mov	r3,r2
   83744:	00800274 	movhi	r2,9
   83748:	10be1d04 	addi	r2,r2,-1932
   8374c:	1887883a 	add	r3,r3,r2
   83750:	e0ffff15 	stw	r3,-4(fp)
   83754:	00000106 	br	8375c <write+0x50>
   83758:	e03fff15 	stw	zero,-4(fp)
   8375c:	e0bfff17 	ldw	r2,-4(fp)
   83760:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   83764:	e0bffa17 	ldw	r2,-24(fp)
   83768:	1005003a 	cmpeq	r2,r2,zero
   8376c:	1000241e 	bne	r2,zero,83800 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   83770:	e0bffa17 	ldw	r2,-24(fp)
   83774:	10800217 	ldw	r2,8(r2)
   83778:	108000cc 	andi	r2,r2,3
   8377c:	1005003a 	cmpeq	r2,r2,zero
   83780:	10001a1e 	bne	r2,zero,837ec <write+0xe0>
   83784:	e0bffa17 	ldw	r2,-24(fp)
   83788:	10800017 	ldw	r2,0(r2)
   8378c:	10800617 	ldw	r2,24(r2)
   83790:	1005003a 	cmpeq	r2,r2,zero
   83794:	1000151e 	bne	r2,zero,837ec <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   83798:	e0bffa17 	ldw	r2,-24(fp)
   8379c:	10800017 	ldw	r2,0(r2)
   837a0:	10800617 	ldw	r2,24(r2)
   837a4:	e17ffc17 	ldw	r5,-16(fp)
   837a8:	e1bffd17 	ldw	r6,-12(fp)
   837ac:	e13ffa17 	ldw	r4,-24(fp)
   837b0:	103ee83a 	callr	r2
   837b4:	e0bff915 	stw	r2,-28(fp)
   837b8:	e0bff917 	ldw	r2,-28(fp)
   837bc:	1004403a 	cmpge	r2,r2,zero
   837c0:	1000071e 	bne	r2,zero,837e0 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   837c4:	00838300 	call	83830 <alt_get_errno>
   837c8:	e0fff917 	ldw	r3,-28(fp)
   837cc:	00c7c83a 	sub	r3,zero,r3
   837d0:	10c00015 	stw	r3,0(r2)
        return -1;
   837d4:	00bfffc4 	movi	r2,-1
   837d8:	e0bffe15 	stw	r2,-8(fp)
   837dc:	00000e06 	br	83818 <write+0x10c>
      }
      return rval;
   837e0:	e0bff917 	ldw	r2,-28(fp)
   837e4:	e0bffe15 	stw	r2,-8(fp)
   837e8:	00000b06 	br	83818 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   837ec:	00838300 	call	83830 <alt_get_errno>
   837f0:	1007883a 	mov	r3,r2
   837f4:	00800344 	movi	r2,13
   837f8:	18800015 	stw	r2,0(r3)
   837fc:	00000406 	br	83810 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   83800:	00838300 	call	83830 <alt_get_errno>
   83804:	1007883a 	mov	r3,r2
   83808:	00801444 	movi	r2,81
   8380c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   83810:	00bfffc4 	movi	r2,-1
   83814:	e0bffe15 	stw	r2,-8(fp)
   83818:	e0bffe17 	ldw	r2,-8(fp)
}
   8381c:	e037883a 	mov	sp,fp
   83820:	dfc00117 	ldw	ra,4(sp)
   83824:	df000017 	ldw	fp,0(sp)
   83828:	dec00204 	addi	sp,sp,8
   8382c:	f800283a 	ret

00083830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83830:	defffd04 	addi	sp,sp,-12
   83834:	dfc00215 	stw	ra,8(sp)
   83838:	df000115 	stw	fp,4(sp)
   8383c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   83840:	00800274 	movhi	r2,9
   83844:	1082ad04 	addi	r2,r2,2740
   83848:	10800017 	ldw	r2,0(r2)
   8384c:	1005003a 	cmpeq	r2,r2,zero
   83850:	1000061e 	bne	r2,zero,8386c <alt_get_errno+0x3c>
   83854:	00800274 	movhi	r2,9
   83858:	1082ad04 	addi	r2,r2,2740
   8385c:	10800017 	ldw	r2,0(r2)
   83860:	103ee83a 	callr	r2
   83864:	e0bfff15 	stw	r2,-4(fp)
   83868:	00000306 	br	83878 <alt_get_errno+0x48>
   8386c:	00800274 	movhi	r2,9
   83870:	10899404 	addi	r2,r2,9808
   83874:	e0bfff15 	stw	r2,-4(fp)
   83878:	e0bfff17 	ldw	r2,-4(fp)
}
   8387c:	e037883a 	mov	sp,fp
   83880:	dfc00117 	ldw	ra,4(sp)
   83884:	df000017 	ldw	fp,0(sp)
   83888:	dec00204 	addi	sp,sp,8
   8388c:	f800283a 	ret

00083890 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   83890:	deffdf04 	addi	sp,sp,-132
   83894:	dfc02015 	stw	ra,128(sp)
   83898:	df001f15 	stw	fp,124(sp)
   8389c:	df001f04 	addi	fp,sp,124
   838a0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   838a4:	e17fe204 	addi	r5,fp,-120
   838a8:	01003fc4 	movi	r4,255
   838ac:	008b6e80 	call	8b6e8 <OSTaskQuery>
   838b0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   838b4:	e0bffe83 	ldbu	r2,-6(fp)
   838b8:	10803fcc 	andi	r2,r2,255
   838bc:	1004c03a 	cmpne	r2,r2,zero
   838c0:	1000191e 	bne	r2,zero,83928 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
   838c4:	e0bfee83 	ldbu	r2,-70(fp)
   838c8:	10803fcc 	andi	r2,r2,255
   838cc:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   838d0:	d126f617 	ldw	r4,-25640(gp)
   838d4:	e17ffd04 	addi	r5,fp,-12
   838d8:	0089c340 	call	89c34 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   838dc:	e0bffe43 	ldbu	r2,-7(fp)
   838e0:	10803fcc 	andi	r2,r2,255
   838e4:	1005003a 	cmpeq	r2,r2,zero
   838e8:	1000071e 	bne	r2,zero,83908 <__env_lock+0x78>
   838ec:	d0e00b17 	ldw	r3,-32724(gp)
   838f0:	e0bfe117 	ldw	r2,-124(fp)
   838f4:	10c0041e 	bne	r2,r3,83908 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
   838f8:	d0a6f517 	ldw	r2,-25644(gp)
   838fc:	10800044 	addi	r2,r2,1
   83900:	d0a6f515 	stw	r2,-25644(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
   83904:	00000806 	br	83928 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   83908:	d126f617 	ldw	r4,-25640(gp)
   8390c:	e1bffe84 	addi	r6,fp,-6
   83910:	000b883a 	mov	r5,zero
   83914:	00897140 	call	89714 <OSSemPend>
    locks  = 1;
   83918:	00800044 	movi	r2,1
   8391c:	d0a6f515 	stw	r2,-25644(gp)
    lockid = id;
   83920:	e0bfe117 	ldw	r2,-124(fp)
   83924:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   83928:	e037883a 	mov	sp,fp
   8392c:	dfc00117 	ldw	ra,4(sp)
   83930:	df000017 	ldw	fp,0(sp)
   83934:	dec00204 	addi	sp,sp,8
   83938:	f800283a 	ret

0008393c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   8393c:	defffd04 	addi	sp,sp,-12
   83940:	dfc00215 	stw	ra,8(sp)
   83944:	df000115 	stw	fp,4(sp)
   83948:	df000104 	addi	fp,sp,4
   8394c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   83950:	d0a6f517 	ldw	r2,-25644(gp)
   83954:	1005003a 	cmpeq	r2,r2,zero
   83958:	10000a1e 	bne	r2,zero,83984 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   8395c:	d0a6f517 	ldw	r2,-25644(gp)
   83960:	10bfffc4 	addi	r2,r2,-1
   83964:	d0a6f515 	stw	r2,-25644(gp)
   83968:	d0a6f517 	ldw	r2,-25644(gp)
   8396c:	1004c03a 	cmpne	r2,r2,zero
   83970:	1000041e 	bne	r2,zero,83984 <__env_unlock+0x48>
  {
    lockid = -1;
   83974:	00bfffc4 	movi	r2,-1
   83978:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
   8397c:	d126f617 	ldw	r4,-25640(gp)
   83980:	0089b0c0 	call	89b0c <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   83984:	e037883a 	mov	sp,fp
   83988:	dfc00117 	ldw	ra,4(sp)
   8398c:	df000017 	ldw	fp,0(sp)
   83990:	dec00204 	addi	sp,sp,8
   83994:	f800283a 	ret

00083998 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   83998:	deffdb04 	addi	sp,sp,-148
   8399c:	dfc02415 	stw	ra,144(sp)
   839a0:	df002315 	stw	fp,140(sp)
   839a4:	df002304 	addi	fp,sp,140
   839a8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   839ac:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   839b0:	00800274 	movhi	r2,9
   839b4:	10899d44 	addi	r2,r2,9845
   839b8:	10800003 	ldbu	r2,0(r2)
   839bc:	10803fcc 	andi	r2,r2,255
   839c0:	10800058 	cmpnei	r2,r2,1
   839c4:	1000311e 	bne	r2,zero,83a8c <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   839c8:	e17fe204 	addi	r5,fp,-120
   839cc:	01003fc4 	movi	r4,255
   839d0:	008b6e80 	call	8b6e8 <OSTaskQuery>
   839d4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   839d8:	e0bffe83 	ldbu	r2,-6(fp)
   839dc:	10803fcc 	andi	r2,r2,255
   839e0:	1004c03a 	cmpne	r2,r2,zero
   839e4:	1000291e 	bne	r2,zero,83a8c <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
   839e8:	e0bfee83 	ldbu	r2,-70(fp)
   839ec:	10803fcc 	andi	r2,r2,255
   839f0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   839f4:	d126f817 	ldw	r4,-25632(gp)
   839f8:	e17ffd04 	addi	r5,fp,-12
   839fc:	0089c340 	call	89c34 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83a00:	0005303a 	rdctl	r2,status
   83a04:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83a08:	e0ffdf17 	ldw	r3,-132(fp)
   83a0c:	00bfff84 	movi	r2,-2
   83a10:	1884703a 	and	r2,r3,r2
   83a14:	1001703a 	wrctl	status,r2
  
  return context;
   83a18:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   83a1c:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
   83a20:	e0bffd0b 	ldhu	r2,-12(fp)
   83a24:	10bfffcc 	andi	r2,r2,65535
   83a28:	1004c03a 	cmpne	r2,r2,zero
   83a2c:	10000b1e 	bne	r2,zero,83a5c <__malloc_lock+0xc4>
   83a30:	d0e00c17 	ldw	r3,-32720(gp)
   83a34:	e0bfe117 	ldw	r2,-124(fp)
   83a38:	10c0081e 	bne	r2,r3,83a5c <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
   83a3c:	d0a6f717 	ldw	r2,-25636(gp)
   83a40:	10800044 	addi	r2,r2,1
   83a44:	d0a6f715 	stw	r2,-25636(gp)
   83a48:	e0bfe017 	ldw	r2,-128(fp)
   83a4c:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83a50:	e0bfde17 	ldw	r2,-136(fp)
   83a54:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
   83a58:	00000c06 	br	83a8c <__malloc_lock+0xf4>
   83a5c:	e0bfe017 	ldw	r2,-128(fp)
   83a60:	e0bfdd15 	stw	r2,-140(fp)
   83a64:	e0bfdd17 	ldw	r2,-140(fp)
   83a68:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   83a6c:	d126f817 	ldw	r4,-25632(gp)
   83a70:	e1bffe84 	addi	r6,fp,-6
   83a74:	000b883a 	mov	r5,zero
   83a78:	00897140 	call	89714 <OSSemPend>
    locks  = 1;
   83a7c:	00800044 	movi	r2,1
   83a80:	d0a6f715 	stw	r2,-25636(gp)
    lockid = id;
   83a84:	e0bfe117 	ldw	r2,-124(fp)
   83a88:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   83a8c:	e037883a 	mov	sp,fp
   83a90:	dfc00117 	ldw	ra,4(sp)
   83a94:	df000017 	ldw	fp,0(sp)
   83a98:	dec00204 	addi	sp,sp,8
   83a9c:	f800283a 	ret

00083aa0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   83aa0:	defff804 	addi	sp,sp,-32
   83aa4:	dfc00715 	stw	ra,28(sp)
   83aa8:	df000615 	stw	fp,24(sp)
   83aac:	df000604 	addi	fp,sp,24
   83ab0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   83ab4:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
   83ab8:	00800274 	movhi	r2,9
   83abc:	10899d44 	addi	r2,r2,9845
   83ac0:	10800003 	ldbu	r2,0(r2)
   83ac4:	10803fcc 	andi	r2,r2,255
   83ac8:	10800058 	cmpnei	r2,r2,1
   83acc:	1000231e 	bne	r2,zero,83b5c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83ad0:	0005303a 	rdctl	r2,status
   83ad4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83ad8:	e0fffd17 	ldw	r3,-12(fp)
   83adc:	00bfff84 	movi	r2,-2
   83ae0:	1884703a 	and	r2,r3,r2
   83ae4:	1001703a 	wrctl	status,r2
  
  return context;
   83ae8:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
   83aec:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
   83af0:	d0a6f717 	ldw	r2,-25636(gp)
   83af4:	1004c03a 	cmpne	r2,r2,zero
   83af8:	1000051e 	bne	r2,zero,83b10 <__malloc_unlock+0x70>
   83afc:	e0bffe17 	ldw	r2,-8(fp)
   83b00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83b04:	e0bffc17 	ldw	r2,-16(fp)
   83b08:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   83b0c:	00001306 	br	83b5c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   83b10:	d0a6f717 	ldw	r2,-25636(gp)
   83b14:	10bfffc4 	addi	r2,r2,-1
   83b18:	d0a6f715 	stw	r2,-25636(gp)
   83b1c:	d0a6f717 	ldw	r2,-25636(gp)
   83b20:	1004c03a 	cmpne	r2,r2,zero
   83b24:	1000091e 	bne	r2,zero,83b4c <__malloc_unlock+0xac>
  {
    lockid = -1;
   83b28:	00bfffc4 	movi	r2,-1
   83b2c:	d0a00c15 	stw	r2,-32720(gp)
   83b30:	e0bffe17 	ldw	r2,-8(fp)
   83b34:	e0bffb15 	stw	r2,-20(fp)
   83b38:	e0bffb17 	ldw	r2,-20(fp)
   83b3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   83b40:	d126f817 	ldw	r4,-25632(gp)
   83b44:	0089b0c0 	call	89b0c <OSSemPost>
   83b48:	00000406 	br	83b5c <__malloc_unlock+0xbc>
   83b4c:	e0bffe17 	ldw	r2,-8(fp)
   83b50:	e0bffa15 	stw	r2,-24(fp)
   83b54:	e0bffa17 	ldw	r2,-24(fp)
   83b58:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   83b5c:	e037883a 	mov	sp,fp
   83b60:	dfc00117 	ldw	ra,4(sp)
   83b64:	df000017 	ldw	fp,0(sp)
   83b68:	dec00204 	addi	sp,sp,8
   83b6c:	f800283a 	ret

00083b70 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   83b70:	defff604 	addi	sp,sp,-40
   83b74:	dfc00915 	stw	ra,36(sp)
   83b78:	df000815 	stw	fp,32(sp)
   83b7c:	df000804 	addi	fp,sp,32
   83b80:	e13ffc15 	stw	r4,-16(fp)
   83b84:	e17ffd15 	stw	r5,-12(fp)
   83b88:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   83b8c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   83b90:	e0bffe17 	ldw	r2,-8(fp)
   83b94:	1004c03a 	cmpne	r2,r2,zero
   83b98:	1000021e 	bne	r2,zero,83ba4 <OSEventNameGet+0x34>
        return (0);
   83b9c:	e03fff15 	stw	zero,-4(fp)
   83ba0:	00003906 	br	83c88 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   83ba4:	e0bffc17 	ldw	r2,-16(fp)
   83ba8:	1004c03a 	cmpne	r2,r2,zero
   83bac:	1000051e 	bne	r2,zero,83bc4 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   83bb0:	e0fffe17 	ldw	r3,-8(fp)
   83bb4:	00800104 	movi	r2,4
   83bb8:	18800005 	stb	r2,0(r3)
        return (0);
   83bbc:	e03fff15 	stw	zero,-4(fp)
   83bc0:	00003106 	br	83c88 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   83bc4:	e0bffd17 	ldw	r2,-12(fp)
   83bc8:	1004c03a 	cmpne	r2,r2,zero
   83bcc:	1000051e 	bne	r2,zero,83be4 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   83bd0:	e0fffe17 	ldw	r3,-8(fp)
   83bd4:	00800304 	movi	r2,12
   83bd8:	18800005 	stb	r2,0(r3)
        return (0);
   83bdc:	e03fff15 	stw	zero,-4(fp)
   83be0:	00002906 	br	83c88 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   83be4:	d0a70703 	ldbu	r2,-25572(gp)
   83be8:	10803fcc 	andi	r2,r2,255
   83bec:	1005003a 	cmpeq	r2,r2,zero
   83bf0:	1000051e 	bne	r2,zero,83c08 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
   83bf4:	e0fffe17 	ldw	r3,-8(fp)
   83bf8:	00800444 	movi	r2,17
   83bfc:	18800005 	stb	r2,0(r3)
        return (0);
   83c00:	e03fff15 	stw	zero,-4(fp)
   83c04:	00002006 	br	83c88 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
   83c08:	e0bffc17 	ldw	r2,-16(fp)
   83c0c:	10800003 	ldbu	r2,0(r2)
   83c10:	10803fcc 	andi	r2,r2,255
   83c14:	10bfffc4 	addi	r2,r2,-1
   83c18:	10800128 	cmpgeui	r2,r2,4
   83c1c:	1000161e 	bne	r2,zero,83c78 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83c20:	0005303a 	rdctl	r2,status
   83c24:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83c28:	e0fff917 	ldw	r3,-28(fp)
   83c2c:	00bfff84 	movi	r2,-2
   83c30:	1884703a 	and	r2,r3,r2
   83c34:	1001703a 	wrctl	status,r2
  
  return context;
   83c38:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   83c3c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   83c40:	e0bffc17 	ldw	r2,-16(fp)
   83c44:	11400384 	addi	r5,r2,14
   83c48:	e13ffd17 	ldw	r4,-12(fp)
   83c4c:	00856f40 	call	856f4 <OS_StrCopy>
   83c50:	e0bffb05 	stb	r2,-20(fp)
   83c54:	e0bffa17 	ldw	r2,-24(fp)
   83c58:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83c5c:	e0bff817 	ldw	r2,-32(fp)
   83c60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   83c64:	e0bffe17 	ldw	r2,-8(fp)
   83c68:	10000005 	stb	zero,0(r2)
    return (len);
   83c6c:	e0bffb03 	ldbu	r2,-20(fp)
   83c70:	e0bfff15 	stw	r2,-4(fp)
   83c74:	00000406 	br	83c88 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   83c78:	e0fffe17 	ldw	r3,-8(fp)
   83c7c:	00800044 	movi	r2,1
   83c80:	18800005 	stb	r2,0(r3)
             return (0);
   83c84:	e03fff15 	stw	zero,-4(fp)
   83c88:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
   83c8c:	e037883a 	mov	sp,fp
   83c90:	dfc00117 	ldw	ra,4(sp)
   83c94:	df000017 	ldw	fp,0(sp)
   83c98:	dec00204 	addi	sp,sp,8
   83c9c:	f800283a 	ret

00083ca0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   83ca0:	defff604 	addi	sp,sp,-40
   83ca4:	dfc00915 	stw	ra,36(sp)
   83ca8:	df000815 	stw	fp,32(sp)
   83cac:	df000804 	addi	fp,sp,32
   83cb0:	e13ffd15 	stw	r4,-12(fp)
   83cb4:	e17ffe15 	stw	r5,-8(fp)
   83cb8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   83cbc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   83cc0:	e0bfff17 	ldw	r2,-4(fp)
   83cc4:	1005003a 	cmpeq	r2,r2,zero
   83cc8:	1000411e 	bne	r2,zero,83dd0 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   83ccc:	e0bffd17 	ldw	r2,-12(fp)
   83cd0:	1004c03a 	cmpne	r2,r2,zero
   83cd4:	1000041e 	bne	r2,zero,83ce8 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   83cd8:	e0ffff17 	ldw	r3,-4(fp)
   83cdc:	00800104 	movi	r2,4
   83ce0:	18800005 	stb	r2,0(r3)
        return;
   83ce4:	00003a06 	br	83dd0 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   83ce8:	e0bffe17 	ldw	r2,-8(fp)
   83cec:	1004c03a 	cmpne	r2,r2,zero
   83cf0:	1000041e 	bne	r2,zero,83d04 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   83cf4:	e0ffff17 	ldw	r3,-4(fp)
   83cf8:	00800304 	movi	r2,12
   83cfc:	18800005 	stb	r2,0(r3)
        return;
   83d00:	00003306 	br	83dd0 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   83d04:	d0a70703 	ldbu	r2,-25572(gp)
   83d08:	10803fcc 	andi	r2,r2,255
   83d0c:	1005003a 	cmpeq	r2,r2,zero
   83d10:	1000041e 	bne	r2,zero,83d24 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
   83d14:	e0ffff17 	ldw	r3,-4(fp)
   83d18:	00800484 	movi	r2,18
   83d1c:	18800005 	stb	r2,0(r3)
        return;
   83d20:	00002b06 	br	83dd0 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
   83d24:	e0bffd17 	ldw	r2,-12(fp)
   83d28:	10800003 	ldbu	r2,0(r2)
   83d2c:	10803fcc 	andi	r2,r2,255
   83d30:	10bfffc4 	addi	r2,r2,-1
   83d34:	10800128 	cmpgeui	r2,r2,4
   83d38:	10000f1e 	bne	r2,zero,83d78 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83d3c:	0005303a 	rdctl	r2,status
   83d40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83d44:	e0fffa17 	ldw	r3,-24(fp)
   83d48:	00bfff84 	movi	r2,-2
   83d4c:	1884703a 	and	r2,r3,r2
   83d50:	1001703a 	wrctl	status,r2
  
  return context;
   83d54:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   83d58:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   83d5c:	e13ffe17 	ldw	r4,-8(fp)
   83d60:	00857740 	call	85774 <OS_StrLen>
   83d64:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   83d68:	e0bffc03 	ldbu	r2,-16(fp)
   83d6c:	10800828 	cmpgeui	r2,r2,32
   83d70:	1000051e 	bne	r2,zero,83d88 <OSEventNameSet+0xe8>
   83d74:	00000c06 	br	83da8 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   83d78:	e0ffff17 	ldw	r3,-4(fp)
   83d7c:	00800044 	movi	r2,1
   83d80:	18800005 	stb	r2,0(r3)
             return;
   83d84:	00001206 	br	83dd0 <OSEventNameSet+0x130>
   83d88:	e0bffb17 	ldw	r2,-20(fp)
   83d8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   83d90:	e0bff917 	ldw	r2,-28(fp)
   83d94:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   83d98:	e0ffff17 	ldw	r3,-4(fp)
   83d9c:	008002c4 	movi	r2,11
   83da0:	18800005 	stb	r2,0(r3)
        return;
   83da4:	00000a06 	br	83dd0 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   83da8:	e0bffd17 	ldw	r2,-12(fp)
   83dac:	11000384 	addi	r4,r2,14
   83db0:	e17ffe17 	ldw	r5,-8(fp)
   83db4:	00856f40 	call	856f4 <OS_StrCopy>
   83db8:	e0bffb17 	ldw	r2,-20(fp)
   83dbc:	e0bff815 	stw	r2,-32(fp)
   83dc0:	e0bff817 	ldw	r2,-32(fp)
   83dc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   83dc8:	e0bfff17 	ldw	r2,-4(fp)
   83dcc:	10000005 	stb	zero,0(r2)
}
   83dd0:	e037883a 	mov	sp,fp
   83dd4:	dfc00117 	ldw	ra,4(sp)
   83dd8:	df000017 	ldw	fp,0(sp)
   83ddc:	dec00204 	addi	sp,sp,8
   83de0:	f800283a 	ret

00083de4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   83de4:	deffe704 	addi	sp,sp,-100
   83de8:	dfc01815 	stw	ra,96(sp)
   83dec:	df001715 	stw	fp,92(sp)
   83df0:	df001704 	addi	fp,sp,92
   83df4:	e13ff615 	stw	r4,-40(fp)
   83df8:	e17ff715 	stw	r5,-36(fp)
   83dfc:	e1bff815 	stw	r6,-32(fp)
   83e00:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   83e04:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   83e08:	e0800217 	ldw	r2,8(fp)
   83e0c:	1004c03a 	cmpne	r2,r2,zero
   83e10:	1000021e 	bne	r2,zero,83e1c <OSEventPendMulti+0x38>
        return (0);
   83e14:	e03fff15 	stw	zero,-4(fp)
   83e18:	00019906 	br	84480 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   83e1c:	e0bff617 	ldw	r2,-40(fp)
   83e20:	1004c03a 	cmpne	r2,r2,zero
   83e24:	1000051e 	bne	r2,zero,83e3c <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
   83e28:	e0c00217 	ldw	r3,8(fp)
   83e2c:	00800104 	movi	r2,4
   83e30:	18800005 	stb	r2,0(r3)
        return (0);
   83e34:	e03fff15 	stw	zero,-4(fp)
   83e38:	00019106 	br	84480 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   83e3c:	e0bff717 	ldw	r2,-36(fp)
   83e40:	1004c03a 	cmpne	r2,r2,zero
   83e44:	1000051e 	bne	r2,zero,83e5c <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
   83e48:	e0c00217 	ldw	r3,8(fp)
   83e4c:	00800104 	movi	r2,4
   83e50:	18800005 	stb	r2,0(r3)
        return (0);
   83e54:	e03fff15 	stw	zero,-4(fp)
   83e58:	00018906 	br	84480 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   83e5c:	e0bff817 	ldw	r2,-32(fp)
   83e60:	1004c03a 	cmpne	r2,r2,zero
   83e64:	1000051e 	bne	r2,zero,83e7c <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
   83e68:	e0c00217 	ldw	r3,8(fp)
   83e6c:	00800104 	movi	r2,4
   83e70:	18800005 	stb	r2,0(r3)
        return (0);
   83e74:	e03fff15 	stw	zero,-4(fp)
   83e78:	00018106 	br	84480 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   83e7c:	e0bff717 	ldw	r2,-36(fp)
   83e80:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   83e84:	e0bff617 	ldw	r2,-40(fp)
   83e88:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
   83e8c:	e0bff517 	ldw	r2,-44(fp)
   83e90:	10800017 	ldw	r2,0(r2)
   83e94:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
   83e98:	00001806 	br	83efc <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   83e9c:	e0bff417 	ldw	r2,-48(fp)
   83ea0:	10800003 	ldbu	r2,0(r2)
   83ea4:	10803fcc 	andi	r2,r2,255
   83ea8:	e0bffe15 	stw	r2,-8(fp)
   83eac:	e0fffe17 	ldw	r3,-8(fp)
   83eb0:	188000a0 	cmpeqi	r2,r3,2
   83eb4:	10000b1e 	bne	r2,zero,83ee4 <OSEventPendMulti+0x100>
   83eb8:	e0fffe17 	ldw	r3,-8(fp)
   83ebc:	188000e0 	cmpeqi	r2,r3,3
   83ec0:	1000081e 	bne	r2,zero,83ee4 <OSEventPendMulti+0x100>
   83ec4:	e0fffe17 	ldw	r3,-8(fp)
   83ec8:	18800060 	cmpeqi	r2,r3,1
   83ecc:	1000051e 	bne	r2,zero,83ee4 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   83ed0:	e0c00217 	ldw	r3,8(fp)
   83ed4:	00800044 	movi	r2,1
   83ed8:	18800005 	stb	r2,0(r3)
                 return (0);
   83edc:	e03fff15 	stw	zero,-4(fp)
   83ee0:	00016706 	br	84480 <OSEventPendMulti+0x69c>
        }
        pevents++;
   83ee4:	e0bff517 	ldw	r2,-44(fp)
   83ee8:	10800104 	addi	r2,r2,4
   83eec:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
   83ef0:	e0bff517 	ldw	r2,-44(fp)
   83ef4:	10800017 	ldw	r2,0(r2)
   83ef8:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   83efc:	e0bff417 	ldw	r2,-48(fp)
   83f00:	1004c03a 	cmpne	r2,r2,zero
   83f04:	103fe51e 	bne	r2,zero,83e9c <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   83f08:	d0a70703 	ldbu	r2,-25572(gp)
   83f0c:	10803fcc 	andi	r2,r2,255
   83f10:	1005003a 	cmpeq	r2,r2,zero
   83f14:	1000051e 	bne	r2,zero,83f2c <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   83f18:	e0c00217 	ldw	r3,8(fp)
   83f1c:	00800084 	movi	r2,2
   83f20:	18800005 	stb	r2,0(r3)
        return (0);
   83f24:	e03fff15 	stw	zero,-4(fp)
   83f28:	00015506 	br	84480 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   83f2c:	d0a6f903 	ldbu	r2,-25628(gp)
   83f30:	10803fcc 	andi	r2,r2,255
   83f34:	1005003a 	cmpeq	r2,r2,zero
   83f38:	1000051e 	bne	r2,zero,83f50 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   83f3c:	e0c00217 	ldw	r3,8(fp)
   83f40:	00800344 	movi	r2,13
   83f44:	18800005 	stb	r2,0(r3)
        return (0);
   83f48:	e03fff15 	stw	zero,-4(fp)
   83f4c:	00014c06 	br	84480 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83f50:	0005303a 	rdctl	r2,status
   83f54:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83f58:	e0ffef17 	ldw	r3,-68(fp)
   83f5c:	00bfff84 	movi	r2,-2
   83f60:	1884703a 	and	r2,r3,r2
   83f64:	1001703a 	wrctl	status,r2
  
  return context;
   83f68:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   83f6c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
   83f70:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
   83f74:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   83f78:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
   83f7c:	e0bff617 	ldw	r2,-40(fp)
   83f80:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
   83f84:	e0bff517 	ldw	r2,-44(fp)
   83f88:	10800017 	ldw	r2,0(r2)
   83f8c:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   83f90:	00008f06 	br	841d0 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
   83f94:	e0bff417 	ldw	r2,-48(fp)
   83f98:	10800003 	ldbu	r2,0(r2)
   83f9c:	10803fcc 	andi	r2,r2,255
   83fa0:	e0bffd15 	stw	r2,-12(fp)
   83fa4:	e0fffd17 	ldw	r3,-12(fp)
   83fa8:	188000a0 	cmpeqi	r2,r3,2
   83fac:	1000441e 	bne	r2,zero,840c0 <OSEventPendMulti+0x2dc>
   83fb0:	e0fffd17 	ldw	r3,-12(fp)
   83fb4:	188000e0 	cmpeqi	r2,r3,3
   83fb8:	1000041e 	bne	r2,zero,83fcc <OSEventPendMulti+0x1e8>
   83fbc:	e0fffd17 	ldw	r3,-12(fp)
   83fc0:	18800060 	cmpeqi	r2,r3,1
   83fc4:	1000211e 	bne	r2,zero,8404c <OSEventPendMulti+0x268>
   83fc8:	00006f06 	br	84188 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   83fcc:	e0bff417 	ldw	r2,-48(fp)
   83fd0:	1080020b 	ldhu	r2,8(r2)
   83fd4:	10bfffcc 	andi	r2,r2,65535
   83fd8:	1005003a 	cmpeq	r2,r2,zero
   83fdc:	1000171e 	bne	r2,zero,8403c <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   83fe0:	e0bff417 	ldw	r2,-48(fp)
   83fe4:	1080020b 	ldhu	r2,8(r2)
   83fe8:	10bfffc4 	addi	r2,r2,-1
   83fec:	1007883a 	mov	r3,r2
   83ff0:	e0bff417 	ldw	r2,-48(fp)
   83ff4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   83ff8:	e0fff717 	ldw	r3,-36(fp)
   83ffc:	e0bff417 	ldw	r2,-48(fp)
   84000:	18800015 	stw	r2,0(r3)
   84004:	e0bff717 	ldw	r2,-36(fp)
   84008:	10800104 	addi	r2,r2,4
   8400c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
   84010:	00800044 	movi	r2,1
   84014:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   84018:	e0bff817 	ldw	r2,-32(fp)
   8401c:	10000015 	stw	zero,0(r2)
   84020:	e0bff817 	ldw	r2,-32(fp)
   84024:	10800104 	addi	r2,r2,4
   84028:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
   8402c:	e0bff18b 	ldhu	r2,-58(fp)
   84030:	10800044 	addi	r2,r2,1
   84034:	e0bff18d 	sth	r2,-58(fp)
   84038:	00005f06 	br	841b8 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   8403c:	e0bff103 	ldbu	r2,-60(fp)
   84040:	10800054 	ori	r2,r2,1
   84044:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   84048:	00005b06 	br	841b8 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   8404c:	e0bff417 	ldw	r2,-48(fp)
   84050:	10800117 	ldw	r2,4(r2)
   84054:	1005003a 	cmpeq	r2,r2,zero
   84058:	1000151e 	bne	r2,zero,840b0 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   8405c:	e0bff417 	ldw	r2,-48(fp)
   84060:	10c00117 	ldw	r3,4(r2)
   84064:	e0bff817 	ldw	r2,-32(fp)
   84068:	10c00015 	stw	r3,0(r2)
   8406c:	e0bff817 	ldw	r2,-32(fp)
   84070:	10800104 	addi	r2,r2,4
   84074:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
   84078:	e0bff417 	ldw	r2,-48(fp)
   8407c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   84080:	e0fff717 	ldw	r3,-36(fp)
   84084:	e0bff417 	ldw	r2,-48(fp)
   84088:	18800015 	stw	r2,0(r3)
   8408c:	e0bff717 	ldw	r2,-36(fp)
   84090:	10800104 	addi	r2,r2,4
   84094:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
   84098:	00800044 	movi	r2,1
   8409c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
   840a0:	e0bff18b 	ldhu	r2,-58(fp)
   840a4:	10800044 	addi	r2,r2,1
   840a8:	e0bff18d 	sth	r2,-58(fp)
   840ac:	00004206 	br	841b8 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   840b0:	e0bff103 	ldbu	r2,-60(fp)
   840b4:	10800094 	ori	r2,r2,2
   840b8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   840bc:	00003e06 	br	841b8 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   840c0:	e0bff417 	ldw	r2,-48(fp)
   840c4:	10800117 	ldw	r2,4(r2)
   840c8:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   840cc:	e0bff317 	ldw	r2,-52(fp)
   840d0:	1080058b 	ldhu	r2,22(r2)
   840d4:	10bfffcc 	andi	r2,r2,65535
   840d8:	1005003a 	cmpeq	r2,r2,zero
   840dc:	1000261e 	bne	r2,zero,84178 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   840e0:	e0bff317 	ldw	r2,-52(fp)
   840e4:	11000417 	ldw	r4,16(r2)
   840e8:	20c00017 	ldw	r3,0(r4)
   840ec:	e0bff817 	ldw	r2,-32(fp)
   840f0:	10c00015 	stw	r3,0(r2)
   840f4:	e0bff817 	ldw	r2,-32(fp)
   840f8:	10800104 	addi	r2,r2,4
   840fc:	e0bff815 	stw	r2,-32(fp)
   84100:	20c00104 	addi	r3,r4,4
   84104:	e0bff317 	ldw	r2,-52(fp)
   84108:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   8410c:	e0bff317 	ldw	r2,-52(fp)
   84110:	10c00417 	ldw	r3,16(r2)
   84114:	e0bff317 	ldw	r2,-52(fp)
   84118:	10800217 	ldw	r2,8(r2)
   8411c:	1880041e 	bne	r3,r2,84130 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   84120:	e0bff317 	ldw	r2,-52(fp)
   84124:	10c00117 	ldw	r3,4(r2)
   84128:	e0bff317 	ldw	r2,-52(fp)
   8412c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   84130:	e0bff317 	ldw	r2,-52(fp)
   84134:	1080058b 	ldhu	r2,22(r2)
   84138:	10bfffc4 	addi	r2,r2,-1
   8413c:	1007883a 	mov	r3,r2
   84140:	e0bff317 	ldw	r2,-52(fp)
   84144:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   84148:	e0fff717 	ldw	r3,-36(fp)
   8414c:	e0bff417 	ldw	r2,-48(fp)
   84150:	18800015 	stw	r2,0(r3)
   84154:	e0bff717 	ldw	r2,-36(fp)
   84158:	10800104 	addi	r2,r2,4
   8415c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
   84160:	00800044 	movi	r2,1
   84164:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
   84168:	e0bff18b 	ldhu	r2,-58(fp)
   8416c:	10800044 	addi	r2,r2,1
   84170:	e0bff18d 	sth	r2,-58(fp)
   84174:	00001006 	br	841b8 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   84178:	e0bff103 	ldbu	r2,-60(fp)
   8417c:	10800114 	ori	r2,r2,4
   84180:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   84184:	00000c06 	br	841b8 <OSEventPendMulti+0x3d4>
   84188:	e0bff017 	ldw	r2,-64(fp)
   8418c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84190:	e0bfee17 	ldw	r2,-72(fp)
   84194:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   84198:	e0bff717 	ldw	r2,-36(fp)
   8419c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   841a0:	e0c00217 	ldw	r3,8(fp)
   841a4:	00800044 	movi	r2,1
   841a8:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
   841ac:	e0bff18b 	ldhu	r2,-58(fp)
   841b0:	e0bfff15 	stw	r2,-4(fp)
   841b4:	0000b206 	br	84480 <OSEventPendMulti+0x69c>
        }
        pevents++;
   841b8:	e0bff517 	ldw	r2,-44(fp)
   841bc:	10800104 	addi	r2,r2,4
   841c0:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
   841c4:	e0bff517 	ldw	r2,-44(fp)
   841c8:	10800017 	ldw	r2,0(r2)
   841cc:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   841d0:	e0bff417 	ldw	r2,-48(fp)
   841d4:	1004c03a 	cmpne	r2,r2,zero
   841d8:	103f6e1e 	bne	r2,zero,83f94 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   841dc:	e0bff203 	ldbu	r2,-56(fp)
   841e0:	10800058 	cmpnei	r2,r2,1
   841e4:	10000b1e 	bne	r2,zero,84214 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   841e8:	e0bff717 	ldw	r2,-36(fp)
   841ec:	10000015 	stw	zero,0(r2)
   841f0:	e0bff017 	ldw	r2,-64(fp)
   841f4:	e0bfed15 	stw	r2,-76(fp)
   841f8:	e0bfed17 	ldw	r2,-76(fp)
   841fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   84200:	e0800217 	ldw	r2,8(fp)
   84204:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   84208:	e0fff18b 	ldhu	r3,-58(fp)
   8420c:	e0ffff15 	stw	r3,-4(fp)
   84210:	00009b06 	br	84480 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   84214:	d1270817 	ldw	r4,-25568(gp)
   84218:	d0a70817 	ldw	r2,-25568(gp)
   8421c:	10c00c03 	ldbu	r3,48(r2)
   84220:	e0bff103 	ldbu	r2,-60(fp)
   84224:	1884b03a 	or	r2,r3,r2
   84228:	1007883a 	mov	r3,r2
   8422c:	00bfe004 	movi	r2,-128
   84230:	1884b03a 	or	r2,r3,r2
   84234:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   84238:	d0a70817 	ldw	r2,-25568(gp)
   8423c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   84240:	d0e70817 	ldw	r3,-25568(gp)
   84244:	e0bff90b 	ldhu	r2,-28(fp)
   84248:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   8424c:	e13ff617 	ldw	r4,-40(fp)
   84250:	0084e140 	call	84e14 <OS_EventTaskWaitMulti>
   84254:	e0bff017 	ldw	r2,-64(fp)
   84258:	e0bfec15 	stw	r2,-80(fp)
   8425c:	e0bfec17 	ldw	r2,-80(fp)
   84260:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   84264:	00855b00 	call	855b0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84268:	0005303a 	rdctl	r2,status
   8426c:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84270:	e0ffeb17 	ldw	r3,-84(fp)
   84274:	00bfff84 	movi	r2,-2
   84278:	1884703a 	and	r2,r3,r2
   8427c:	1001703a 	wrctl	status,r2
  
  return context;
   84280:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
   84284:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   84288:	d0a70817 	ldw	r2,-25568(gp)
   8428c:	10800c43 	ldbu	r2,49(r2)
   84290:	10803fcc 	andi	r2,r2,255
   84294:	e0bffc15 	stw	r2,-16(fp)
   84298:	e0fffc17 	ldw	r3,-16(fp)
   8429c:	1805003a 	cmpeq	r2,r3,zero
   842a0:	1000041e 	bne	r2,zero,842b4 <OSEventPendMulti+0x4d0>
   842a4:	e0fffc17 	ldw	r3,-16(fp)
   842a8:	188000a0 	cmpeqi	r2,r3,2
   842ac:	1000011e 	bne	r2,zero,842b4 <OSEventPendMulti+0x4d0>
   842b0:	00001906 	br	84318 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   842b4:	d0a70817 	ldw	r2,-25568(gp)
   842b8:	10800717 	ldw	r2,28(r2)
   842bc:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   842c0:	e0bff417 	ldw	r2,-48(fp)
   842c4:	1005003a 	cmpeq	r2,r2,zero
   842c8:	10000c1e 	bne	r2,zero,842fc <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   842cc:	e0fff717 	ldw	r3,-36(fp)
   842d0:	e0bff417 	ldw	r2,-48(fp)
   842d4:	18800015 	stw	r2,0(r3)
   842d8:	e0bff717 	ldw	r2,-36(fp)
   842dc:	10800104 	addi	r2,r2,4
   842e0:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   842e4:	e0bff717 	ldw	r2,-36(fp)
   842e8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   842ec:	e0bff18b 	ldhu	r2,-58(fp)
   842f0:	10800044 	addi	r2,r2,1
   842f4:	e0bff18d 	sth	r2,-58(fp)
   842f8:	00000a06 	br	84324 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   842fc:	d0a70817 	ldw	r2,-25568(gp)
   84300:	00c00044 	movi	r3,1
   84304:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   84308:	d1270817 	ldw	r4,-25568(gp)
   8430c:	e17ff617 	ldw	r5,-40(fp)
   84310:	00850200 	call	85020 <OS_EventTaskRemoveMulti>
             }
			 break;
   84314:	00000306 	br	84324 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   84318:	d1270817 	ldw	r4,-25568(gp)
   8431c:	e17ff617 	ldw	r5,-40(fp)
   84320:	00850200 	call	85020 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
   84324:	d0a70817 	ldw	r2,-25568(gp)
   84328:	10800c43 	ldbu	r2,49(r2)
   8432c:	10803fcc 	andi	r2,r2,255
   84330:	e0bffb15 	stw	r2,-20(fp)
   84334:	e0fffb17 	ldw	r3,-20(fp)
   84338:	1805003a 	cmpeq	r2,r3,zero
   8433c:	1000041e 	bne	r2,zero,84350 <OSEventPendMulti+0x56c>
   84340:	e0fffb17 	ldw	r3,-20(fp)
   84344:	188000a0 	cmpeqi	r2,r3,2
   84348:	10002c1e 	bne	r2,zero,843fc <OSEventPendMulti+0x618>
   8434c:	00003406 	br	84420 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   84350:	e0bff417 	ldw	r2,-48(fp)
   84354:	10800003 	ldbu	r2,0(r2)
   84358:	10803fcc 	andi	r2,r2,255
   8435c:	e0bffa15 	stw	r2,-24(fp)
   84360:	e0fffa17 	ldw	r3,-24(fp)
   84364:	18800050 	cmplti	r2,r3,1
   84368:	1000151e 	bne	r2,zero,843c0 <OSEventPendMulti+0x5dc>
   8436c:	e0fffa17 	ldw	r3,-24(fp)
   84370:	188000d0 	cmplti	r2,r3,3
   84374:	10000a1e 	bne	r2,zero,843a0 <OSEventPendMulti+0x5bc>
   84378:	e0fffa17 	ldw	r3,-24(fp)
   8437c:	188000e0 	cmpeqi	r2,r3,3
   84380:	1000011e 	bne	r2,zero,84388 <OSEventPendMulti+0x5a4>
   84384:	00000e06 	br	843c0 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   84388:	e0bff817 	ldw	r2,-32(fp)
   8438c:	10000015 	stw	zero,0(r2)
   84390:	e0bff817 	ldw	r2,-32(fp)
   84394:	10800104 	addi	r2,r2,4
   84398:	e0bff815 	stw	r2,-32(fp)
                      break;
   8439c:	00001406 	br	843f0 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   843a0:	d0a70817 	ldw	r2,-25568(gp)
   843a4:	10c00917 	ldw	r3,36(r2)
   843a8:	e0bff817 	ldw	r2,-32(fp)
   843ac:	10c00015 	stw	r3,0(r2)
   843b0:	e0bff817 	ldw	r2,-32(fp)
   843b4:	10800104 	addi	r2,r2,4
   843b8:	e0bff815 	stw	r2,-32(fp)
                      break;
   843bc:	00000c06 	br	843f0 <OSEventPendMulti+0x60c>
   843c0:	e0bff017 	ldw	r2,-64(fp)
   843c4:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   843c8:	e0bfea17 	ldw	r2,-88(fp)
   843cc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   843d0:	e0bff717 	ldw	r2,-36(fp)
   843d4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   843d8:	e0c00217 	ldw	r3,8(fp)
   843dc:	00800044 	movi	r2,1
   843e0:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
   843e4:	e0bff18b 	ldhu	r2,-58(fp)
   843e8:	e0bfff15 	stw	r2,-4(fp)
   843ec:	00002406 	br	84480 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
   843f0:	e0800217 	ldw	r2,8(fp)
   843f4:	10000005 	stb	zero,0(r2)
             break;
   843f8:	00001106 	br	84440 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   843fc:	e0bff817 	ldw	r2,-32(fp)
   84400:	10000015 	stw	zero,0(r2)
   84404:	e0bff817 	ldw	r2,-32(fp)
   84408:	10800104 	addi	r2,r2,4
   8440c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   84410:	e0c00217 	ldw	r3,8(fp)
   84414:	00800384 	movi	r2,14
   84418:	18800005 	stb	r2,0(r3)
             break;
   8441c:	00000806 	br	84440 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   84420:	e0bff817 	ldw	r2,-32(fp)
   84424:	10000015 	stw	zero,0(r2)
   84428:	e0bff817 	ldw	r2,-32(fp)
   8442c:	10800104 	addi	r2,r2,4
   84430:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   84434:	e0c00217 	ldw	r3,8(fp)
   84438:	00800284 	movi	r2,10
   8443c:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   84440:	d0a70817 	ldw	r2,-25568(gp)
   84444:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   84448:	d0a70817 	ldw	r2,-25568(gp)
   8444c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   84450:	d0a70817 	ldw	r2,-25568(gp)
   84454:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   84458:	d0a70817 	ldw	r2,-25568(gp)
   8445c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   84460:	d0a70817 	ldw	r2,-25568(gp)
   84464:	10000915 	stw	zero,36(r2)
   84468:	e0bff017 	ldw	r2,-64(fp)
   8446c:	e0bfe915 	stw	r2,-92(fp)
   84470:	e0bfe917 	ldw	r2,-92(fp)
   84474:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   84478:	e0fff18b 	ldhu	r3,-58(fp)
   8447c:	e0ffff15 	stw	r3,-4(fp)
   84480:	e0bfff17 	ldw	r2,-4(fp)
}
   84484:	e037883a 	mov	sp,fp
   84488:	dfc00117 	ldw	ra,4(sp)
   8448c:	df000017 	ldw	fp,0(sp)
   84490:	dec00204 	addi	sp,sp,8
   84494:	f800283a 	ret

00084498 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   84498:	defffe04 	addi	sp,sp,-8
   8449c:	dfc00115 	stw	ra,4(sp)
   844a0:	df000015 	stw	fp,0(sp)
   844a4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   844a8:	008e64c0 	call	8e64c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   844ac:	00852680 	call	85268 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   844b0:	00852ac0 	call	852ac <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   844b4:	00854100 	call	85410 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   844b8:	008518c0 	call	8518c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   844bc:	00874c00 	call	874c0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   844c0:	0087e980 	call	87e98 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   844c4:	00891f40 	call	891f4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   844c8:	00853180 	call	85318 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   844cc:	00853940 	call	85394 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   844d0:	008e6680 	call	8e668 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   844d4:	0085c980 	call	85c98 <OSDebugInit>
#endif
}
   844d8:	e037883a 	mov	sp,fp
   844dc:	dfc00117 	ldw	ra,4(sp)
   844e0:	df000017 	ldw	fp,0(sp)
   844e4:	dec00204 	addi	sp,sp,8
   844e8:	f800283a 	ret

000844ec <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   844ec:	defffc04 	addi	sp,sp,-16
   844f0:	df000315 	stw	fp,12(sp)
   844f4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   844f8:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
   844fc:	d0a6f943 	ldbu	r2,-25627(gp)
   84500:	10803fcc 	andi	r2,r2,255
   84504:	10800058 	cmpnei	r2,r2,1
   84508:	1000131e 	bne	r2,zero,84558 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8450c:	0005303a 	rdctl	r2,status
   84510:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84514:	e0fffe17 	ldw	r3,-8(fp)
   84518:	00bfff84 	movi	r2,-2
   8451c:	1884703a 	and	r2,r3,r2
   84520:	1001703a 	wrctl	status,r2
  
  return context;
   84524:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   84528:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
   8452c:	d0a70703 	ldbu	r2,-25572(gp)
   84530:	10803fcc 	andi	r2,r2,255
   84534:	10803fe0 	cmpeqi	r2,r2,255
   84538:	1000031e 	bne	r2,zero,84548 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   8453c:	d0a70703 	ldbu	r2,-25572(gp)
   84540:	10800044 	addi	r2,r2,1
   84544:	d0a70705 	stb	r2,-25572(gp)
   84548:	e0bfff17 	ldw	r2,-4(fp)
   8454c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84550:	e0bffd17 	ldw	r2,-12(fp)
   84554:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   84558:	e037883a 	mov	sp,fp
   8455c:	df000017 	ldw	fp,0(sp)
   84560:	dec00104 	addi	sp,sp,4
   84564:	f800283a 	ret

00084568 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   84568:	defffb04 	addi	sp,sp,-20
   8456c:	dfc00415 	stw	ra,16(sp)
   84570:	df000315 	stw	fp,12(sp)
   84574:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   84578:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
   8457c:	d0a6f943 	ldbu	r2,-25627(gp)
   84580:	10803fcc 	andi	r2,r2,255
   84584:	10800058 	cmpnei	r2,r2,1
   84588:	1000321e 	bne	r2,zero,84654 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8458c:	0005303a 	rdctl	r2,status
   84590:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84594:	e0fffe17 	ldw	r3,-8(fp)
   84598:	00bfff84 	movi	r2,-2
   8459c:	1884703a 	and	r2,r3,r2
   845a0:	1001703a 	wrctl	status,r2
  
  return context;
   845a4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   845a8:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   845ac:	d0a70703 	ldbu	r2,-25572(gp)
   845b0:	10803fcc 	andi	r2,r2,255
   845b4:	1005003a 	cmpeq	r2,r2,zero
   845b8:	1000031e 	bne	r2,zero,845c8 <OSIntExit+0x60>
            OSIntNesting--;
   845bc:	d0a70703 	ldbu	r2,-25572(gp)
   845c0:	10bfffc4 	addi	r2,r2,-1
   845c4:	d0a70705 	stb	r2,-25572(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   845c8:	d0a70703 	ldbu	r2,-25572(gp)
   845cc:	10803fcc 	andi	r2,r2,255
   845d0:	1004c03a 	cmpne	r2,r2,zero
   845d4:	10001b1e 	bne	r2,zero,84644 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   845d8:	d0a6f903 	ldbu	r2,-25628(gp)
   845dc:	10803fcc 	andi	r2,r2,255
   845e0:	1004c03a 	cmpne	r2,r2,zero
   845e4:	1000171e 	bne	r2,zero,84644 <OSIntExit+0xdc>
                OS_SchedNew();
   845e8:	00856840 	call	85684 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   845ec:	d0a6fb03 	ldbu	r2,-25620(gp)
   845f0:	d0e6fb43 	ldbu	r3,-25619(gp)
   845f4:	11003fcc 	andi	r4,r2,255
   845f8:	18803fcc 	andi	r2,r3,255
   845fc:	20801126 	beq	r4,r2,84644 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   84600:	d0a6fb03 	ldbu	r2,-25620(gp)
   84604:	10803fcc 	andi	r2,r2,255
   84608:	00c002b4 	movhi	r3,10
   8460c:	18e63204 	addi	r3,r3,-26424
   84610:	1085883a 	add	r2,r2,r2
   84614:	1085883a 	add	r2,r2,r2
   84618:	10c5883a 	add	r2,r2,r3
   8461c:	10800017 	ldw	r2,0(r2)
   84620:	d0a70315 	stw	r2,-25588(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   84624:	d0e70317 	ldw	r3,-25588(gp)
   84628:	18800e17 	ldw	r2,56(r3)
   8462c:	10800044 	addi	r2,r2,1
   84630:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   84634:	d0a6fe17 	ldw	r2,-25608(gp)
   84638:	10800044 	addi	r2,r2,1
   8463c:	d0a6fe15 	stw	r2,-25608(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   84640:	008e1d80 	call	8e1d8 <OSCtxSw>
   84644:	e0bfff17 	ldw	r2,-4(fp)
   84648:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8464c:	e0bffd17 	ldw	r2,-12(fp)
   84650:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   84654:	e037883a 	mov	sp,fp
   84658:	dfc00117 	ldw	ra,4(sp)
   8465c:	df000017 	ldw	fp,0(sp)
   84660:	dec00204 	addi	sp,sp,8
   84664:	f800283a 	ret

00084668 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   84668:	defffc04 	addi	sp,sp,-16
   8466c:	df000315 	stw	fp,12(sp)
   84670:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   84674:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   84678:	d0a6f943 	ldbu	r2,-25627(gp)
   8467c:	10803fcc 	andi	r2,r2,255
   84680:	10800058 	cmpnei	r2,r2,1
   84684:	1000171e 	bne	r2,zero,846e4 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84688:	0005303a 	rdctl	r2,status
   8468c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84690:	e0fffe17 	ldw	r3,-8(fp)
   84694:	00bfff84 	movi	r2,-2
   84698:	1884703a 	and	r2,r3,r2
   8469c:	1001703a 	wrctl	status,r2
  
  return context;
   846a0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   846a4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   846a8:	d0a70703 	ldbu	r2,-25572(gp)
   846ac:	10803fcc 	andi	r2,r2,255
   846b0:	1004c03a 	cmpne	r2,r2,zero
   846b4:	1000071e 	bne	r2,zero,846d4 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   846b8:	d0a6f903 	ldbu	r2,-25628(gp)
   846bc:	10803fcc 	andi	r2,r2,255
   846c0:	10803fe0 	cmpeqi	r2,r2,255
   846c4:	1000031e 	bne	r2,zero,846d4 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   846c8:	d0a6f903 	ldbu	r2,-25628(gp)
   846cc:	10800044 	addi	r2,r2,1
   846d0:	d0a6f905 	stb	r2,-25628(gp)
   846d4:	e0bfff17 	ldw	r2,-4(fp)
   846d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   846dc:	e0bffd17 	ldw	r2,-12(fp)
   846e0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   846e4:	e037883a 	mov	sp,fp
   846e8:	df000017 	ldw	fp,0(sp)
   846ec:	dec00104 	addi	sp,sp,4
   846f0:	f800283a 	ret

000846f4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   846f4:	defff804 	addi	sp,sp,-32
   846f8:	dfc00715 	stw	ra,28(sp)
   846fc:	df000615 	stw	fp,24(sp)
   84700:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   84704:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   84708:	d0a6f943 	ldbu	r2,-25627(gp)
   8470c:	10803fcc 	andi	r2,r2,255
   84710:	10800058 	cmpnei	r2,r2,1
   84714:	10002b1e 	bne	r2,zero,847c4 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84718:	0005303a 	rdctl	r2,status
   8471c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84720:	e0fffe17 	ldw	r3,-8(fp)
   84724:	00bfff84 	movi	r2,-2
   84728:	1884703a 	and	r2,r3,r2
   8472c:	1001703a 	wrctl	status,r2
  
  return context;
   84730:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   84734:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   84738:	d0a6f903 	ldbu	r2,-25628(gp)
   8473c:	10803fcc 	andi	r2,r2,255
   84740:	1005003a 	cmpeq	r2,r2,zero
   84744:	10001b1e 	bne	r2,zero,847b4 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   84748:	d0a6f903 	ldbu	r2,-25628(gp)
   8474c:	10bfffc4 	addi	r2,r2,-1
   84750:	d0a6f905 	stb	r2,-25628(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   84754:	d0a6f903 	ldbu	r2,-25628(gp)
   84758:	10803fcc 	andi	r2,r2,255
   8475c:	1004c03a 	cmpne	r2,r2,zero
   84760:	10000f1e 	bne	r2,zero,847a0 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   84764:	d0a70703 	ldbu	r2,-25572(gp)
   84768:	10803fcc 	andi	r2,r2,255
   8476c:	1004c03a 	cmpne	r2,r2,zero
   84770:	1000061e 	bne	r2,zero,8478c <OSSchedUnlock+0x98>
   84774:	e0bfff17 	ldw	r2,-4(fp)
   84778:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8477c:	e0bffd17 	ldw	r2,-12(fp)
   84780:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   84784:	00855b00 	call	855b0 <OS_Sched>
   84788:	00000e06 	br	847c4 <OSSchedUnlock+0xd0>
   8478c:	e0bfff17 	ldw	r2,-4(fp)
   84790:	e0bffc15 	stw	r2,-16(fp)
   84794:	e0bffc17 	ldw	r2,-16(fp)
   84798:	1001703a 	wrctl	status,r2
   8479c:	00000906 	br	847c4 <OSSchedUnlock+0xd0>
   847a0:	e0bfff17 	ldw	r2,-4(fp)
   847a4:	e0bffb15 	stw	r2,-20(fp)
   847a8:	e0bffb17 	ldw	r2,-20(fp)
   847ac:	1001703a 	wrctl	status,r2
   847b0:	00000406 	br	847c4 <OSSchedUnlock+0xd0>
   847b4:	e0bfff17 	ldw	r2,-4(fp)
   847b8:	e0bffa15 	stw	r2,-24(fp)
   847bc:	e0bffa17 	ldw	r2,-24(fp)
   847c0:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   847c4:	e037883a 	mov	sp,fp
   847c8:	dfc00117 	ldw	ra,4(sp)
   847cc:	df000017 	ldw	fp,0(sp)
   847d0:	dec00204 	addi	sp,sp,8
   847d4:	f800283a 	ret

000847d8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   847d8:	defffe04 	addi	sp,sp,-8
   847dc:	dfc00115 	stw	ra,4(sp)
   847e0:	df000015 	stw	fp,0(sp)
   847e4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   847e8:	d0a6f943 	ldbu	r2,-25627(gp)
   847ec:	10803fcc 	andi	r2,r2,255
   847f0:	1004c03a 	cmpne	r2,r2,zero
   847f4:	10000f1e 	bne	r2,zero,84834 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   847f8:	00856840 	call	85684 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   847fc:	d0a6fb03 	ldbu	r2,-25620(gp)
   84800:	d0a6fb45 	stb	r2,-25619(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   84804:	d0a6fb03 	ldbu	r2,-25620(gp)
   84808:	10803fcc 	andi	r2,r2,255
   8480c:	00c002b4 	movhi	r3,10
   84810:	18e63204 	addi	r3,r3,-26424
   84814:	1085883a 	add	r2,r2,r2
   84818:	1085883a 	add	r2,r2,r2
   8481c:	10c5883a 	add	r2,r2,r3
   84820:	10800017 	ldw	r2,0(r2)
   84824:	d0a70315 	stw	r2,-25588(gp)
        OSTCBCur      = OSTCBHighRdy;
   84828:	d0a70317 	ldw	r2,-25588(gp)
   8482c:	d0a70815 	stw	r2,-25568(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   84830:	008e2640 	call	8e264 <OSStartHighRdy>
    }
}
   84834:	e037883a 	mov	sp,fp
   84838:	dfc00117 	ldw	ra,4(sp)
   8483c:	df000017 	ldw	fp,0(sp)
   84840:	dec00204 	addi	sp,sp,8
   84844:	f800283a 	ret

00084848 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   84848:	defff904 	addi	sp,sp,-28
   8484c:	dfc00615 	stw	ra,24(sp)
   84850:	df000515 	stw	fp,20(sp)
   84854:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   84858:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   8485c:	01000084 	movi	r4,2
   84860:	008b8a80 	call	8b8a8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84864:	0005303a 	rdctl	r2,status
   84868:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8486c:	e0fffe17 	ldw	r3,-8(fp)
   84870:	00bfff84 	movi	r2,-2
   84874:	1884703a 	and	r2,r3,r2
   84878:	1001703a 	wrctl	status,r2
  
  return context;
   8487c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   84880:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   84884:	d026fa15 	stw	zero,-25624(gp)
   84888:	e0bfff17 	ldw	r2,-4(fp)
   8488c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84890:	e0bffd17 	ldw	r2,-12(fp)
   84894:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   84898:	01001904 	movi	r4,100
   8489c:	008b8a80 	call	8b8a8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   848a0:	0005303a 	rdctl	r2,status
   848a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   848a8:	e0fffc17 	ldw	r3,-16(fp)
   848ac:	00bfff84 	movi	r2,-2
   848b0:	1884703a 	and	r2,r3,r2
   848b4:	1001703a 	wrctl	status,r2
  
  return context;
   848b8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   848bc:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   848c0:	d0a6fa17 	ldw	r2,-25624(gp)
   848c4:	d0a6ff15 	stw	r2,-25604(gp)
    OSStatRdy    = OS_TRUE;
   848c8:	00800044 	movi	r2,1
   848cc:	d0a70b05 	stb	r2,-25556(gp)
   848d0:	e0bfff17 	ldw	r2,-4(fp)
   848d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   848d8:	e0bffb17 	ldw	r2,-20(fp)
   848dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   848e0:	e037883a 	mov	sp,fp
   848e4:	dfc00117 	ldw	ra,4(sp)
   848e8:	df000017 	ldw	fp,0(sp)
   848ec:	dec00204 	addi	sp,sp,8
   848f0:	f800283a 	ret

000848f4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   848f4:	defff604 	addi	sp,sp,-40
   848f8:	dfc00915 	stw	ra,36(sp)
   848fc:	df000815 	stw	fp,32(sp)
   84900:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   84904:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   84908:	008e6300 	call	8e630 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8490c:	0005303a 	rdctl	r2,status
   84910:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84914:	e0fffb17 	ldw	r3,-20(fp)
   84918:	00bfff84 	movi	r2,-2
   8491c:	1884703a 	and	r2,r3,r2
   84920:	1001703a 	wrctl	status,r2
  
  return context;
   84924:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   84928:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
   8492c:	d0a70917 	ldw	r2,-25564(gp)
   84930:	10800044 	addi	r2,r2,1
   84934:	d0a70915 	stw	r2,-25564(gp)
   84938:	e0bffc17 	ldw	r2,-16(fp)
   8493c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84940:	e0bffa17 	ldw	r2,-24(fp)
   84944:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   84948:	d0a6f943 	ldbu	r2,-25627(gp)
   8494c:	10803fcc 	andi	r2,r2,255
   84950:	10800058 	cmpnei	r2,r2,1
   84954:	1000721e 	bne	r2,zero,84b20 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   84958:	d0a6fd03 	ldbu	r2,-25612(gp)
   8495c:	10803fcc 	andi	r2,r2,255
   84960:	e0bfff15 	stw	r2,-4(fp)
   84964:	e0ffff17 	ldw	r3,-4(fp)
   84968:	18800060 	cmpeqi	r2,r3,1
   8496c:	10000a1e 	bne	r2,zero,84998 <OSTimeTick+0xa4>
   84970:	e0ffff17 	ldw	r3,-4(fp)
   84974:	188000a0 	cmpeqi	r2,r3,2
   84978:	1000091e 	bne	r2,zero,849a0 <OSTimeTick+0xac>
   8497c:	e0ffff17 	ldw	r3,-4(fp)
   84980:	1805003a 	cmpeq	r2,r3,zero
   84984:	1000011e 	bne	r2,zero,8498c <OSTimeTick+0x98>
   84988:	00000a06 	br	849b4 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   8498c:	00800044 	movi	r2,1
   84990:	e0bffd05 	stb	r2,-12(fp)
                 break;
   84994:	00000a06 	br	849c0 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   84998:	e03ffd05 	stb	zero,-12(fp)
                 break;
   8499c:	00000806 	br	849c0 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   849a0:	00800044 	movi	r2,1
   849a4:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   849a8:	00800044 	movi	r2,1
   849ac:	d0a6fd05 	stb	r2,-25612(gp)
                 break;
   849b0:	00000306 	br	849c0 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   849b4:	00800044 	movi	r2,1
   849b8:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   849bc:	d026fd05 	stb	zero,-25612(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   849c0:	e0bffd03 	ldbu	r2,-12(fp)
   849c4:	1005003a 	cmpeq	r2,r2,zero
   849c8:	1000551e 	bne	r2,zero,84b20 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   849cc:	d0a6fc17 	ldw	r2,-25616(gp)
   849d0:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   849d4:	00004d06 	br	84b0c <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   849d8:	0005303a 	rdctl	r2,status
   849dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   849e0:	e0fff917 	ldw	r3,-28(fp)
   849e4:	00bfff84 	movi	r2,-2
   849e8:	1884703a 	and	r2,r3,r2
   849ec:	1001703a 	wrctl	status,r2
  
  return context;
   849f0:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
   849f4:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   849f8:	e0bffe17 	ldw	r2,-8(fp)
   849fc:	10800b8b 	ldhu	r2,46(r2)
   84a00:	10bfffcc 	andi	r2,r2,65535
   84a04:	1005003a 	cmpeq	r2,r2,zero
   84a08:	1000391e 	bne	r2,zero,84af0 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   84a0c:	e0bffe17 	ldw	r2,-8(fp)
   84a10:	10800b8b 	ldhu	r2,46(r2)
   84a14:	10bfffc4 	addi	r2,r2,-1
   84a18:	1007883a 	mov	r3,r2
   84a1c:	e0bffe17 	ldw	r2,-8(fp)
   84a20:	10c00b8d 	sth	r3,46(r2)
   84a24:	e0bffe17 	ldw	r2,-8(fp)
   84a28:	10800b8b 	ldhu	r2,46(r2)
   84a2c:	10bfffcc 	andi	r2,r2,65535
   84a30:	1004c03a 	cmpne	r2,r2,zero
   84a34:	10002e1e 	bne	r2,zero,84af0 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   84a38:	e0bffe17 	ldw	r2,-8(fp)
   84a3c:	10800c03 	ldbu	r2,48(r2)
   84a40:	10803fcc 	andi	r2,r2,255
   84a44:	10800dcc 	andi	r2,r2,55
   84a48:	1005003a 	cmpeq	r2,r2,zero
   84a4c:	10000b1e 	bne	r2,zero,84a7c <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   84a50:	e0bffe17 	ldw	r2,-8(fp)
   84a54:	10c00c03 	ldbu	r3,48(r2)
   84a58:	00bff204 	movi	r2,-56
   84a5c:	1884703a 	and	r2,r3,r2
   84a60:	1007883a 	mov	r3,r2
   84a64:	e0bffe17 	ldw	r2,-8(fp)
   84a68:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   84a6c:	e0fffe17 	ldw	r3,-8(fp)
   84a70:	00800044 	movi	r2,1
   84a74:	18800c45 	stb	r2,49(r3)
   84a78:	00000206 	br	84a84 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   84a7c:	e0bffe17 	ldw	r2,-8(fp)
   84a80:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   84a84:	e0bffe17 	ldw	r2,-8(fp)
   84a88:	10800c03 	ldbu	r2,48(r2)
   84a8c:	10803fcc 	andi	r2,r2,255
   84a90:	1080020c 	andi	r2,r2,8
   84a94:	1004c03a 	cmpne	r2,r2,zero
   84a98:	1000151e 	bne	r2,zero,84af0 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   84a9c:	e0bffe17 	ldw	r2,-8(fp)
   84aa0:	10c00d83 	ldbu	r3,54(r2)
   84aa4:	d0a70503 	ldbu	r2,-25580(gp)
   84aa8:	1884b03a 	or	r2,r3,r2
   84aac:	d0a70505 	stb	r2,-25580(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   84ab0:	e0bffe17 	ldw	r2,-8(fp)
   84ab4:	10800d03 	ldbu	r2,52(r2)
   84ab8:	11003fcc 	andi	r4,r2,255
   84abc:	e0bffe17 	ldw	r2,-8(fp)
   84ac0:	10800d03 	ldbu	r2,52(r2)
   84ac4:	10c03fcc 	andi	r3,r2,255
   84ac8:	d0a70544 	addi	r2,gp,-25579
   84acc:	1885883a 	add	r2,r3,r2
   84ad0:	10c00003 	ldbu	r3,0(r2)
   84ad4:	e0bffe17 	ldw	r2,-8(fp)
   84ad8:	10800d43 	ldbu	r2,53(r2)
   84adc:	1884b03a 	or	r2,r3,r2
   84ae0:	1007883a 	mov	r3,r2
   84ae4:	d0a70544 	addi	r2,gp,-25579
   84ae8:	2085883a 	add	r2,r4,r2
   84aec:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   84af0:	e0bffe17 	ldw	r2,-8(fp)
   84af4:	10800517 	ldw	r2,20(r2)
   84af8:	e0bffe15 	stw	r2,-8(fp)
   84afc:	e0bffc17 	ldw	r2,-16(fp)
   84b00:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84b04:	e0bff817 	ldw	r2,-32(fp)
   84b08:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   84b0c:	e0bffe17 	ldw	r2,-8(fp)
   84b10:	10800c83 	ldbu	r2,50(r2)
   84b14:	10803fcc 	andi	r2,r2,255
   84b18:	10800518 	cmpnei	r2,r2,20
   84b1c:	103fae1e 	bne	r2,zero,849d8 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   84b20:	e037883a 	mov	sp,fp
   84b24:	dfc00117 	ldw	ra,4(sp)
   84b28:	df000017 	ldw	fp,0(sp)
   84b2c:	dec00204 	addi	sp,sp,8
   84b30:	f800283a 	ret

00084b34 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   84b34:	deffff04 	addi	sp,sp,-4
   84b38:	df000015 	stw	fp,0(sp)
   84b3c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   84b40:	00804784 	movi	r2,286
}
   84b44:	e037883a 	mov	sp,fp
   84b48:	df000017 	ldw	fp,0(sp)
   84b4c:	dec00104 	addi	sp,sp,4
   84b50:	f800283a 	ret

00084b54 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   84b54:	deffff04 	addi	sp,sp,-4
   84b58:	df000015 	stw	fp,0(sp)
   84b5c:	d839883a 	mov	fp,sp
}
   84b60:	e037883a 	mov	sp,fp
   84b64:	df000017 	ldw	fp,0(sp)
   84b68:	dec00104 	addi	sp,sp,4
   84b6c:	f800283a 	ret

00084b70 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   84b70:	defff804 	addi	sp,sp,-32
   84b74:	dfc00715 	stw	ra,28(sp)
   84b78:	df000615 	stw	fp,24(sp)
   84b7c:	df000604 	addi	fp,sp,24
   84b80:	e13ffc15 	stw	r4,-16(fp)
   84b84:	e17ffd15 	stw	r5,-12(fp)
   84b88:	e1bffe05 	stb	r6,-8(fp)
   84b8c:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   84b90:	e0bffc17 	ldw	r2,-16(fp)
   84b94:	10800283 	ldbu	r2,10(r2)
   84b98:	10c03fcc 	andi	r3,r2,255
   84b9c:	00800274 	movhi	r2,9
   84ba0:	10bbbb04 	addi	r2,r2,-4372
   84ba4:	10c5883a 	add	r2,r2,r3
   84ba8:	10800003 	ldbu	r2,0(r2)
   84bac:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   84bb0:	e0fffa83 	ldbu	r3,-22(fp)
   84bb4:	e0bffc17 	ldw	r2,-16(fp)
   84bb8:	1885883a 	add	r2,r3,r2
   84bbc:	10800204 	addi	r2,r2,8
   84bc0:	108000c3 	ldbu	r2,3(r2)
   84bc4:	10c03fcc 	andi	r3,r2,255
   84bc8:	00800274 	movhi	r2,9
   84bcc:	10bbbb04 	addi	r2,r2,-4372
   84bd0:	10c5883a 	add	r2,r2,r3
   84bd4:	10800003 	ldbu	r2,0(r2)
   84bd8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   84bdc:	e0bffa83 	ldbu	r2,-22(fp)
   84be0:	100490fa 	slli	r2,r2,3
   84be4:	1007883a 	mov	r3,r2
   84be8:	e0bffa43 	ldbu	r2,-23(fp)
   84bec:	1885883a 	add	r2,r3,r2
   84bf0:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   84bf4:	e0bffa03 	ldbu	r2,-24(fp)
   84bf8:	00c002b4 	movhi	r3,10
   84bfc:	18e63204 	addi	r3,r3,-26424
   84c00:	1085883a 	add	r2,r2,r2
   84c04:	1085883a 	add	r2,r2,r2
   84c08:	10c5883a 	add	r2,r2,r3
   84c0c:	10800017 	ldw	r2,0(r2)
   84c10:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   84c14:	e0bffb17 	ldw	r2,-20(fp)
   84c18:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   84c1c:	e0fffb17 	ldw	r3,-20(fp)
   84c20:	e0bffd17 	ldw	r2,-12(fp)
   84c24:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   84c28:	e0bffb17 	ldw	r2,-20(fp)
   84c2c:	10800c03 	ldbu	r2,48(r2)
   84c30:	1007883a 	mov	r3,r2
   84c34:	e0bffe03 	ldbu	r2,-8(fp)
   84c38:	0084303a 	nor	r2,zero,r2
   84c3c:	1884703a 	and	r2,r3,r2
   84c40:	1007883a 	mov	r3,r2
   84c44:	e0bffb17 	ldw	r2,-20(fp)
   84c48:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   84c4c:	e0fffb17 	ldw	r3,-20(fp)
   84c50:	e0bfff03 	ldbu	r2,-4(fp)
   84c54:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   84c58:	e0bffb17 	ldw	r2,-20(fp)
   84c5c:	10800c03 	ldbu	r2,48(r2)
   84c60:	10803fcc 	andi	r2,r2,255
   84c64:	1080020c 	andi	r2,r2,8
   84c68:	1004c03a 	cmpne	r2,r2,zero
   84c6c:	1000111e 	bne	r2,zero,84cb4 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   84c70:	e0bffb17 	ldw	r2,-20(fp)
   84c74:	10c00d83 	ldbu	r3,54(r2)
   84c78:	d0a70503 	ldbu	r2,-25580(gp)
   84c7c:	1884b03a 	or	r2,r3,r2
   84c80:	d0a70505 	stb	r2,-25580(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   84c84:	e13ffa83 	ldbu	r4,-22(fp)
   84c88:	e0fffa83 	ldbu	r3,-22(fp)
   84c8c:	d0a70544 	addi	r2,gp,-25579
   84c90:	1885883a 	add	r2,r3,r2
   84c94:	10c00003 	ldbu	r3,0(r2)
   84c98:	e0bffb17 	ldw	r2,-20(fp)
   84c9c:	10800d43 	ldbu	r2,53(r2)
   84ca0:	1884b03a 	or	r2,r3,r2
   84ca4:	1007883a 	mov	r3,r2
   84ca8:	d0a70544 	addi	r2,gp,-25579
   84cac:	2085883a 	add	r2,r4,r2
   84cb0:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   84cb4:	e13ffb17 	ldw	r4,-20(fp)
   84cb8:	e17ffc17 	ldw	r5,-16(fp)
   84cbc:	0084f680 	call	84f68 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   84cc0:	e0bffb17 	ldw	r2,-20(fp)
   84cc4:	10800817 	ldw	r2,32(r2)
   84cc8:	1005003a 	cmpeq	r2,r2,zero
   84ccc:	1000071e 	bne	r2,zero,84cec <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   84cd0:	e0bffb17 	ldw	r2,-20(fp)
   84cd4:	11400817 	ldw	r5,32(r2)
   84cd8:	e13ffb17 	ldw	r4,-20(fp)
   84cdc:	00850200 	call	85020 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   84ce0:	e0fffb17 	ldw	r3,-20(fp)
   84ce4:	e0bffc17 	ldw	r2,-16(fp)
   84ce8:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
   84cec:	e0bffa03 	ldbu	r2,-24(fp)
}
   84cf0:	e037883a 	mov	sp,fp
   84cf4:	dfc00117 	ldw	ra,4(sp)
   84cf8:	df000017 	ldw	fp,0(sp)
   84cfc:	dec00204 	addi	sp,sp,8
   84d00:	f800283a 	ret

00084d04 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   84d04:	defffd04 	addi	sp,sp,-12
   84d08:	df000215 	stw	fp,8(sp)
   84d0c:	df000204 	addi	fp,sp,8
   84d10:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   84d14:	d0e70817 	ldw	r3,-25568(gp)
   84d18:	e0bfff17 	ldw	r2,-4(fp)
   84d1c:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   84d20:	d0a70817 	ldw	r2,-25568(gp)
   84d24:	10800d03 	ldbu	r2,52(r2)
   84d28:	11003fcc 	andi	r4,r2,255
   84d2c:	d0a70817 	ldw	r2,-25568(gp)
   84d30:	10800d03 	ldbu	r2,52(r2)
   84d34:	10c03fcc 	andi	r3,r2,255
   84d38:	e0bfff17 	ldw	r2,-4(fp)
   84d3c:	1885883a 	add	r2,r3,r2
   84d40:	10800204 	addi	r2,r2,8
   84d44:	10c000c3 	ldbu	r3,3(r2)
   84d48:	d0a70817 	ldw	r2,-25568(gp)
   84d4c:	10800d43 	ldbu	r2,53(r2)
   84d50:	1884b03a 	or	r2,r3,r2
   84d54:	1007883a 	mov	r3,r2
   84d58:	e0bfff17 	ldw	r2,-4(fp)
   84d5c:	2085883a 	add	r2,r4,r2
   84d60:	10800204 	addi	r2,r2,8
   84d64:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   84d68:	e0bfff17 	ldw	r2,-4(fp)
   84d6c:	10c00283 	ldbu	r3,10(r2)
   84d70:	d0a70817 	ldw	r2,-25568(gp)
   84d74:	10800d83 	ldbu	r2,54(r2)
   84d78:	1884b03a 	or	r2,r3,r2
   84d7c:	1007883a 	mov	r3,r2
   84d80:	e0bfff17 	ldw	r2,-4(fp)
   84d84:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   84d88:	d0a70817 	ldw	r2,-25568(gp)
   84d8c:	10800d03 	ldbu	r2,52(r2)
   84d90:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   84d94:	e13ffe03 	ldbu	r4,-8(fp)
   84d98:	e0fffe03 	ldbu	r3,-8(fp)
   84d9c:	d0a70544 	addi	r2,gp,-25579
   84da0:	1885883a 	add	r2,r3,r2
   84da4:	10800003 	ldbu	r2,0(r2)
   84da8:	1007883a 	mov	r3,r2
   84dac:	d0a70817 	ldw	r2,-25568(gp)
   84db0:	10800d43 	ldbu	r2,53(r2)
   84db4:	0084303a 	nor	r2,zero,r2
   84db8:	1884703a 	and	r2,r3,r2
   84dbc:	1007883a 	mov	r3,r2
   84dc0:	d0a70544 	addi	r2,gp,-25579
   84dc4:	2085883a 	add	r2,r4,r2
   84dc8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   84dcc:	e0fffe03 	ldbu	r3,-8(fp)
   84dd0:	d0a70544 	addi	r2,gp,-25579
   84dd4:	1885883a 	add	r2,r3,r2
   84dd8:	10800003 	ldbu	r2,0(r2)
   84ddc:	10803fcc 	andi	r2,r2,255
   84de0:	1004c03a 	cmpne	r2,r2,zero
   84de4:	1000071e 	bne	r2,zero,84e04 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   84de8:	d0a70817 	ldw	r2,-25568(gp)
   84dec:	10800d83 	ldbu	r2,54(r2)
   84df0:	0084303a 	nor	r2,zero,r2
   84df4:	1007883a 	mov	r3,r2
   84df8:	d0a70503 	ldbu	r2,-25580(gp)
   84dfc:	1884703a 	and	r2,r3,r2
   84e00:	d0a70505 	stb	r2,-25580(gp)
    }
}
   84e04:	e037883a 	mov	sp,fp
   84e08:	df000017 	ldw	fp,0(sp)
   84e0c:	dec00104 	addi	sp,sp,4
   84e10:	f800283a 	ret

00084e14 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   84e14:	defffb04 	addi	sp,sp,-20
   84e18:	df000415 	stw	fp,16(sp)
   84e1c:	df000404 	addi	fp,sp,16
   84e20:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   84e24:	d0a70817 	ldw	r2,-25568(gp)
   84e28:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   84e2c:	d0e70817 	ldw	r3,-25568(gp)
   84e30:	e0bfff17 	ldw	r2,-4(fp)
   84e34:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
   84e38:	e0bfff17 	ldw	r2,-4(fp)
   84e3c:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
   84e40:	e0bffe17 	ldw	r2,-8(fp)
   84e44:	10800017 	ldw	r2,0(r2)
   84e48:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   84e4c:	00002006 	br	84ed0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   84e50:	d0a70817 	ldw	r2,-25568(gp)
   84e54:	10800d03 	ldbu	r2,52(r2)
   84e58:	11003fcc 	andi	r4,r2,255
   84e5c:	d0a70817 	ldw	r2,-25568(gp)
   84e60:	10800d03 	ldbu	r2,52(r2)
   84e64:	10c03fcc 	andi	r3,r2,255
   84e68:	e0bffd17 	ldw	r2,-12(fp)
   84e6c:	1885883a 	add	r2,r3,r2
   84e70:	10800204 	addi	r2,r2,8
   84e74:	10c000c3 	ldbu	r3,3(r2)
   84e78:	d0a70817 	ldw	r2,-25568(gp)
   84e7c:	10800d43 	ldbu	r2,53(r2)
   84e80:	1884b03a 	or	r2,r3,r2
   84e84:	1007883a 	mov	r3,r2
   84e88:	e0bffd17 	ldw	r2,-12(fp)
   84e8c:	2085883a 	add	r2,r4,r2
   84e90:	10800204 	addi	r2,r2,8
   84e94:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   84e98:	e0bffd17 	ldw	r2,-12(fp)
   84e9c:	10c00283 	ldbu	r3,10(r2)
   84ea0:	d0a70817 	ldw	r2,-25568(gp)
   84ea4:	10800d83 	ldbu	r2,54(r2)
   84ea8:	1884b03a 	or	r2,r3,r2
   84eac:	1007883a 	mov	r3,r2
   84eb0:	e0bffd17 	ldw	r2,-12(fp)
   84eb4:	10c00285 	stb	r3,10(r2)
        pevents++;
   84eb8:	e0bffe17 	ldw	r2,-8(fp)
   84ebc:	10800104 	addi	r2,r2,4
   84ec0:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
   84ec4:	e0bffe17 	ldw	r2,-8(fp)
   84ec8:	10800017 	ldw	r2,0(r2)
   84ecc:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   84ed0:	e0bffd17 	ldw	r2,-12(fp)
   84ed4:	1004c03a 	cmpne	r2,r2,zero
   84ed8:	103fdd1e 	bne	r2,zero,84e50 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   84edc:	d0a70817 	ldw	r2,-25568(gp)
   84ee0:	10800d03 	ldbu	r2,52(r2)
   84ee4:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   84ee8:	e13ffc03 	ldbu	r4,-16(fp)
   84eec:	e0fffc03 	ldbu	r3,-16(fp)
   84ef0:	d0a70544 	addi	r2,gp,-25579
   84ef4:	1885883a 	add	r2,r3,r2
   84ef8:	10800003 	ldbu	r2,0(r2)
   84efc:	1007883a 	mov	r3,r2
   84f00:	d0a70817 	ldw	r2,-25568(gp)
   84f04:	10800d43 	ldbu	r2,53(r2)
   84f08:	0084303a 	nor	r2,zero,r2
   84f0c:	1884703a 	and	r2,r3,r2
   84f10:	1007883a 	mov	r3,r2
   84f14:	d0a70544 	addi	r2,gp,-25579
   84f18:	2085883a 	add	r2,r4,r2
   84f1c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   84f20:	e0fffc03 	ldbu	r3,-16(fp)
   84f24:	d0a70544 	addi	r2,gp,-25579
   84f28:	1885883a 	add	r2,r3,r2
   84f2c:	10800003 	ldbu	r2,0(r2)
   84f30:	10803fcc 	andi	r2,r2,255
   84f34:	1004c03a 	cmpne	r2,r2,zero
   84f38:	1000071e 	bne	r2,zero,84f58 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   84f3c:	d0a70817 	ldw	r2,-25568(gp)
   84f40:	10800d83 	ldbu	r2,54(r2)
   84f44:	0084303a 	nor	r2,zero,r2
   84f48:	1007883a 	mov	r3,r2
   84f4c:	d0a70503 	ldbu	r2,-25580(gp)
   84f50:	1884703a 	and	r2,r3,r2
   84f54:	d0a70505 	stb	r2,-25580(gp)
    }
}
   84f58:	e037883a 	mov	sp,fp
   84f5c:	df000017 	ldw	fp,0(sp)
   84f60:	dec00104 	addi	sp,sp,4
   84f64:	f800283a 	ret

00084f68 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   84f68:	defffc04 	addi	sp,sp,-16
   84f6c:	df000315 	stw	fp,12(sp)
   84f70:	df000304 	addi	fp,sp,12
   84f74:	e13ffe15 	stw	r4,-8(fp)
   84f78:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   84f7c:	e0bffe17 	ldw	r2,-8(fp)
   84f80:	10800d03 	ldbu	r2,52(r2)
   84f84:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   84f88:	e13ffd03 	ldbu	r4,-12(fp)
   84f8c:	e0fffd03 	ldbu	r3,-12(fp)
   84f90:	e0bfff17 	ldw	r2,-4(fp)
   84f94:	1885883a 	add	r2,r3,r2
   84f98:	10800204 	addi	r2,r2,8
   84f9c:	108000c3 	ldbu	r2,3(r2)
   84fa0:	1007883a 	mov	r3,r2
   84fa4:	e0bffe17 	ldw	r2,-8(fp)
   84fa8:	10800d43 	ldbu	r2,53(r2)
   84fac:	0084303a 	nor	r2,zero,r2
   84fb0:	1884703a 	and	r2,r3,r2
   84fb4:	1007883a 	mov	r3,r2
   84fb8:	e0bfff17 	ldw	r2,-4(fp)
   84fbc:	2085883a 	add	r2,r4,r2
   84fc0:	10800204 	addi	r2,r2,8
   84fc4:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   84fc8:	e0fffd03 	ldbu	r3,-12(fp)
   84fcc:	e0bfff17 	ldw	r2,-4(fp)
   84fd0:	1885883a 	add	r2,r3,r2
   84fd4:	10800204 	addi	r2,r2,8
   84fd8:	108000c3 	ldbu	r2,3(r2)
   84fdc:	10803fcc 	andi	r2,r2,255
   84fe0:	1004c03a 	cmpne	r2,r2,zero
   84fe4:	10000a1e 	bne	r2,zero,85010 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   84fe8:	e0bfff17 	ldw	r2,-4(fp)
   84fec:	10800283 	ldbu	r2,10(r2)
   84ff0:	1007883a 	mov	r3,r2
   84ff4:	e0bffe17 	ldw	r2,-8(fp)
   84ff8:	10800d83 	ldbu	r2,54(r2)
   84ffc:	0084303a 	nor	r2,zero,r2
   85000:	1884703a 	and	r2,r3,r2
   85004:	1007883a 	mov	r3,r2
   85008:	e0bfff17 	ldw	r2,-4(fp)
   8500c:	10c00285 	stb	r3,10(r2)
    }
}
   85010:	e037883a 	mov	sp,fp
   85014:	df000017 	ldw	fp,0(sp)
   85018:	dec00104 	addi	sp,sp,4
   8501c:	f800283a 	ret

00085020 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   85020:	defffa04 	addi	sp,sp,-24
   85024:	df000515 	stw	fp,20(sp)
   85028:	df000504 	addi	fp,sp,20
   8502c:	e13ffe15 	stw	r4,-8(fp)
   85030:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   85034:	e0bffe17 	ldw	r2,-8(fp)
   85038:	10800d03 	ldbu	r2,52(r2)
   8503c:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
   85040:	e0bffe17 	ldw	r2,-8(fp)
   85044:	10800d83 	ldbu	r2,54(r2)
   85048:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
   8504c:	e0bffe17 	ldw	r2,-8(fp)
   85050:	10800d43 	ldbu	r2,53(r2)
   85054:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
   85058:	e0bfff17 	ldw	r2,-4(fp)
   8505c:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
   85060:	e0bffd17 	ldw	r2,-12(fp)
   85064:	10800017 	ldw	r2,0(r2)
   85068:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   8506c:	00002606 	br	85108 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
   85070:	e13ffb83 	ldbu	r4,-18(fp)
   85074:	e0fffb83 	ldbu	r3,-18(fp)
   85078:	e0bffc17 	ldw	r2,-16(fp)
   8507c:	1885883a 	add	r2,r3,r2
   85080:	10800204 	addi	r2,r2,8
   85084:	108000c3 	ldbu	r2,3(r2)
   85088:	1007883a 	mov	r3,r2
   8508c:	e0bffb03 	ldbu	r2,-20(fp)
   85090:	0084303a 	nor	r2,zero,r2
   85094:	1884703a 	and	r2,r3,r2
   85098:	1007883a 	mov	r3,r2
   8509c:	e0bffc17 	ldw	r2,-16(fp)
   850a0:	2085883a 	add	r2,r4,r2
   850a4:	10800204 	addi	r2,r2,8
   850a8:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   850ac:	e0fffb83 	ldbu	r3,-18(fp)
   850b0:	e0bffc17 	ldw	r2,-16(fp)
   850b4:	1885883a 	add	r2,r3,r2
   850b8:	10800204 	addi	r2,r2,8
   850bc:	108000c3 	ldbu	r2,3(r2)
   850c0:	10803fcc 	andi	r2,r2,255
   850c4:	1004c03a 	cmpne	r2,r2,zero
   850c8:	1000091e 	bne	r2,zero,850f0 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
   850cc:	e0bffc17 	ldw	r2,-16(fp)
   850d0:	10800283 	ldbu	r2,10(r2)
   850d4:	1007883a 	mov	r3,r2
   850d8:	e0bffb43 	ldbu	r2,-19(fp)
   850dc:	0084303a 	nor	r2,zero,r2
   850e0:	1884703a 	and	r2,r3,r2
   850e4:	1007883a 	mov	r3,r2
   850e8:	e0bffc17 	ldw	r2,-16(fp)
   850ec:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   850f0:	e0bffd17 	ldw	r2,-12(fp)
   850f4:	10800104 	addi	r2,r2,4
   850f8:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
   850fc:	e0bffd17 	ldw	r2,-12(fp)
   85100:	10800017 	ldw	r2,0(r2)
   85104:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   85108:	e0bffc17 	ldw	r2,-16(fp)
   8510c:	1004c03a 	cmpne	r2,r2,zero
   85110:	103fd71e 	bne	r2,zero,85070 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   85114:	e037883a 	mov	sp,fp
   85118:	df000017 	ldw	fp,0(sp)
   8511c:	dec00104 	addi	sp,sp,4
   85120:	f800283a 	ret

00085124 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   85124:	defffc04 	addi	sp,sp,-16
   85128:	df000315 	stw	fp,12(sp)
   8512c:	df000304 	addi	fp,sp,12
   85130:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   85134:	e0bfff17 	ldw	r2,-4(fp)
   85138:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   8513c:	e0bfff17 	ldw	r2,-4(fp)
   85140:	108002c4 	addi	r2,r2,11
   85144:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   85148:	e03ffd05 	stb	zero,-12(fp)
   8514c:	00000806 	br	85170 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
   85150:	e0bffe17 	ldw	r2,-8(fp)
   85154:	10000005 	stb	zero,0(r2)
   85158:	e0bffe17 	ldw	r2,-8(fp)
   8515c:	10800044 	addi	r2,r2,1
   85160:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   85164:	e0bffd03 	ldbu	r2,-12(fp)
   85168:	10800044 	addi	r2,r2,1
   8516c:	e0bffd05 	stb	r2,-12(fp)
   85170:	e0bffd03 	ldbu	r2,-12(fp)
   85174:	108000f0 	cmpltui	r2,r2,3
   85178:	103ff51e 	bne	r2,zero,85150 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
   8517c:	e037883a 	mov	sp,fp
   85180:	df000017 	ldw	fp,0(sp)
   85184:	dec00104 	addi	sp,sp,4
   85188:	f800283a 	ret

0008518c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   8518c:	defffb04 	addi	sp,sp,-20
   85190:	dfc00415 	stw	ra,16(sp)
   85194:	df000315 	stw	fp,12(sp)
   85198:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   8519c:	010002b4 	movhi	r4,10
   851a0:	21221e04 	addi	r4,r4,-30600
   851a4:	0142d004 	movi	r5,2880
   851a8:	00854f00 	call	854f0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   851ac:	008002b4 	movhi	r2,10
   851b0:	10a21e04 	addi	r2,r2,-30600
   851b4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   851b8:	008002b4 	movhi	r2,10
   851bc:	10a22a04 	addi	r2,r2,-30552
   851c0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   851c4:	e03fff0d 	sth	zero,-4(fp)
   851c8:	00001306 	br	85218 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   851cc:	e0bffe17 	ldw	r2,-8(fp)
   851d0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   851d4:	e0fffe17 	ldw	r3,-8(fp)
   851d8:	e0bffd17 	ldw	r2,-12(fp)
   851dc:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   851e0:	e0fffe17 	ldw	r3,-8(fp)
   851e4:	00800fc4 	movi	r2,63
   851e8:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   851ec:	e0bffe17 	ldw	r2,-8(fp)
   851f0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   851f4:	e0bffe17 	ldw	r2,-8(fp)
   851f8:	10800c04 	addi	r2,r2,48
   851fc:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   85200:	e0bffd17 	ldw	r2,-12(fp)
   85204:	10800c04 	addi	r2,r2,48
   85208:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   8520c:	e0bfff0b 	ldhu	r2,-4(fp)
   85210:	10800044 	addi	r2,r2,1
   85214:	e0bfff0d 	sth	r2,-4(fp)
   85218:	e0bfff0b 	ldhu	r2,-4(fp)
   8521c:	10800ef0 	cmpltui	r2,r2,59
   85220:	103fea1e 	bne	r2,zero,851cc <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   85224:	e0bffe17 	ldw	r2,-8(fp)
   85228:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   8522c:	e0bffe17 	ldw	r2,-8(fp)
   85230:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   85234:	e0fffe17 	ldw	r3,-8(fp)
   85238:	00800fc4 	movi	r2,63
   8523c:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   85240:	e0bffe17 	ldw	r2,-8(fp)
   85244:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   85248:	008002b4 	movhi	r2,10
   8524c:	10a21e04 	addi	r2,r2,-30600
   85250:	d0a70615 	stw	r2,-25576(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   85254:	e037883a 	mov	sp,fp
   85258:	dfc00117 	ldw	ra,4(sp)
   8525c:	df000017 	ldw	fp,0(sp)
   85260:	dec00204 	addi	sp,sp,8
   85264:	f800283a 	ret

00085268 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   85268:	deffff04 	addi	sp,sp,-4
   8526c:	df000015 	stw	fp,0(sp)
   85270:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   85274:	d0270915 	stw	zero,-25564(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   85278:	d0270705 	stb	zero,-25572(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   8527c:	d026f905 	stb	zero,-25628(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   85280:	d0270145 	stb	zero,-25595(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   85284:	d026f945 	stb	zero,-25627(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   85288:	d026fe15 	stw	zero,-25608(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   8528c:	d026fa15 	stw	zero,-25624(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   85290:	d0270c15 	stw	zero,-25552(gp)
    OSIdleCtrMax  = 0L;
   85294:	d026ff15 	stw	zero,-25604(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   85298:	d0270b05 	stb	zero,-25556(gp)
#endif
}
   8529c:	e037883a 	mov	sp,fp
   852a0:	df000017 	ldw	fp,0(sp)
   852a4:	dec00104 	addi	sp,sp,4
   852a8:	f800283a 	ret

000852ac <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   852ac:	defffd04 	addi	sp,sp,-12
   852b0:	df000215 	stw	fp,8(sp)
   852b4:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   852b8:	d0270505 	stb	zero,-25580(gp)
    prdytbl       = &OSRdyTbl[0];
   852bc:	d0a70544 	addi	r2,gp,-25579
   852c0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   852c4:	e03fff05 	stb	zero,-4(fp)
   852c8:	00000806 	br	852ec <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
   852cc:	e0bffe17 	ldw	r2,-8(fp)
   852d0:	10000005 	stb	zero,0(r2)
   852d4:	e0bffe17 	ldw	r2,-8(fp)
   852d8:	10800044 	addi	r2,r2,1
   852dc:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   852e0:	e0bfff03 	ldbu	r2,-4(fp)
   852e4:	10800044 	addi	r2,r2,1
   852e8:	e0bfff05 	stb	r2,-4(fp)
   852ec:	e0bfff03 	ldbu	r2,-4(fp)
   852f0:	108000f0 	cmpltui	r2,r2,3
   852f4:	103ff51e 	bne	r2,zero,852cc <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   852f8:	d026fb45 	stb	zero,-25619(gp)
    OSPrioHighRdy = 0;
   852fc:	d026fb05 	stb	zero,-25620(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   85300:	d0270315 	stw	zero,-25588(gp)
    OSTCBCur      = (OS_TCB *)0;
   85304:	d0270815 	stw	zero,-25568(gp)
}
   85308:	e037883a 	mov	sp,fp
   8530c:	df000017 	ldw	fp,0(sp)
   85310:	dec00104 	addi	sp,sp,4
   85314:	f800283a 	ret

00085318 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   85318:	defff804 	addi	sp,sp,-32
   8531c:	dfc00715 	stw	ra,28(sp)
   85320:	df000615 	stw	fp,24(sp)
   85324:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   85328:	018002b4 	movhi	r6,10
   8532c:	31a21d04 	addi	r6,r6,-30604
   85330:	00bfffd4 	movui	r2,65535
   85334:	d8800015 	stw	r2,0(sp)
   85338:	008002b4 	movhi	r2,10
   8533c:	10a01e04 	addi	r2,r2,-32648
   85340:	d8800115 	stw	r2,4(sp)
   85344:	00808004 	movi	r2,512
   85348:	d8800215 	stw	r2,8(sp)
   8534c:	d8000315 	stw	zero,12(sp)
   85350:	008000c4 	movi	r2,3
   85354:	d8800415 	stw	r2,16(sp)
   85358:	01000234 	movhi	r4,8
   8535c:	2115f304 	addi	r4,r4,22476
   85360:	000b883a 	mov	r5,zero
   85364:	01c00504 	movi	r7,20
   85368:	008a5b00 	call	8a5b0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   8536c:	01400274 	movhi	r5,9
   85370:	297bfb04 	addi	r5,r5,-4116
   85374:	01000504 	movi	r4,20
   85378:	e1bfff04 	addi	r6,fp,-4
   8537c:	008aee40 	call	8aee4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   85380:	e037883a 	mov	sp,fp
   85384:	dfc00117 	ldw	ra,4(sp)
   85388:	df000017 	ldw	fp,0(sp)
   8538c:	dec00204 	addi	sp,sp,8
   85390:	f800283a 	ret

00085394 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   85394:	defff804 	addi	sp,sp,-32
   85398:	dfc00715 	stw	ra,28(sp)
   8539c:	df000615 	stw	fp,24(sp)
   853a0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   853a4:	01800274 	movhi	r6,9
   853a8:	319fa504 	addi	r6,r6,32404
   853ac:	00bfff94 	movui	r2,65534
   853b0:	d8800015 	stw	r2,0(sp)
   853b4:	00800274 	movhi	r2,9
   853b8:	109da604 	addi	r2,r2,30360
   853bc:	d8800115 	stw	r2,4(sp)
   853c0:	00808004 	movi	r2,512
   853c4:	d8800215 	stw	r2,8(sp)
   853c8:	d8000315 	stw	zero,12(sp)
   853cc:	008000c4 	movi	r2,3
   853d0:	d8800415 	stw	r2,16(sp)
   853d4:	01000234 	movhi	r4,8
   853d8:	21160a04 	addi	r4,r4,22568
   853dc:	000b883a 	mov	r5,zero
   853e0:	01c004c4 	movi	r7,19
   853e4:	008a5b00 	call	8a5b0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   853e8:	01400274 	movhi	r5,9
   853ec:	297bff04 	addi	r5,r5,-4100
   853f0:	010004c4 	movi	r4,19
   853f4:	e1bfff04 	addi	r6,fp,-4
   853f8:	008aee40 	call	8aee4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   853fc:	e037883a 	mov	sp,fp
   85400:	dfc00117 	ldw	ra,4(sp)
   85404:	df000017 	ldw	fp,0(sp)
   85408:	dec00204 	addi	sp,sp,8
   8540c:	f800283a 	ret

00085410 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   85410:	defffb04 	addi	sp,sp,-20
   85414:	dfc00415 	stw	ra,16(sp)
   85418:	df000315 	stw	fp,12(sp)
   8541c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   85420:	010002b4 	movhi	r4,10
   85424:	2124ee04 	addi	r4,r4,-27720
   85428:	01414404 	movi	r5,1296
   8542c:	00854f00 	call	854f0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   85430:	010002b4 	movhi	r4,10
   85434:	21263204 	addi	r4,r4,-26424
   85438:	01401504 	movi	r5,84
   8543c:	00854f00 	call	854f0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   85440:	008002b4 	movhi	r2,10
   85444:	10a4ee04 	addi	r2,r2,-27720
   85448:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   8544c:	008002b4 	movhi	r2,10
   85450:	10a50904 	addi	r2,r2,-27612
   85454:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   85458:	e03fff05 	stb	zero,-4(fp)
   8545c:	00001106 	br	854a4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   85460:	e0fffe17 	ldw	r3,-8(fp)
   85464:	e0bffd17 	ldw	r2,-12(fp)
   85468:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   8546c:	e0fffe17 	ldw	r3,-8(fp)
   85470:	00800fc4 	movi	r2,63
   85474:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   85478:	e0bffe17 	ldw	r2,-8(fp)
   8547c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   85480:	e0bffe17 	ldw	r2,-8(fp)
   85484:	10801b04 	addi	r2,r2,108
   85488:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   8548c:	e0bffd17 	ldw	r2,-12(fp)
   85490:	10801b04 	addi	r2,r2,108
   85494:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   85498:	e0bfff03 	ldbu	r2,-4(fp)
   8549c:	10800044 	addi	r2,r2,1
   854a0:	e0bfff05 	stb	r2,-4(fp)
   854a4:	e0bfff03 	ldbu	r2,-4(fp)
   854a8:	108002f0 	cmpltui	r2,r2,11
   854ac:	103fec1e 	bne	r2,zero,85460 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   854b0:	e0bffe17 	ldw	r2,-8(fp)
   854b4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   854b8:	e0fffe17 	ldw	r3,-8(fp)
   854bc:	00800fc4 	movi	r2,63
   854c0:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   854c4:	e0bffe17 	ldw	r2,-8(fp)
   854c8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   854cc:	d026fc15 	stw	zero,-25616(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   854d0:	008002b4 	movhi	r2,10
   854d4:	10a4ee04 	addi	r2,r2,-27720
   854d8:	d0a70015 	stw	r2,-25600(gp)
}
   854dc:	e037883a 	mov	sp,fp
   854e0:	dfc00117 	ldw	ra,4(sp)
   854e4:	df000017 	ldw	fp,0(sp)
   854e8:	dec00204 	addi	sp,sp,8
   854ec:	f800283a 	ret

000854f0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   854f0:	defffd04 	addi	sp,sp,-12
   854f4:	df000215 	stw	fp,8(sp)
   854f8:	df000204 	addi	fp,sp,8
   854fc:	e13ffe15 	stw	r4,-8(fp)
   85500:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
   85504:	00000806 	br	85528 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   85508:	e0bffe17 	ldw	r2,-8(fp)
   8550c:	10000005 	stb	zero,0(r2)
   85510:	e0bffe17 	ldw	r2,-8(fp)
   85514:	10800044 	addi	r2,r2,1
   85518:	e0bffe15 	stw	r2,-8(fp)
        size--;
   8551c:	e0bfff0b 	ldhu	r2,-4(fp)
   85520:	10bfffc4 	addi	r2,r2,-1
   85524:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   85528:	e0bfff0b 	ldhu	r2,-4(fp)
   8552c:	1004c03a 	cmpne	r2,r2,zero
   85530:	103ff51e 	bne	r2,zero,85508 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   85534:	e037883a 	mov	sp,fp
   85538:	df000017 	ldw	fp,0(sp)
   8553c:	dec00104 	addi	sp,sp,4
   85540:	f800283a 	ret

00085544 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   85544:	defffc04 	addi	sp,sp,-16
   85548:	df000315 	stw	fp,12(sp)
   8554c:	df000304 	addi	fp,sp,12
   85550:	e13ffd15 	stw	r4,-12(fp)
   85554:	e17ffe15 	stw	r5,-8(fp)
   85558:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
   8555c:	00000d06 	br	85594 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
   85560:	e0bffe17 	ldw	r2,-8(fp)
   85564:	10c00003 	ldbu	r3,0(r2)
   85568:	e0bffd17 	ldw	r2,-12(fp)
   8556c:	10c00005 	stb	r3,0(r2)
   85570:	e0bffd17 	ldw	r2,-12(fp)
   85574:	10800044 	addi	r2,r2,1
   85578:	e0bffd15 	stw	r2,-12(fp)
   8557c:	e0bffe17 	ldw	r2,-8(fp)
   85580:	10800044 	addi	r2,r2,1
   85584:	e0bffe15 	stw	r2,-8(fp)
        size--;
   85588:	e0bfff0b 	ldhu	r2,-4(fp)
   8558c:	10bfffc4 	addi	r2,r2,-1
   85590:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   85594:	e0bfff0b 	ldhu	r2,-4(fp)
   85598:	1004c03a 	cmpne	r2,r2,zero
   8559c:	103ff01e 	bne	r2,zero,85560 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
   855a0:	e037883a 	mov	sp,fp
   855a4:	df000017 	ldw	fp,0(sp)
   855a8:	dec00104 	addi	sp,sp,4
   855ac:	f800283a 	ret

000855b0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   855b0:	defffb04 	addi	sp,sp,-20
   855b4:	dfc00415 	stw	ra,16(sp)
   855b8:	df000315 	stw	fp,12(sp)
   855bc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   855c0:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   855c4:	0005303a 	rdctl	r2,status
   855c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   855cc:	e0fffe17 	ldw	r3,-8(fp)
   855d0:	00bfff84 	movi	r2,-2
   855d4:	1884703a 	and	r2,r3,r2
   855d8:	1001703a 	wrctl	status,r2
  
  return context;
   855dc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   855e0:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   855e4:	d0a70703 	ldbu	r2,-25572(gp)
   855e8:	10803fcc 	andi	r2,r2,255
   855ec:	1004c03a 	cmpne	r2,r2,zero
   855f0:	10001b1e 	bne	r2,zero,85660 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   855f4:	d0a6f903 	ldbu	r2,-25628(gp)
   855f8:	10803fcc 	andi	r2,r2,255
   855fc:	1004c03a 	cmpne	r2,r2,zero
   85600:	1000171e 	bne	r2,zero,85660 <OS_Sched+0xb0>
            OS_SchedNew();
   85604:	00856840 	call	85684 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   85608:	d0a6fb03 	ldbu	r2,-25620(gp)
   8560c:	d0e6fb43 	ldbu	r3,-25619(gp)
   85610:	11003fcc 	andi	r4,r2,255
   85614:	18803fcc 	andi	r2,r3,255
   85618:	20801126 	beq	r4,r2,85660 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   8561c:	d0a6fb03 	ldbu	r2,-25620(gp)
   85620:	10803fcc 	andi	r2,r2,255
   85624:	00c002b4 	movhi	r3,10
   85628:	18e63204 	addi	r3,r3,-26424
   8562c:	1085883a 	add	r2,r2,r2
   85630:	1085883a 	add	r2,r2,r2
   85634:	10c5883a 	add	r2,r2,r3
   85638:	10800017 	ldw	r2,0(r2)
   8563c:	d0a70315 	stw	r2,-25588(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   85640:	d0e70317 	ldw	r3,-25588(gp)
   85644:	18800e17 	ldw	r2,56(r3)
   85648:	10800044 	addi	r2,r2,1
   8564c:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   85650:	d0a6fe17 	ldw	r2,-25608(gp)
   85654:	10800044 	addi	r2,r2,1
   85658:	d0a6fe15 	stw	r2,-25608(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   8565c:	008e1d80 	call	8e1d8 <OSCtxSw>
   85660:	e0bfff17 	ldw	r2,-4(fp)
   85664:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85668:	e0bffd17 	ldw	r2,-12(fp)
   8566c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   85670:	e037883a 	mov	sp,fp
   85674:	dfc00117 	ldw	ra,4(sp)
   85678:	df000017 	ldw	fp,0(sp)
   8567c:	dec00204 	addi	sp,sp,8
   85680:	f800283a 	ret

00085684 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   85684:	defffe04 	addi	sp,sp,-8
   85688:	df000115 	stw	fp,4(sp)
   8568c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   85690:	d0a70503 	ldbu	r2,-25580(gp)
   85694:	10c03fcc 	andi	r3,r2,255
   85698:	00800274 	movhi	r2,9
   8569c:	10bbbb04 	addi	r2,r2,-4372
   856a0:	10c5883a 	add	r2,r2,r3
   856a4:	10800003 	ldbu	r2,0(r2)
   856a8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   856ac:	e0bfff03 	ldbu	r2,-4(fp)
   856b0:	100490fa 	slli	r2,r2,3
   856b4:	1009883a 	mov	r4,r2
   856b8:	e0ffff03 	ldbu	r3,-4(fp)
   856bc:	d0a70544 	addi	r2,gp,-25579
   856c0:	1885883a 	add	r2,r3,r2
   856c4:	10800003 	ldbu	r2,0(r2)
   856c8:	10c03fcc 	andi	r3,r2,255
   856cc:	00800274 	movhi	r2,9
   856d0:	10bbbb04 	addi	r2,r2,-4372
   856d4:	10c5883a 	add	r2,r2,r3
   856d8:	10800003 	ldbu	r2,0(r2)
   856dc:	2085883a 	add	r2,r4,r2
   856e0:	d0a6fb05 	stb	r2,-25620(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   856e4:	e037883a 	mov	sp,fp
   856e8:	df000017 	ldw	fp,0(sp)
   856ec:	dec00104 	addi	sp,sp,4
   856f0:	f800283a 	ret

000856f4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   856f4:	defffc04 	addi	sp,sp,-16
   856f8:	df000315 	stw	fp,12(sp)
   856fc:	df000304 	addi	fp,sp,12
   85700:	e13ffe15 	stw	r4,-8(fp)
   85704:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   85708:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   8570c:	00000d06 	br	85744 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
   85710:	e0bfff17 	ldw	r2,-4(fp)
   85714:	10c00003 	ldbu	r3,0(r2)
   85718:	e0bffe17 	ldw	r2,-8(fp)
   8571c:	10c00005 	stb	r3,0(r2)
   85720:	e0bffe17 	ldw	r2,-8(fp)
   85724:	10800044 	addi	r2,r2,1
   85728:	e0bffe15 	stw	r2,-8(fp)
   8572c:	e0bfff17 	ldw	r2,-4(fp)
   85730:	10800044 	addi	r2,r2,1
   85734:	e0bfff15 	stw	r2,-4(fp)
        len++;
   85738:	e0bffd03 	ldbu	r2,-12(fp)
   8573c:	10800044 	addi	r2,r2,1
   85740:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   85744:	e0bfff17 	ldw	r2,-4(fp)
   85748:	10800003 	ldbu	r2,0(r2)
   8574c:	10803fcc 	andi	r2,r2,255
   85750:	1004c03a 	cmpne	r2,r2,zero
   85754:	103fee1e 	bne	r2,zero,85710 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   85758:	e0bffe17 	ldw	r2,-8(fp)
   8575c:	10000005 	stb	zero,0(r2)
    return (len);
   85760:	e0bffd03 	ldbu	r2,-12(fp)
}
   85764:	e037883a 	mov	sp,fp
   85768:	df000017 	ldw	fp,0(sp)
   8576c:	dec00104 	addi	sp,sp,4
   85770:	f800283a 	ret

00085774 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   85774:	defffd04 	addi	sp,sp,-12
   85778:	df000215 	stw	fp,8(sp)
   8577c:	df000204 	addi	fp,sp,8
   85780:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   85784:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   85788:	00000606 	br	857a4 <OS_StrLen+0x30>
        psrc++;
   8578c:	e0bfff17 	ldw	r2,-4(fp)
   85790:	10800044 	addi	r2,r2,1
   85794:	e0bfff15 	stw	r2,-4(fp)
        len++;
   85798:	e0bffe03 	ldbu	r2,-8(fp)
   8579c:	10800044 	addi	r2,r2,1
   857a0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   857a4:	e0bfff17 	ldw	r2,-4(fp)
   857a8:	10800003 	ldbu	r2,0(r2)
   857ac:	10803fcc 	andi	r2,r2,255
   857b0:	1004c03a 	cmpne	r2,r2,zero
   857b4:	103ff51e 	bne	r2,zero,8578c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   857b8:	e0bffe03 	ldbu	r2,-8(fp)
}
   857bc:	e037883a 	mov	sp,fp
   857c0:	df000017 	ldw	fp,0(sp)
   857c4:	dec00104 	addi	sp,sp,4
   857c8:	f800283a 	ret

000857cc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   857cc:	defffa04 	addi	sp,sp,-24
   857d0:	dfc00515 	stw	ra,20(sp)
   857d4:	df000415 	stw	fp,16(sp)
   857d8:	df000404 	addi	fp,sp,16
   857dc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   857e0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   857e4:	0005303a 	rdctl	r2,status
   857e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   857ec:	e0fffd17 	ldw	r3,-12(fp)
   857f0:	00bfff84 	movi	r2,-2
   857f4:	1884703a 	and	r2,r3,r2
   857f8:	1001703a 	wrctl	status,r2
  
  return context;
   857fc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   85800:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
   85804:	d0a6fa17 	ldw	r2,-25624(gp)
   85808:	10800044 	addi	r2,r2,1
   8580c:	d0a6fa15 	stw	r2,-25624(gp)
   85810:	e0bffe17 	ldw	r2,-8(fp)
   85814:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85818:	e0bffc17 	ldw	r2,-16(fp)
   8581c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   85820:	008e6840 	call	8e684 <OSTaskIdleHook>
    }
   85824:	003fef06 	br	857e4 <OS_TaskIdle+0x18>

00085828 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   85828:	defffa04 	addi	sp,sp,-24
   8582c:	dfc00515 	stw	ra,20(sp)
   85830:	df000415 	stw	fp,16(sp)
   85834:	df000404 	addi	fp,sp,16
   85838:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8583c:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   85840:	00000206 	br	8584c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   85844:	01003204 	movi	r4,200
   85848:	008b8a80 	call	8b8a8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   8584c:	d0a70b03 	ldbu	r2,-25556(gp)
   85850:	10803fcc 	andi	r2,r2,255
   85854:	1005003a 	cmpeq	r2,r2,zero
   85858:	103ffa1e 	bne	r2,zero,85844 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   8585c:	d126ff17 	ldw	r4,-25604(gp)
   85860:	01401904 	movi	r5,100
   85864:	008edc80 	call	8edc8 <__udivsi3>
   85868:	d0a6ff15 	stw	r2,-25604(gp)
    if (OSIdleCtrMax == 0L) {
   8586c:	d0a6ff17 	ldw	r2,-25604(gp)
   85870:	1004c03a 	cmpne	r2,r2,zero
   85874:	1000031e 	bne	r2,zero,85884 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
   85878:	d0270105 	stb	zero,-25596(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   8587c:	01003fc4 	movi	r4,255
   85880:	008b4bc0 	call	8b4bc <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85884:	0005303a 	rdctl	r2,status
   85888:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8588c:	e0fffd17 	ldw	r3,-12(fp)
   85890:	00bfff84 	movi	r2,-2
   85894:	1884703a 	and	r2,r3,r2
   85898:	1001703a 	wrctl	status,r2
  
  return context;
   8589c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   858a0:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   858a4:	d0a6fa17 	ldw	r2,-25624(gp)
   858a8:	d0a70c15 	stw	r2,-25552(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   858ac:	d026fa15 	stw	zero,-25624(gp)
   858b0:	e0bffe17 	ldw	r2,-8(fp)
   858b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   858b8:	e0bffc17 	ldw	r2,-16(fp)
   858bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   858c0:	d1270c17 	ldw	r4,-25552(gp)
   858c4:	d166ff17 	ldw	r5,-25604(gp)
   858c8:	008edc80 	call	8edc8 <__udivsi3>
   858cc:	1007883a 	mov	r3,r2
   858d0:	00801904 	movi	r2,100
   858d4:	10c5c83a 	sub	r2,r2,r3
   858d8:	d0a70105 	stb	r2,-25596(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   858dc:	008e6140 	call	8e614 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   858e0:	00858f00 	call	858f0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   858e4:	01001904 	movi	r4,100
   858e8:	008b8a80 	call	8b8a8 <OSTimeDly>
    }
   858ec:	003fe506 	br	85884 <OS_TaskStat+0x5c>

000858f0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   858f0:	defffa04 	addi	sp,sp,-24
   858f4:	dfc00515 	stw	ra,20(sp)
   858f8:	df000415 	stw	fp,16(sp)
   858fc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   85900:	e03ffc05 	stb	zero,-16(fp)
   85904:	00002406 	br	85998 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   85908:	e13ffc03 	ldbu	r4,-16(fp)
   8590c:	e17ffe04 	addi	r5,fp,-8
   85910:	008b2c00 	call	8b2c0 <OSTaskStkChk>
   85914:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   85918:	e0bffc43 	ldbu	r2,-15(fp)
   8591c:	1004c03a 	cmpne	r2,r2,zero
   85920:	10001a1e 	bne	r2,zero,8598c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   85924:	e0bffc03 	ldbu	r2,-16(fp)
   85928:	00c002b4 	movhi	r3,10
   8592c:	18e63204 	addi	r3,r3,-26424
   85930:	1085883a 	add	r2,r2,r2
   85934:	1085883a 	add	r2,r2,r2
   85938:	10c5883a 	add	r2,r2,r3
   8593c:	10800017 	ldw	r2,0(r2)
   85940:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   85944:	e0bffd17 	ldw	r2,-12(fp)
   85948:	1005003a 	cmpeq	r2,r2,zero
   8594c:	10000f1e 	bne	r2,zero,8598c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   85950:	e0bffd17 	ldw	r2,-12(fp)
   85954:	10800060 	cmpeqi	r2,r2,1
   85958:	10000c1e 	bne	r2,zero,8598c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   8595c:	e0bffd17 	ldw	r2,-12(fp)
   85960:	10c00217 	ldw	r3,8(r2)
   85964:	e0bffd17 	ldw	r2,-12(fp)
   85968:	10800317 	ldw	r2,12(r2)
   8596c:	1085883a 	add	r2,r2,r2
   85970:	1085883a 	add	r2,r2,r2
   85974:	1887883a 	add	r3,r3,r2
   85978:	e0bffd17 	ldw	r2,-12(fp)
   8597c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   85980:	e0ffff17 	ldw	r3,-4(fp)
   85984:	e0bffd17 	ldw	r2,-12(fp)
   85988:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   8598c:	e0bffc03 	ldbu	r2,-16(fp)
   85990:	10800044 	addi	r2,r2,1
   85994:	e0bffc05 	stb	r2,-16(fp)
   85998:	e0bffc03 	ldbu	r2,-16(fp)
   8599c:	10800570 	cmpltui	r2,r2,21
   859a0:	103fd91e 	bne	r2,zero,85908 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   859a4:	e037883a 	mov	sp,fp
   859a8:	dfc00117 	ldw	ra,4(sp)
   859ac:	df000017 	ldw	fp,0(sp)
   859b0:	dec00204 	addi	sp,sp,8
   859b4:	f800283a 	ret

000859b8 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   859b8:	defff104 	addi	sp,sp,-60
   859bc:	dfc00e15 	stw	ra,56(sp)
   859c0:	df000d15 	stw	fp,52(sp)
   859c4:	df000d04 	addi	fp,sp,52
   859c8:	e17ffb15 	stw	r5,-20(fp)
   859cc:	e1bffc15 	stw	r6,-16(fp)
   859d0:	e0800417 	ldw	r2,16(fp)
   859d4:	e13ffa05 	stb	r4,-24(fp)
   859d8:	e1fffd0d 	sth	r7,-12(fp)
   859dc:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   859e0:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   859e4:	0005303a 	rdctl	r2,status
   859e8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   859ec:	e0fff717 	ldw	r3,-36(fp)
   859f0:	00bfff84 	movi	r2,-2
   859f4:	1884703a 	and	r2,r3,r2
   859f8:	1001703a 	wrctl	status,r2
  
  return context;
   859fc:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
   85a00:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   85a04:	d0a70017 	ldw	r2,-25600(gp)
   85a08:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
   85a0c:	e0bff917 	ldw	r2,-28(fp)
   85a10:	1005003a 	cmpeq	r2,r2,zero
   85a14:	1000941e 	bne	r2,zero,85c68 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   85a18:	e0bff917 	ldw	r2,-28(fp)
   85a1c:	10800517 	ldw	r2,20(r2)
   85a20:	d0a70015 	stw	r2,-25600(gp)
   85a24:	e0bff817 	ldw	r2,-32(fp)
   85a28:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85a2c:	e0bff617 	ldw	r2,-40(fp)
   85a30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   85a34:	e0fff917 	ldw	r3,-28(fp)
   85a38:	e0bffb17 	ldw	r2,-20(fp)
   85a3c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   85a40:	e0fff917 	ldw	r3,-28(fp)
   85a44:	e0bffa03 	ldbu	r2,-24(fp)
   85a48:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   85a4c:	e0bff917 	ldw	r2,-28(fp)
   85a50:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   85a54:	e0bff917 	ldw	r2,-28(fp)
   85a58:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   85a5c:	e0bff917 	ldw	r2,-28(fp)
   85a60:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   85a64:	e0fff917 	ldw	r3,-28(fp)
   85a68:	e0800317 	ldw	r2,12(fp)
   85a6c:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   85a70:	e0fff917 	ldw	r3,-28(fp)
   85a74:	e0800217 	ldw	r2,8(fp)
   85a78:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   85a7c:	e0fff917 	ldw	r3,-28(fp)
   85a80:	e0bffc17 	ldw	r2,-16(fp)
   85a84:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   85a88:	e0fff917 	ldw	r3,-28(fp)
   85a8c:	e0bffe0b 	ldhu	r2,-8(fp)
   85a90:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   85a94:	e0fff917 	ldw	r3,-28(fp)
   85a98:	e0bffd0b 	ldhu	r2,-12(fp)
   85a9c:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   85aa0:	e0bff917 	ldw	r2,-28(fp)
   85aa4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   85aa8:	e0bffa03 	ldbu	r2,-24(fp)
   85aac:	1004d0fa 	srli	r2,r2,3
   85ab0:	1007883a 	mov	r3,r2
   85ab4:	e0bff917 	ldw	r2,-28(fp)
   85ab8:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   85abc:	e0bffa03 	ldbu	r2,-24(fp)
   85ac0:	108001cc 	andi	r2,r2,7
   85ac4:	1007883a 	mov	r3,r2
   85ac8:	e0bff917 	ldw	r2,-28(fp)
   85acc:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   85ad0:	e0bff917 	ldw	r2,-28(fp)
   85ad4:	10800d03 	ldbu	r2,52(r2)
   85ad8:	10c03fcc 	andi	r3,r2,255
   85adc:	00800044 	movi	r2,1
   85ae0:	10c4983a 	sll	r2,r2,r3
   85ae4:	1007883a 	mov	r3,r2
   85ae8:	e0bff917 	ldw	r2,-28(fp)
   85aec:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   85af0:	e0bff917 	ldw	r2,-28(fp)
   85af4:	10800cc3 	ldbu	r2,51(r2)
   85af8:	10c03fcc 	andi	r3,r2,255
   85afc:	00800044 	movi	r2,1
   85b00:	10c4983a 	sll	r2,r2,r3
   85b04:	1007883a 	mov	r3,r2
   85b08:	e0bff917 	ldw	r2,-28(fp)
   85b0c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   85b10:	e0bff917 	ldw	r2,-28(fp)
   85b14:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   85b18:	e0bff917 	ldw	r2,-28(fp)
   85b1c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   85b20:	e0bff917 	ldw	r2,-28(fp)
   85b24:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   85b28:	e0bff917 	ldw	r2,-28(fp)
   85b2c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   85b30:	e0bff917 	ldw	r2,-28(fp)
   85b34:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   85b38:	e0bff917 	ldw	r2,-28(fp)
   85b3c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   85b40:	e0bff917 	ldw	r2,-28(fp)
   85b44:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   85b48:	e0bff917 	ldw	r2,-28(fp)
   85b4c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   85b50:	e0bff917 	ldw	r2,-28(fp)
   85b54:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   85b58:	e0fff917 	ldw	r3,-28(fp)
   85b5c:	00800fc4 	movi	r2,63
   85b60:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   85b64:	e0bff917 	ldw	r2,-28(fp)
   85b68:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   85b6c:	e13ff917 	ldw	r4,-28(fp)
   85b70:	008e6a00 	call	8e6a0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   85b74:	e13ff917 	ldw	r4,-28(fp)
   85b78:	008e5b80 	call	8e5b8 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85b7c:	0005303a 	rdctl	r2,status
   85b80:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85b84:	e0fff517 	ldw	r3,-44(fp)
   85b88:	00bfff84 	movi	r2,-2
   85b8c:	1884703a 	and	r2,r3,r2
   85b90:	1001703a 	wrctl	status,r2
  
  return context;
   85b94:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   85b98:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
   85b9c:	e0bffa03 	ldbu	r2,-24(fp)
   85ba0:	00c002b4 	movhi	r3,10
   85ba4:	18e63204 	addi	r3,r3,-26424
   85ba8:	1085883a 	add	r2,r2,r2
   85bac:	1085883a 	add	r2,r2,r2
   85bb0:	10c7883a 	add	r3,r2,r3
   85bb4:	e0bff917 	ldw	r2,-28(fp)
   85bb8:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   85bbc:	d0e6fc17 	ldw	r3,-25616(gp)
   85bc0:	e0bff917 	ldw	r2,-28(fp)
   85bc4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   85bc8:	e0bff917 	ldw	r2,-28(fp)
   85bcc:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   85bd0:	d0a6fc17 	ldw	r2,-25616(gp)
   85bd4:	1005003a 	cmpeq	r2,r2,zero
   85bd8:	1000031e 	bne	r2,zero,85be8 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
   85bdc:	d0e6fc17 	ldw	r3,-25616(gp)
   85be0:	e0bff917 	ldw	r2,-28(fp)
   85be4:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
   85be8:	e0bff917 	ldw	r2,-28(fp)
   85bec:	d0a6fc15 	stw	r2,-25616(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   85bf0:	e0bff917 	ldw	r2,-28(fp)
   85bf4:	10c00d83 	ldbu	r3,54(r2)
   85bf8:	d0a70503 	ldbu	r2,-25580(gp)
   85bfc:	1884b03a 	or	r2,r3,r2
   85c00:	d0a70505 	stb	r2,-25580(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   85c04:	e0bff917 	ldw	r2,-28(fp)
   85c08:	10800d03 	ldbu	r2,52(r2)
   85c0c:	11003fcc 	andi	r4,r2,255
   85c10:	e0bff917 	ldw	r2,-28(fp)
   85c14:	10800d03 	ldbu	r2,52(r2)
   85c18:	10c03fcc 	andi	r3,r2,255
   85c1c:	d0a70544 	addi	r2,gp,-25579
   85c20:	1885883a 	add	r2,r3,r2
   85c24:	10c00003 	ldbu	r3,0(r2)
   85c28:	e0bff917 	ldw	r2,-28(fp)
   85c2c:	10800d43 	ldbu	r2,53(r2)
   85c30:	1884b03a 	or	r2,r3,r2
   85c34:	1007883a 	mov	r3,r2
   85c38:	d0a70544 	addi	r2,gp,-25579
   85c3c:	2085883a 	add	r2,r4,r2
   85c40:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   85c44:	d0a70143 	ldbu	r2,-25595(gp)
   85c48:	10800044 	addi	r2,r2,1
   85c4c:	d0a70145 	stb	r2,-25595(gp)
   85c50:	e0bff817 	ldw	r2,-32(fp)
   85c54:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85c58:	e0bff417 	ldw	r2,-48(fp)
   85c5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   85c60:	e03fff15 	stw	zero,-4(fp)
   85c64:	00000606 	br	85c80 <OS_TCBInit+0x2c8>
   85c68:	e0bff817 	ldw	r2,-32(fp)
   85c6c:	e0bff315 	stw	r2,-52(fp)
   85c70:	e0bff317 	ldw	r2,-52(fp)
   85c74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   85c78:	00801084 	movi	r2,66
   85c7c:	e0bfff15 	stw	r2,-4(fp)
   85c80:	e0bfff17 	ldw	r2,-4(fp)
}
   85c84:	e037883a 	mov	sp,fp
   85c88:	dfc00117 	ldw	ra,4(sp)
   85c8c:	df000017 	ldw	fp,0(sp)
   85c90:	dec00204 	addi	sp,sp,8
   85c94:	f800283a 	ret

00085c98 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   85c98:	defffe04 	addi	sp,sp,-8
   85c9c:	df000115 	stw	fp,4(sp)
   85ca0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   85ca4:	d0a00d04 	addi	r2,gp,-32716
   85ca8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   85cac:	d0a00e04 	addi	r2,gp,-32712
   85cb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   85cb4:	d0a00f84 	addi	r2,gp,-32706
   85cb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   85cbc:	d0a01004 	addi	r2,gp,-32704
   85cc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   85cc4:	d0a00f04 	addi	r2,gp,-32708
   85cc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   85ccc:	d0a01084 	addi	r2,gp,-32702
   85cd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   85cd4:	d0a01104 	addi	r2,gp,-32700
   85cd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   85cdc:	d0a01184 	addi	r2,gp,-32698
   85ce0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   85ce4:	d0a01204 	addi	r2,gp,-32696
   85ce8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   85cec:	d0a01284 	addi	r2,gp,-32694
   85cf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   85cf4:	d0a01304 	addi	r2,gp,-32692
   85cf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   85cfc:	d0a01384 	addi	r2,gp,-32690
   85d00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   85d04:	d0a01404 	addi	r2,gp,-32688
   85d08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   85d0c:	d0a01484 	addi	r2,gp,-32686
   85d10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   85d14:	d0a01504 	addi	r2,gp,-32684
   85d18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   85d1c:	d0a01584 	addi	r2,gp,-32682
   85d20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   85d24:	d0a01604 	addi	r2,gp,-32680
   85d28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   85d2c:	d0a01684 	addi	r2,gp,-32678
   85d30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   85d34:	d0a01704 	addi	r2,gp,-32676
   85d38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   85d3c:	d0a01784 	addi	r2,gp,-32674
   85d40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   85d44:	d0a01804 	addi	r2,gp,-32672
   85d48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   85d4c:	d0a01884 	addi	r2,gp,-32670
   85d50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   85d54:	d0a01904 	addi	r2,gp,-32668
   85d58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   85d5c:	d0a01984 	addi	r2,gp,-32666
   85d60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   85d64:	d0a01a04 	addi	r2,gp,-32664
   85d68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   85d6c:	d0a01a84 	addi	r2,gp,-32662
   85d70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   85d74:	d0a01b04 	addi	r2,gp,-32660
   85d78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   85d7c:	d0a01b84 	addi	r2,gp,-32658
   85d80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   85d84:	d0a01c04 	addi	r2,gp,-32656
   85d88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   85d8c:	d0a01c84 	addi	r2,gp,-32654
   85d90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   85d94:	d0a01d04 	addi	r2,gp,-32652
   85d98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   85d9c:	d0a01d84 	addi	r2,gp,-32650
   85da0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   85da4:	d0a01e04 	addi	r2,gp,-32648
   85da8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   85dac:	d0a01e84 	addi	r2,gp,-32646
   85db0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   85db4:	d0a01f04 	addi	r2,gp,-32644
   85db8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   85dbc:	d0a01f84 	addi	r2,gp,-32642
   85dc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   85dc4:	d0a02004 	addi	r2,gp,-32640
   85dc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   85dcc:	d0a02084 	addi	r2,gp,-32638
   85dd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   85dd4:	d0a02104 	addi	r2,gp,-32636
   85dd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   85ddc:	d0a02184 	addi	r2,gp,-32634
   85de0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   85de4:	d0a02204 	addi	r2,gp,-32632
   85de8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   85dec:	d0a02284 	addi	r2,gp,-32630
   85df0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   85df4:	d0a02304 	addi	r2,gp,-32628
   85df8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   85dfc:	d0a02384 	addi	r2,gp,-32626
   85e00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   85e04:	d0a02404 	addi	r2,gp,-32624
   85e08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   85e0c:	d0a02904 	addi	r2,gp,-32604
   85e10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   85e14:	e037883a 	mov	sp,fp
   85e18:	df000017 	ldw	fp,0(sp)
   85e1c:	dec00104 	addi	sp,sp,4
   85e20:	f800283a 	ret

00085e24 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   85e24:	defff104 	addi	sp,sp,-60
   85e28:	df000e15 	stw	fp,56(sp)
   85e2c:	df000e04 	addi	fp,sp,56
   85e30:	e13ffa15 	stw	r4,-24(fp)
   85e34:	e1fffd15 	stw	r7,-12(fp)
   85e38:	e17ffb0d 	sth	r5,-20(fp)
   85e3c:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   85e40:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   85e44:	e0bffd17 	ldw	r2,-12(fp)
   85e48:	1004c03a 	cmpne	r2,r2,zero
   85e4c:	1000021e 	bne	r2,zero,85e58 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
   85e50:	e03fff15 	stw	zero,-4(fp)
   85e54:	0000bb06 	br	86144 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   85e58:	e0bffa17 	ldw	r2,-24(fp)
   85e5c:	1004c03a 	cmpne	r2,r2,zero
   85e60:	1000051e 	bne	r2,zero,85e78 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   85e64:	e0fffd17 	ldw	r3,-12(fp)
   85e68:	00801b84 	movi	r2,110
   85e6c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   85e70:	e03fff15 	stw	zero,-4(fp)
   85e74:	0000b306 	br	86144 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   85e78:	e0bffa17 	ldw	r2,-24(fp)
   85e7c:	10800003 	ldbu	r2,0(r2)
   85e80:	10803fcc 	andi	r2,r2,255
   85e84:	10800160 	cmpeqi	r2,r2,5
   85e88:	1000051e 	bne	r2,zero,85ea0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   85e8c:	e0fffd17 	ldw	r3,-12(fp)
   85e90:	00800044 	movi	r2,1
   85e94:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   85e98:	e03fff15 	stw	zero,-4(fp)
   85e9c:	0000a906 	br	86144 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   85ea0:	e0fffc03 	ldbu	r3,-16(fp)
   85ea4:	00bfe004 	movi	r2,-128
   85ea8:	1884703a 	and	r2,r3,r2
   85eac:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   85eb0:	e0bff943 	ldbu	r2,-27(fp)
   85eb4:	1005003a 	cmpeq	r2,r2,zero
   85eb8:	1000061e 	bne	r2,zero,85ed4 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
   85ebc:	e0bffc03 	ldbu	r2,-16(fp)
   85ec0:	10801fcc 	andi	r2,r2,127
   85ec4:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
   85ec8:	00800044 	movi	r2,1
   85ecc:	e0bff905 	stb	r2,-28(fp)
   85ed0:	00000106 	br	85ed8 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
   85ed4:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   85ed8:	e0bffd17 	ldw	r2,-12(fp)
   85edc:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85ee0:	0005303a 	rdctl	r2,status
   85ee4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85ee8:	e0fff717 	ldw	r3,-36(fp)
   85eec:	00bfff84 	movi	r2,-2
   85ef0:	1884703a 	and	r2,r3,r2
   85ef4:	1001703a 	wrctl	status,r2
  
  return context;
   85ef8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   85efc:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
   85f00:	e0bffc03 	ldbu	r2,-16(fp)
   85f04:	e0bffe15 	stw	r2,-8(fp)
   85f08:	e0fffe17 	ldw	r3,-8(fp)
   85f0c:	18800060 	cmpeqi	r2,r3,1
   85f10:	1000651e 	bne	r2,zero,860a8 <OSFlagAccept+0x284>
   85f14:	e0fffe17 	ldw	r3,-8(fp)
   85f18:	18800088 	cmpgei	r2,r3,2
   85f1c:	1000041e 	bne	r2,zero,85f30 <OSFlagAccept+0x10c>
   85f20:	e0fffe17 	ldw	r3,-8(fp)
   85f24:	1805003a 	cmpeq	r2,r3,zero
   85f28:	1000421e 	bne	r2,zero,86034 <OSFlagAccept+0x210>
   85f2c:	00007b06 	br	8611c <OSFlagAccept+0x2f8>
   85f30:	e0fffe17 	ldw	r3,-8(fp)
   85f34:	188000a0 	cmpeqi	r2,r3,2
   85f38:	1000041e 	bne	r2,zero,85f4c <OSFlagAccept+0x128>
   85f3c:	e0fffe17 	ldw	r3,-8(fp)
   85f40:	188000e0 	cmpeqi	r2,r3,3
   85f44:	10001e1e 	bne	r2,zero,85fc0 <OSFlagAccept+0x19c>
   85f48:	00007406 	br	8611c <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   85f4c:	e0bffa17 	ldw	r2,-24(fp)
   85f50:	10c0020b 	ldhu	r3,8(r2)
   85f54:	e0bffb0b 	ldhu	r2,-20(fp)
   85f58:	1884703a 	and	r2,r3,r2
   85f5c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   85f60:	e0fff98b 	ldhu	r3,-26(fp)
   85f64:	e0bffb0b 	ldhu	r2,-20(fp)
   85f68:	18800d1e 	bne	r3,r2,85fa0 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   85f6c:	e0bff903 	ldbu	r2,-28(fp)
   85f70:	10800058 	cmpnei	r2,r2,1
   85f74:	10000d1e 	bne	r2,zero,85fac <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   85f78:	e0bffa17 	ldw	r2,-24(fp)
   85f7c:	1080020b 	ldhu	r2,8(r2)
   85f80:	1007883a 	mov	r3,r2
   85f84:	e0bff98b 	ldhu	r2,-26(fp)
   85f88:	0084303a 	nor	r2,zero,r2
   85f8c:	1884703a 	and	r2,r3,r2
   85f90:	1007883a 	mov	r3,r2
   85f94:	e0bffa17 	ldw	r2,-24(fp)
   85f98:	10c0020d 	sth	r3,8(r2)
   85f9c:	00000306 	br	85fac <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   85fa0:	e0fffd17 	ldw	r3,-12(fp)
   85fa4:	00801c04 	movi	r2,112
   85fa8:	18800005 	stb	r2,0(r3)
   85fac:	e0bff817 	ldw	r2,-32(fp)
   85fb0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85fb4:	e0bff617 	ldw	r2,-40(fp)
   85fb8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   85fbc:	00005f06 	br	8613c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   85fc0:	e0bffa17 	ldw	r2,-24(fp)
   85fc4:	10c0020b 	ldhu	r3,8(r2)
   85fc8:	e0bffb0b 	ldhu	r2,-20(fp)
   85fcc:	1884703a 	and	r2,r3,r2
   85fd0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   85fd4:	e0bff98b 	ldhu	r2,-26(fp)
   85fd8:	1005003a 	cmpeq	r2,r2,zero
   85fdc:	10000d1e 	bne	r2,zero,86014 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   85fe0:	e0bff903 	ldbu	r2,-28(fp)
   85fe4:	10800058 	cmpnei	r2,r2,1
   85fe8:	10000d1e 	bne	r2,zero,86020 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   85fec:	e0bffa17 	ldw	r2,-24(fp)
   85ff0:	1080020b 	ldhu	r2,8(r2)
   85ff4:	1007883a 	mov	r3,r2
   85ff8:	e0bff98b 	ldhu	r2,-26(fp)
   85ffc:	0084303a 	nor	r2,zero,r2
   86000:	1884703a 	and	r2,r3,r2
   86004:	1007883a 	mov	r3,r2
   86008:	e0bffa17 	ldw	r2,-24(fp)
   8600c:	10c0020d 	sth	r3,8(r2)
   86010:	00000306 	br	86020 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   86014:	e0fffd17 	ldw	r3,-12(fp)
   86018:	00801c04 	movi	r2,112
   8601c:	18800005 	stb	r2,0(r3)
   86020:	e0bff817 	ldw	r2,-32(fp)
   86024:	e0bff515 	stw	r2,-44(fp)
   86028:	e0bff517 	ldw	r2,-44(fp)
   8602c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   86030:	00004206 	br	8613c <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   86034:	e0bffa17 	ldw	r2,-24(fp)
   86038:	1080020b 	ldhu	r2,8(r2)
   8603c:	0084303a 	nor	r2,zero,r2
   86040:	1007883a 	mov	r3,r2
   86044:	e0bffb0b 	ldhu	r2,-20(fp)
   86048:	1884703a 	and	r2,r3,r2
   8604c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   86050:	e0fff98b 	ldhu	r3,-26(fp)
   86054:	e0bffb0b 	ldhu	r2,-20(fp)
   86058:	18800b1e 	bne	r3,r2,86088 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8605c:	e0bff903 	ldbu	r2,-28(fp)
   86060:	10800058 	cmpnei	r2,r2,1
   86064:	10000b1e 	bne	r2,zero,86094 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   86068:	e0bffa17 	ldw	r2,-24(fp)
   8606c:	10c0020b 	ldhu	r3,8(r2)
   86070:	e0bff98b 	ldhu	r2,-26(fp)
   86074:	1884b03a 	or	r2,r3,r2
   86078:	1007883a 	mov	r3,r2
   8607c:	e0bffa17 	ldw	r2,-24(fp)
   86080:	10c0020d 	sth	r3,8(r2)
   86084:	00000306 	br	86094 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   86088:	e0fffd17 	ldw	r3,-12(fp)
   8608c:	00801c04 	movi	r2,112
   86090:	18800005 	stb	r2,0(r3)
   86094:	e0bff817 	ldw	r2,-32(fp)
   86098:	e0bff415 	stw	r2,-48(fp)
   8609c:	e0bff417 	ldw	r2,-48(fp)
   860a0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   860a4:	00002506 	br	8613c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   860a8:	e0bffa17 	ldw	r2,-24(fp)
   860ac:	1080020b 	ldhu	r2,8(r2)
   860b0:	0084303a 	nor	r2,zero,r2
   860b4:	1007883a 	mov	r3,r2
   860b8:	e0bffb0b 	ldhu	r2,-20(fp)
   860bc:	1884703a 	and	r2,r3,r2
   860c0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   860c4:	e0bff98b 	ldhu	r2,-26(fp)
   860c8:	1005003a 	cmpeq	r2,r2,zero
   860cc:	10000b1e 	bne	r2,zero,860fc <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   860d0:	e0bff903 	ldbu	r2,-28(fp)
   860d4:	10800058 	cmpnei	r2,r2,1
   860d8:	10000b1e 	bne	r2,zero,86108 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   860dc:	e0bffa17 	ldw	r2,-24(fp)
   860e0:	10c0020b 	ldhu	r3,8(r2)
   860e4:	e0bff98b 	ldhu	r2,-26(fp)
   860e8:	1884b03a 	or	r2,r3,r2
   860ec:	1007883a 	mov	r3,r2
   860f0:	e0bffa17 	ldw	r2,-24(fp)
   860f4:	10c0020d 	sth	r3,8(r2)
   860f8:	00000306 	br	86108 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   860fc:	e0fffd17 	ldw	r3,-12(fp)
   86100:	00801c04 	movi	r2,112
   86104:	18800005 	stb	r2,0(r3)
   86108:	e0bff817 	ldw	r2,-32(fp)
   8610c:	e0bff315 	stw	r2,-52(fp)
   86110:	e0bff317 	ldw	r2,-52(fp)
   86114:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   86118:	00000806 	br	8613c <OSFlagAccept+0x318>
   8611c:	e0bff817 	ldw	r2,-32(fp)
   86120:	e0bff215 	stw	r2,-56(fp)
   86124:	e0bff217 	ldw	r2,-56(fp)
   86128:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   8612c:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   86130:	e0fffd17 	ldw	r3,-12(fp)
   86134:	00801bc4 	movi	r2,111
   86138:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
   8613c:	e0bff98b 	ldhu	r2,-26(fp)
   86140:	e0bfff15 	stw	r2,-4(fp)
   86144:	e0bfff17 	ldw	r2,-4(fp)
}
   86148:	e037883a 	mov	sp,fp
   8614c:	df000017 	ldw	fp,0(sp)
   86150:	dec00104 	addi	sp,sp,4
   86154:	f800283a 	ret

00086158 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   86158:	defff704 	addi	sp,sp,-36
   8615c:	df000815 	stw	fp,32(sp)
   86160:	df000804 	addi	fp,sp,32
   86164:	e17ffe15 	stw	r5,-8(fp)
   86168:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   8616c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   86170:	e0bffe17 	ldw	r2,-8(fp)
   86174:	1004c03a 	cmpne	r2,r2,zero
   86178:	1000021e 	bne	r2,zero,86184 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   8617c:	e03fff15 	stw	zero,-4(fp)
   86180:	00003f06 	br	86280 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   86184:	00800274 	movhi	r2,9
   86188:	1089ab04 	addi	r2,r2,9900
   8618c:	10800003 	ldbu	r2,0(r2)
   86190:	10803fcc 	andi	r2,r2,255
   86194:	1005003a 	cmpeq	r2,r2,zero
   86198:	1000051e 	bne	r2,zero,861b0 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   8619c:	e0fffe17 	ldw	r3,-8(fp)
   861a0:	00800404 	movi	r2,16
   861a4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
   861a8:	e03fff15 	stw	zero,-4(fp)
   861ac:	00003406 	br	86280 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   861b0:	0005303a 	rdctl	r2,status
   861b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   861b8:	e0fffa17 	ldw	r3,-24(fp)
   861bc:	00bfff84 	movi	r2,-2
   861c0:	1884703a 	and	r2,r3,r2
   861c4:	1001703a 	wrctl	status,r2
  
  return context;
   861c8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   861cc:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   861d0:	00800274 	movhi	r2,9
   861d4:	1089ae04 	addi	r2,r2,9912
   861d8:	10800017 	ldw	r2,0(r2)
   861dc:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   861e0:	e0bffc17 	ldw	r2,-16(fp)
   861e4:	1005003a 	cmpeq	r2,r2,zero
   861e8:	10001c1e 	bne	r2,zero,8625c <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   861ec:	00800274 	movhi	r2,9
   861f0:	1089ae04 	addi	r2,r2,9912
   861f4:	10800017 	ldw	r2,0(r2)
   861f8:	10800117 	ldw	r2,4(r2)
   861fc:	1007883a 	mov	r3,r2
   86200:	00800274 	movhi	r2,9
   86204:	1089ae04 	addi	r2,r2,9912
   86208:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   8620c:	e0fffc17 	ldw	r3,-16(fp)
   86210:	00800144 	movi	r2,5
   86214:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   86218:	e0fffc17 	ldw	r3,-16(fp)
   8621c:	e0bffd0b 	ldhu	r2,-12(fp)
   86220:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   86224:	e0bffc17 	ldw	r2,-16(fp)
   86228:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   8622c:	e0fffc17 	ldw	r3,-16(fp)
   86230:	00800fc4 	movi	r2,63
   86234:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   86238:	e0bffc17 	ldw	r2,-16(fp)
   8623c:	100002c5 	stb	zero,11(r2)
   86240:	e0bffb17 	ldw	r2,-20(fp)
   86244:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   86248:	e0bff917 	ldw	r2,-28(fp)
   8624c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   86250:	e0bffe17 	ldw	r2,-8(fp)
   86254:	10000005 	stb	zero,0(r2)
   86258:	00000706 	br	86278 <OSFlagCreate+0x120>
   8625c:	e0bffb17 	ldw	r2,-20(fp)
   86260:	e0bff815 	stw	r2,-32(fp)
   86264:	e0bff817 	ldw	r2,-32(fp)
   86268:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   8626c:	e0fffe17 	ldw	r3,-8(fp)
   86270:	00801c84 	movi	r2,114
   86274:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   86278:	e0bffc17 	ldw	r2,-16(fp)
   8627c:	e0bfff15 	stw	r2,-4(fp)
   86280:	e0bfff17 	ldw	r2,-4(fp)
}
   86284:	e037883a 	mov	sp,fp
   86288:	df000017 	ldw	fp,0(sp)
   8628c:	dec00104 	addi	sp,sp,4
   86290:	f800283a 	ret

00086294 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   86294:	defff004 	addi	sp,sp,-64
   86298:	dfc00f15 	stw	ra,60(sp)
   8629c:	df000e15 	stw	fp,56(sp)
   862a0:	df000e04 	addi	fp,sp,56
   862a4:	e13ffb15 	stw	r4,-20(fp)
   862a8:	e1bffd15 	stw	r6,-12(fp)
   862ac:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   862b0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   862b4:	e0bffd17 	ldw	r2,-12(fp)
   862b8:	1004c03a 	cmpne	r2,r2,zero
   862bc:	1000031e 	bne	r2,zero,862cc <OSFlagDel+0x38>
        return (pgrp);
   862c0:	e0bffb17 	ldw	r2,-20(fp)
   862c4:	e0bfff15 	stw	r2,-4(fp)
   862c8:	00009606 	br	86524 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   862cc:	e0bffb17 	ldw	r2,-20(fp)
   862d0:	1004c03a 	cmpne	r2,r2,zero
   862d4:	1000061e 	bne	r2,zero,862f0 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   862d8:	e0fffd17 	ldw	r3,-12(fp)
   862dc:	00801b84 	movi	r2,110
   862e0:	18800005 	stb	r2,0(r3)
        return (pgrp);
   862e4:	e0fffb17 	ldw	r3,-20(fp)
   862e8:	e0ffff15 	stw	r3,-4(fp)
   862ec:	00008d06 	br	86524 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   862f0:	00800274 	movhi	r2,9
   862f4:	1089ab04 	addi	r2,r2,9900
   862f8:	10800003 	ldbu	r2,0(r2)
   862fc:	10803fcc 	andi	r2,r2,255
   86300:	1005003a 	cmpeq	r2,r2,zero
   86304:	1000061e 	bne	r2,zero,86320 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   86308:	e0fffd17 	ldw	r3,-12(fp)
   8630c:	008003c4 	movi	r2,15
   86310:	18800005 	stb	r2,0(r3)
        return (pgrp);
   86314:	e0bffb17 	ldw	r2,-20(fp)
   86318:	e0bfff15 	stw	r2,-4(fp)
   8631c:	00008106 	br	86524 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   86320:	e0bffb17 	ldw	r2,-20(fp)
   86324:	10800003 	ldbu	r2,0(r2)
   86328:	10803fcc 	andi	r2,r2,255
   8632c:	10800160 	cmpeqi	r2,r2,5
   86330:	1000061e 	bne	r2,zero,8634c <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
   86334:	e0fffd17 	ldw	r3,-12(fp)
   86338:	00800044 	movi	r2,1
   8633c:	18800005 	stb	r2,0(r3)
        return (pgrp);
   86340:	e0fffb17 	ldw	r3,-20(fp)
   86344:	e0ffff15 	stw	r3,-4(fp)
   86348:	00007606 	br	86524 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8634c:	0005303a 	rdctl	r2,status
   86350:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   86354:	e0fff617 	ldw	r3,-40(fp)
   86358:	00bfff84 	movi	r2,-2
   8635c:	1884703a 	and	r2,r3,r2
   86360:	1001703a 	wrctl	status,r2
  
  return context;
   86364:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
   86368:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   8636c:	e0bffb17 	ldw	r2,-20(fp)
   86370:	10800117 	ldw	r2,4(r2)
   86374:	1005003a 	cmpeq	r2,r2,zero
   86378:	1000031e 	bne	r2,zero,86388 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   8637c:	00800044 	movi	r2,1
   86380:	e0bffa05 	stb	r2,-24(fp)
   86384:	00000106 	br	8638c <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   86388:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   8638c:	e0bffc03 	ldbu	r2,-16(fp)
   86390:	e0bffe15 	stw	r2,-8(fp)
   86394:	e0fffe17 	ldw	r3,-8(fp)
   86398:	1805003a 	cmpeq	r2,r3,zero
   8639c:	1000041e 	bne	r2,zero,863b0 <OSFlagDel+0x11c>
   863a0:	e0fffe17 	ldw	r3,-8(fp)
   863a4:	18800060 	cmpeqi	r2,r3,1
   863a8:	1000281e 	bne	r2,zero,8644c <OSFlagDel+0x1b8>
   863ac:	00005206 	br	864f8 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   863b0:	e0bffa03 	ldbu	r2,-24(fp)
   863b4:	1004c03a 	cmpne	r2,r2,zero
   863b8:	10001a1e 	bne	r2,zero,86424 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   863bc:	e0fffb17 	ldw	r3,-20(fp)
   863c0:	00800fc4 	movi	r2,63
   863c4:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   863c8:	e0bffb17 	ldw	r2,-20(fp)
   863cc:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   863d0:	e0bffb17 	ldw	r2,-20(fp)
   863d4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   863d8:	00800274 	movhi	r2,9
   863dc:	1089ae04 	addi	r2,r2,9912
   863e0:	10c00017 	ldw	r3,0(r2)
   863e4:	e0bffb17 	ldw	r2,-20(fp)
   863e8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   863ec:	e0bffb17 	ldw	r2,-20(fp)
   863f0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   863f4:	00c00274 	movhi	r3,9
   863f8:	18c9ae04 	addi	r3,r3,9912
   863fc:	e0bffb17 	ldw	r2,-20(fp)
   86400:	18800015 	stw	r2,0(r3)
   86404:	e0bff717 	ldw	r2,-36(fp)
   86408:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8640c:	e0bff517 	ldw	r2,-44(fp)
   86410:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   86414:	e0bffd17 	ldw	r2,-12(fp)
   86418:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   8641c:	e03ff815 	stw	zero,-32(fp)
   86420:	00003e06 	br	8651c <OSFlagDel+0x288>
   86424:	e0bff717 	ldw	r2,-36(fp)
   86428:	e0bff415 	stw	r2,-48(fp)
   8642c:	e0bff417 	ldw	r2,-48(fp)
   86430:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   86434:	e0fffd17 	ldw	r3,-12(fp)
   86438:	00801244 	movi	r2,73
   8643c:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
   86440:	e0bffb17 	ldw	r2,-20(fp)
   86444:	e0bff815 	stw	r2,-32(fp)
             }
             break;
   86448:	00003406 	br	8651c <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   8644c:	e0bffb17 	ldw	r2,-20(fp)
   86450:	10800117 	ldw	r2,4(r2)
   86454:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   86458:	00000606 	br	86474 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   8645c:	e13ff917 	ldw	r4,-28(fp)
   86460:	000b883a 	mov	r5,zero
   86464:	00875a40 	call	875a4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   86468:	e0bff917 	ldw	r2,-28(fp)
   8646c:	10800017 	ldw	r2,0(r2)
   86470:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   86474:	e0bff917 	ldw	r2,-28(fp)
   86478:	1004c03a 	cmpne	r2,r2,zero
   8647c:	103ff71e 	bne	r2,zero,8645c <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   86480:	e0fffb17 	ldw	r3,-20(fp)
   86484:	00800fc4 	movi	r2,63
   86488:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   8648c:	e0bffb17 	ldw	r2,-20(fp)
   86490:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   86494:	e0bffb17 	ldw	r2,-20(fp)
   86498:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   8649c:	00800274 	movhi	r2,9
   864a0:	1089ae04 	addi	r2,r2,9912
   864a4:	10c00017 	ldw	r3,0(r2)
   864a8:	e0bffb17 	ldw	r2,-20(fp)
   864ac:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   864b0:	e0bffb17 	ldw	r2,-20(fp)
   864b4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   864b8:	00c00274 	movhi	r3,9
   864bc:	18c9ae04 	addi	r3,r3,9912
   864c0:	e0bffb17 	ldw	r2,-20(fp)
   864c4:	18800015 	stw	r2,0(r3)
   864c8:	e0bff717 	ldw	r2,-36(fp)
   864cc:	e0bff315 	stw	r2,-52(fp)
   864d0:	e0bff317 	ldw	r2,-52(fp)
   864d4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   864d8:	e0bffa03 	ldbu	r2,-24(fp)
   864dc:	10800058 	cmpnei	r2,r2,1
   864e0:	1000011e 	bne	r2,zero,864e8 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   864e4:	00855b00 	call	855b0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   864e8:	e0bffd17 	ldw	r2,-12(fp)
   864ec:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   864f0:	e03ff815 	stw	zero,-32(fp)
             break;
   864f4:	00000906 	br	8651c <OSFlagDel+0x288>
   864f8:	e0bff717 	ldw	r2,-36(fp)
   864fc:	e0bff215 	stw	r2,-56(fp)
   86500:	e0bff217 	ldw	r2,-56(fp)
   86504:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   86508:	e0fffd17 	ldw	r3,-12(fp)
   8650c:	008001c4 	movi	r2,7
   86510:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
   86514:	e0bffb17 	ldw	r2,-20(fp)
   86518:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
   8651c:	e0bff817 	ldw	r2,-32(fp)
   86520:	e0bfff15 	stw	r2,-4(fp)
   86524:	e0bfff17 	ldw	r2,-4(fp)
}
   86528:	e037883a 	mov	sp,fp
   8652c:	dfc00117 	ldw	ra,4(sp)
   86530:	df000017 	ldw	fp,0(sp)
   86534:	dec00204 	addi	sp,sp,8
   86538:	f800283a 	ret

0008653c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   8653c:	defff504 	addi	sp,sp,-44
   86540:	dfc00a15 	stw	ra,40(sp)
   86544:	df000915 	stw	fp,36(sp)
   86548:	df000904 	addi	fp,sp,36
   8654c:	e13ffc15 	stw	r4,-16(fp)
   86550:	e17ffd15 	stw	r5,-12(fp)
   86554:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   86558:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8655c:	e0bffe17 	ldw	r2,-8(fp)
   86560:	1004c03a 	cmpne	r2,r2,zero
   86564:	1000021e 	bne	r2,zero,86570 <OSFlagNameGet+0x34>
        return (0);
   86568:	e03fff15 	stw	zero,-4(fp)
   8656c:	00003e06 	br	86668 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   86570:	e0bffc17 	ldw	r2,-16(fp)
   86574:	1004c03a 	cmpne	r2,r2,zero
   86578:	1000051e 	bne	r2,zero,86590 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8657c:	e0fffe17 	ldw	r3,-8(fp)
   86580:	00801b84 	movi	r2,110
   86584:	18800005 	stb	r2,0(r3)
        return (0);
   86588:	e03fff15 	stw	zero,-4(fp)
   8658c:	00003606 	br	86668 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   86590:	e0bffd17 	ldw	r2,-12(fp)
   86594:	1004c03a 	cmpne	r2,r2,zero
   86598:	1000051e 	bne	r2,zero,865b0 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   8659c:	e0fffe17 	ldw	r3,-8(fp)
   865a0:	00800304 	movi	r2,12
   865a4:	18800005 	stb	r2,0(r3)
        return (0);
   865a8:	e03fff15 	stw	zero,-4(fp)
   865ac:	00002e06 	br	86668 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   865b0:	00800274 	movhi	r2,9
   865b4:	1089ab04 	addi	r2,r2,9900
   865b8:	10800003 	ldbu	r2,0(r2)
   865bc:	10803fcc 	andi	r2,r2,255
   865c0:	1005003a 	cmpeq	r2,r2,zero
   865c4:	1000051e 	bne	r2,zero,865dc <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
   865c8:	e0fffe17 	ldw	r3,-8(fp)
   865cc:	00800444 	movi	r2,17
   865d0:	18800005 	stb	r2,0(r3)
        return (0);
   865d4:	e03fff15 	stw	zero,-4(fp)
   865d8:	00002306 	br	86668 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   865dc:	0005303a 	rdctl	r2,status
   865e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   865e4:	e0fff917 	ldw	r3,-28(fp)
   865e8:	00bfff84 	movi	r2,-2
   865ec:	1884703a 	and	r2,r3,r2
   865f0:	1001703a 	wrctl	status,r2
  
  return context;
   865f4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   865f8:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   865fc:	e0bffc17 	ldw	r2,-16(fp)
   86600:	10800003 	ldbu	r2,0(r2)
   86604:	10803fcc 	andi	r2,r2,255
   86608:	10800160 	cmpeqi	r2,r2,5
   8660c:	1000091e 	bne	r2,zero,86634 <OSFlagNameGet+0xf8>
   86610:	e0bffa17 	ldw	r2,-24(fp)
   86614:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   86618:	e0bff817 	ldw	r2,-32(fp)
   8661c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   86620:	e0fffe17 	ldw	r3,-8(fp)
   86624:	00800044 	movi	r2,1
   86628:	18800005 	stb	r2,0(r3)
        return (0);
   8662c:	e03fff15 	stw	zero,-4(fp)
   86630:	00000d06 	br	86668 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   86634:	e0bffc17 	ldw	r2,-16(fp)
   86638:	11400284 	addi	r5,r2,10
   8663c:	e13ffd17 	ldw	r4,-12(fp)
   86640:	00856f40 	call	856f4 <OS_StrCopy>
   86644:	e0bffb05 	stb	r2,-20(fp)
   86648:	e0bffa17 	ldw	r2,-24(fp)
   8664c:	e0bff715 	stw	r2,-36(fp)
   86650:	e0bff717 	ldw	r2,-36(fp)
   86654:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   86658:	e0bffe17 	ldw	r2,-8(fp)
   8665c:	10000005 	stb	zero,0(r2)
    return (len);
   86660:	e0bffb03 	ldbu	r2,-20(fp)
   86664:	e0bfff15 	stw	r2,-4(fp)
   86668:	e0bfff17 	ldw	r2,-4(fp)
}
   8666c:	e037883a 	mov	sp,fp
   86670:	dfc00117 	ldw	ra,4(sp)
   86674:	df000017 	ldw	fp,0(sp)
   86678:	dec00204 	addi	sp,sp,8
   8667c:	f800283a 	ret

00086680 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   86680:	defff504 	addi	sp,sp,-44
   86684:	dfc00a15 	stw	ra,40(sp)
   86688:	df000915 	stw	fp,36(sp)
   8668c:	df000904 	addi	fp,sp,36
   86690:	e13ffd15 	stw	r4,-12(fp)
   86694:	e17ffe15 	stw	r5,-8(fp)
   86698:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8669c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   866a0:	e0bfff17 	ldw	r2,-4(fp)
   866a4:	1005003a 	cmpeq	r2,r2,zero
   866a8:	1000451e 	bne	r2,zero,867c0 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   866ac:	e0bffd17 	ldw	r2,-12(fp)
   866b0:	1004c03a 	cmpne	r2,r2,zero
   866b4:	1000041e 	bne	r2,zero,866c8 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   866b8:	e0ffff17 	ldw	r3,-4(fp)
   866bc:	00801b84 	movi	r2,110
   866c0:	18800005 	stb	r2,0(r3)
        return;
   866c4:	00003e06 	br	867c0 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   866c8:	e0bffe17 	ldw	r2,-8(fp)
   866cc:	1004c03a 	cmpne	r2,r2,zero
   866d0:	1000041e 	bne	r2,zero,866e4 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   866d4:	e0ffff17 	ldw	r3,-4(fp)
   866d8:	00800304 	movi	r2,12
   866dc:	18800005 	stb	r2,0(r3)
        return;
   866e0:	00003706 	br	867c0 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   866e4:	00800274 	movhi	r2,9
   866e8:	1089ab04 	addi	r2,r2,9900
   866ec:	10800003 	ldbu	r2,0(r2)
   866f0:	10803fcc 	andi	r2,r2,255
   866f4:	1005003a 	cmpeq	r2,r2,zero
   866f8:	1000041e 	bne	r2,zero,8670c <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
   866fc:	e0ffff17 	ldw	r3,-4(fp)
   86700:	00800484 	movi	r2,18
   86704:	18800005 	stb	r2,0(r3)
        return;
   86708:	00002d06 	br	867c0 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8670c:	0005303a 	rdctl	r2,status
   86710:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   86714:	e0fffa17 	ldw	r3,-24(fp)
   86718:	00bfff84 	movi	r2,-2
   8671c:	1884703a 	and	r2,r3,r2
   86720:	1001703a 	wrctl	status,r2
  
  return context;
   86724:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   86728:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   8672c:	e0bffd17 	ldw	r2,-12(fp)
   86730:	10800003 	ldbu	r2,0(r2)
   86734:	10803fcc 	andi	r2,r2,255
   86738:	10800160 	cmpeqi	r2,r2,5
   8673c:	1000081e 	bne	r2,zero,86760 <OSFlagNameSet+0xe0>
   86740:	e0bffb17 	ldw	r2,-20(fp)
   86744:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   86748:	e0bff917 	ldw	r2,-28(fp)
   8674c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   86750:	e0ffff17 	ldw	r3,-4(fp)
   86754:	00800044 	movi	r2,1
   86758:	18800005 	stb	r2,0(r3)
        return;
   8675c:	00001806 	br	867c0 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   86760:	e13ffe17 	ldw	r4,-8(fp)
   86764:	00857740 	call	85774 <OS_StrLen>
   86768:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   8676c:	e0bffc03 	ldbu	r2,-16(fp)
   86770:	10800830 	cmpltui	r2,r2,32
   86774:	1000081e 	bne	r2,zero,86798 <OSFlagNameSet+0x118>
   86778:	e0bffb17 	ldw	r2,-20(fp)
   8677c:	e0bff815 	stw	r2,-32(fp)
   86780:	e0bff817 	ldw	r2,-32(fp)
   86784:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   86788:	e0ffff17 	ldw	r3,-4(fp)
   8678c:	00801cc4 	movi	r2,115
   86790:	18800005 	stb	r2,0(r3)
        return;
   86794:	00000a06 	br	867c0 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   86798:	e0bffd17 	ldw	r2,-12(fp)
   8679c:	11000284 	addi	r4,r2,10
   867a0:	e17ffe17 	ldw	r5,-8(fp)
   867a4:	00856f40 	call	856f4 <OS_StrCopy>
   867a8:	e0bffb17 	ldw	r2,-20(fp)
   867ac:	e0bff715 	stw	r2,-36(fp)
   867b0:	e0bff717 	ldw	r2,-36(fp)
   867b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   867b8:	e0bfff17 	ldw	r2,-4(fp)
   867bc:	10000005 	stb	zero,0(r2)
    return;
}
   867c0:	e037883a 	mov	sp,fp
   867c4:	dfc00117 	ldw	ra,4(sp)
   867c8:	df000017 	ldw	fp,0(sp)
   867cc:	dec00204 	addi	sp,sp,8
   867d0:	f800283a 	ret

000867d4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   867d4:	deffe004 	addi	sp,sp,-128
   867d8:	dfc01f15 	stw	ra,124(sp)
   867dc:	df001e15 	stw	fp,120(sp)
   867e0:	df001e04 	addi	fp,sp,120
   867e4:	e13ff915 	stw	r4,-28(fp)
   867e8:	e17ffa0d 	sth	r5,-24(fp)
   867ec:	e1bffb05 	stb	r6,-20(fp)
   867f0:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   867f4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   867f8:	e0800217 	ldw	r2,8(fp)
   867fc:	1004c03a 	cmpne	r2,r2,zero
   86800:	1000021e 	bne	r2,zero,8680c <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
   86804:	e03fff15 	stw	zero,-4(fp)
   86808:	00017d06 	br	86e00 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   8680c:	e0bff917 	ldw	r2,-28(fp)
   86810:	1004c03a 	cmpne	r2,r2,zero
   86814:	1000051e 	bne	r2,zero,8682c <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   86818:	e0c00217 	ldw	r3,8(fp)
   8681c:	00801b84 	movi	r2,110
   86820:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   86824:	e03fff15 	stw	zero,-4(fp)
   86828:	00017506 	br	86e00 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   8682c:	00800274 	movhi	r2,9
   86830:	1089ab04 	addi	r2,r2,9900
   86834:	10800003 	ldbu	r2,0(r2)
   86838:	10803fcc 	andi	r2,r2,255
   8683c:	1005003a 	cmpeq	r2,r2,zero
   86840:	1000051e 	bne	r2,zero,86858 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   86844:	e0c00217 	ldw	r3,8(fp)
   86848:	00800084 	movi	r2,2
   8684c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   86850:	e03fff15 	stw	zero,-4(fp)
   86854:	00016a06 	br	86e00 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   86858:	00800274 	movhi	r2,9
   8685c:	10899d04 	addi	r2,r2,9844
   86860:	10800003 	ldbu	r2,0(r2)
   86864:	10803fcc 	andi	r2,r2,255
   86868:	1005003a 	cmpeq	r2,r2,zero
   8686c:	1000051e 	bne	r2,zero,86884 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   86870:	e0c00217 	ldw	r3,8(fp)
   86874:	00800344 	movi	r2,13
   86878:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8687c:	e03fff15 	stw	zero,-4(fp)
   86880:	00015f06 	br	86e00 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   86884:	e0bff917 	ldw	r2,-28(fp)
   86888:	10800003 	ldbu	r2,0(r2)
   8688c:	10803fcc 	andi	r2,r2,255
   86890:	10800160 	cmpeqi	r2,r2,5
   86894:	1000051e 	bne	r2,zero,868ac <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
   86898:	e0c00217 	ldw	r3,8(fp)
   8689c:	00800044 	movi	r2,1
   868a0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   868a4:	e03fff15 	stw	zero,-4(fp)
   868a8:	00015506 	br	86e00 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   868ac:	e0fffb03 	ldbu	r3,-20(fp)
   868b0:	00bfe004 	movi	r2,-128
   868b4:	1884703a 	and	r2,r3,r2
   868b8:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   868bc:	e0bff283 	ldbu	r2,-54(fp)
   868c0:	1005003a 	cmpeq	r2,r2,zero
   868c4:	1000071e 	bne	r2,zero,868e4 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   868c8:	00c01fc4 	movi	r3,127
   868cc:	e0bffb03 	ldbu	r2,-20(fp)
   868d0:	10c4703a 	and	r2,r2,r3
   868d4:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
   868d8:	00800044 	movi	r2,1
   868dc:	e0bff205 	stb	r2,-56(fp)
   868e0:	00000106 	br	868e8 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
   868e4:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   868e8:	0005303a 	rdctl	r2,status
   868ec:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   868f0:	e0fff017 	ldw	r3,-64(fp)
   868f4:	00bfff84 	movi	r2,-2
   868f8:	1884703a 	and	r2,r3,r2
   868fc:	1001703a 	wrctl	status,r2
  
  return context;
   86900:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   86904:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
   86908:	e0bffb03 	ldbu	r2,-20(fp)
   8690c:	e0bffe15 	stw	r2,-8(fp)
   86910:	e0fffe17 	ldw	r3,-8(fp)
   86914:	18800060 	cmpeqi	r2,r3,1
   86918:	1000981e 	bne	r2,zero,86b7c <OSFlagPend+0x3a8>
   8691c:	e0fffe17 	ldw	r3,-8(fp)
   86920:	18800088 	cmpgei	r2,r3,2
   86924:	1000041e 	bne	r2,zero,86938 <OSFlagPend+0x164>
   86928:	e0fffe17 	ldw	r3,-8(fp)
   8692c:	1805003a 	cmpeq	r2,r3,zero
   86930:	1000641e 	bne	r2,zero,86ac4 <OSFlagPend+0x2f0>
   86934:	0000bf06 	br	86c34 <OSFlagPend+0x460>
   86938:	e0fffe17 	ldw	r3,-8(fp)
   8693c:	188000a0 	cmpeqi	r2,r3,2
   86940:	1000041e 	bne	r2,zero,86954 <OSFlagPend+0x180>
   86944:	e0fffe17 	ldw	r3,-8(fp)
   86948:	188000e0 	cmpeqi	r2,r3,3
   8694c:	10002f1e 	bne	r2,zero,86a0c <OSFlagPend+0x238>
   86950:	0000b806 	br	86c34 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   86954:	e0bff917 	ldw	r2,-28(fp)
   86958:	10c0020b 	ldhu	r3,8(r2)
   8695c:	e0bffa0b 	ldhu	r2,-24(fp)
   86960:	1884703a 	and	r2,r3,r2
   86964:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   86968:	e0fff30b 	ldhu	r3,-52(fp)
   8696c:	e0bffa0b 	ldhu	r2,-24(fp)
   86970:	18801a1e 	bne	r3,r2,869dc <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   86974:	e0bff203 	ldbu	r2,-56(fp)
   86978:	10800058 	cmpnei	r2,r2,1
   8697c:	1000091e 	bne	r2,zero,869a4 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   86980:	e0bff917 	ldw	r2,-28(fp)
   86984:	1080020b 	ldhu	r2,8(r2)
   86988:	1007883a 	mov	r3,r2
   8698c:	e0bff30b 	ldhu	r2,-52(fp)
   86990:	0084303a 	nor	r2,zero,r2
   86994:	1884703a 	and	r2,r3,r2
   86998:	1007883a 	mov	r3,r2
   8699c:	e0bff917 	ldw	r2,-28(fp)
   869a0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   869a4:	00800274 	movhi	r2,9
   869a8:	1089ac04 	addi	r2,r2,9904
   869ac:	10c00017 	ldw	r3,0(r2)
   869b0:	e0bff30b 	ldhu	r2,-52(fp)
   869b4:	18800b0d 	sth	r2,44(r3)
   869b8:	e0bff117 	ldw	r2,-60(fp)
   869bc:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   869c0:	e0bfef17 	ldw	r2,-68(fp)
   869c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   869c8:	e0800217 	ldw	r2,8(fp)
   869cc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   869d0:	e0bff30b 	ldhu	r2,-52(fp)
   869d4:	e0bfff15 	stw	r2,-4(fp)
   869d8:	00010906 	br	86e00 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   869dc:	e1bffa0b 	ldhu	r6,-24(fp)
   869e0:	e1fffb03 	ldbu	r7,-20(fp)
   869e4:	e0bffc0b 	ldhu	r2,-16(fp)
   869e8:	e17ff404 	addi	r5,fp,-48
   869ec:	d8800015 	stw	r2,0(sp)
   869f0:	e13ff917 	ldw	r4,-28(fp)
   869f4:	00872fc0 	call	872fc <OS_FlagBlock>
   869f8:	e0bff117 	ldw	r2,-60(fp)
   869fc:	e0bfee15 	stw	r2,-72(fp)
   86a00:	e0bfee17 	ldw	r2,-72(fp)
   86a04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   86a08:	00009506 	br	86c60 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   86a0c:	e0bff917 	ldw	r2,-28(fp)
   86a10:	10c0020b 	ldhu	r3,8(r2)
   86a14:	e0bffa0b 	ldhu	r2,-24(fp)
   86a18:	1884703a 	and	r2,r3,r2
   86a1c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   86a20:	e0bff30b 	ldhu	r2,-52(fp)
   86a24:	1005003a 	cmpeq	r2,r2,zero
   86a28:	10001a1e 	bne	r2,zero,86a94 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   86a2c:	e0bff203 	ldbu	r2,-56(fp)
   86a30:	10800058 	cmpnei	r2,r2,1
   86a34:	1000091e 	bne	r2,zero,86a5c <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   86a38:	e0bff917 	ldw	r2,-28(fp)
   86a3c:	1080020b 	ldhu	r2,8(r2)
   86a40:	1007883a 	mov	r3,r2
   86a44:	e0bff30b 	ldhu	r2,-52(fp)
   86a48:	0084303a 	nor	r2,zero,r2
   86a4c:	1884703a 	and	r2,r3,r2
   86a50:	1007883a 	mov	r3,r2
   86a54:	e0bff917 	ldw	r2,-28(fp)
   86a58:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   86a5c:	00800274 	movhi	r2,9
   86a60:	1089ac04 	addi	r2,r2,9904
   86a64:	10c00017 	ldw	r3,0(r2)
   86a68:	e0bff30b 	ldhu	r2,-52(fp)
   86a6c:	18800b0d 	sth	r2,44(r3)
   86a70:	e0bff117 	ldw	r2,-60(fp)
   86a74:	e0bfed15 	stw	r2,-76(fp)
   86a78:	e0bfed17 	ldw	r2,-76(fp)
   86a7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   86a80:	e0800217 	ldw	r2,8(fp)
   86a84:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   86a88:	e0fff30b 	ldhu	r3,-52(fp)
   86a8c:	e0ffff15 	stw	r3,-4(fp)
   86a90:	0000db06 	br	86e00 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   86a94:	e1bffa0b 	ldhu	r6,-24(fp)
   86a98:	e1fffb03 	ldbu	r7,-20(fp)
   86a9c:	e0bffc0b 	ldhu	r2,-16(fp)
   86aa0:	e17ff404 	addi	r5,fp,-48
   86aa4:	d8800015 	stw	r2,0(sp)
   86aa8:	e13ff917 	ldw	r4,-28(fp)
   86aac:	00872fc0 	call	872fc <OS_FlagBlock>
   86ab0:	e0bff117 	ldw	r2,-60(fp)
   86ab4:	e0bfec15 	stw	r2,-80(fp)
   86ab8:	e0bfec17 	ldw	r2,-80(fp)
   86abc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   86ac0:	00006706 	br	86c60 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   86ac4:	e0bff917 	ldw	r2,-28(fp)
   86ac8:	1080020b 	ldhu	r2,8(r2)
   86acc:	0084303a 	nor	r2,zero,r2
   86ad0:	1007883a 	mov	r3,r2
   86ad4:	e0bffa0b 	ldhu	r2,-24(fp)
   86ad8:	1884703a 	and	r2,r3,r2
   86adc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   86ae0:	e0fff30b 	ldhu	r3,-52(fp)
   86ae4:	e0bffa0b 	ldhu	r2,-24(fp)
   86ae8:	1880181e 	bne	r3,r2,86b4c <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   86aec:	e0bff203 	ldbu	r2,-56(fp)
   86af0:	10800058 	cmpnei	r2,r2,1
   86af4:	1000071e 	bne	r2,zero,86b14 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   86af8:	e0bff917 	ldw	r2,-28(fp)
   86afc:	10c0020b 	ldhu	r3,8(r2)
   86b00:	e0bff30b 	ldhu	r2,-52(fp)
   86b04:	1884b03a 	or	r2,r3,r2
   86b08:	1007883a 	mov	r3,r2
   86b0c:	e0bff917 	ldw	r2,-28(fp)
   86b10:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   86b14:	00800274 	movhi	r2,9
   86b18:	1089ac04 	addi	r2,r2,9904
   86b1c:	10c00017 	ldw	r3,0(r2)
   86b20:	e0bff30b 	ldhu	r2,-52(fp)
   86b24:	18800b0d 	sth	r2,44(r3)
   86b28:	e0bff117 	ldw	r2,-60(fp)
   86b2c:	e0bfeb15 	stw	r2,-84(fp)
   86b30:	e0bfeb17 	ldw	r2,-84(fp)
   86b34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   86b38:	e0800217 	ldw	r2,8(fp)
   86b3c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   86b40:	e0bff30b 	ldhu	r2,-52(fp)
   86b44:	e0bfff15 	stw	r2,-4(fp)
   86b48:	0000ad06 	br	86e00 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   86b4c:	e1bffa0b 	ldhu	r6,-24(fp)
   86b50:	e1fffb03 	ldbu	r7,-20(fp)
   86b54:	e0bffc0b 	ldhu	r2,-16(fp)
   86b58:	e17ff404 	addi	r5,fp,-48
   86b5c:	d8800015 	stw	r2,0(sp)
   86b60:	e13ff917 	ldw	r4,-28(fp)
   86b64:	00872fc0 	call	872fc <OS_FlagBlock>
   86b68:	e0bff117 	ldw	r2,-60(fp)
   86b6c:	e0bfea15 	stw	r2,-88(fp)
   86b70:	e0bfea17 	ldw	r2,-88(fp)
   86b74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   86b78:	00003906 	br	86c60 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   86b7c:	e0bff917 	ldw	r2,-28(fp)
   86b80:	1080020b 	ldhu	r2,8(r2)
   86b84:	0084303a 	nor	r2,zero,r2
   86b88:	1007883a 	mov	r3,r2
   86b8c:	e0bffa0b 	ldhu	r2,-24(fp)
   86b90:	1884703a 	and	r2,r3,r2
   86b94:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   86b98:	e0bff30b 	ldhu	r2,-52(fp)
   86b9c:	1005003a 	cmpeq	r2,r2,zero
   86ba0:	1000181e 	bne	r2,zero,86c04 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   86ba4:	e0bff203 	ldbu	r2,-56(fp)
   86ba8:	10800058 	cmpnei	r2,r2,1
   86bac:	1000071e 	bne	r2,zero,86bcc <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   86bb0:	e0bff917 	ldw	r2,-28(fp)
   86bb4:	10c0020b 	ldhu	r3,8(r2)
   86bb8:	e0bff30b 	ldhu	r2,-52(fp)
   86bbc:	1884b03a 	or	r2,r3,r2
   86bc0:	1007883a 	mov	r3,r2
   86bc4:	e0bff917 	ldw	r2,-28(fp)
   86bc8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   86bcc:	00800274 	movhi	r2,9
   86bd0:	1089ac04 	addi	r2,r2,9904
   86bd4:	10c00017 	ldw	r3,0(r2)
   86bd8:	e0bff30b 	ldhu	r2,-52(fp)
   86bdc:	18800b0d 	sth	r2,44(r3)
   86be0:	e0bff117 	ldw	r2,-60(fp)
   86be4:	e0bfe915 	stw	r2,-92(fp)
   86be8:	e0bfe917 	ldw	r2,-92(fp)
   86bec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   86bf0:	e0800217 	ldw	r2,8(fp)
   86bf4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   86bf8:	e0fff30b 	ldhu	r3,-52(fp)
   86bfc:	e0ffff15 	stw	r3,-4(fp)
   86c00:	00007f06 	br	86e00 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   86c04:	e1bffa0b 	ldhu	r6,-24(fp)
   86c08:	e1fffb03 	ldbu	r7,-20(fp)
   86c0c:	e0bffc0b 	ldhu	r2,-16(fp)
   86c10:	e17ff404 	addi	r5,fp,-48
   86c14:	d8800015 	stw	r2,0(sp)
   86c18:	e13ff917 	ldw	r4,-28(fp)
   86c1c:	00872fc0 	call	872fc <OS_FlagBlock>
   86c20:	e0bff117 	ldw	r2,-60(fp)
   86c24:	e0bfe815 	stw	r2,-96(fp)
   86c28:	e0bfe817 	ldw	r2,-96(fp)
   86c2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   86c30:	00000b06 	br	86c60 <OSFlagPend+0x48c>
   86c34:	e0bff117 	ldw	r2,-60(fp)
   86c38:	e0bfe715 	stw	r2,-100(fp)
   86c3c:	e0bfe717 	ldw	r2,-100(fp)
   86c40:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   86c44:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   86c48:	e0c00217 	ldw	r3,8(fp)
   86c4c:	00801bc4 	movi	r2,111
   86c50:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
   86c54:	e0bff30b 	ldhu	r2,-52(fp)
   86c58:	e0bfff15 	stw	r2,-4(fp)
   86c5c:	00006806 	br	86e00 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   86c60:	00855b00 	call	855b0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   86c64:	0005303a 	rdctl	r2,status
   86c68:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   86c6c:	e0ffe617 	ldw	r3,-104(fp)
   86c70:	00bfff84 	movi	r2,-2
   86c74:	1884703a 	and	r2,r3,r2
   86c78:	1001703a 	wrctl	status,r2
  
  return context;
   86c7c:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
   86c80:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   86c84:	00800274 	movhi	r2,9
   86c88:	1089ac04 	addi	r2,r2,9904
   86c8c:	10800017 	ldw	r2,0(r2)
   86c90:	10800c43 	ldbu	r2,49(r2)
   86c94:	10803fcc 	andi	r2,r2,255
   86c98:	1005003a 	cmpeq	r2,r2,zero
   86c9c:	1000221e 	bne	r2,zero,86d28 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   86ca0:	00800274 	movhi	r2,9
   86ca4:	1089ac04 	addi	r2,r2,9904
   86ca8:	10800017 	ldw	r2,0(r2)
   86cac:	10800c43 	ldbu	r2,49(r2)
   86cb0:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   86cb4:	00800274 	movhi	r2,9
   86cb8:	1089ac04 	addi	r2,r2,9904
   86cbc:	10800017 	ldw	r2,0(r2)
   86cc0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   86cc4:	e13ff404 	addi	r4,fp,-48
   86cc8:	00876b40 	call	876b4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   86ccc:	00800274 	movhi	r2,9
   86cd0:	1089ac04 	addi	r2,r2,9904
   86cd4:	10800017 	ldw	r2,0(r2)
   86cd8:	10000c05 	stb	zero,48(r2)
   86cdc:	e0bff117 	ldw	r2,-60(fp)
   86ce0:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   86ce4:	e0bfe517 	ldw	r2,-108(fp)
   86ce8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   86cec:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
   86cf0:	e0bff243 	ldbu	r2,-55(fp)
   86cf4:	108000a0 	cmpeqi	r2,r2,2
   86cf8:	1000011e 	bne	r2,zero,86d00 <OSFlagPend+0x52c>
   86cfc:	00000406 	br	86d10 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   86d00:	e0c00217 	ldw	r3,8(fp)
   86d04:	00800384 	movi	r2,14
   86d08:	18800005 	stb	r2,0(r3)
                 break;
   86d0c:	00000306 	br	86d1c <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   86d10:	e0c00217 	ldw	r3,8(fp)
   86d14:	00800284 	movi	r2,10
   86d18:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
   86d1c:	e0fff30b 	ldhu	r3,-52(fp)
   86d20:	e0ffff15 	stw	r3,-4(fp)
   86d24:	00003606 	br	86e00 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   86d28:	00800274 	movhi	r2,9
   86d2c:	1089ac04 	addi	r2,r2,9904
   86d30:	10800017 	ldw	r2,0(r2)
   86d34:	10800b0b 	ldhu	r2,44(r2)
   86d38:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   86d3c:	e0bff203 	ldbu	r2,-56(fp)
   86d40:	10800058 	cmpnei	r2,r2,1
   86d44:	1000261e 	bne	r2,zero,86de0 <OSFlagPend+0x60c>
        switch (wait_type) {
   86d48:	e0bffb03 	ldbu	r2,-20(fp)
   86d4c:	e0bffd15 	stw	r2,-12(fp)
   86d50:	e0fffd17 	ldw	r3,-12(fp)
   86d54:	1804803a 	cmplt	r2,r3,zero
   86d58:	1000181e 	bne	r2,zero,86dbc <OSFlagPend+0x5e8>
   86d5c:	e0fffd17 	ldw	r3,-12(fp)
   86d60:	18800090 	cmplti	r2,r3,2
   86d64:	10000d1e 	bne	r2,zero,86d9c <OSFlagPend+0x5c8>
   86d68:	e0fffd17 	ldw	r3,-12(fp)
   86d6c:	18800108 	cmpgei	r2,r3,4
   86d70:	1000121e 	bne	r2,zero,86dbc <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   86d74:	e0bff917 	ldw	r2,-28(fp)
   86d78:	1080020b 	ldhu	r2,8(r2)
   86d7c:	1007883a 	mov	r3,r2
   86d80:	e0bff30b 	ldhu	r2,-52(fp)
   86d84:	0084303a 	nor	r2,zero,r2
   86d88:	1884703a 	and	r2,r3,r2
   86d8c:	1007883a 	mov	r3,r2
   86d90:	e0bff917 	ldw	r2,-28(fp)
   86d94:	10c0020d 	sth	r3,8(r2)
                 break;
   86d98:	00001106 	br	86de0 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   86d9c:	e0bff917 	ldw	r2,-28(fp)
   86da0:	10c0020b 	ldhu	r3,8(r2)
   86da4:	e0bff30b 	ldhu	r2,-52(fp)
   86da8:	1884b03a 	or	r2,r3,r2
   86dac:	1007883a 	mov	r3,r2
   86db0:	e0bff917 	ldw	r2,-28(fp)
   86db4:	10c0020d 	sth	r3,8(r2)
                 break;
   86db8:	00000906 	br	86de0 <OSFlagPend+0x60c>
   86dbc:	e0bff117 	ldw	r2,-60(fp)
   86dc0:	e0bfe415 	stw	r2,-112(fp)
   86dc4:	e0bfe417 	ldw	r2,-112(fp)
   86dc8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   86dcc:	e0c00217 	ldw	r3,8(fp)
   86dd0:	00801bc4 	movi	r2,111
   86dd4:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
   86dd8:	e03fff15 	stw	zero,-4(fp)
   86ddc:	00000806 	br	86e00 <OSFlagPend+0x62c>
   86de0:	e0bff117 	ldw	r2,-60(fp)
   86de4:	e0bfe315 	stw	r2,-116(fp)
   86de8:	e0bfe317 	ldw	r2,-116(fp)
   86dec:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   86df0:	e0800217 	ldw	r2,8(fp)
   86df4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   86df8:	e0bff30b 	ldhu	r2,-52(fp)
   86dfc:	e0bfff15 	stw	r2,-4(fp)
   86e00:	e0bfff17 	ldw	r2,-4(fp)
}
   86e04:	e037883a 	mov	sp,fp
   86e08:	dfc00117 	ldw	ra,4(sp)
   86e0c:	df000017 	ldw	fp,0(sp)
   86e10:	dec00204 	addi	sp,sp,8
   86e14:	f800283a 	ret

00086e18 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   86e18:	defffb04 	addi	sp,sp,-20
   86e1c:	df000415 	stw	fp,16(sp)
   86e20:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   86e24:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   86e28:	0005303a 	rdctl	r2,status
   86e2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   86e30:	e0fffd17 	ldw	r3,-12(fp)
   86e34:	00bfff84 	movi	r2,-2
   86e38:	1884703a 	and	r2,r3,r2
   86e3c:	1001703a 	wrctl	status,r2
  
  return context;
   86e40:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   86e44:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   86e48:	00800274 	movhi	r2,9
   86e4c:	1089ac04 	addi	r2,r2,9904
   86e50:	10800017 	ldw	r2,0(r2)
   86e54:	10800b0b 	ldhu	r2,44(r2)
   86e58:	e0bfff0d 	sth	r2,-4(fp)
   86e5c:	e0bffe17 	ldw	r2,-8(fp)
   86e60:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   86e64:	e0bffc17 	ldw	r2,-16(fp)
   86e68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   86e6c:	e0bfff0b 	ldhu	r2,-4(fp)
}
   86e70:	e037883a 	mov	sp,fp
   86e74:	df000017 	ldw	fp,0(sp)
   86e78:	dec00104 	addi	sp,sp,4
   86e7c:	f800283a 	ret

00086e80 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   86e80:	deffed04 	addi	sp,sp,-76
   86e84:	dfc01215 	stw	ra,72(sp)
   86e88:	df001115 	stw	fp,68(sp)
   86e8c:	df001104 	addi	fp,sp,68
   86e90:	e13ff915 	stw	r4,-28(fp)
   86e94:	e1fffc15 	stw	r7,-16(fp)
   86e98:	e17ffa0d 	sth	r5,-24(fp)
   86e9c:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   86ea0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   86ea4:	e0bffc17 	ldw	r2,-16(fp)
   86ea8:	1004c03a 	cmpne	r2,r2,zero
   86eac:	1000021e 	bne	r2,zero,86eb8 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
   86eb0:	e03fff15 	stw	zero,-4(fp)
   86eb4:	0000d606 	br	87210 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   86eb8:	e0bff917 	ldw	r2,-28(fp)
   86ebc:	1004c03a 	cmpne	r2,r2,zero
   86ec0:	1000051e 	bne	r2,zero,86ed8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   86ec4:	e0fffc17 	ldw	r3,-16(fp)
   86ec8:	00801b84 	movi	r2,110
   86ecc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   86ed0:	e03fff15 	stw	zero,-4(fp)
   86ed4:	0000ce06 	br	87210 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   86ed8:	e0bff917 	ldw	r2,-28(fp)
   86edc:	10800003 	ldbu	r2,0(r2)
   86ee0:	10803fcc 	andi	r2,r2,255
   86ee4:	10800160 	cmpeqi	r2,r2,5
   86ee8:	1000051e 	bne	r2,zero,86f00 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   86eec:	e0fffc17 	ldw	r3,-16(fp)
   86ef0:	00800044 	movi	r2,1
   86ef4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   86ef8:	e03fff15 	stw	zero,-4(fp)
   86efc:	0000c406 	br	87210 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   86f00:	0005303a 	rdctl	r2,status
   86f04:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   86f08:	e0fff417 	ldw	r3,-48(fp)
   86f0c:	00bfff84 	movi	r2,-2
   86f10:	1884703a 	and	r2,r3,r2
   86f14:	1001703a 	wrctl	status,r2
  
  return context;
   86f18:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   86f1c:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
   86f20:	e0bffb03 	ldbu	r2,-20(fp)
   86f24:	e0bffe15 	stw	r2,-8(fp)
   86f28:	e0fffe17 	ldw	r3,-8(fp)
   86f2c:	1805003a 	cmpeq	r2,r3,zero
   86f30:	1000041e 	bne	r2,zero,86f44 <OSFlagPost+0xc4>
   86f34:	e0fffe17 	ldw	r3,-8(fp)
   86f38:	18800060 	cmpeqi	r2,r3,1
   86f3c:	10000b1e 	bne	r2,zero,86f6c <OSFlagPost+0xec>
   86f40:	00001206 	br	86f8c <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   86f44:	e0bff917 	ldw	r2,-28(fp)
   86f48:	1080020b 	ldhu	r2,8(r2)
   86f4c:	1007883a 	mov	r3,r2
   86f50:	e0bffa0b 	ldhu	r2,-24(fp)
   86f54:	0084303a 	nor	r2,zero,r2
   86f58:	1884703a 	and	r2,r3,r2
   86f5c:	1007883a 	mov	r3,r2
   86f60:	e0bff917 	ldw	r2,-28(fp)
   86f64:	10c0020d 	sth	r3,8(r2)
             break;
   86f68:	00001106 	br	86fb0 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   86f6c:	e0bff917 	ldw	r2,-28(fp)
   86f70:	10c0020b 	ldhu	r3,8(r2)
   86f74:	e0bffa0b 	ldhu	r2,-24(fp)
   86f78:	1884b03a 	or	r2,r3,r2
   86f7c:	1007883a 	mov	r3,r2
   86f80:	e0bff917 	ldw	r2,-28(fp)
   86f84:	10c0020d 	sth	r3,8(r2)
             break;
   86f88:	00000906 	br	86fb0 <OSFlagPost+0x130>
   86f8c:	e0bff517 	ldw	r2,-44(fp)
   86f90:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   86f94:	e0bff317 	ldw	r2,-52(fp)
   86f98:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   86f9c:	e0fffc17 	ldw	r3,-16(fp)
   86fa0:	00801c44 	movi	r2,113
   86fa4:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
   86fa8:	e03fff15 	stw	zero,-4(fp)
   86fac:	00009806 	br	87210 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   86fb0:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   86fb4:	e0bff917 	ldw	r2,-28(fp)
   86fb8:	10800117 	ldw	r2,4(r2)
   86fbc:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   86fc0:	00007506 	br	87198 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
   86fc4:	e0bff817 	ldw	r2,-32(fp)
   86fc8:	10800483 	ldbu	r2,18(r2)
   86fcc:	10803fcc 	andi	r2,r2,255
   86fd0:	e0bffd15 	stw	r2,-12(fp)
   86fd4:	e0fffd17 	ldw	r3,-12(fp)
   86fd8:	18800060 	cmpeqi	r2,r3,1
   86fdc:	10004d1e 	bne	r2,zero,87114 <OSFlagPost+0x294>
   86fe0:	e0fffd17 	ldw	r3,-12(fp)
   86fe4:	18800088 	cmpgei	r2,r3,2
   86fe8:	1000041e 	bne	r2,zero,86ffc <OSFlagPost+0x17c>
   86fec:	e0fffd17 	ldw	r3,-12(fp)
   86ff0:	1805003a 	cmpeq	r2,r3,zero
   86ff4:	1000301e 	bne	r2,zero,870b8 <OSFlagPost+0x238>
   86ff8:	00005b06 	br	87168 <OSFlagPost+0x2e8>
   86ffc:	e0fffd17 	ldw	r3,-12(fp)
   87000:	188000a0 	cmpeqi	r2,r3,2
   87004:	1000041e 	bne	r2,zero,87018 <OSFlagPost+0x198>
   87008:	e0fffd17 	ldw	r3,-12(fp)
   8700c:	188000e0 	cmpeqi	r2,r3,3
   87010:	1000161e 	bne	r2,zero,8706c <OSFlagPost+0x1ec>
   87014:	00005406 	br	87168 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   87018:	e0bff917 	ldw	r2,-28(fp)
   8701c:	10c0020b 	ldhu	r3,8(r2)
   87020:	e0bff817 	ldw	r2,-32(fp)
   87024:	1080040b 	ldhu	r2,16(r2)
   87028:	1884703a 	and	r2,r3,r2
   8702c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   87030:	e0bff817 	ldw	r2,-32(fp)
   87034:	1080040b 	ldhu	r2,16(r2)
   87038:	10ffffcc 	andi	r3,r2,65535
   8703c:	e0bff68b 	ldhu	r2,-38(fp)
   87040:	1880521e 	bne	r3,r2,8718c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   87044:	e17ff68b 	ldhu	r5,-38(fp)
   87048:	e13ff817 	ldw	r4,-32(fp)
   8704c:	00875a40 	call	875a4 <OS_FlagTaskRdy>
   87050:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   87054:	e0bff603 	ldbu	r2,-40(fp)
   87058:	10800058 	cmpnei	r2,r2,1
   8705c:	10004b1e 	bne	r2,zero,8718c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   87060:	00800044 	movi	r2,1
   87064:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   87068:	00004806 	br	8718c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   8706c:	e0bff917 	ldw	r2,-28(fp)
   87070:	10c0020b 	ldhu	r3,8(r2)
   87074:	e0bff817 	ldw	r2,-32(fp)
   87078:	1080040b 	ldhu	r2,16(r2)
   8707c:	1884703a 	and	r2,r3,r2
   87080:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   87084:	e0bff68b 	ldhu	r2,-38(fp)
   87088:	1005003a 	cmpeq	r2,r2,zero
   8708c:	10003f1e 	bne	r2,zero,8718c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   87090:	e17ff68b 	ldhu	r5,-38(fp)
   87094:	e13ff817 	ldw	r4,-32(fp)
   87098:	00875a40 	call	875a4 <OS_FlagTaskRdy>
   8709c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   870a0:	e0bff603 	ldbu	r2,-40(fp)
   870a4:	10800058 	cmpnei	r2,r2,1
   870a8:	1000381e 	bne	r2,zero,8718c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   870ac:	00800044 	movi	r2,1
   870b0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   870b4:	00003506 	br	8718c <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   870b8:	e0bff917 	ldw	r2,-28(fp)
   870bc:	1080020b 	ldhu	r2,8(r2)
   870c0:	0084303a 	nor	r2,zero,r2
   870c4:	1007883a 	mov	r3,r2
   870c8:	e0bff817 	ldw	r2,-32(fp)
   870cc:	1080040b 	ldhu	r2,16(r2)
   870d0:	1884703a 	and	r2,r3,r2
   870d4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   870d8:	e0bff817 	ldw	r2,-32(fp)
   870dc:	1080040b 	ldhu	r2,16(r2)
   870e0:	10ffffcc 	andi	r3,r2,65535
   870e4:	e0bff68b 	ldhu	r2,-38(fp)
   870e8:	1880281e 	bne	r3,r2,8718c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   870ec:	e17ff68b 	ldhu	r5,-38(fp)
   870f0:	e13ff817 	ldw	r4,-32(fp)
   870f4:	00875a40 	call	875a4 <OS_FlagTaskRdy>
   870f8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   870fc:	e0bff603 	ldbu	r2,-40(fp)
   87100:	10800058 	cmpnei	r2,r2,1
   87104:	1000211e 	bne	r2,zero,8718c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   87108:	00800044 	movi	r2,1
   8710c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   87110:	00001e06 	br	8718c <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   87114:	e0bff917 	ldw	r2,-28(fp)
   87118:	1080020b 	ldhu	r2,8(r2)
   8711c:	0084303a 	nor	r2,zero,r2
   87120:	1007883a 	mov	r3,r2
   87124:	e0bff817 	ldw	r2,-32(fp)
   87128:	1080040b 	ldhu	r2,16(r2)
   8712c:	1884703a 	and	r2,r3,r2
   87130:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   87134:	e0bff68b 	ldhu	r2,-38(fp)
   87138:	1005003a 	cmpeq	r2,r2,zero
   8713c:	1000131e 	bne	r2,zero,8718c <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   87140:	e17ff68b 	ldhu	r5,-38(fp)
   87144:	e13ff817 	ldw	r4,-32(fp)
   87148:	00875a40 	call	875a4 <OS_FlagTaskRdy>
   8714c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   87150:	e0bff603 	ldbu	r2,-40(fp)
   87154:	10800058 	cmpnei	r2,r2,1
   87158:	10000c1e 	bne	r2,zero,8718c <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   8715c:	00800044 	movi	r2,1
   87160:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   87164:	00000906 	br	8718c <OSFlagPost+0x30c>
   87168:	e0bff517 	ldw	r2,-44(fp)
   8716c:	e0bff215 	stw	r2,-56(fp)
   87170:	e0bff217 	ldw	r2,-56(fp)
   87174:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   87178:	e0fffc17 	ldw	r3,-16(fp)
   8717c:	00801bc4 	movi	r2,111
   87180:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
   87184:	e03fff15 	stw	zero,-4(fp)
   87188:	00002106 	br	87210 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   8718c:	e0bff817 	ldw	r2,-32(fp)
   87190:	10800017 	ldw	r2,0(r2)
   87194:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   87198:	e0bff817 	ldw	r2,-32(fp)
   8719c:	1004c03a 	cmpne	r2,r2,zero
   871a0:	103f881e 	bne	r2,zero,86fc4 <OSFlagPost+0x144>
   871a4:	e0bff517 	ldw	r2,-44(fp)
   871a8:	e0bff115 	stw	r2,-60(fp)
   871ac:	e0bff117 	ldw	r2,-60(fp)
   871b0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   871b4:	e0bff783 	ldbu	r2,-34(fp)
   871b8:	10800058 	cmpnei	r2,r2,1
   871bc:	1000011e 	bne	r2,zero,871c4 <OSFlagPost+0x344>
        OS_Sched();
   871c0:	00855b00 	call	855b0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   871c4:	0005303a 	rdctl	r2,status
   871c8:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   871cc:	e0fff017 	ldw	r3,-64(fp)
   871d0:	00bfff84 	movi	r2,-2
   871d4:	1884703a 	and	r2,r3,r2
   871d8:	1001703a 	wrctl	status,r2
  
  return context;
   871dc:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
   871e0:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
   871e4:	e0bff917 	ldw	r2,-28(fp)
   871e8:	1080020b 	ldhu	r2,8(r2)
   871ec:	e0bff70d 	sth	r2,-36(fp)
   871f0:	e0bff517 	ldw	r2,-44(fp)
   871f4:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   871f8:	e0bfef17 	ldw	r2,-68(fp)
   871fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   87200:	e0bffc17 	ldw	r2,-16(fp)
   87204:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   87208:	e0bff70b 	ldhu	r2,-36(fp)
   8720c:	e0bfff15 	stw	r2,-4(fp)
   87210:	e0bfff17 	ldw	r2,-4(fp)
}
   87214:	e037883a 	mov	sp,fp
   87218:	dfc00117 	ldw	ra,4(sp)
   8721c:	df000017 	ldw	fp,0(sp)
   87220:	dec00204 	addi	sp,sp,8
   87224:	f800283a 	ret

00087228 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   87228:	defff804 	addi	sp,sp,-32
   8722c:	df000715 	stw	fp,28(sp)
   87230:	df000704 	addi	fp,sp,28
   87234:	e13ffd15 	stw	r4,-12(fp)
   87238:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   8723c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   87240:	e0bffe17 	ldw	r2,-8(fp)
   87244:	1004c03a 	cmpne	r2,r2,zero
   87248:	1000021e 	bne	r2,zero,87254 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
   8724c:	e03fff15 	stw	zero,-4(fp)
   87250:	00002506 	br	872e8 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   87254:	e0bffd17 	ldw	r2,-12(fp)
   87258:	1004c03a 	cmpne	r2,r2,zero
   8725c:	1000051e 	bne	r2,zero,87274 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   87260:	e0fffe17 	ldw	r3,-8(fp)
   87264:	00801b84 	movi	r2,110
   87268:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8726c:	e03fff15 	stw	zero,-4(fp)
   87270:	00001d06 	br	872e8 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   87274:	e0bffd17 	ldw	r2,-12(fp)
   87278:	10800003 	ldbu	r2,0(r2)
   8727c:	10803fcc 	andi	r2,r2,255
   87280:	10800160 	cmpeqi	r2,r2,5
   87284:	1000051e 	bne	r2,zero,8729c <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   87288:	e0fffe17 	ldw	r3,-8(fp)
   8728c:	00800044 	movi	r2,1
   87290:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   87294:	e03fff15 	stw	zero,-4(fp)
   87298:	00001306 	br	872e8 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8729c:	0005303a 	rdctl	r2,status
   872a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   872a4:	e0fffa17 	ldw	r3,-24(fp)
   872a8:	00bfff84 	movi	r2,-2
   872ac:	1884703a 	and	r2,r3,r2
   872b0:	1001703a 	wrctl	status,r2
  
  return context;
   872b4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   872b8:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
   872bc:	e0bffd17 	ldw	r2,-12(fp)
   872c0:	1080020b 	ldhu	r2,8(r2)
   872c4:	e0bffc0d 	sth	r2,-16(fp)
   872c8:	e0bffb17 	ldw	r2,-20(fp)
   872cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   872d0:	e0bff917 	ldw	r2,-28(fp)
   872d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   872d8:	e0bffe17 	ldw	r2,-8(fp)
   872dc:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   872e0:	e0bffc0b 	ldhu	r2,-16(fp)
   872e4:	e0bfff15 	stw	r2,-4(fp)
   872e8:	e0bfff17 	ldw	r2,-4(fp)
}
   872ec:	e037883a 	mov	sp,fp
   872f0:	df000017 	ldw	fp,0(sp)
   872f4:	dec00104 	addi	sp,sp,4
   872f8:	f800283a 	ret

000872fc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   872fc:	defff804 	addi	sp,sp,-32
   87300:	df000715 	stw	fp,28(sp)
   87304:	df000704 	addi	fp,sp,28
   87308:	e13ffb15 	stw	r4,-20(fp)
   8730c:	e17ffc15 	stw	r5,-16(fp)
   87310:	e0800117 	ldw	r2,4(fp)
   87314:	e1bffd0d 	sth	r6,-12(fp)
   87318:	e1fffe05 	stb	r7,-8(fp)
   8731c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   87320:	00800274 	movhi	r2,9
   87324:	1089ac04 	addi	r2,r2,9904
   87328:	10c00017 	ldw	r3,0(r2)
   8732c:	00800274 	movhi	r2,9
   87330:	1089ac04 	addi	r2,r2,9904
   87334:	10800017 	ldw	r2,0(r2)
   87338:	10800c03 	ldbu	r2,48(r2)
   8733c:	10800814 	ori	r2,r2,32
   87340:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   87344:	00800274 	movhi	r2,9
   87348:	1089ac04 	addi	r2,r2,9904
   8734c:	10800017 	ldw	r2,0(r2)
   87350:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   87354:	00800274 	movhi	r2,9
   87358:	1089ac04 	addi	r2,r2,9904
   8735c:	10c00017 	ldw	r3,0(r2)
   87360:	e0bfff0b 	ldhu	r2,-4(fp)
   87364:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   87368:	00800274 	movhi	r2,9
   8736c:	1089ac04 	addi	r2,r2,9904
   87370:	10c00017 	ldw	r3,0(r2)
   87374:	e0bffc17 	ldw	r2,-16(fp)
   87378:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   8737c:	e0fffc17 	ldw	r3,-16(fp)
   87380:	e0bffd0b 	ldhu	r2,-12(fp)
   87384:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   87388:	e0fffc17 	ldw	r3,-16(fp)
   8738c:	e0bffe03 	ldbu	r2,-8(fp)
   87390:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   87394:	00800274 	movhi	r2,9
   87398:	1089ac04 	addi	r2,r2,9904
   8739c:	10c00017 	ldw	r3,0(r2)
   873a0:	e0bffc17 	ldw	r2,-16(fp)
   873a4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   873a8:	e0bffb17 	ldw	r2,-20(fp)
   873ac:	10c00117 	ldw	r3,4(r2)
   873b0:	e0bffc17 	ldw	r2,-16(fp)
   873b4:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   873b8:	e0bffc17 	ldw	r2,-16(fp)
   873bc:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   873c0:	e0fffc17 	ldw	r3,-16(fp)
   873c4:	e0bffb17 	ldw	r2,-20(fp)
   873c8:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   873cc:	e0bffb17 	ldw	r2,-20(fp)
   873d0:	10800117 	ldw	r2,4(r2)
   873d4:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   873d8:	e0bffa17 	ldw	r2,-24(fp)
   873dc:	1005003a 	cmpeq	r2,r2,zero
   873e0:	1000031e 	bne	r2,zero,873f0 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   873e4:	e0fffa17 	ldw	r3,-24(fp)
   873e8:	e0bffc17 	ldw	r2,-16(fp)
   873ec:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   873f0:	e0fffb17 	ldw	r3,-20(fp)
   873f4:	e0bffc17 	ldw	r2,-16(fp)
   873f8:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   873fc:	00800274 	movhi	r2,9
   87400:	1089ac04 	addi	r2,r2,9904
   87404:	10800017 	ldw	r2,0(r2)
   87408:	10800d03 	ldbu	r2,52(r2)
   8740c:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   87410:	e13ff903 	ldbu	r4,-28(fp)
   87414:	e0fff903 	ldbu	r3,-28(fp)
   87418:	00800274 	movhi	r2,9
   8741c:	1089a944 	addi	r2,r2,9893
   87420:	10c5883a 	add	r2,r2,r3
   87424:	10800003 	ldbu	r2,0(r2)
   87428:	1007883a 	mov	r3,r2
   8742c:	00800274 	movhi	r2,9
   87430:	1089ac04 	addi	r2,r2,9904
   87434:	10800017 	ldw	r2,0(r2)
   87438:	10800d43 	ldbu	r2,53(r2)
   8743c:	0084303a 	nor	r2,zero,r2
   87440:	1884703a 	and	r2,r3,r2
   87444:	1007883a 	mov	r3,r2
   87448:	00800274 	movhi	r2,9
   8744c:	1089a944 	addi	r2,r2,9893
   87450:	1105883a 	add	r2,r2,r4
   87454:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   87458:	e0fff903 	ldbu	r3,-28(fp)
   8745c:	00800274 	movhi	r2,9
   87460:	1089a944 	addi	r2,r2,9893
   87464:	10c5883a 	add	r2,r2,r3
   87468:	10800003 	ldbu	r2,0(r2)
   8746c:	10803fcc 	andi	r2,r2,255
   87470:	1004c03a 	cmpne	r2,r2,zero
   87474:	10000e1e 	bne	r2,zero,874b0 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   87478:	00800274 	movhi	r2,9
   8747c:	1089ac04 	addi	r2,r2,9904
   87480:	10800017 	ldw	r2,0(r2)
   87484:	10800d83 	ldbu	r2,54(r2)
   87488:	0084303a 	nor	r2,zero,r2
   8748c:	1007883a 	mov	r3,r2
   87490:	00800274 	movhi	r2,9
   87494:	1089a904 	addi	r2,r2,9892
   87498:	10800003 	ldbu	r2,0(r2)
   8749c:	1884703a 	and	r2,r3,r2
   874a0:	1007883a 	mov	r3,r2
   874a4:	00800274 	movhi	r2,9
   874a8:	1089a904 	addi	r2,r2,9892
   874ac:	10c00005 	stb	r3,0(r2)
    }
}
   874b0:	e037883a 	mov	sp,fp
   874b4:	df000017 	ldw	fp,0(sp)
   874b8:	dec00104 	addi	sp,sp,4
   874bc:	f800283a 	ret

000874c0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   874c0:	defffb04 	addi	sp,sp,-20
   874c4:	dfc00415 	stw	ra,16(sp)
   874c8:	df000315 	stw	fp,12(sp)
   874cc:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   874d0:	01000274 	movhi	r4,9
   874d4:	2119be04 	addi	r4,r4,26360
   874d8:	0140dc04 	movi	r5,880
   874dc:	00854f00 	call	854f0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   874e0:	00800274 	movhi	r2,9
   874e4:	1099be04 	addi	r2,r2,26360
   874e8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   874ec:	00800274 	movhi	r2,9
   874f0:	1099c904 	addi	r2,r2,26404
   874f4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   874f8:	e03fff0d 	sth	zero,-4(fp)
   874fc:	00001306 	br	8754c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   87500:	e0bffe17 	ldw	r2,-8(fp)
   87504:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   87508:	e0fffe17 	ldw	r3,-8(fp)
   8750c:	e0bffd17 	ldw	r2,-12(fp)
   87510:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   87514:	e0fffe17 	ldw	r3,-8(fp)
   87518:	00800fc4 	movi	r2,63
   8751c:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   87520:	e0bffe17 	ldw	r2,-8(fp)
   87524:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   87528:	e0bffe17 	ldw	r2,-8(fp)
   8752c:	10800b04 	addi	r2,r2,44
   87530:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   87534:	e0bffd17 	ldw	r2,-12(fp)
   87538:	10800b04 	addi	r2,r2,44
   8753c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   87540:	e0bfff0b 	ldhu	r2,-4(fp)
   87544:	10800044 	addi	r2,r2,1
   87548:	e0bfff0d 	sth	r2,-4(fp)
   8754c:	e0bfff0b 	ldhu	r2,-4(fp)
   87550:	108004f0 	cmpltui	r2,r2,19
   87554:	103fea1e 	bne	r2,zero,87500 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   87558:	e0bffe17 	ldw	r2,-8(fp)
   8755c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   87560:	e0bffe17 	ldw	r2,-8(fp)
   87564:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   87568:	e0fffe17 	ldw	r3,-8(fp)
   8756c:	00800fc4 	movi	r2,63
   87570:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   87574:	e0bffe17 	ldw	r2,-8(fp)
   87578:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   8757c:	00c00274 	movhi	r3,9
   87580:	18c9ae04 	addi	r3,r3,9912
   87584:	00800274 	movhi	r2,9
   87588:	1099be04 	addi	r2,r2,26360
   8758c:	18800015 	stw	r2,0(r3)
#endif
}
   87590:	e037883a 	mov	sp,fp
   87594:	dfc00117 	ldw	ra,4(sp)
   87598:	df000017 	ldw	fp,0(sp)
   8759c:	dec00204 	addi	sp,sp,8
   875a0:	f800283a 	ret

000875a4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   875a4:	defffa04 	addi	sp,sp,-24
   875a8:	dfc00515 	stw	ra,20(sp)
   875ac:	df000415 	stw	fp,16(sp)
   875b0:	df000404 	addi	fp,sp,16
   875b4:	e13ffe15 	stw	r4,-8(fp)
   875b8:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   875bc:	e0bffe17 	ldw	r2,-8(fp)
   875c0:	10800217 	ldw	r2,8(r2)
   875c4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   875c8:	e0bffd17 	ldw	r2,-12(fp)
   875cc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   875d0:	e0fffd17 	ldw	r3,-12(fp)
   875d4:	e0bfff0b 	ldhu	r2,-4(fp)
   875d8:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   875dc:	e0bffd17 	ldw	r2,-12(fp)
   875e0:	10c00c03 	ldbu	r3,48(r2)
   875e4:	00bff7c4 	movi	r2,-33
   875e8:	1884703a 	and	r2,r3,r2
   875ec:	1007883a 	mov	r3,r2
   875f0:	e0bffd17 	ldw	r2,-12(fp)
   875f4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   875f8:	e0bffd17 	ldw	r2,-12(fp)
   875fc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   87600:	e0bffd17 	ldw	r2,-12(fp)
   87604:	10800c03 	ldbu	r2,48(r2)
   87608:	10803fcc 	andi	r2,r2,255
   8760c:	1004c03a 	cmpne	r2,r2,zero
   87610:	10001f1e 	bne	r2,zero,87690 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   87614:	e0bffd17 	ldw	r2,-12(fp)
   87618:	10c00d83 	ldbu	r3,54(r2)
   8761c:	00800274 	movhi	r2,9
   87620:	1089a904 	addi	r2,r2,9892
   87624:	10800003 	ldbu	r2,0(r2)
   87628:	1884b03a 	or	r2,r3,r2
   8762c:	1007883a 	mov	r3,r2
   87630:	00800274 	movhi	r2,9
   87634:	1089a904 	addi	r2,r2,9892
   87638:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8763c:	e0bffd17 	ldw	r2,-12(fp)
   87640:	10800d03 	ldbu	r2,52(r2)
   87644:	11003fcc 	andi	r4,r2,255
   87648:	e0bffd17 	ldw	r2,-12(fp)
   8764c:	10800d03 	ldbu	r2,52(r2)
   87650:	10c03fcc 	andi	r3,r2,255
   87654:	00800274 	movhi	r2,9
   87658:	1089a944 	addi	r2,r2,9893
   8765c:	10c5883a 	add	r2,r2,r3
   87660:	10c00003 	ldbu	r3,0(r2)
   87664:	e0bffd17 	ldw	r2,-12(fp)
   87668:	10800d43 	ldbu	r2,53(r2)
   8766c:	1884b03a 	or	r2,r3,r2
   87670:	1007883a 	mov	r3,r2
   87674:	00800274 	movhi	r2,9
   87678:	1089a944 	addi	r2,r2,9893
   8767c:	1105883a 	add	r2,r2,r4
   87680:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
   87684:	00800044 	movi	r2,1
   87688:	e0bffc05 	stb	r2,-16(fp)
   8768c:	00000106 	br	87694 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   87690:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   87694:	e13ffe17 	ldw	r4,-8(fp)
   87698:	00876b40 	call	876b4 <OS_FlagUnlink>
    return (sched);
   8769c:	e0bffc03 	ldbu	r2,-16(fp)
}
   876a0:	e037883a 	mov	sp,fp
   876a4:	dfc00117 	ldw	ra,4(sp)
   876a8:	df000017 	ldw	fp,0(sp)
   876ac:	dec00204 	addi	sp,sp,8
   876b0:	f800283a 	ret

000876b4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   876b4:	defffa04 	addi	sp,sp,-24
   876b8:	df000515 	stw	fp,20(sp)
   876bc:	df000504 	addi	fp,sp,20
   876c0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   876c4:	e0bfff17 	ldw	r2,-4(fp)
   876c8:	10800117 	ldw	r2,4(r2)
   876cc:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   876d0:	e0bfff17 	ldw	r2,-4(fp)
   876d4:	10800017 	ldw	r2,0(r2)
   876d8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   876dc:	e0bffc17 	ldw	r2,-16(fp)
   876e0:	1004c03a 	cmpne	r2,r2,zero
   876e4:	10000c1e 	bne	r2,zero,87718 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   876e8:	e0bfff17 	ldw	r2,-4(fp)
   876ec:	10800317 	ldw	r2,12(r2)
   876f0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   876f4:	e0fffd17 	ldw	r3,-12(fp)
   876f8:	e0bffb17 	ldw	r2,-20(fp)
   876fc:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   87700:	e0bffb17 	ldw	r2,-20(fp)
   87704:	1005003a 	cmpeq	r2,r2,zero
   87708:	10000c1e 	bne	r2,zero,8773c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   8770c:	e0bffb17 	ldw	r2,-20(fp)
   87710:	10000115 	stw	zero,4(r2)
   87714:	00000906 	br	8773c <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   87718:	e0fffc17 	ldw	r3,-16(fp)
   8771c:	e0bffb17 	ldw	r2,-20(fp)
   87720:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   87724:	e0bffb17 	ldw	r2,-20(fp)
   87728:	1005003a 	cmpeq	r2,r2,zero
   8772c:	1000031e 	bne	r2,zero,8773c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   87730:	e0fffb17 	ldw	r3,-20(fp)
   87734:	e0bffc17 	ldw	r2,-16(fp)
   87738:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   8773c:	e0bfff17 	ldw	r2,-4(fp)
   87740:	10800217 	ldw	r2,8(r2)
   87744:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   87748:	e0bffe17 	ldw	r2,-8(fp)
   8774c:	10000a15 	stw	zero,40(r2)
#endif
}
   87750:	e037883a 	mov	sp,fp
   87754:	df000017 	ldw	fp,0(sp)
   87758:	dec00104 	addi	sp,sp,4
   8775c:	f800283a 	ret

00087760 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   87760:	defff304 	addi	sp,sp,-52
   87764:	df000c15 	stw	fp,48(sp)
   87768:	df000c04 	addi	fp,sp,48
   8776c:	e13ffb15 	stw	r4,-20(fp)
   87770:	e17ffc15 	stw	r5,-16(fp)
   87774:	e1bffd15 	stw	r6,-12(fp)
   87778:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   8777c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   87780:	e0bffe17 	ldw	r2,-8(fp)
   87784:	1004c03a 	cmpne	r2,r2,zero
   87788:	1000021e 	bne	r2,zero,87794 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
   8778c:	e03fff15 	stw	zero,-4(fp)
   87790:	00007506 	br	87968 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   87794:	e0bffb17 	ldw	r2,-20(fp)
   87798:	1004c03a 	cmpne	r2,r2,zero
   8779c:	1000051e 	bne	r2,zero,877b4 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   877a0:	e0fffe17 	ldw	r3,-8(fp)
   877a4:	00801884 	movi	r2,98
   877a8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   877ac:	e03fff15 	stw	zero,-4(fp)
   877b0:	00006d06 	br	87968 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   877b4:	e0bffb17 	ldw	r2,-20(fp)
   877b8:	108000cc 	andi	r2,r2,3
   877bc:	1005003a 	cmpeq	r2,r2,zero
   877c0:	1000051e 	bne	r2,zero,877d8 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   877c4:	e0fffe17 	ldw	r3,-8(fp)
   877c8:	00801884 	movi	r2,98
   877cc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   877d0:	e03fff15 	stw	zero,-4(fp)
   877d4:	00006406 	br	87968 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   877d8:	e0bffc17 	ldw	r2,-16(fp)
   877dc:	108000a8 	cmpgeui	r2,r2,2
   877e0:	1000051e 	bne	r2,zero,877f8 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   877e4:	e0fffe17 	ldw	r3,-8(fp)
   877e8:	008016c4 	movi	r2,91
   877ec:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   877f0:	e03fff15 	stw	zero,-4(fp)
   877f4:	00005c06 	br	87968 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   877f8:	e0bffd17 	ldw	r2,-12(fp)
   877fc:	10800128 	cmpgeui	r2,r2,4
   87800:	1000051e 	bne	r2,zero,87818 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   87804:	e0fffe17 	ldw	r3,-8(fp)
   87808:	00801704 	movi	r2,92
   8780c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   87810:	e03fff15 	stw	zero,-4(fp)
   87814:	00005406 	br	87968 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   87818:	0005303a 	rdctl	r2,status
   8781c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   87820:	e0fff517 	ldw	r3,-44(fp)
   87824:	00bfff84 	movi	r2,-2
   87828:	1884703a 	and	r2,r3,r2
   8782c:	1001703a 	wrctl	status,r2
  
  return context;
   87830:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   87834:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   87838:	00800274 	movhi	r2,9
   8783c:	1089a604 	addi	r2,r2,9880
   87840:	10800017 	ldw	r2,0(r2)
   87844:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   87848:	00800274 	movhi	r2,9
   8784c:	1089a604 	addi	r2,r2,9880
   87850:	10800017 	ldw	r2,0(r2)
   87854:	1005003a 	cmpeq	r2,r2,zero
   87858:	1000081e 	bne	r2,zero,8787c <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   8785c:	00800274 	movhi	r2,9
   87860:	1089a604 	addi	r2,r2,9880
   87864:	10800017 	ldw	r2,0(r2)
   87868:	10800117 	ldw	r2,4(r2)
   8786c:	1007883a 	mov	r3,r2
   87870:	00800274 	movhi	r2,9
   87874:	1089a604 	addi	r2,r2,9880
   87878:	10c00015 	stw	r3,0(r2)
   8787c:	e0bff617 	ldw	r2,-40(fp)
   87880:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   87884:	e0bff417 	ldw	r2,-48(fp)
   87888:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   8788c:	e0bffa17 	ldw	r2,-24(fp)
   87890:	1004c03a 	cmpne	r2,r2,zero
   87894:	1000051e 	bne	r2,zero,878ac <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
   87898:	e0fffe17 	ldw	r3,-8(fp)
   8789c:	00801684 	movi	r2,90
   878a0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   878a4:	e03fff15 	stw	zero,-4(fp)
   878a8:	00002f06 	br	87968 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   878ac:	e0bffb17 	ldw	r2,-20(fp)
   878b0:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   878b4:	e0bffb17 	ldw	r2,-20(fp)
   878b8:	1007883a 	mov	r3,r2
   878bc:	e0bffd17 	ldw	r2,-12(fp)
   878c0:	1885883a 	add	r2,r3,r2
   878c4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
   878c8:	e03ff715 	stw	zero,-36(fp)
   878cc:	00000d06 	br	87904 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   878d0:	e0fff817 	ldw	r3,-32(fp)
   878d4:	e0bff917 	ldw	r2,-28(fp)
   878d8:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   878dc:	e0bff917 	ldw	r2,-28(fp)
   878e0:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   878e4:	e0bff917 	ldw	r2,-28(fp)
   878e8:	1007883a 	mov	r3,r2
   878ec:	e0bffd17 	ldw	r2,-12(fp)
   878f0:	1885883a 	add	r2,r3,r2
   878f4:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   878f8:	e0bff717 	ldw	r2,-36(fp)
   878fc:	10800044 	addi	r2,r2,1
   87900:	e0bff715 	stw	r2,-36(fp)
   87904:	e0bffc17 	ldw	r2,-16(fp)
   87908:	10ffffc4 	addi	r3,r2,-1
   8790c:	e0bff717 	ldw	r2,-36(fp)
   87910:	10ffef36 	bltu	r2,r3,878d0 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   87914:	e0bff817 	ldw	r2,-32(fp)
   87918:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   8791c:	e0fffa17 	ldw	r3,-24(fp)
   87920:	e0bffb17 	ldw	r2,-20(fp)
   87924:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   87928:	e0fffa17 	ldw	r3,-24(fp)
   8792c:	e0bffb17 	ldw	r2,-20(fp)
   87930:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   87934:	e0fffa17 	ldw	r3,-24(fp)
   87938:	e0bffc17 	ldw	r2,-16(fp)
   8793c:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
   87940:	e0fffa17 	ldw	r3,-24(fp)
   87944:	e0bffc17 	ldw	r2,-16(fp)
   87948:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   8794c:	e0fffa17 	ldw	r3,-24(fp)
   87950:	e0bffd17 	ldw	r2,-12(fp)
   87954:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
   87958:	e0bffe17 	ldw	r2,-8(fp)
   8795c:	10000005 	stb	zero,0(r2)
    return (pmem);
   87960:	e0bffa17 	ldw	r2,-24(fp)
   87964:	e0bfff15 	stw	r2,-4(fp)
   87968:	e0bfff17 	ldw	r2,-4(fp)
}
   8796c:	e037883a 	mov	sp,fp
   87970:	df000017 	ldw	fp,0(sp)
   87974:	dec00104 	addi	sp,sp,4
   87978:	f800283a 	ret

0008797c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   8797c:	defff704 	addi	sp,sp,-36
   87980:	df000815 	stw	fp,32(sp)
   87984:	df000804 	addi	fp,sp,32
   87988:	e13ffd15 	stw	r4,-12(fp)
   8798c:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   87990:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   87994:	e0bffe17 	ldw	r2,-8(fp)
   87998:	1004c03a 	cmpne	r2,r2,zero
   8799c:	1000021e 	bne	r2,zero,879a8 <OSMemGet+0x2c>
        return ((void *)0);
   879a0:	e03fff15 	stw	zero,-4(fp)
   879a4:	00003106 	br	87a6c <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   879a8:	e0bffd17 	ldw	r2,-12(fp)
   879ac:	1004c03a 	cmpne	r2,r2,zero
   879b0:	1000051e 	bne	r2,zero,879c8 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   879b4:	e0fffe17 	ldw	r3,-8(fp)
   879b8:	00801804 	movi	r2,96
   879bc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   879c0:	e03fff15 	stw	zero,-4(fp)
   879c4:	00002906 	br	87a6c <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   879c8:	0005303a 	rdctl	r2,status
   879cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   879d0:	e0fffa17 	ldw	r3,-24(fp)
   879d4:	00bfff84 	movi	r2,-2
   879d8:	1884703a 	and	r2,r3,r2
   879dc:	1001703a 	wrctl	status,r2
  
  return context;
   879e0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   879e4:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   879e8:	e0bffd17 	ldw	r2,-12(fp)
   879ec:	10800417 	ldw	r2,16(r2)
   879f0:	1005003a 	cmpeq	r2,r2,zero
   879f4:	1000151e 	bne	r2,zero,87a4c <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   879f8:	e0bffd17 	ldw	r2,-12(fp)
   879fc:	10800117 	ldw	r2,4(r2)
   87a00:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   87a04:	e0bffc17 	ldw	r2,-16(fp)
   87a08:	10c00017 	ldw	r3,0(r2)
   87a0c:	e0bffd17 	ldw	r2,-12(fp)
   87a10:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   87a14:	e0bffd17 	ldw	r2,-12(fp)
   87a18:	10800417 	ldw	r2,16(r2)
   87a1c:	10ffffc4 	addi	r3,r2,-1
   87a20:	e0bffd17 	ldw	r2,-12(fp)
   87a24:	10c00415 	stw	r3,16(r2)
   87a28:	e0bffb17 	ldw	r2,-20(fp)
   87a2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   87a30:	e0bff917 	ldw	r2,-28(fp)
   87a34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   87a38:	e0bffe17 	ldw	r2,-8(fp)
   87a3c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   87a40:	e0bffc17 	ldw	r2,-16(fp)
   87a44:	e0bfff15 	stw	r2,-4(fp)
   87a48:	00000806 	br	87a6c <OSMemGet+0xf0>
   87a4c:	e0bffb17 	ldw	r2,-20(fp)
   87a50:	e0bff815 	stw	r2,-32(fp)
   87a54:	e0bff817 	ldw	r2,-32(fp)
   87a58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   87a5c:	e0fffe17 	ldw	r3,-8(fp)
   87a60:	00801744 	movi	r2,93
   87a64:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   87a68:	e03fff15 	stw	zero,-4(fp)
   87a6c:	e0bfff17 	ldw	r2,-4(fp)
}
   87a70:	e037883a 	mov	sp,fp
   87a74:	df000017 	ldw	fp,0(sp)
   87a78:	dec00104 	addi	sp,sp,4
   87a7c:	f800283a 	ret

00087a80 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   87a80:	defff604 	addi	sp,sp,-40
   87a84:	dfc00915 	stw	ra,36(sp)
   87a88:	df000815 	stw	fp,32(sp)
   87a8c:	df000804 	addi	fp,sp,32
   87a90:	e13ffc15 	stw	r4,-16(fp)
   87a94:	e17ffd15 	stw	r5,-12(fp)
   87a98:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   87a9c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   87aa0:	e0bffe17 	ldw	r2,-8(fp)
   87aa4:	1004c03a 	cmpne	r2,r2,zero
   87aa8:	1000021e 	bne	r2,zero,87ab4 <OSMemNameGet+0x34>
        return (0);
   87aac:	e03fff15 	stw	zero,-4(fp)
   87ab0:	00003006 	br	87b74 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   87ab4:	e0bffc17 	ldw	r2,-16(fp)
   87ab8:	1004c03a 	cmpne	r2,r2,zero
   87abc:	1000051e 	bne	r2,zero,87ad4 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   87ac0:	e0fffe17 	ldw	r3,-8(fp)
   87ac4:	00801804 	movi	r2,96
   87ac8:	18800005 	stb	r2,0(r3)
        return (0);
   87acc:	e03fff15 	stw	zero,-4(fp)
   87ad0:	00002806 	br	87b74 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   87ad4:	e0bffd17 	ldw	r2,-12(fp)
   87ad8:	1004c03a 	cmpne	r2,r2,zero
   87adc:	1000051e 	bne	r2,zero,87af4 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   87ae0:	e0fffe17 	ldw	r3,-8(fp)
   87ae4:	00800304 	movi	r2,12
   87ae8:	18800005 	stb	r2,0(r3)
        return (0);
   87aec:	e03fff15 	stw	zero,-4(fp)
   87af0:	00002006 	br	87b74 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   87af4:	00800274 	movhi	r2,9
   87af8:	1089ab04 	addi	r2,r2,9900
   87afc:	10800003 	ldbu	r2,0(r2)
   87b00:	10803fcc 	andi	r2,r2,255
   87b04:	1005003a 	cmpeq	r2,r2,zero
   87b08:	1000051e 	bne	r2,zero,87b20 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
   87b0c:	e0fffe17 	ldw	r3,-8(fp)
   87b10:	00800444 	movi	r2,17
   87b14:	18800005 	stb	r2,0(r3)
        return (0);
   87b18:	e03fff15 	stw	zero,-4(fp)
   87b1c:	00001506 	br	87b74 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   87b20:	0005303a 	rdctl	r2,status
   87b24:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   87b28:	e0fff917 	ldw	r3,-28(fp)
   87b2c:	00bfff84 	movi	r2,-2
   87b30:	1884703a 	and	r2,r3,r2
   87b34:	1001703a 	wrctl	status,r2
  
  return context;
   87b38:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   87b3c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   87b40:	e0bffc17 	ldw	r2,-16(fp)
   87b44:	11400504 	addi	r5,r2,20
   87b48:	e13ffd17 	ldw	r4,-12(fp)
   87b4c:	00856f40 	call	856f4 <OS_StrCopy>
   87b50:	e0bffb05 	stb	r2,-20(fp)
   87b54:	e0bffa17 	ldw	r2,-24(fp)
   87b58:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   87b5c:	e0bff817 	ldw	r2,-32(fp)
   87b60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   87b64:	e0bffe17 	ldw	r2,-8(fp)
   87b68:	10000005 	stb	zero,0(r2)
    return (len);
   87b6c:	e0bffb03 	ldbu	r2,-20(fp)
   87b70:	e0bfff15 	stw	r2,-4(fp)
   87b74:	e0bfff17 	ldw	r2,-4(fp)
}
   87b78:	e037883a 	mov	sp,fp
   87b7c:	dfc00117 	ldw	ra,4(sp)
   87b80:	df000017 	ldw	fp,0(sp)
   87b84:	dec00204 	addi	sp,sp,8
   87b88:	f800283a 	ret

00087b8c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   87b8c:	defff604 	addi	sp,sp,-40
   87b90:	dfc00915 	stw	ra,36(sp)
   87b94:	df000815 	stw	fp,32(sp)
   87b98:	df000804 	addi	fp,sp,32
   87b9c:	e13ffd15 	stw	r4,-12(fp)
   87ba0:	e17ffe15 	stw	r5,-8(fp)
   87ba4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   87ba8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   87bac:	e0bfff17 	ldw	r2,-4(fp)
   87bb0:	1005003a 	cmpeq	r2,r2,zero
   87bb4:	1000381e 	bne	r2,zero,87c98 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   87bb8:	e0bffd17 	ldw	r2,-12(fp)
   87bbc:	1004c03a 	cmpne	r2,r2,zero
   87bc0:	1000041e 	bne	r2,zero,87bd4 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   87bc4:	e0ffff17 	ldw	r3,-4(fp)
   87bc8:	00801804 	movi	r2,96
   87bcc:	18800005 	stb	r2,0(r3)
        return;
   87bd0:	00003106 	br	87c98 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   87bd4:	e0bffe17 	ldw	r2,-8(fp)
   87bd8:	1004c03a 	cmpne	r2,r2,zero
   87bdc:	1000041e 	bne	r2,zero,87bf0 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   87be0:	e0ffff17 	ldw	r3,-4(fp)
   87be4:	00800304 	movi	r2,12
   87be8:	18800005 	stb	r2,0(r3)
        return;
   87bec:	00002a06 	br	87c98 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   87bf0:	00800274 	movhi	r2,9
   87bf4:	1089ab04 	addi	r2,r2,9900
   87bf8:	10800003 	ldbu	r2,0(r2)
   87bfc:	10803fcc 	andi	r2,r2,255
   87c00:	1005003a 	cmpeq	r2,r2,zero
   87c04:	1000041e 	bne	r2,zero,87c18 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
   87c08:	e0ffff17 	ldw	r3,-4(fp)
   87c0c:	00800484 	movi	r2,18
   87c10:	18800005 	stb	r2,0(r3)
        return;
   87c14:	00002006 	br	87c98 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   87c18:	0005303a 	rdctl	r2,status
   87c1c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   87c20:	e0fffa17 	ldw	r3,-24(fp)
   87c24:	00bfff84 	movi	r2,-2
   87c28:	1884703a 	and	r2,r3,r2
   87c2c:	1001703a 	wrctl	status,r2
  
  return context;
   87c30:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   87c34:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   87c38:	e13ffe17 	ldw	r4,-8(fp)
   87c3c:	00857740 	call	85774 <OS_StrLen>
   87c40:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   87c44:	e0bffc03 	ldbu	r2,-16(fp)
   87c48:	10800830 	cmpltui	r2,r2,32
   87c4c:	1000081e 	bne	r2,zero,87c70 <OSMemNameSet+0xe4>
   87c50:	e0bffb17 	ldw	r2,-20(fp)
   87c54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   87c58:	e0bff917 	ldw	r2,-28(fp)
   87c5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   87c60:	e0ffff17 	ldw	r3,-4(fp)
   87c64:	008018c4 	movi	r2,99
   87c68:	18800005 	stb	r2,0(r3)
        return;
   87c6c:	00000a06 	br	87c98 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   87c70:	e0bffd17 	ldw	r2,-12(fp)
   87c74:	11000504 	addi	r4,r2,20
   87c78:	e17ffe17 	ldw	r5,-8(fp)
   87c7c:	00856f40 	call	856f4 <OS_StrCopy>
   87c80:	e0bffb17 	ldw	r2,-20(fp)
   87c84:	e0bff815 	stw	r2,-32(fp)
   87c88:	e0bff817 	ldw	r2,-32(fp)
   87c8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   87c90:	e0bfff17 	ldw	r2,-4(fp)
   87c94:	10000005 	stb	zero,0(r2)
}
   87c98:	e037883a 	mov	sp,fp
   87c9c:	dfc00117 	ldw	ra,4(sp)
   87ca0:	df000017 	ldw	fp,0(sp)
   87ca4:	dec00204 	addi	sp,sp,8
   87ca8:	f800283a 	ret

00087cac <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   87cac:	defff804 	addi	sp,sp,-32
   87cb0:	df000715 	stw	fp,28(sp)
   87cb4:	df000704 	addi	fp,sp,28
   87cb8:	e13ffd15 	stw	r4,-12(fp)
   87cbc:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   87cc0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   87cc4:	e0bffd17 	ldw	r2,-12(fp)
   87cc8:	1004c03a 	cmpne	r2,r2,zero
   87ccc:	1000031e 	bne	r2,zero,87cdc <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
   87cd0:	00801804 	movi	r2,96
   87cd4:	e0bfff15 	stw	r2,-4(fp)
   87cd8:	00002b06 	br	87d88 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   87cdc:	e0bffe17 	ldw	r2,-8(fp)
   87ce0:	1004c03a 	cmpne	r2,r2,zero
   87ce4:	1000031e 	bne	r2,zero,87cf4 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
   87ce8:	008017c4 	movi	r2,95
   87cec:	e0bfff15 	stw	r2,-4(fp)
   87cf0:	00002506 	br	87d88 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   87cf4:	0005303a 	rdctl	r2,status
   87cf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   87cfc:	e0fffb17 	ldw	r3,-20(fp)
   87d00:	00bfff84 	movi	r2,-2
   87d04:	1884703a 	and	r2,r3,r2
   87d08:	1001703a 	wrctl	status,r2
  
  return context;
   87d0c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   87d10:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   87d14:	e0bffd17 	ldw	r2,-12(fp)
   87d18:	10c00417 	ldw	r3,16(r2)
   87d1c:	e0bffd17 	ldw	r2,-12(fp)
   87d20:	10800317 	ldw	r2,12(r2)
   87d24:	18800736 	bltu	r3,r2,87d44 <OSMemPut+0x98>
   87d28:	e0bffc17 	ldw	r2,-16(fp)
   87d2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   87d30:	e0bffa17 	ldw	r2,-24(fp)
   87d34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   87d38:	00801784 	movi	r2,94
   87d3c:	e0bfff15 	stw	r2,-4(fp)
   87d40:	00001106 	br	87d88 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   87d44:	e0fffe17 	ldw	r3,-8(fp)
   87d48:	e0bffd17 	ldw	r2,-12(fp)
   87d4c:	10800117 	ldw	r2,4(r2)
   87d50:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
   87d54:	e0fffd17 	ldw	r3,-12(fp)
   87d58:	e0bffe17 	ldw	r2,-8(fp)
   87d5c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   87d60:	e0bffd17 	ldw	r2,-12(fp)
   87d64:	10800417 	ldw	r2,16(r2)
   87d68:	10c00044 	addi	r3,r2,1
   87d6c:	e0bffd17 	ldw	r2,-12(fp)
   87d70:	10c00415 	stw	r3,16(r2)
   87d74:	e0bffc17 	ldw	r2,-16(fp)
   87d78:	e0bff915 	stw	r2,-28(fp)
   87d7c:	e0bff917 	ldw	r2,-28(fp)
   87d80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   87d84:	e03fff15 	stw	zero,-4(fp)
   87d88:	e0bfff17 	ldw	r2,-4(fp)
}
   87d8c:	e037883a 	mov	sp,fp
   87d90:	df000017 	ldw	fp,0(sp)
   87d94:	dec00104 	addi	sp,sp,4
   87d98:	f800283a 	ret

00087d9c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   87d9c:	defff904 	addi	sp,sp,-28
   87da0:	df000615 	stw	fp,24(sp)
   87da4:	df000604 	addi	fp,sp,24
   87da8:	e13ffd15 	stw	r4,-12(fp)
   87dac:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   87db0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   87db4:	e0bffd17 	ldw	r2,-12(fp)
   87db8:	1004c03a 	cmpne	r2,r2,zero
   87dbc:	1000031e 	bne	r2,zero,87dcc <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
   87dc0:	00801804 	movi	r2,96
   87dc4:	e0bfff15 	stw	r2,-4(fp)
   87dc8:	00002e06 	br	87e84 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   87dcc:	e0bffe17 	ldw	r2,-8(fp)
   87dd0:	1004c03a 	cmpne	r2,r2,zero
   87dd4:	1000031e 	bne	r2,zero,87de4 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
   87dd8:	00801844 	movi	r2,97
   87ddc:	e0bfff15 	stw	r2,-4(fp)
   87de0:	00002806 	br	87e84 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   87de4:	0005303a 	rdctl	r2,status
   87de8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   87dec:	e0fffb17 	ldw	r3,-20(fp)
   87df0:	00bfff84 	movi	r2,-2
   87df4:	1884703a 	and	r2,r3,r2
   87df8:	1001703a 	wrctl	status,r2
  
  return context;
   87dfc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   87e00:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   87e04:	e0bffd17 	ldw	r2,-12(fp)
   87e08:	10c00017 	ldw	r3,0(r2)
   87e0c:	e0bffe17 	ldw	r2,-8(fp)
   87e10:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   87e14:	e0bffd17 	ldw	r2,-12(fp)
   87e18:	10c00117 	ldw	r3,4(r2)
   87e1c:	e0bffe17 	ldw	r2,-8(fp)
   87e20:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   87e24:	e0bffd17 	ldw	r2,-12(fp)
   87e28:	10c00217 	ldw	r3,8(r2)
   87e2c:	e0bffe17 	ldw	r2,-8(fp)
   87e30:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   87e34:	e0bffd17 	ldw	r2,-12(fp)
   87e38:	10c00317 	ldw	r3,12(r2)
   87e3c:	e0bffe17 	ldw	r2,-8(fp)
   87e40:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   87e44:	e0bffd17 	ldw	r2,-12(fp)
   87e48:	10c00417 	ldw	r3,16(r2)
   87e4c:	e0bffe17 	ldw	r2,-8(fp)
   87e50:	10c00415 	stw	r3,16(r2)
   87e54:	e0bffc17 	ldw	r2,-16(fp)
   87e58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   87e5c:	e0bffa17 	ldw	r2,-24(fp)
   87e60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   87e64:	e0bffe17 	ldw	r2,-8(fp)
   87e68:	10c00317 	ldw	r3,12(r2)
   87e6c:	e0bffe17 	ldw	r2,-8(fp)
   87e70:	10800417 	ldw	r2,16(r2)
   87e74:	1887c83a 	sub	r3,r3,r2
   87e78:	e0bffe17 	ldw	r2,-8(fp)
   87e7c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   87e80:	e03fff15 	stw	zero,-4(fp)
   87e84:	e0bfff17 	ldw	r2,-4(fp)
}
   87e88:	e037883a 	mov	sp,fp
   87e8c:	df000017 	ldw	fp,0(sp)
   87e90:	dec00104 	addi	sp,sp,4
   87e94:	f800283a 	ret

00087e98 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   87e98:	defffc04 	addi	sp,sp,-16
   87e9c:	dfc00315 	stw	ra,12(sp)
   87ea0:	df000215 	stw	fp,8(sp)
   87ea4:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   87ea8:	01000274 	movhi	r4,9
   87eac:	211a9a04 	addi	r4,r4,27240
   87eb0:	01430c04 	movi	r5,3120
   87eb4:	00854f00 	call	854f0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   87eb8:	00800274 	movhi	r2,9
   87ebc:	109a9a04 	addi	r2,r2,27240
   87ec0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   87ec4:	e03ffe0d 	sth	zero,-8(fp)
   87ec8:	00001406 	br	87f1c <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   87ecc:	e13ffe0b 	ldhu	r4,-8(fp)
   87ed0:	01400d04 	movi	r5,52
   87ed4:	0082d2c0 	call	82d2c <__mulsi3>
   87ed8:	1007883a 	mov	r3,r2
   87edc:	00800274 	movhi	r2,9
   87ee0:	109aa704 	addi	r2,r2,27292
   87ee4:	1887883a 	add	r3,r3,r2
   87ee8:	e0bfff17 	ldw	r2,-4(fp)
   87eec:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   87ef0:	e0ffff17 	ldw	r3,-4(fp)
   87ef4:	00800fc4 	movi	r2,63
   87ef8:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   87efc:	e0bfff17 	ldw	r2,-4(fp)
   87f00:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   87f04:	e0bfff17 	ldw	r2,-4(fp)
   87f08:	10800d04 	addi	r2,r2,52
   87f0c:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   87f10:	e0bffe0b 	ldhu	r2,-8(fp)
   87f14:	10800044 	addi	r2,r2,1
   87f18:	e0bffe0d 	sth	r2,-8(fp)
   87f1c:	e0bffe0b 	ldhu	r2,-8(fp)
   87f20:	10800ef0 	cmpltui	r2,r2,59
   87f24:	103fe91e 	bne	r2,zero,87ecc <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   87f28:	e0bfff17 	ldw	r2,-4(fp)
   87f2c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   87f30:	e0ffff17 	ldw	r3,-4(fp)
   87f34:	00800fc4 	movi	r2,63
   87f38:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   87f3c:	e0bfff17 	ldw	r2,-4(fp)
   87f40:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   87f44:	00c00274 	movhi	r3,9
   87f48:	18c9a604 	addi	r3,r3,9880
   87f4c:	00800274 	movhi	r2,9
   87f50:	109a9a04 	addi	r2,r2,27240
   87f54:	18800015 	stw	r2,0(r3)
#endif
}
   87f58:	e037883a 	mov	sp,fp
   87f5c:	dfc00117 	ldw	ra,4(sp)
   87f60:	df000017 	ldw	fp,0(sp)
   87f64:	dec00204 	addi	sp,sp,8
   87f68:	f800283a 	ret

00087f6c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   87f6c:	defff704 	addi	sp,sp,-36
   87f70:	df000815 	stw	fp,32(sp)
   87f74:	df000804 	addi	fp,sp,32
   87f78:	e13ffd15 	stw	r4,-12(fp)
   87f7c:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   87f80:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   87f84:	e0bffe17 	ldw	r2,-8(fp)
   87f88:	1004c03a 	cmpne	r2,r2,zero
   87f8c:	1000021e 	bne	r2,zero,87f98 <OSQAccept+0x2c>
        return ((void *)0);
   87f90:	e03fff15 	stw	zero,-4(fp)
   87f94:	00004506 	br	880ac <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   87f98:	e0bffd17 	ldw	r2,-12(fp)
   87f9c:	1004c03a 	cmpne	r2,r2,zero
   87fa0:	1000051e 	bne	r2,zero,87fb8 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   87fa4:	e0fffe17 	ldw	r3,-8(fp)
   87fa8:	00800104 	movi	r2,4
   87fac:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   87fb0:	e03fff15 	stw	zero,-4(fp)
   87fb4:	00003d06 	br	880ac <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   87fb8:	e0bffd17 	ldw	r2,-12(fp)
   87fbc:	10800003 	ldbu	r2,0(r2)
   87fc0:	10803fcc 	andi	r2,r2,255
   87fc4:	108000a0 	cmpeqi	r2,r2,2
   87fc8:	1000051e 	bne	r2,zero,87fe0 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   87fcc:	e0fffe17 	ldw	r3,-8(fp)
   87fd0:	00800044 	movi	r2,1
   87fd4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   87fd8:	e03fff15 	stw	zero,-4(fp)
   87fdc:	00003306 	br	880ac <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   87fe0:	0005303a 	rdctl	r2,status
   87fe4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   87fe8:	e0fff917 	ldw	r3,-28(fp)
   87fec:	00bfff84 	movi	r2,-2
   87ff0:	1884703a 	and	r2,r3,r2
   87ff4:	1001703a 	wrctl	status,r2
  
  return context;
   87ff8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   87ffc:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   88000:	e0bffd17 	ldw	r2,-12(fp)
   88004:	10800117 	ldw	r2,4(r2)
   88008:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   8800c:	e0bffb17 	ldw	r2,-20(fp)
   88010:	1080058b 	ldhu	r2,22(r2)
   88014:	10bfffcc 	andi	r2,r2,65535
   88018:	1005003a 	cmpeq	r2,r2,zero
   8801c:	1000191e 	bne	r2,zero,88084 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   88020:	e0bffb17 	ldw	r2,-20(fp)
   88024:	10c00417 	ldw	r3,16(r2)
   88028:	18800017 	ldw	r2,0(r3)
   8802c:	e0bffc15 	stw	r2,-16(fp)
   88030:	18c00104 	addi	r3,r3,4
   88034:	e0bffb17 	ldw	r2,-20(fp)
   88038:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   8803c:	e0bffb17 	ldw	r2,-20(fp)
   88040:	1080058b 	ldhu	r2,22(r2)
   88044:	10bfffc4 	addi	r2,r2,-1
   88048:	1007883a 	mov	r3,r2
   8804c:	e0bffb17 	ldw	r2,-20(fp)
   88050:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   88054:	e0bffb17 	ldw	r2,-20(fp)
   88058:	10c00417 	ldw	r3,16(r2)
   8805c:	e0bffb17 	ldw	r2,-20(fp)
   88060:	10800217 	ldw	r2,8(r2)
   88064:	1880041e 	bne	r3,r2,88078 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
   88068:	e0bffb17 	ldw	r2,-20(fp)
   8806c:	10c00117 	ldw	r3,4(r2)
   88070:	e0bffb17 	ldw	r2,-20(fp)
   88074:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   88078:	e0bffe17 	ldw	r2,-8(fp)
   8807c:	10000005 	stb	zero,0(r2)
   88080:	00000406 	br	88094 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   88084:	e0fffe17 	ldw	r3,-8(fp)
   88088:	008007c4 	movi	r2,31
   8808c:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   88090:	e03ffc15 	stw	zero,-16(fp)
   88094:	e0bffa17 	ldw	r2,-24(fp)
   88098:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8809c:	e0bff817 	ldw	r2,-32(fp)
   880a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   880a4:	e0bffc17 	ldw	r2,-16(fp)
   880a8:	e0bfff15 	stw	r2,-4(fp)
   880ac:	e0bfff17 	ldw	r2,-4(fp)
}
   880b0:	e037883a 	mov	sp,fp
   880b4:	df000017 	ldw	fp,0(sp)
   880b8:	dec00104 	addi	sp,sp,4
   880bc:	f800283a 	ret

000880c0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   880c0:	defff304 	addi	sp,sp,-52
   880c4:	dfc00c15 	stw	ra,48(sp)
   880c8:	df000b15 	stw	fp,44(sp)
   880cc:	df000b04 	addi	fp,sp,44
   880d0:	e13ffd15 	stw	r4,-12(fp)
   880d4:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   880d8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   880dc:	00800274 	movhi	r2,9
   880e0:	1089ab04 	addi	r2,r2,9900
   880e4:	10800003 	ldbu	r2,0(r2)
   880e8:	10803fcc 	andi	r2,r2,255
   880ec:	1005003a 	cmpeq	r2,r2,zero
   880f0:	1000021e 	bne	r2,zero,880fc <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   880f4:	e03fff15 	stw	zero,-4(fp)
   880f8:	00007006 	br	882bc <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   880fc:	0005303a 	rdctl	r2,status
   88100:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88104:	e0fff917 	ldw	r3,-28(fp)
   88108:	00bfff84 	movi	r2,-2
   8810c:	1884703a 	and	r2,r3,r2
   88110:	1001703a 	wrctl	status,r2
  
  return context;
   88114:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   88118:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   8811c:	00800274 	movhi	r2,9
   88120:	1089aa04 	addi	r2,r2,9896
   88124:	10800017 	ldw	r2,0(r2)
   88128:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   8812c:	00800274 	movhi	r2,9
   88130:	1089aa04 	addi	r2,r2,9896
   88134:	10800017 	ldw	r2,0(r2)
   88138:	1005003a 	cmpeq	r2,r2,zero
   8813c:	1000081e 	bne	r2,zero,88160 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   88140:	00800274 	movhi	r2,9
   88144:	1089aa04 	addi	r2,r2,9896
   88148:	10800017 	ldw	r2,0(r2)
   8814c:	10800117 	ldw	r2,4(r2)
   88150:	1007883a 	mov	r3,r2
   88154:	00800274 	movhi	r2,9
   88158:	1089aa04 	addi	r2,r2,9896
   8815c:	10c00015 	stw	r3,0(r2)
   88160:	e0bffa17 	ldw	r2,-24(fp)
   88164:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88168:	e0bff817 	ldw	r2,-32(fp)
   8816c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   88170:	e0bffc17 	ldw	r2,-16(fp)
   88174:	1005003a 	cmpeq	r2,r2,zero
   88178:	10004e1e 	bne	r2,zero,882b4 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8817c:	0005303a 	rdctl	r2,status
   88180:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88184:	e0fff717 	ldw	r3,-36(fp)
   88188:	00bfff84 	movi	r2,-2
   8818c:	1884703a 	and	r2,r3,r2
   88190:	1001703a 	wrctl	status,r2
  
  return context;
   88194:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
   88198:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   8819c:	00800274 	movhi	r2,9
   881a0:	1089a804 	addi	r2,r2,9888
   881a4:	10800017 	ldw	r2,0(r2)
   881a8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   881ac:	e0bffb17 	ldw	r2,-20(fp)
   881b0:	1005003a 	cmpeq	r2,r2,zero
   881b4:	1000311e 	bne	r2,zero,8827c <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   881b8:	00800274 	movhi	r2,9
   881bc:	1089a804 	addi	r2,r2,9888
   881c0:	10800017 	ldw	r2,0(r2)
   881c4:	10c00017 	ldw	r3,0(r2)
   881c8:	00800274 	movhi	r2,9
   881cc:	1089a804 	addi	r2,r2,9888
   881d0:	10c00015 	stw	r3,0(r2)
   881d4:	e0bffa17 	ldw	r2,-24(fp)
   881d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   881dc:	e0bff617 	ldw	r2,-40(fp)
   881e0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   881e4:	e0fffb17 	ldw	r3,-20(fp)
   881e8:	e0bffd17 	ldw	r2,-12(fp)
   881ec:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
   881f0:	e0bffe0b 	ldhu	r2,-8(fp)
   881f4:	1085883a 	add	r2,r2,r2
   881f8:	1085883a 	add	r2,r2,r2
   881fc:	1007883a 	mov	r3,r2
   88200:	e0bffd17 	ldw	r2,-12(fp)
   88204:	1887883a 	add	r3,r3,r2
   88208:	e0bffb17 	ldw	r2,-20(fp)
   8820c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   88210:	e0fffb17 	ldw	r3,-20(fp)
   88214:	e0bffd17 	ldw	r2,-12(fp)
   88218:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
   8821c:	e0fffb17 	ldw	r3,-20(fp)
   88220:	e0bffd17 	ldw	r2,-12(fp)
   88224:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
   88228:	e0fffb17 	ldw	r3,-20(fp)
   8822c:	e0bffe0b 	ldhu	r2,-8(fp)
   88230:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
   88234:	e0bffb17 	ldw	r2,-20(fp)
   88238:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   8823c:	e0fffc17 	ldw	r3,-16(fp)
   88240:	00800084 	movi	r2,2
   88244:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
   88248:	e0bffc17 	ldw	r2,-16(fp)
   8824c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   88250:	e0fffc17 	ldw	r3,-16(fp)
   88254:	e0bffb17 	ldw	r2,-20(fp)
   88258:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   8825c:	e0fffc17 	ldw	r3,-16(fp)
   88260:	00800fc4 	movi	r2,63
   88264:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   88268:	e0bffc17 	ldw	r2,-16(fp)
   8826c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   88270:	e13ffc17 	ldw	r4,-16(fp)
   88274:	00851240 	call	85124 <OS_EventWaitListInit>
   88278:	00000e06 	br	882b4 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   8827c:	00800274 	movhi	r2,9
   88280:	1089aa04 	addi	r2,r2,9896
   88284:	10c00017 	ldw	r3,0(r2)
   88288:	e0bffc17 	ldw	r2,-16(fp)
   8828c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   88290:	00c00274 	movhi	r3,9
   88294:	18c9aa04 	addi	r3,r3,9896
   88298:	e0bffc17 	ldw	r2,-16(fp)
   8829c:	18800015 	stw	r2,0(r3)
   882a0:	e0bffa17 	ldw	r2,-24(fp)
   882a4:	e0bff515 	stw	r2,-44(fp)
   882a8:	e0bff517 	ldw	r2,-44(fp)
   882ac:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   882b0:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
   882b4:	e0bffc17 	ldw	r2,-16(fp)
   882b8:	e0bfff15 	stw	r2,-4(fp)
   882bc:	e0bfff17 	ldw	r2,-4(fp)
}
   882c0:	e037883a 	mov	sp,fp
   882c4:	dfc00117 	ldw	ra,4(sp)
   882c8:	df000017 	ldw	fp,0(sp)
   882cc:	dec00204 	addi	sp,sp,8
   882d0:	f800283a 	ret

000882d4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   882d4:	defff004 	addi	sp,sp,-64
   882d8:	dfc00f15 	stw	ra,60(sp)
   882dc:	df000e15 	stw	fp,56(sp)
   882e0:	df000e04 	addi	fp,sp,56
   882e4:	e13ffb15 	stw	r4,-20(fp)
   882e8:	e1bffd15 	stw	r6,-12(fp)
   882ec:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   882f0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   882f4:	e0bffd17 	ldw	r2,-12(fp)
   882f8:	1004c03a 	cmpne	r2,r2,zero
   882fc:	1000031e 	bne	r2,zero,8830c <OSQDel+0x38>
        return (pevent);
   88300:	e0bffb17 	ldw	r2,-20(fp)
   88304:	e0bfff15 	stw	r2,-4(fp)
   88308:	0000ac06 	br	885bc <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   8830c:	e0bffb17 	ldw	r2,-20(fp)
   88310:	1004c03a 	cmpne	r2,r2,zero
   88314:	1000061e 	bne	r2,zero,88330 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   88318:	e0fffd17 	ldw	r3,-12(fp)
   8831c:	00800104 	movi	r2,4
   88320:	18800005 	stb	r2,0(r3)
        return (pevent);
   88324:	e0fffb17 	ldw	r3,-20(fp)
   88328:	e0ffff15 	stw	r3,-4(fp)
   8832c:	0000a306 	br	885bc <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   88330:	e0bffb17 	ldw	r2,-20(fp)
   88334:	10800003 	ldbu	r2,0(r2)
   88338:	10803fcc 	andi	r2,r2,255
   8833c:	108000a0 	cmpeqi	r2,r2,2
   88340:	1000061e 	bne	r2,zero,8835c <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   88344:	e0fffd17 	ldw	r3,-12(fp)
   88348:	00800044 	movi	r2,1
   8834c:	18800005 	stb	r2,0(r3)
        return (pevent);
   88350:	e0bffb17 	ldw	r2,-20(fp)
   88354:	e0bfff15 	stw	r2,-4(fp)
   88358:	00009806 	br	885bc <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   8835c:	00800274 	movhi	r2,9
   88360:	1089ab04 	addi	r2,r2,9900
   88364:	10800003 	ldbu	r2,0(r2)
   88368:	10803fcc 	andi	r2,r2,255
   8836c:	1005003a 	cmpeq	r2,r2,zero
   88370:	1000061e 	bne	r2,zero,8838c <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   88374:	e0fffd17 	ldw	r3,-12(fp)
   88378:	008003c4 	movi	r2,15
   8837c:	18800005 	stb	r2,0(r3)
        return (pevent);
   88380:	e0fffb17 	ldw	r3,-20(fp)
   88384:	e0ffff15 	stw	r3,-4(fp)
   88388:	00008c06 	br	885bc <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8838c:	0005303a 	rdctl	r2,status
   88390:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88394:	e0fff617 	ldw	r3,-40(fp)
   88398:	00bfff84 	movi	r2,-2
   8839c:	1884703a 	and	r2,r3,r2
   883a0:	1001703a 	wrctl	status,r2
  
  return context;
   883a4:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
   883a8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   883ac:	e0bffb17 	ldw	r2,-20(fp)
   883b0:	10800283 	ldbu	r2,10(r2)
   883b4:	10803fcc 	andi	r2,r2,255
   883b8:	1005003a 	cmpeq	r2,r2,zero
   883bc:	1000031e 	bne	r2,zero,883cc <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   883c0:	00800044 	movi	r2,1
   883c4:	e0bffa05 	stb	r2,-24(fp)
   883c8:	00000106 	br	883d0 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   883cc:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   883d0:	e0bffc03 	ldbu	r2,-16(fp)
   883d4:	e0bffe15 	stw	r2,-8(fp)
   883d8:	e0fffe17 	ldw	r3,-8(fp)
   883dc:	1805003a 	cmpeq	r2,r3,zero
   883e0:	1000041e 	bne	r2,zero,883f4 <OSQDel+0x120>
   883e4:	e0fffe17 	ldw	r3,-8(fp)
   883e8:	18800060 	cmpeqi	r2,r3,1
   883ec:	1000391e 	bne	r2,zero,884d4 <OSQDel+0x200>
   883f0:	00006706 	br	88590 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   883f4:	e0bffa03 	ldbu	r2,-24(fp)
   883f8:	1004c03a 	cmpne	r2,r2,zero
   883fc:	1000261e 	bne	r2,zero,88498 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   88400:	e0fffb17 	ldw	r3,-20(fp)
   88404:	00800fc4 	movi	r2,63
   88408:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   8840c:	e0bffb17 	ldw	r2,-20(fp)
   88410:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   88414:	e0bffb17 	ldw	r2,-20(fp)
   88418:	10800117 	ldw	r2,4(r2)
   8841c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   88420:	00800274 	movhi	r2,9
   88424:	1089a804 	addi	r2,r2,9888
   88428:	10c00017 	ldw	r3,0(r2)
   8842c:	e0bff817 	ldw	r2,-32(fp)
   88430:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   88434:	00c00274 	movhi	r3,9
   88438:	18c9a804 	addi	r3,r3,9888
   8843c:	e0bff817 	ldw	r2,-32(fp)
   88440:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   88444:	e0bffb17 	ldw	r2,-20(fp)
   88448:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   8844c:	00800274 	movhi	r2,9
   88450:	1089aa04 	addi	r2,r2,9896
   88454:	10c00017 	ldw	r3,0(r2)
   88458:	e0bffb17 	ldw	r2,-20(fp)
   8845c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   88460:	e0bffb17 	ldw	r2,-20(fp)
   88464:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   88468:	00c00274 	movhi	r3,9
   8846c:	18c9aa04 	addi	r3,r3,9896
   88470:	e0bffb17 	ldw	r2,-20(fp)
   88474:	18800015 	stw	r2,0(r3)
   88478:	e0bff717 	ldw	r2,-36(fp)
   8847c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88480:	e0bff517 	ldw	r2,-44(fp)
   88484:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   88488:	e0bffd17 	ldw	r2,-12(fp)
   8848c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   88490:	e03ff915 	stw	zero,-28(fp)
   88494:	00004706 	br	885b4 <OSQDel+0x2e0>
   88498:	e0bff717 	ldw	r2,-36(fp)
   8849c:	e0bff415 	stw	r2,-48(fp)
   884a0:	e0bff417 	ldw	r2,-48(fp)
   884a4:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   884a8:	e0fffd17 	ldw	r3,-12(fp)
   884ac:	00801244 	movi	r2,73
   884b0:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   884b4:	e0bffb17 	ldw	r2,-20(fp)
   884b8:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   884bc:	00003d06 	br	885b4 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   884c0:	e13ffb17 	ldw	r4,-20(fp)
   884c4:	000b883a 	mov	r5,zero
   884c8:	01800104 	movi	r6,4
   884cc:	000f883a 	mov	r7,zero
   884d0:	0084b700 	call	84b70 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   884d4:	e0bffb17 	ldw	r2,-20(fp)
   884d8:	10800283 	ldbu	r2,10(r2)
   884dc:	10803fcc 	andi	r2,r2,255
   884e0:	1004c03a 	cmpne	r2,r2,zero
   884e4:	103ff61e 	bne	r2,zero,884c0 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   884e8:	e0fffb17 	ldw	r3,-20(fp)
   884ec:	00800fc4 	movi	r2,63
   884f0:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   884f4:	e0bffb17 	ldw	r2,-20(fp)
   884f8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   884fc:	e0bffb17 	ldw	r2,-20(fp)
   88500:	10800117 	ldw	r2,4(r2)
   88504:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   88508:	00800274 	movhi	r2,9
   8850c:	1089a804 	addi	r2,r2,9888
   88510:	10c00017 	ldw	r3,0(r2)
   88514:	e0bff817 	ldw	r2,-32(fp)
   88518:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   8851c:	00c00274 	movhi	r3,9
   88520:	18c9a804 	addi	r3,r3,9888
   88524:	e0bff817 	ldw	r2,-32(fp)
   88528:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   8852c:	e0bffb17 	ldw	r2,-20(fp)
   88530:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   88534:	00800274 	movhi	r2,9
   88538:	1089aa04 	addi	r2,r2,9896
   8853c:	10c00017 	ldw	r3,0(r2)
   88540:	e0bffb17 	ldw	r2,-20(fp)
   88544:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   88548:	e0bffb17 	ldw	r2,-20(fp)
   8854c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   88550:	00c00274 	movhi	r3,9
   88554:	18c9aa04 	addi	r3,r3,9896
   88558:	e0bffb17 	ldw	r2,-20(fp)
   8855c:	18800015 	stw	r2,0(r3)
   88560:	e0bff717 	ldw	r2,-36(fp)
   88564:	e0bff315 	stw	r2,-52(fp)
   88568:	e0bff317 	ldw	r2,-52(fp)
   8856c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   88570:	e0bffa03 	ldbu	r2,-24(fp)
   88574:	10800058 	cmpnei	r2,r2,1
   88578:	1000011e 	bne	r2,zero,88580 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   8857c:	00855b00 	call	855b0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   88580:	e0bffd17 	ldw	r2,-12(fp)
   88584:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   88588:	e03ff915 	stw	zero,-28(fp)
             break;
   8858c:	00000906 	br	885b4 <OSQDel+0x2e0>
   88590:	e0bff717 	ldw	r2,-36(fp)
   88594:	e0bff215 	stw	r2,-56(fp)
   88598:	e0bff217 	ldw	r2,-56(fp)
   8859c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   885a0:	e0fffd17 	ldw	r3,-12(fp)
   885a4:	008001c4 	movi	r2,7
   885a8:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   885ac:	e0bffb17 	ldw	r2,-20(fp)
   885b0:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   885b4:	e0bff917 	ldw	r2,-28(fp)
   885b8:	e0bfff15 	stw	r2,-4(fp)
   885bc:	e0bfff17 	ldw	r2,-4(fp)
}
   885c0:	e037883a 	mov	sp,fp
   885c4:	dfc00117 	ldw	ra,4(sp)
   885c8:	df000017 	ldw	fp,0(sp)
   885cc:	dec00204 	addi	sp,sp,8
   885d0:	f800283a 	ret

000885d4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   885d4:	defff904 	addi	sp,sp,-28
   885d8:	df000615 	stw	fp,24(sp)
   885dc:	df000604 	addi	fp,sp,24
   885e0:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   885e4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   885e8:	e0bffe17 	ldw	r2,-8(fp)
   885ec:	1004c03a 	cmpne	r2,r2,zero
   885f0:	1000031e 	bne	r2,zero,88600 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
   885f4:	00800104 	movi	r2,4
   885f8:	e0bfff15 	stw	r2,-4(fp)
   885fc:	00002206 	br	88688 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   88600:	e0bffe17 	ldw	r2,-8(fp)
   88604:	10800003 	ldbu	r2,0(r2)
   88608:	10803fcc 	andi	r2,r2,255
   8860c:	108000a0 	cmpeqi	r2,r2,2
   88610:	1000031e 	bne	r2,zero,88620 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
   88614:	00800044 	movi	r2,1
   88618:	e0bfff15 	stw	r2,-4(fp)
   8861c:	00001a06 	br	88688 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88620:	0005303a 	rdctl	r2,status
   88624:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88628:	e0fffb17 	ldw	r3,-20(fp)
   8862c:	00bfff84 	movi	r2,-2
   88630:	1884703a 	and	r2,r3,r2
   88634:	1001703a 	wrctl	status,r2
  
  return context;
   88638:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8863c:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   88640:	e0bffe17 	ldw	r2,-8(fp)
   88644:	10800117 	ldw	r2,4(r2)
   88648:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
   8864c:	e0bffd17 	ldw	r2,-12(fp)
   88650:	10c00117 	ldw	r3,4(r2)
   88654:	e0bffd17 	ldw	r2,-12(fp)
   88658:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   8865c:	e0bffd17 	ldw	r2,-12(fp)
   88660:	10c00117 	ldw	r3,4(r2)
   88664:	e0bffd17 	ldw	r2,-12(fp)
   88668:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   8866c:	e0bffd17 	ldw	r2,-12(fp)
   88670:	1000058d 	sth	zero,22(r2)
   88674:	e0bffc17 	ldw	r2,-16(fp)
   88678:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8867c:	e0bffa17 	ldw	r2,-24(fp)
   88680:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   88684:	e03fff15 	stw	zero,-4(fp)
   88688:	e0bfff17 	ldw	r2,-4(fp)
}
   8868c:	e037883a 	mov	sp,fp
   88690:	df000017 	ldw	fp,0(sp)
   88694:	dec00104 	addi	sp,sp,4
   88698:	f800283a 	ret

0008869c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   8869c:	defff104 	addi	sp,sp,-60
   886a0:	dfc00e15 	stw	ra,56(sp)
   886a4:	df000d15 	stw	fp,52(sp)
   886a8:	df000d04 	addi	fp,sp,52
   886ac:	e13ffb15 	stw	r4,-20(fp)
   886b0:	e1bffd15 	stw	r6,-12(fp)
   886b4:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   886b8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   886bc:	e0bffd17 	ldw	r2,-12(fp)
   886c0:	1004c03a 	cmpne	r2,r2,zero
   886c4:	1000021e 	bne	r2,zero,886d0 <OSQPend+0x34>
        return ((void *)0);
   886c8:	e03fff15 	stw	zero,-4(fp)
   886cc:	0000b506 	br	889a4 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   886d0:	e0bffb17 	ldw	r2,-20(fp)
   886d4:	1004c03a 	cmpne	r2,r2,zero
   886d8:	1000051e 	bne	r2,zero,886f0 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   886dc:	e0fffd17 	ldw	r3,-12(fp)
   886e0:	00800104 	movi	r2,4
   886e4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   886e8:	e03fff15 	stw	zero,-4(fp)
   886ec:	0000ad06 	br	889a4 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   886f0:	e0bffb17 	ldw	r2,-20(fp)
   886f4:	10800003 	ldbu	r2,0(r2)
   886f8:	10803fcc 	andi	r2,r2,255
   886fc:	108000a0 	cmpeqi	r2,r2,2
   88700:	1000051e 	bne	r2,zero,88718 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   88704:	e0fffd17 	ldw	r3,-12(fp)
   88708:	00800044 	movi	r2,1
   8870c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   88710:	e03fff15 	stw	zero,-4(fp)
   88714:	0000a306 	br	889a4 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   88718:	00800274 	movhi	r2,9
   8871c:	1089ab04 	addi	r2,r2,9900
   88720:	10800003 	ldbu	r2,0(r2)
   88724:	10803fcc 	andi	r2,r2,255
   88728:	1005003a 	cmpeq	r2,r2,zero
   8872c:	1000051e 	bne	r2,zero,88744 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   88730:	e0fffd17 	ldw	r3,-12(fp)
   88734:	00800084 	movi	r2,2
   88738:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   8873c:	e03fff15 	stw	zero,-4(fp)
   88740:	00009806 	br	889a4 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   88744:	00800274 	movhi	r2,9
   88748:	10899d04 	addi	r2,r2,9844
   8874c:	10800003 	ldbu	r2,0(r2)
   88750:	10803fcc 	andi	r2,r2,255
   88754:	1005003a 	cmpeq	r2,r2,zero
   88758:	1000051e 	bne	r2,zero,88770 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   8875c:	e0fffd17 	ldw	r3,-12(fp)
   88760:	00800344 	movi	r2,13
   88764:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   88768:	e03fff15 	stw	zero,-4(fp)
   8876c:	00008d06 	br	889a4 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88770:	0005303a 	rdctl	r2,status
   88774:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88778:	e0fff717 	ldw	r3,-36(fp)
   8877c:	00bfff84 	movi	r2,-2
   88780:	1884703a 	and	r2,r3,r2
   88784:	1001703a 	wrctl	status,r2
  
  return context;
   88788:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   8878c:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   88790:	e0bffb17 	ldw	r2,-20(fp)
   88794:	10800117 	ldw	r2,4(r2)
   88798:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   8879c:	e0bff917 	ldw	r2,-28(fp)
   887a0:	1080058b 	ldhu	r2,22(r2)
   887a4:	10bfffcc 	andi	r2,r2,65535
   887a8:	1005003a 	cmpeq	r2,r2,zero
   887ac:	10001f1e 	bne	r2,zero,8882c <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   887b0:	e0bff917 	ldw	r2,-28(fp)
   887b4:	10c00417 	ldw	r3,16(r2)
   887b8:	18800017 	ldw	r2,0(r3)
   887bc:	e0bffa15 	stw	r2,-24(fp)
   887c0:	18c00104 	addi	r3,r3,4
   887c4:	e0bff917 	ldw	r2,-28(fp)
   887c8:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   887cc:	e0bff917 	ldw	r2,-28(fp)
   887d0:	1080058b 	ldhu	r2,22(r2)
   887d4:	10bfffc4 	addi	r2,r2,-1
   887d8:	1007883a 	mov	r3,r2
   887dc:	e0bff917 	ldw	r2,-28(fp)
   887e0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   887e4:	e0bff917 	ldw	r2,-28(fp)
   887e8:	10c00417 	ldw	r3,16(r2)
   887ec:	e0bff917 	ldw	r2,-28(fp)
   887f0:	10800217 	ldw	r2,8(r2)
   887f4:	1880041e 	bne	r3,r2,88808 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
   887f8:	e0bff917 	ldw	r2,-28(fp)
   887fc:	10c00117 	ldw	r3,4(r2)
   88800:	e0bff917 	ldw	r2,-28(fp)
   88804:	10c00415 	stw	r3,16(r2)
   88808:	e0bff817 	ldw	r2,-32(fp)
   8880c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88810:	e0bff617 	ldw	r2,-40(fp)
   88814:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   88818:	e0bffd17 	ldw	r2,-12(fp)
   8881c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   88820:	e0bffa17 	ldw	r2,-24(fp)
   88824:	e0bfff15 	stw	r2,-4(fp)
   88828:	00005e06 	br	889a4 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   8882c:	00800274 	movhi	r2,9
   88830:	1089ac04 	addi	r2,r2,9904
   88834:	10c00017 	ldw	r3,0(r2)
   88838:	00800274 	movhi	r2,9
   8883c:	1089ac04 	addi	r2,r2,9904
   88840:	10800017 	ldw	r2,0(r2)
   88844:	10800c03 	ldbu	r2,48(r2)
   88848:	10800114 	ori	r2,r2,4
   8884c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   88850:	00800274 	movhi	r2,9
   88854:	1089ac04 	addi	r2,r2,9904
   88858:	10800017 	ldw	r2,0(r2)
   8885c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   88860:	00800274 	movhi	r2,9
   88864:	1089ac04 	addi	r2,r2,9904
   88868:	10c00017 	ldw	r3,0(r2)
   8886c:	e0bffc0b 	ldhu	r2,-16(fp)
   88870:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   88874:	e13ffb17 	ldw	r4,-20(fp)
   88878:	0084d040 	call	84d04 <OS_EventTaskWait>
   8887c:	e0bff817 	ldw	r2,-32(fp)
   88880:	e0bff515 	stw	r2,-44(fp)
   88884:	e0bff517 	ldw	r2,-44(fp)
   88888:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   8888c:	00855b00 	call	855b0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88890:	0005303a 	rdctl	r2,status
   88894:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88898:	e0fff417 	ldw	r3,-48(fp)
   8889c:	00bfff84 	movi	r2,-2
   888a0:	1884703a 	and	r2,r3,r2
   888a4:	1001703a 	wrctl	status,r2
  
  return context;
   888a8:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
   888ac:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   888b0:	00800274 	movhi	r2,9
   888b4:	1089ac04 	addi	r2,r2,9904
   888b8:	10800017 	ldw	r2,0(r2)
   888bc:	10800c43 	ldbu	r2,49(r2)
   888c0:	10803fcc 	andi	r2,r2,255
   888c4:	e0bffe15 	stw	r2,-8(fp)
   888c8:	e0fffe17 	ldw	r3,-8(fp)
   888cc:	1805003a 	cmpeq	r2,r3,zero
   888d0:	1000041e 	bne	r2,zero,888e4 <OSQPend+0x248>
   888d4:	e0fffe17 	ldw	r3,-8(fp)
   888d8:	188000a0 	cmpeqi	r2,r3,2
   888dc:	1000091e 	bne	r2,zero,88904 <OSQPend+0x268>
   888e0:	00000d06 	br	88918 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   888e4:	00800274 	movhi	r2,9
   888e8:	1089ac04 	addi	r2,r2,9904
   888ec:	10800017 	ldw	r2,0(r2)
   888f0:	10800917 	ldw	r2,36(r2)
   888f4:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
   888f8:	e0bffd17 	ldw	r2,-12(fp)
   888fc:	10000005 	stb	zero,0(r2)
             break;
   88900:	00000e06 	br	8893c <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   88904:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   88908:	e0fffd17 	ldw	r3,-12(fp)
   8890c:	00800384 	movi	r2,14
   88910:	18800005 	stb	r2,0(r3)
             break;
   88914:	00000906 	br	8893c <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   88918:	00800274 	movhi	r2,9
   8891c:	1089ac04 	addi	r2,r2,9904
   88920:	11000017 	ldw	r4,0(r2)
   88924:	e17ffb17 	ldw	r5,-20(fp)
   88928:	0084f680 	call	84f68 <OS_EventTaskRemove>
             pmsg = (void *)0;
   8892c:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   88930:	e0fffd17 	ldw	r3,-12(fp)
   88934:	00800284 	movi	r2,10
   88938:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   8893c:	00800274 	movhi	r2,9
   88940:	1089ac04 	addi	r2,r2,9904
   88944:	10800017 	ldw	r2,0(r2)
   88948:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   8894c:	00800274 	movhi	r2,9
   88950:	1089ac04 	addi	r2,r2,9904
   88954:	10800017 	ldw	r2,0(r2)
   88958:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   8895c:	00800274 	movhi	r2,9
   88960:	1089ac04 	addi	r2,r2,9904
   88964:	10800017 	ldw	r2,0(r2)
   88968:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   8896c:	00800274 	movhi	r2,9
   88970:	1089ac04 	addi	r2,r2,9904
   88974:	10800017 	ldw	r2,0(r2)
   88978:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   8897c:	00800274 	movhi	r2,9
   88980:	1089ac04 	addi	r2,r2,9904
   88984:	10800017 	ldw	r2,0(r2)
   88988:	10000915 	stw	zero,36(r2)
   8898c:	e0bff817 	ldw	r2,-32(fp)
   88990:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88994:	e0bff317 	ldw	r2,-52(fp)
   88998:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   8899c:	e0bffa17 	ldw	r2,-24(fp)
   889a0:	e0bfff15 	stw	r2,-4(fp)
   889a4:	e0bfff17 	ldw	r2,-4(fp)
}
   889a8:	e037883a 	mov	sp,fp
   889ac:	dfc00117 	ldw	ra,4(sp)
   889b0:	df000017 	ldw	fp,0(sp)
   889b4:	dec00204 	addi	sp,sp,8
   889b8:	f800283a 	ret

000889bc <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   889bc:	defff504 	addi	sp,sp,-44
   889c0:	dfc00a15 	stw	ra,40(sp)
   889c4:	df000915 	stw	fp,36(sp)
   889c8:	df000904 	addi	fp,sp,36
   889cc:	e13ffc15 	stw	r4,-16(fp)
   889d0:	e1bffe15 	stw	r6,-8(fp)
   889d4:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   889d8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   889dc:	e0bffe17 	ldw	r2,-8(fp)
   889e0:	1004c03a 	cmpne	r2,r2,zero
   889e4:	1000021e 	bne	r2,zero,889f0 <OSQPendAbort+0x34>
        return (0);
   889e8:	e03fff15 	stw	zero,-4(fp)
   889ec:	00004c06 	br	88b20 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   889f0:	e0bffc17 	ldw	r2,-16(fp)
   889f4:	1004c03a 	cmpne	r2,r2,zero
   889f8:	1000051e 	bne	r2,zero,88a10 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   889fc:	e0fffe17 	ldw	r3,-8(fp)
   88a00:	00800104 	movi	r2,4
   88a04:	18800005 	stb	r2,0(r3)
        return (0);
   88a08:	e03fff15 	stw	zero,-4(fp)
   88a0c:	00004406 	br	88b20 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   88a10:	e0bffc17 	ldw	r2,-16(fp)
   88a14:	10800003 	ldbu	r2,0(r2)
   88a18:	10803fcc 	andi	r2,r2,255
   88a1c:	108000a0 	cmpeqi	r2,r2,2
   88a20:	1000051e 	bne	r2,zero,88a38 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   88a24:	e0fffe17 	ldw	r3,-8(fp)
   88a28:	00800044 	movi	r2,1
   88a2c:	18800005 	stb	r2,0(r3)
        return (0);
   88a30:	e03fff15 	stw	zero,-4(fp)
   88a34:	00003a06 	br	88b20 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88a38:	0005303a 	rdctl	r2,status
   88a3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88a40:	e0fff917 	ldw	r3,-28(fp)
   88a44:	00bfff84 	movi	r2,-2
   88a48:	1884703a 	and	r2,r3,r2
   88a4c:	1001703a 	wrctl	status,r2
  
  return context;
   88a50:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   88a54:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   88a58:	e0bffc17 	ldw	r2,-16(fp)
   88a5c:	10800283 	ldbu	r2,10(r2)
   88a60:	10803fcc 	andi	r2,r2,255
   88a64:	1005003a 	cmpeq	r2,r2,zero
   88a68:	1000261e 	bne	r2,zero,88b04 <OSQPendAbort+0x148>
        nbr_tasks = 0;
   88a6c:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   88a70:	e0bffd03 	ldbu	r2,-12(fp)
   88a74:	10800060 	cmpeqi	r2,r2,1
   88a78:	1000091e 	bne	r2,zero,88aa0 <OSQPendAbort+0xe4>
   88a7c:	00000e06 	br	88ab8 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   88a80:	e13ffc17 	ldw	r4,-16(fp)
   88a84:	000b883a 	mov	r5,zero
   88a88:	01800104 	movi	r6,4
   88a8c:	01c00084 	movi	r7,2
   88a90:	0084b700 	call	84b70 <OS_EventTaskRdy>
                     nbr_tasks++;
   88a94:	e0bffb03 	ldbu	r2,-20(fp)
   88a98:	10800044 	addi	r2,r2,1
   88a9c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   88aa0:	e0bffc17 	ldw	r2,-16(fp)
   88aa4:	10800283 	ldbu	r2,10(r2)
   88aa8:	10803fcc 	andi	r2,r2,255
   88aac:	1004c03a 	cmpne	r2,r2,zero
   88ab0:	103ff31e 	bne	r2,zero,88a80 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   88ab4:	00000806 	br	88ad8 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   88ab8:	e13ffc17 	ldw	r4,-16(fp)
   88abc:	000b883a 	mov	r5,zero
   88ac0:	01800104 	movi	r6,4
   88ac4:	01c00084 	movi	r7,2
   88ac8:	0084b700 	call	84b70 <OS_EventTaskRdy>
                 nbr_tasks++;
   88acc:	e0bffb03 	ldbu	r2,-20(fp)
   88ad0:	10800044 	addi	r2,r2,1
   88ad4:	e0bffb05 	stb	r2,-20(fp)
   88ad8:	e0bffa17 	ldw	r2,-24(fp)
   88adc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88ae0:	e0bff817 	ldw	r2,-32(fp)
   88ae4:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   88ae8:	00855b00 	call	855b0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   88aec:	e0fffe17 	ldw	r3,-8(fp)
   88af0:	00800384 	movi	r2,14
   88af4:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   88af8:	e0bffb03 	ldbu	r2,-20(fp)
   88afc:	e0bfff15 	stw	r2,-4(fp)
   88b00:	00000706 	br	88b20 <OSQPendAbort+0x164>
   88b04:	e0bffa17 	ldw	r2,-24(fp)
   88b08:	e0bff715 	stw	r2,-36(fp)
   88b0c:	e0bff717 	ldw	r2,-36(fp)
   88b10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   88b14:	e0bffe17 	ldw	r2,-8(fp)
   88b18:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   88b1c:	e03fff15 	stw	zero,-4(fp)
   88b20:	e0bfff17 	ldw	r2,-4(fp)
}
   88b24:	e037883a 	mov	sp,fp
   88b28:	dfc00117 	ldw	ra,4(sp)
   88b2c:	df000017 	ldw	fp,0(sp)
   88b30:	dec00204 	addi	sp,sp,8
   88b34:	f800283a 	ret

00088b38 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   88b38:	defff504 	addi	sp,sp,-44
   88b3c:	dfc00a15 	stw	ra,40(sp)
   88b40:	df000915 	stw	fp,36(sp)
   88b44:	df000904 	addi	fp,sp,36
   88b48:	e13ffd15 	stw	r4,-12(fp)
   88b4c:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   88b50:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   88b54:	e0bffd17 	ldw	r2,-12(fp)
   88b58:	1004c03a 	cmpne	r2,r2,zero
   88b5c:	1000031e 	bne	r2,zero,88b6c <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
   88b60:	00800104 	movi	r2,4
   88b64:	e0bfff15 	stw	r2,-4(fp)
   88b68:	00004d06 	br	88ca0 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   88b6c:	e0bffd17 	ldw	r2,-12(fp)
   88b70:	10800003 	ldbu	r2,0(r2)
   88b74:	10803fcc 	andi	r2,r2,255
   88b78:	108000a0 	cmpeqi	r2,r2,2
   88b7c:	1000031e 	bne	r2,zero,88b8c <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
   88b80:	00800044 	movi	r2,1
   88b84:	e0bfff15 	stw	r2,-4(fp)
   88b88:	00004506 	br	88ca0 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88b8c:	0005303a 	rdctl	r2,status
   88b90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88b94:	e0fffa17 	ldw	r3,-24(fp)
   88b98:	00bfff84 	movi	r2,-2
   88b9c:	1884703a 	and	r2,r3,r2
   88ba0:	1001703a 	wrctl	status,r2
  
  return context;
   88ba4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   88ba8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   88bac:	e0bffd17 	ldw	r2,-12(fp)
   88bb0:	10800283 	ldbu	r2,10(r2)
   88bb4:	10803fcc 	andi	r2,r2,255
   88bb8:	1005003a 	cmpeq	r2,r2,zero
   88bbc:	10000c1e 	bne	r2,zero,88bf0 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   88bc0:	e13ffd17 	ldw	r4,-12(fp)
   88bc4:	e17ffe17 	ldw	r5,-8(fp)
   88bc8:	01800104 	movi	r6,4
   88bcc:	000f883a 	mov	r7,zero
   88bd0:	0084b700 	call	84b70 <OS_EventTaskRdy>
   88bd4:	e0bffb17 	ldw	r2,-20(fp)
   88bd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88bdc:	e0bff917 	ldw	r2,-28(fp)
   88be0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   88be4:	00855b00 	call	855b0 <OS_Sched>
        return (OS_ERR_NONE);
   88be8:	e03fff15 	stw	zero,-4(fp)
   88bec:	00002c06 	br	88ca0 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   88bf0:	e0bffd17 	ldw	r2,-12(fp)
   88bf4:	10800117 	ldw	r2,4(r2)
   88bf8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   88bfc:	e0bffc17 	ldw	r2,-16(fp)
   88c00:	10c0058b 	ldhu	r3,22(r2)
   88c04:	e0bffc17 	ldw	r2,-16(fp)
   88c08:	1080050b 	ldhu	r2,20(r2)
   88c0c:	18ffffcc 	andi	r3,r3,65535
   88c10:	10bfffcc 	andi	r2,r2,65535
   88c14:	18800736 	bltu	r3,r2,88c34 <OSQPost+0xfc>
   88c18:	e0bffb17 	ldw	r2,-20(fp)
   88c1c:	e0bff815 	stw	r2,-32(fp)
   88c20:	e0bff817 	ldw	r2,-32(fp)
   88c24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   88c28:	00800784 	movi	r2,30
   88c2c:	e0bfff15 	stw	r2,-4(fp)
   88c30:	00001b06 	br	88ca0 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   88c34:	e0bffc17 	ldw	r2,-16(fp)
   88c38:	10c00317 	ldw	r3,12(r2)
   88c3c:	e0bffe17 	ldw	r2,-8(fp)
   88c40:	18800015 	stw	r2,0(r3)
   88c44:	18c00104 	addi	r3,r3,4
   88c48:	e0bffc17 	ldw	r2,-16(fp)
   88c4c:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   88c50:	e0bffc17 	ldw	r2,-16(fp)
   88c54:	1080058b 	ldhu	r2,22(r2)
   88c58:	10800044 	addi	r2,r2,1
   88c5c:	1007883a 	mov	r3,r2
   88c60:	e0bffc17 	ldw	r2,-16(fp)
   88c64:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   88c68:	e0bffc17 	ldw	r2,-16(fp)
   88c6c:	10c00317 	ldw	r3,12(r2)
   88c70:	e0bffc17 	ldw	r2,-16(fp)
   88c74:	10800217 	ldw	r2,8(r2)
   88c78:	1880041e 	bne	r3,r2,88c8c <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
   88c7c:	e0bffc17 	ldw	r2,-16(fp)
   88c80:	10c00117 	ldw	r3,4(r2)
   88c84:	e0bffc17 	ldw	r2,-16(fp)
   88c88:	10c00315 	stw	r3,12(r2)
   88c8c:	e0bffb17 	ldw	r2,-20(fp)
   88c90:	e0bff715 	stw	r2,-36(fp)
   88c94:	e0bff717 	ldw	r2,-36(fp)
   88c98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   88c9c:	e03fff15 	stw	zero,-4(fp)
   88ca0:	e0bfff17 	ldw	r2,-4(fp)
}
   88ca4:	e037883a 	mov	sp,fp
   88ca8:	dfc00117 	ldw	ra,4(sp)
   88cac:	df000017 	ldw	fp,0(sp)
   88cb0:	dec00204 	addi	sp,sp,8
   88cb4:	f800283a 	ret

00088cb8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   88cb8:	defff504 	addi	sp,sp,-44
   88cbc:	dfc00a15 	stw	ra,40(sp)
   88cc0:	df000915 	stw	fp,36(sp)
   88cc4:	df000904 	addi	fp,sp,36
   88cc8:	e13ffd15 	stw	r4,-12(fp)
   88ccc:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   88cd0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   88cd4:	e0bffd17 	ldw	r2,-12(fp)
   88cd8:	1004c03a 	cmpne	r2,r2,zero
   88cdc:	1000031e 	bne	r2,zero,88cec <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
   88ce0:	00800104 	movi	r2,4
   88ce4:	e0bfff15 	stw	r2,-4(fp)
   88ce8:	00004f06 	br	88e28 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   88cec:	e0bffd17 	ldw	r2,-12(fp)
   88cf0:	10800003 	ldbu	r2,0(r2)
   88cf4:	10803fcc 	andi	r2,r2,255
   88cf8:	108000a0 	cmpeqi	r2,r2,2
   88cfc:	1000031e 	bne	r2,zero,88d0c <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
   88d00:	00800044 	movi	r2,1
   88d04:	e0bfff15 	stw	r2,-4(fp)
   88d08:	00004706 	br	88e28 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88d0c:	0005303a 	rdctl	r2,status
   88d10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88d14:	e0fffa17 	ldw	r3,-24(fp)
   88d18:	00bfff84 	movi	r2,-2
   88d1c:	1884703a 	and	r2,r3,r2
   88d20:	1001703a 	wrctl	status,r2
  
  return context;
   88d24:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   88d28:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   88d2c:	e0bffd17 	ldw	r2,-12(fp)
   88d30:	10800283 	ldbu	r2,10(r2)
   88d34:	10803fcc 	andi	r2,r2,255
   88d38:	1005003a 	cmpeq	r2,r2,zero
   88d3c:	10000c1e 	bne	r2,zero,88d70 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   88d40:	e13ffd17 	ldw	r4,-12(fp)
   88d44:	e17ffe17 	ldw	r5,-8(fp)
   88d48:	01800104 	movi	r6,4
   88d4c:	000f883a 	mov	r7,zero
   88d50:	0084b700 	call	84b70 <OS_EventTaskRdy>
   88d54:	e0bffb17 	ldw	r2,-20(fp)
   88d58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88d5c:	e0bff917 	ldw	r2,-28(fp)
   88d60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   88d64:	00855b00 	call	855b0 <OS_Sched>
        return (OS_ERR_NONE);
   88d68:	e03fff15 	stw	zero,-4(fp)
   88d6c:	00002e06 	br	88e28 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   88d70:	e0bffd17 	ldw	r2,-12(fp)
   88d74:	10800117 	ldw	r2,4(r2)
   88d78:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   88d7c:	e0bffc17 	ldw	r2,-16(fp)
   88d80:	10c0058b 	ldhu	r3,22(r2)
   88d84:	e0bffc17 	ldw	r2,-16(fp)
   88d88:	1080050b 	ldhu	r2,20(r2)
   88d8c:	18ffffcc 	andi	r3,r3,65535
   88d90:	10bfffcc 	andi	r2,r2,65535
   88d94:	18800736 	bltu	r3,r2,88db4 <OSQPostFront+0xfc>
   88d98:	e0bffb17 	ldw	r2,-20(fp)
   88d9c:	e0bff815 	stw	r2,-32(fp)
   88da0:	e0bff817 	ldw	r2,-32(fp)
   88da4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   88da8:	00800784 	movi	r2,30
   88dac:	e0bfff15 	stw	r2,-4(fp)
   88db0:	00001d06 	br	88e28 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   88db4:	e0bffc17 	ldw	r2,-16(fp)
   88db8:	10c00417 	ldw	r3,16(r2)
   88dbc:	e0bffc17 	ldw	r2,-16(fp)
   88dc0:	10800117 	ldw	r2,4(r2)
   88dc4:	1880041e 	bne	r3,r2,88dd8 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
   88dc8:	e0bffc17 	ldw	r2,-16(fp)
   88dcc:	10c00217 	ldw	r3,8(r2)
   88dd0:	e0bffc17 	ldw	r2,-16(fp)
   88dd4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   88dd8:	e0bffc17 	ldw	r2,-16(fp)
   88ddc:	10800417 	ldw	r2,16(r2)
   88de0:	10ffff04 	addi	r3,r2,-4
   88de4:	e0bffc17 	ldw	r2,-16(fp)
   88de8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   88dec:	e0bffc17 	ldw	r2,-16(fp)
   88df0:	10c00417 	ldw	r3,16(r2)
   88df4:	e0bffe17 	ldw	r2,-8(fp)
   88df8:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   88dfc:	e0bffc17 	ldw	r2,-16(fp)
   88e00:	1080058b 	ldhu	r2,22(r2)
   88e04:	10800044 	addi	r2,r2,1
   88e08:	1007883a 	mov	r3,r2
   88e0c:	e0bffc17 	ldw	r2,-16(fp)
   88e10:	10c0058d 	sth	r3,22(r2)
   88e14:	e0bffb17 	ldw	r2,-20(fp)
   88e18:	e0bff715 	stw	r2,-36(fp)
   88e1c:	e0bff717 	ldw	r2,-36(fp)
   88e20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   88e24:	e03fff15 	stw	zero,-4(fp)
   88e28:	e0bfff17 	ldw	r2,-4(fp)
}
   88e2c:	e037883a 	mov	sp,fp
   88e30:	dfc00117 	ldw	ra,4(sp)
   88e34:	df000017 	ldw	fp,0(sp)
   88e38:	dec00204 	addi	sp,sp,8
   88e3c:	f800283a 	ret

00088e40 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   88e40:	defff404 	addi	sp,sp,-48
   88e44:	dfc00b15 	stw	ra,44(sp)
   88e48:	df000a15 	stw	fp,40(sp)
   88e4c:	df000a04 	addi	fp,sp,40
   88e50:	e13ffc15 	stw	r4,-16(fp)
   88e54:	e17ffd15 	stw	r5,-12(fp)
   88e58:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   88e5c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   88e60:	e0bffc17 	ldw	r2,-16(fp)
   88e64:	1004c03a 	cmpne	r2,r2,zero
   88e68:	1000031e 	bne	r2,zero,88e78 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
   88e6c:	00800104 	movi	r2,4
   88e70:	e0bfff15 	stw	r2,-4(fp)
   88e74:	00007906 	br	8905c <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   88e78:	e0bffc17 	ldw	r2,-16(fp)
   88e7c:	10800003 	ldbu	r2,0(r2)
   88e80:	10803fcc 	andi	r2,r2,255
   88e84:	108000a0 	cmpeqi	r2,r2,2
   88e88:	1000031e 	bne	r2,zero,88e98 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
   88e8c:	00800044 	movi	r2,1
   88e90:	e0bfff15 	stw	r2,-4(fp)
   88e94:	00007106 	br	8905c <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88e98:	0005303a 	rdctl	r2,status
   88e9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88ea0:	e0fff917 	ldw	r3,-28(fp)
   88ea4:	00bfff84 	movi	r2,-2
   88ea8:	1884703a 	and	r2,r3,r2
   88eac:	1001703a 	wrctl	status,r2
  
  return context;
   88eb0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   88eb4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   88eb8:	e0bffc17 	ldw	r2,-16(fp)
   88ebc:	10800283 	ldbu	r2,10(r2)
   88ec0:	10803fcc 	andi	r2,r2,255
   88ec4:	1005003a 	cmpeq	r2,r2,zero
   88ec8:	1000211e 	bne	r2,zero,88f50 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   88ecc:	e0bffe03 	ldbu	r2,-8(fp)
   88ed0:	1080004c 	andi	r2,r2,1
   88ed4:	10803fcc 	andi	r2,r2,255
   88ed8:	1005003a 	cmpeq	r2,r2,zero
   88edc:	10000c1e 	bne	r2,zero,88f10 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   88ee0:	00000506 	br	88ef8 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   88ee4:	e13ffc17 	ldw	r4,-16(fp)
   88ee8:	e17ffd17 	ldw	r5,-12(fp)
   88eec:	01800104 	movi	r6,4
   88ef0:	000f883a 	mov	r7,zero
   88ef4:	0084b700 	call	84b70 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   88ef8:	e0bffc17 	ldw	r2,-16(fp)
   88efc:	10800283 	ldbu	r2,10(r2)
   88f00:	10803fcc 	andi	r2,r2,255
   88f04:	1004c03a 	cmpne	r2,r2,zero
   88f08:	103ff61e 	bne	r2,zero,88ee4 <OSQPostOpt+0xa4>
   88f0c:	00000506 	br	88f24 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   88f10:	e13ffc17 	ldw	r4,-16(fp)
   88f14:	e17ffd17 	ldw	r5,-12(fp)
   88f18:	01800104 	movi	r6,4
   88f1c:	000f883a 	mov	r7,zero
   88f20:	0084b700 	call	84b70 <OS_EventTaskRdy>
   88f24:	e0bffa17 	ldw	r2,-24(fp)
   88f28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88f2c:	e0bff817 	ldw	r2,-32(fp)
   88f30:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   88f34:	e0bffe03 	ldbu	r2,-8(fp)
   88f38:	1080010c 	andi	r2,r2,4
   88f3c:	1004c03a 	cmpne	r2,r2,zero
   88f40:	1000011e 	bne	r2,zero,88f48 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
   88f44:	00855b00 	call	855b0 <OS_Sched>
        }
        return (OS_ERR_NONE);
   88f48:	e03fff15 	stw	zero,-4(fp)
   88f4c:	00004306 	br	8905c <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   88f50:	e0bffc17 	ldw	r2,-16(fp)
   88f54:	10800117 	ldw	r2,4(r2)
   88f58:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   88f5c:	e0bffb17 	ldw	r2,-20(fp)
   88f60:	10c0058b 	ldhu	r3,22(r2)
   88f64:	e0bffb17 	ldw	r2,-20(fp)
   88f68:	1080050b 	ldhu	r2,20(r2)
   88f6c:	18ffffcc 	andi	r3,r3,65535
   88f70:	10bfffcc 	andi	r2,r2,65535
   88f74:	18800736 	bltu	r3,r2,88f94 <OSQPostOpt+0x154>
   88f78:	e0bffa17 	ldw	r2,-24(fp)
   88f7c:	e0bff715 	stw	r2,-36(fp)
   88f80:	e0bff717 	ldw	r2,-36(fp)
   88f84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   88f88:	00800784 	movi	r2,30
   88f8c:	e0bfff15 	stw	r2,-4(fp)
   88f90:	00003206 	br	8905c <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   88f94:	e0bffe03 	ldbu	r2,-8(fp)
   88f98:	1080008c 	andi	r2,r2,2
   88f9c:	1005003a 	cmpeq	r2,r2,zero
   88fa0:	1000131e 	bne	r2,zero,88ff0 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   88fa4:	e0bffb17 	ldw	r2,-20(fp)
   88fa8:	10c00417 	ldw	r3,16(r2)
   88fac:	e0bffb17 	ldw	r2,-20(fp)
   88fb0:	10800117 	ldw	r2,4(r2)
   88fb4:	1880041e 	bne	r3,r2,88fc8 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   88fb8:	e0bffb17 	ldw	r2,-20(fp)
   88fbc:	10c00217 	ldw	r3,8(r2)
   88fc0:	e0bffb17 	ldw	r2,-20(fp)
   88fc4:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   88fc8:	e0bffb17 	ldw	r2,-20(fp)
   88fcc:	10800417 	ldw	r2,16(r2)
   88fd0:	10ffff04 	addi	r3,r2,-4
   88fd4:	e0bffb17 	ldw	r2,-20(fp)
   88fd8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   88fdc:	e0bffb17 	ldw	r2,-20(fp)
   88fe0:	10c00417 	ldw	r3,16(r2)
   88fe4:	e0bffd17 	ldw	r2,-12(fp)
   88fe8:	18800015 	stw	r2,0(r3)
   88fec:	00001006 	br	89030 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   88ff0:	e0bffb17 	ldw	r2,-20(fp)
   88ff4:	10c00317 	ldw	r3,12(r2)
   88ff8:	e0bffd17 	ldw	r2,-12(fp)
   88ffc:	18800015 	stw	r2,0(r3)
   89000:	18c00104 	addi	r3,r3,4
   89004:	e0bffb17 	ldw	r2,-20(fp)
   89008:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   8900c:	e0bffb17 	ldw	r2,-20(fp)
   89010:	10c00317 	ldw	r3,12(r2)
   89014:	e0bffb17 	ldw	r2,-20(fp)
   89018:	10800217 	ldw	r2,8(r2)
   8901c:	1880041e 	bne	r3,r2,89030 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
   89020:	e0bffb17 	ldw	r2,-20(fp)
   89024:	10c00117 	ldw	r3,4(r2)
   89028:	e0bffb17 	ldw	r2,-20(fp)
   8902c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   89030:	e0bffb17 	ldw	r2,-20(fp)
   89034:	1080058b 	ldhu	r2,22(r2)
   89038:	10800044 	addi	r2,r2,1
   8903c:	1007883a 	mov	r3,r2
   89040:	e0bffb17 	ldw	r2,-20(fp)
   89044:	10c0058d 	sth	r3,22(r2)
   89048:	e0bffa17 	ldw	r2,-24(fp)
   8904c:	e0bff615 	stw	r2,-40(fp)
   89050:	e0bff617 	ldw	r2,-40(fp)
   89054:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   89058:	e03fff15 	stw	zero,-4(fp)
   8905c:	e0bfff17 	ldw	r2,-4(fp)
}
   89060:	e037883a 	mov	sp,fp
   89064:	dfc00117 	ldw	ra,4(sp)
   89068:	df000017 	ldw	fp,0(sp)
   8906c:	dec00204 	addi	sp,sp,8
   89070:	f800283a 	ret

00089074 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   89074:	defff504 	addi	sp,sp,-44
   89078:	df000a15 	stw	fp,40(sp)
   8907c:	df000a04 	addi	fp,sp,40
   89080:	e13ffd15 	stw	r4,-12(fp)
   89084:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   89088:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   8908c:	e0bffd17 	ldw	r2,-12(fp)
   89090:	1004c03a 	cmpne	r2,r2,zero
   89094:	1000031e 	bne	r2,zero,890a4 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   89098:	00800104 	movi	r2,4
   8909c:	e0bfff15 	stw	r2,-4(fp)
   890a0:	00004f06 	br	891e0 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   890a4:	e0bffe17 	ldw	r2,-8(fp)
   890a8:	1004c03a 	cmpne	r2,r2,zero
   890ac:	1000031e 	bne	r2,zero,890bc <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   890b0:	00800244 	movi	r2,9
   890b4:	e0bfff15 	stw	r2,-4(fp)
   890b8:	00004906 	br	891e0 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   890bc:	e0bffd17 	ldw	r2,-12(fp)
   890c0:	10800003 	ldbu	r2,0(r2)
   890c4:	10803fcc 	andi	r2,r2,255
   890c8:	108000a0 	cmpeqi	r2,r2,2
   890cc:	1000031e 	bne	r2,zero,890dc <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   890d0:	00800044 	movi	r2,1
   890d4:	e0bfff15 	stw	r2,-4(fp)
   890d8:	00004106 	br	891e0 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   890dc:	0005303a 	rdctl	r2,status
   890e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   890e4:	e0fff717 	ldw	r3,-36(fp)
   890e8:	00bfff84 	movi	r2,-2
   890ec:	1884703a 	and	r2,r3,r2
   890f0:	1001703a 	wrctl	status,r2
  
  return context;
   890f4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   890f8:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   890fc:	e0bffd17 	ldw	r2,-12(fp)
   89100:	10c00283 	ldbu	r3,10(r2)
   89104:	e0bffe17 	ldw	r2,-8(fp)
   89108:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   8910c:	e0bffd17 	ldw	r2,-12(fp)
   89110:	108002c4 	addi	r2,r2,11
   89114:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   89118:	e0bffe17 	ldw	r2,-8(fp)
   8911c:	10800204 	addi	r2,r2,8
   89120:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   89124:	e03ffb05 	stb	zero,-20(fp)
   89128:	00000d06 	br	89160 <OSQQuery+0xec>
        *pdest++ = *psrc++;
   8912c:	e0bffa17 	ldw	r2,-24(fp)
   89130:	10c00003 	ldbu	r3,0(r2)
   89134:	e0bff917 	ldw	r2,-28(fp)
   89138:	10c00005 	stb	r3,0(r2)
   8913c:	e0bff917 	ldw	r2,-28(fp)
   89140:	10800044 	addi	r2,r2,1
   89144:	e0bff915 	stw	r2,-28(fp)
   89148:	e0bffa17 	ldw	r2,-24(fp)
   8914c:	10800044 	addi	r2,r2,1
   89150:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   89154:	e0bffb03 	ldbu	r2,-20(fp)
   89158:	10800044 	addi	r2,r2,1
   8915c:	e0bffb05 	stb	r2,-20(fp)
   89160:	e0bffb03 	ldbu	r2,-20(fp)
   89164:	108000f0 	cmpltui	r2,r2,3
   89168:	103ff01e 	bne	r2,zero,8912c <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   8916c:	e0bffd17 	ldw	r2,-12(fp)
   89170:	10800117 	ldw	r2,4(r2)
   89174:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   89178:	e0bffc17 	ldw	r2,-16(fp)
   8917c:	1080058b 	ldhu	r2,22(r2)
   89180:	10bfffcc 	andi	r2,r2,65535
   89184:	1005003a 	cmpeq	r2,r2,zero
   89188:	1000061e 	bne	r2,zero,891a4 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   8918c:	e0bffc17 	ldw	r2,-16(fp)
   89190:	10800417 	ldw	r2,16(r2)
   89194:	10c00017 	ldw	r3,0(r2)
   89198:	e0bffe17 	ldw	r2,-8(fp)
   8919c:	10c00015 	stw	r3,0(r2)
   891a0:	00000206 	br	891ac <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
   891a4:	e0bffe17 	ldw	r2,-8(fp)
   891a8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   891ac:	e0bffc17 	ldw	r2,-16(fp)
   891b0:	10c0058b 	ldhu	r3,22(r2)
   891b4:	e0bffe17 	ldw	r2,-8(fp)
   891b8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   891bc:	e0bffc17 	ldw	r2,-16(fp)
   891c0:	10c0050b 	ldhu	r3,20(r2)
   891c4:	e0bffe17 	ldw	r2,-8(fp)
   891c8:	10c0018d 	sth	r3,6(r2)
   891cc:	e0bff817 	ldw	r2,-32(fp)
   891d0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   891d4:	e0bff617 	ldw	r2,-40(fp)
   891d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   891dc:	e03fff15 	stw	zero,-4(fp)
   891e0:	e0bfff17 	ldw	r2,-4(fp)
}
   891e4:	e037883a 	mov	sp,fp
   891e8:	df000017 	ldw	fp,0(sp)
   891ec:	dec00104 	addi	sp,sp,4
   891f0:	f800283a 	ret

000891f4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   891f4:	defffb04 	addi	sp,sp,-20
   891f8:	dfc00415 	stw	ra,16(sp)
   891fc:	df000315 	stw	fp,12(sp)
   89200:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   89204:	01000274 	movhi	r4,9
   89208:	211fa604 	addi	r4,r4,32408
   8920c:	01407804 	movi	r5,480
   89210:	00854f00 	call	854f0 <OS_MemClr>
    pq1 = &OSQTbl[0];
   89214:	00800274 	movhi	r2,9
   89218:	109fa604 	addi	r2,r2,32408
   8921c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   89220:	00800274 	movhi	r2,9
   89224:	109fac04 	addi	r2,r2,32432
   89228:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   8922c:	e03fff0d 	sth	zero,-4(fp)
   89230:	00000c06 	br	89264 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   89234:	e0fffe17 	ldw	r3,-8(fp)
   89238:	e0bffd17 	ldw	r2,-12(fp)
   8923c:	18800015 	stw	r2,0(r3)
        pq1++;
   89240:	e0bffe17 	ldw	r2,-8(fp)
   89244:	10800604 	addi	r2,r2,24
   89248:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   8924c:	e0bffd17 	ldw	r2,-12(fp)
   89250:	10800604 	addi	r2,r2,24
   89254:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   89258:	e0bfff0b 	ldhu	r2,-4(fp)
   8925c:	10800044 	addi	r2,r2,1
   89260:	e0bfff0d 	sth	r2,-4(fp)
   89264:	e0bfff0b 	ldhu	r2,-4(fp)
   89268:	108004f0 	cmpltui	r2,r2,19
   8926c:	103ff11e 	bne	r2,zero,89234 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   89270:	e0bffe17 	ldw	r2,-8(fp)
   89274:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   89278:	00c00274 	movhi	r3,9
   8927c:	18c9a804 	addi	r3,r3,9888
   89280:	00800274 	movhi	r2,9
   89284:	109fa604 	addi	r2,r2,32408
   89288:	18800015 	stw	r2,0(r3)
#endif
}
   8928c:	e037883a 	mov	sp,fp
   89290:	dfc00117 	ldw	ra,4(sp)
   89294:	df000017 	ldw	fp,0(sp)
   89298:	dec00204 	addi	sp,sp,8
   8929c:	f800283a 	ret

000892a0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   892a0:	defff904 	addi	sp,sp,-28
   892a4:	df000615 	stw	fp,24(sp)
   892a8:	df000604 	addi	fp,sp,24
   892ac:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   892b0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   892b4:	e0bffe17 	ldw	r2,-8(fp)
   892b8:	1004c03a 	cmpne	r2,r2,zero
   892bc:	1000021e 	bne	r2,zero,892c8 <OSSemAccept+0x28>
        return (0);
   892c0:	e03fff15 	stw	zero,-4(fp)
   892c4:	00002106 	br	8934c <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   892c8:	e0bffe17 	ldw	r2,-8(fp)
   892cc:	10800003 	ldbu	r2,0(r2)
   892d0:	10803fcc 	andi	r2,r2,255
   892d4:	108000e0 	cmpeqi	r2,r2,3
   892d8:	1000021e 	bne	r2,zero,892e4 <OSSemAccept+0x44>
        return (0);
   892dc:	e03fff15 	stw	zero,-4(fp)
   892e0:	00001a06 	br	8934c <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   892e4:	0005303a 	rdctl	r2,status
   892e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   892ec:	e0fffb17 	ldw	r3,-20(fp)
   892f0:	00bfff84 	movi	r2,-2
   892f4:	1884703a 	and	r2,r3,r2
   892f8:	1001703a 	wrctl	status,r2
  
  return context;
   892fc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   89300:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
   89304:	e0bffe17 	ldw	r2,-8(fp)
   89308:	1080020b 	ldhu	r2,8(r2)
   8930c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   89310:	e0bffd0b 	ldhu	r2,-12(fp)
   89314:	1005003a 	cmpeq	r2,r2,zero
   89318:	1000061e 	bne	r2,zero,89334 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   8931c:	e0bffe17 	ldw	r2,-8(fp)
   89320:	1080020b 	ldhu	r2,8(r2)
   89324:	10bfffc4 	addi	r2,r2,-1
   89328:	1007883a 	mov	r3,r2
   8932c:	e0bffe17 	ldw	r2,-8(fp)
   89330:	10c0020d 	sth	r3,8(r2)
   89334:	e0bffc17 	ldw	r2,-16(fp)
   89338:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8933c:	e0bffa17 	ldw	r2,-24(fp)
   89340:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   89344:	e0bffd0b 	ldhu	r2,-12(fp)
   89348:	e0bfff15 	stw	r2,-4(fp)
   8934c:	e0bfff17 	ldw	r2,-4(fp)
}
   89350:	e037883a 	mov	sp,fp
   89354:	df000017 	ldw	fp,0(sp)
   89358:	dec00104 	addi	sp,sp,4
   8935c:	f800283a 	ret

00089360 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   89360:	defff804 	addi	sp,sp,-32
   89364:	dfc00715 	stw	ra,28(sp)
   89368:	df000615 	stw	fp,24(sp)
   8936c:	df000604 	addi	fp,sp,24
   89370:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   89374:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   89378:	00800274 	movhi	r2,9
   8937c:	1089ab04 	addi	r2,r2,9900
   89380:	10800003 	ldbu	r2,0(r2)
   89384:	10803fcc 	andi	r2,r2,255
   89388:	1005003a 	cmpeq	r2,r2,zero
   8938c:	1000021e 	bne	r2,zero,89398 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   89390:	e03fff15 	stw	zero,-4(fp)
   89394:	00003106 	br	8945c <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89398:	0005303a 	rdctl	r2,status
   8939c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   893a0:	e0fffb17 	ldw	r3,-20(fp)
   893a4:	00bfff84 	movi	r2,-2
   893a8:	1884703a 	and	r2,r3,r2
   893ac:	1001703a 	wrctl	status,r2
  
  return context;
   893b0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   893b4:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   893b8:	00800274 	movhi	r2,9
   893bc:	1089aa04 	addi	r2,r2,9896
   893c0:	10800017 	ldw	r2,0(r2)
   893c4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   893c8:	00800274 	movhi	r2,9
   893cc:	1089aa04 	addi	r2,r2,9896
   893d0:	10800017 	ldw	r2,0(r2)
   893d4:	1005003a 	cmpeq	r2,r2,zero
   893d8:	1000081e 	bne	r2,zero,893fc <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   893dc:	00800274 	movhi	r2,9
   893e0:	1089aa04 	addi	r2,r2,9896
   893e4:	10800017 	ldw	r2,0(r2)
   893e8:	10800117 	ldw	r2,4(r2)
   893ec:	1007883a 	mov	r3,r2
   893f0:	00800274 	movhi	r2,9
   893f4:	1089aa04 	addi	r2,r2,9896
   893f8:	10c00015 	stw	r3,0(r2)
   893fc:	e0bffc17 	ldw	r2,-16(fp)
   89400:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89404:	e0bffa17 	ldw	r2,-24(fp)
   89408:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   8940c:	e0bffd17 	ldw	r2,-12(fp)
   89410:	1005003a 	cmpeq	r2,r2,zero
   89414:	10000f1e 	bne	r2,zero,89454 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   89418:	e0fffd17 	ldw	r3,-12(fp)
   8941c:	008000c4 	movi	r2,3
   89420:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   89424:	e0fffd17 	ldw	r3,-12(fp)
   89428:	e0bffe0b 	ldhu	r2,-8(fp)
   8942c:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   89430:	e0bffd17 	ldw	r2,-12(fp)
   89434:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   89438:	e0fffd17 	ldw	r3,-12(fp)
   8943c:	00800fc4 	movi	r2,63
   89440:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   89444:	e0bffd17 	ldw	r2,-12(fp)
   89448:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   8944c:	e13ffd17 	ldw	r4,-12(fp)
   89450:	00851240 	call	85124 <OS_EventWaitListInit>
    }
    return (pevent);
   89454:	e0bffd17 	ldw	r2,-12(fp)
   89458:	e0bfff15 	stw	r2,-4(fp)
   8945c:	e0bfff17 	ldw	r2,-4(fp)
}
   89460:	e037883a 	mov	sp,fp
   89464:	dfc00117 	ldw	ra,4(sp)
   89468:	df000017 	ldw	fp,0(sp)
   8946c:	dec00204 	addi	sp,sp,8
   89470:	f800283a 	ret

00089474 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   89474:	defff104 	addi	sp,sp,-60
   89478:	dfc00e15 	stw	ra,56(sp)
   8947c:	df000d15 	stw	fp,52(sp)
   89480:	df000d04 	addi	fp,sp,52
   89484:	e13ffb15 	stw	r4,-20(fp)
   89488:	e1bffd15 	stw	r6,-12(fp)
   8948c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   89490:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   89494:	e0bffd17 	ldw	r2,-12(fp)
   89498:	1004c03a 	cmpne	r2,r2,zero
   8949c:	1000031e 	bne	r2,zero,894ac <OSSemDel+0x38>
        return (pevent);
   894a0:	e0bffb17 	ldw	r2,-20(fp)
   894a4:	e0bfff15 	stw	r2,-4(fp)
   894a8:	00009406 	br	896fc <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   894ac:	e0bffb17 	ldw	r2,-20(fp)
   894b0:	1004c03a 	cmpne	r2,r2,zero
   894b4:	1000061e 	bne	r2,zero,894d0 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   894b8:	e0fffd17 	ldw	r3,-12(fp)
   894bc:	00800104 	movi	r2,4
   894c0:	18800005 	stb	r2,0(r3)
        return (pevent);
   894c4:	e0fffb17 	ldw	r3,-20(fp)
   894c8:	e0ffff15 	stw	r3,-4(fp)
   894cc:	00008b06 	br	896fc <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   894d0:	e0bffb17 	ldw	r2,-20(fp)
   894d4:	10800003 	ldbu	r2,0(r2)
   894d8:	10803fcc 	andi	r2,r2,255
   894dc:	108000e0 	cmpeqi	r2,r2,3
   894e0:	1000061e 	bne	r2,zero,894fc <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   894e4:	e0fffd17 	ldw	r3,-12(fp)
   894e8:	00800044 	movi	r2,1
   894ec:	18800005 	stb	r2,0(r3)
        return (pevent);
   894f0:	e0bffb17 	ldw	r2,-20(fp)
   894f4:	e0bfff15 	stw	r2,-4(fp)
   894f8:	00008006 	br	896fc <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   894fc:	00800274 	movhi	r2,9
   89500:	1089ab04 	addi	r2,r2,9900
   89504:	10800003 	ldbu	r2,0(r2)
   89508:	10803fcc 	andi	r2,r2,255
   8950c:	1005003a 	cmpeq	r2,r2,zero
   89510:	1000061e 	bne	r2,zero,8952c <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   89514:	e0fffd17 	ldw	r3,-12(fp)
   89518:	008003c4 	movi	r2,15
   8951c:	18800005 	stb	r2,0(r3)
        return (pevent);
   89520:	e0fffb17 	ldw	r3,-20(fp)
   89524:	e0ffff15 	stw	r3,-4(fp)
   89528:	00007406 	br	896fc <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8952c:	0005303a 	rdctl	r2,status
   89530:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89534:	e0fff717 	ldw	r3,-36(fp)
   89538:	00bfff84 	movi	r2,-2
   8953c:	1884703a 	and	r2,r3,r2
   89540:	1001703a 	wrctl	status,r2
  
  return context;
   89544:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   89548:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   8954c:	e0bffb17 	ldw	r2,-20(fp)
   89550:	10800283 	ldbu	r2,10(r2)
   89554:	10803fcc 	andi	r2,r2,255
   89558:	1005003a 	cmpeq	r2,r2,zero
   8955c:	1000031e 	bne	r2,zero,8956c <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   89560:	00800044 	movi	r2,1
   89564:	e0bffa05 	stb	r2,-24(fp)
   89568:	00000106 	br	89570 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   8956c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   89570:	e0bffc03 	ldbu	r2,-16(fp)
   89574:	e0bffe15 	stw	r2,-8(fp)
   89578:	e0fffe17 	ldw	r3,-8(fp)
   8957c:	1805003a 	cmpeq	r2,r3,zero
   89580:	1000041e 	bne	r2,zero,89594 <OSSemDel+0x120>
   89584:	e0fffe17 	ldw	r3,-8(fp)
   89588:	18800060 	cmpeqi	r2,r3,1
   8958c:	10002d1e 	bne	r2,zero,89644 <OSSemDel+0x1d0>
   89590:	00004f06 	br	896d0 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   89594:	e0bffa03 	ldbu	r2,-24(fp)
   89598:	1004c03a 	cmpne	r2,r2,zero
   8959c:	10001a1e 	bne	r2,zero,89608 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   895a0:	e0fffb17 	ldw	r3,-20(fp)
   895a4:	00800fc4 	movi	r2,63
   895a8:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   895ac:	e0bffb17 	ldw	r2,-20(fp)
   895b0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   895b4:	e0bffb17 	ldw	r2,-20(fp)
   895b8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   895bc:	00800274 	movhi	r2,9
   895c0:	1089aa04 	addi	r2,r2,9896
   895c4:	10c00017 	ldw	r3,0(r2)
   895c8:	e0bffb17 	ldw	r2,-20(fp)
   895cc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   895d0:	e0bffb17 	ldw	r2,-20(fp)
   895d4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   895d8:	00c00274 	movhi	r3,9
   895dc:	18c9aa04 	addi	r3,r3,9896
   895e0:	e0bffb17 	ldw	r2,-20(fp)
   895e4:	18800015 	stw	r2,0(r3)
   895e8:	e0bff817 	ldw	r2,-32(fp)
   895ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   895f0:	e0bff617 	ldw	r2,-40(fp)
   895f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   895f8:	e0bffd17 	ldw	r2,-12(fp)
   895fc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   89600:	e03ff915 	stw	zero,-28(fp)
   89604:	00003b06 	br	896f4 <OSSemDel+0x280>
   89608:	e0bff817 	ldw	r2,-32(fp)
   8960c:	e0bff515 	stw	r2,-44(fp)
   89610:	e0bff517 	ldw	r2,-44(fp)
   89614:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   89618:	e0fffd17 	ldw	r3,-12(fp)
   8961c:	00801244 	movi	r2,73
   89620:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   89624:	e0bffb17 	ldw	r2,-20(fp)
   89628:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   8962c:	00003106 	br	896f4 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   89630:	e13ffb17 	ldw	r4,-20(fp)
   89634:	000b883a 	mov	r5,zero
   89638:	01800044 	movi	r6,1
   8963c:	000f883a 	mov	r7,zero
   89640:	0084b700 	call	84b70 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   89644:	e0bffb17 	ldw	r2,-20(fp)
   89648:	10800283 	ldbu	r2,10(r2)
   8964c:	10803fcc 	andi	r2,r2,255
   89650:	1004c03a 	cmpne	r2,r2,zero
   89654:	103ff61e 	bne	r2,zero,89630 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   89658:	e0fffb17 	ldw	r3,-20(fp)
   8965c:	00800fc4 	movi	r2,63
   89660:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   89664:	e0bffb17 	ldw	r2,-20(fp)
   89668:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   8966c:	e0bffb17 	ldw	r2,-20(fp)
   89670:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   89674:	00800274 	movhi	r2,9
   89678:	1089aa04 	addi	r2,r2,9896
   8967c:	10c00017 	ldw	r3,0(r2)
   89680:	e0bffb17 	ldw	r2,-20(fp)
   89684:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   89688:	e0bffb17 	ldw	r2,-20(fp)
   8968c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   89690:	00c00274 	movhi	r3,9
   89694:	18c9aa04 	addi	r3,r3,9896
   89698:	e0bffb17 	ldw	r2,-20(fp)
   8969c:	18800015 	stw	r2,0(r3)
   896a0:	e0bff817 	ldw	r2,-32(fp)
   896a4:	e0bff415 	stw	r2,-48(fp)
   896a8:	e0bff417 	ldw	r2,-48(fp)
   896ac:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   896b0:	e0bffa03 	ldbu	r2,-24(fp)
   896b4:	10800058 	cmpnei	r2,r2,1
   896b8:	1000011e 	bne	r2,zero,896c0 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   896bc:	00855b00 	call	855b0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   896c0:	e0bffd17 	ldw	r2,-12(fp)
   896c4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   896c8:	e03ff915 	stw	zero,-28(fp)
             break;
   896cc:	00000906 	br	896f4 <OSSemDel+0x280>
   896d0:	e0bff817 	ldw	r2,-32(fp)
   896d4:	e0bff315 	stw	r2,-52(fp)
   896d8:	e0bff317 	ldw	r2,-52(fp)
   896dc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   896e0:	e0fffd17 	ldw	r3,-12(fp)
   896e4:	008001c4 	movi	r2,7
   896e8:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   896ec:	e0bffb17 	ldw	r2,-20(fp)
   896f0:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   896f4:	e0bff917 	ldw	r2,-28(fp)
   896f8:	e0bfff15 	stw	r2,-4(fp)
   896fc:	e0bfff17 	ldw	r2,-4(fp)
}
   89700:	e037883a 	mov	sp,fp
   89704:	dfc00117 	ldw	ra,4(sp)
   89708:	df000017 	ldw	fp,0(sp)
   8970c:	dec00204 	addi	sp,sp,8
   89710:	f800283a 	ret

00089714 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   89714:	defff404 	addi	sp,sp,-48
   89718:	dfc00b15 	stw	ra,44(sp)
   8971c:	df000a15 	stw	fp,40(sp)
   89720:	df000a04 	addi	fp,sp,40
   89724:	e13ffc15 	stw	r4,-16(fp)
   89728:	e1bffe15 	stw	r6,-8(fp)
   8972c:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   89730:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   89734:	e0bffe17 	ldw	r2,-8(fp)
   89738:	1005003a 	cmpeq	r2,r2,zero
   8973c:	10008f1e 	bne	r2,zero,8997c <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   89740:	e0bffc17 	ldw	r2,-16(fp)
   89744:	1004c03a 	cmpne	r2,r2,zero
   89748:	1000041e 	bne	r2,zero,8975c <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   8974c:	e0fffe17 	ldw	r3,-8(fp)
   89750:	00800104 	movi	r2,4
   89754:	18800005 	stb	r2,0(r3)
        return;
   89758:	00008806 	br	8997c <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   8975c:	e0bffc17 	ldw	r2,-16(fp)
   89760:	10800003 	ldbu	r2,0(r2)
   89764:	10803fcc 	andi	r2,r2,255
   89768:	108000e0 	cmpeqi	r2,r2,3
   8976c:	1000041e 	bne	r2,zero,89780 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   89770:	e0fffe17 	ldw	r3,-8(fp)
   89774:	00800044 	movi	r2,1
   89778:	18800005 	stb	r2,0(r3)
        return;
   8977c:	00007f06 	br	8997c <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   89780:	00800274 	movhi	r2,9
   89784:	1089ab04 	addi	r2,r2,9900
   89788:	10800003 	ldbu	r2,0(r2)
   8978c:	10803fcc 	andi	r2,r2,255
   89790:	1005003a 	cmpeq	r2,r2,zero
   89794:	1000041e 	bne	r2,zero,897a8 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   89798:	e0fffe17 	ldw	r3,-8(fp)
   8979c:	00800084 	movi	r2,2
   897a0:	18800005 	stb	r2,0(r3)
        return;
   897a4:	00007506 	br	8997c <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   897a8:	00800274 	movhi	r2,9
   897ac:	10899d04 	addi	r2,r2,9844
   897b0:	10800003 	ldbu	r2,0(r2)
   897b4:	10803fcc 	andi	r2,r2,255
   897b8:	1005003a 	cmpeq	r2,r2,zero
   897bc:	1000041e 	bne	r2,zero,897d0 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   897c0:	e0fffe17 	ldw	r3,-8(fp)
   897c4:	00800344 	movi	r2,13
   897c8:	18800005 	stb	r2,0(r3)
        return;
   897cc:	00006b06 	br	8997c <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   897d0:	0005303a 	rdctl	r2,status
   897d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   897d8:	e0fffa17 	ldw	r3,-24(fp)
   897dc:	00bfff84 	movi	r2,-2
   897e0:	1884703a 	and	r2,r3,r2
   897e4:	1001703a 	wrctl	status,r2
  
  return context;
   897e8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   897ec:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   897f0:	e0bffc17 	ldw	r2,-16(fp)
   897f4:	1080020b 	ldhu	r2,8(r2)
   897f8:	10bfffcc 	andi	r2,r2,65535
   897fc:	1005003a 	cmpeq	r2,r2,zero
   89800:	10000d1e 	bne	r2,zero,89838 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   89804:	e0bffc17 	ldw	r2,-16(fp)
   89808:	1080020b 	ldhu	r2,8(r2)
   8980c:	10bfffc4 	addi	r2,r2,-1
   89810:	1007883a 	mov	r3,r2
   89814:	e0bffc17 	ldw	r2,-16(fp)
   89818:	10c0020d 	sth	r3,8(r2)
   8981c:	e0bffb17 	ldw	r2,-20(fp)
   89820:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89824:	e0bff917 	ldw	r2,-28(fp)
   89828:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   8982c:	e0bffe17 	ldw	r2,-8(fp)
   89830:	10000005 	stb	zero,0(r2)
        return;
   89834:	00005106 	br	8997c <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   89838:	00800274 	movhi	r2,9
   8983c:	1089ac04 	addi	r2,r2,9904
   89840:	10c00017 	ldw	r3,0(r2)
   89844:	00800274 	movhi	r2,9
   89848:	1089ac04 	addi	r2,r2,9904
   8984c:	10800017 	ldw	r2,0(r2)
   89850:	10800c03 	ldbu	r2,48(r2)
   89854:	10800054 	ori	r2,r2,1
   89858:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   8985c:	00800274 	movhi	r2,9
   89860:	1089ac04 	addi	r2,r2,9904
   89864:	10800017 	ldw	r2,0(r2)
   89868:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   8986c:	00800274 	movhi	r2,9
   89870:	1089ac04 	addi	r2,r2,9904
   89874:	10c00017 	ldw	r3,0(r2)
   89878:	e0bffd0b 	ldhu	r2,-12(fp)
   8987c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   89880:	e13ffc17 	ldw	r4,-16(fp)
   89884:	0084d040 	call	84d04 <OS_EventTaskWait>
   89888:	e0bffb17 	ldw	r2,-20(fp)
   8988c:	e0bff815 	stw	r2,-32(fp)
   89890:	e0bff817 	ldw	r2,-32(fp)
   89894:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   89898:	00855b00 	call	855b0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8989c:	0005303a 	rdctl	r2,status
   898a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   898a4:	e0fff717 	ldw	r3,-36(fp)
   898a8:	00bfff84 	movi	r2,-2
   898ac:	1884703a 	and	r2,r3,r2
   898b0:	1001703a 	wrctl	status,r2
  
  return context;
   898b4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   898b8:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   898bc:	00800274 	movhi	r2,9
   898c0:	1089ac04 	addi	r2,r2,9904
   898c4:	10800017 	ldw	r2,0(r2)
   898c8:	10800c43 	ldbu	r2,49(r2)
   898cc:	10803fcc 	andi	r2,r2,255
   898d0:	e0bfff15 	stw	r2,-4(fp)
   898d4:	e0ffff17 	ldw	r3,-4(fp)
   898d8:	1805003a 	cmpeq	r2,r3,zero
   898dc:	1000041e 	bne	r2,zero,898f0 <OSSemPend+0x1dc>
   898e0:	e0ffff17 	ldw	r3,-4(fp)
   898e4:	188000a0 	cmpeqi	r2,r3,2
   898e8:	1000041e 	bne	r2,zero,898fc <OSSemPend+0x1e8>
   898ec:	00000706 	br	8990c <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   898f0:	e0bffe17 	ldw	r2,-8(fp)
   898f4:	10000005 	stb	zero,0(r2)
             break;
   898f8:	00000c06 	br	8992c <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   898fc:	e0fffe17 	ldw	r3,-8(fp)
   89900:	00800384 	movi	r2,14
   89904:	18800005 	stb	r2,0(r3)
             break;
   89908:	00000806 	br	8992c <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   8990c:	00800274 	movhi	r2,9
   89910:	1089ac04 	addi	r2,r2,9904
   89914:	11000017 	ldw	r4,0(r2)
   89918:	e17ffc17 	ldw	r5,-16(fp)
   8991c:	0084f680 	call	84f68 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   89920:	e0fffe17 	ldw	r3,-8(fp)
   89924:	00800284 	movi	r2,10
   89928:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   8992c:	00800274 	movhi	r2,9
   89930:	1089ac04 	addi	r2,r2,9904
   89934:	10800017 	ldw	r2,0(r2)
   89938:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   8993c:	00800274 	movhi	r2,9
   89940:	1089ac04 	addi	r2,r2,9904
   89944:	10800017 	ldw	r2,0(r2)
   89948:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   8994c:	00800274 	movhi	r2,9
   89950:	1089ac04 	addi	r2,r2,9904
   89954:	10800017 	ldw	r2,0(r2)
   89958:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   8995c:	00800274 	movhi	r2,9
   89960:	1089ac04 	addi	r2,r2,9904
   89964:	10800017 	ldw	r2,0(r2)
   89968:	10000815 	stw	zero,32(r2)
   8996c:	e0bffb17 	ldw	r2,-20(fp)
   89970:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89974:	e0bff617 	ldw	r2,-40(fp)
   89978:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   8997c:	e037883a 	mov	sp,fp
   89980:	dfc00117 	ldw	ra,4(sp)
   89984:	df000017 	ldw	fp,0(sp)
   89988:	dec00204 	addi	sp,sp,8
   8998c:	f800283a 	ret

00089990 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   89990:	defff504 	addi	sp,sp,-44
   89994:	dfc00a15 	stw	ra,40(sp)
   89998:	df000915 	stw	fp,36(sp)
   8999c:	df000904 	addi	fp,sp,36
   899a0:	e13ffc15 	stw	r4,-16(fp)
   899a4:	e1bffe15 	stw	r6,-8(fp)
   899a8:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   899ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   899b0:	e0bffe17 	ldw	r2,-8(fp)
   899b4:	1004c03a 	cmpne	r2,r2,zero
   899b8:	1000021e 	bne	r2,zero,899c4 <OSSemPendAbort+0x34>
        return (0);
   899bc:	e03fff15 	stw	zero,-4(fp)
   899c0:	00004c06 	br	89af4 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   899c4:	e0bffc17 	ldw	r2,-16(fp)
   899c8:	1004c03a 	cmpne	r2,r2,zero
   899cc:	1000051e 	bne	r2,zero,899e4 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   899d0:	e0fffe17 	ldw	r3,-8(fp)
   899d4:	00800104 	movi	r2,4
   899d8:	18800005 	stb	r2,0(r3)
        return (0);
   899dc:	e03fff15 	stw	zero,-4(fp)
   899e0:	00004406 	br	89af4 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   899e4:	e0bffc17 	ldw	r2,-16(fp)
   899e8:	10800003 	ldbu	r2,0(r2)
   899ec:	10803fcc 	andi	r2,r2,255
   899f0:	108000e0 	cmpeqi	r2,r2,3
   899f4:	1000051e 	bne	r2,zero,89a0c <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   899f8:	e0fffe17 	ldw	r3,-8(fp)
   899fc:	00800044 	movi	r2,1
   89a00:	18800005 	stb	r2,0(r3)
        return (0);
   89a04:	e03fff15 	stw	zero,-4(fp)
   89a08:	00003a06 	br	89af4 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89a0c:	0005303a 	rdctl	r2,status
   89a10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89a14:	e0fff917 	ldw	r3,-28(fp)
   89a18:	00bfff84 	movi	r2,-2
   89a1c:	1884703a 	and	r2,r3,r2
   89a20:	1001703a 	wrctl	status,r2
  
  return context;
   89a24:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   89a28:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   89a2c:	e0bffc17 	ldw	r2,-16(fp)
   89a30:	10800283 	ldbu	r2,10(r2)
   89a34:	10803fcc 	andi	r2,r2,255
   89a38:	1005003a 	cmpeq	r2,r2,zero
   89a3c:	1000261e 	bne	r2,zero,89ad8 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
   89a40:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   89a44:	e0bffd03 	ldbu	r2,-12(fp)
   89a48:	10800060 	cmpeqi	r2,r2,1
   89a4c:	1000091e 	bne	r2,zero,89a74 <OSSemPendAbort+0xe4>
   89a50:	00000e06 	br	89a8c <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   89a54:	e13ffc17 	ldw	r4,-16(fp)
   89a58:	000b883a 	mov	r5,zero
   89a5c:	01800044 	movi	r6,1
   89a60:	01c00084 	movi	r7,2
   89a64:	0084b700 	call	84b70 <OS_EventTaskRdy>
                     nbr_tasks++;
   89a68:	e0bffb03 	ldbu	r2,-20(fp)
   89a6c:	10800044 	addi	r2,r2,1
   89a70:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   89a74:	e0bffc17 	ldw	r2,-16(fp)
   89a78:	10800283 	ldbu	r2,10(r2)
   89a7c:	10803fcc 	andi	r2,r2,255
   89a80:	1004c03a 	cmpne	r2,r2,zero
   89a84:	103ff31e 	bne	r2,zero,89a54 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   89a88:	00000806 	br	89aac <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   89a8c:	e13ffc17 	ldw	r4,-16(fp)
   89a90:	000b883a 	mov	r5,zero
   89a94:	01800044 	movi	r6,1
   89a98:	01c00084 	movi	r7,2
   89a9c:	0084b700 	call	84b70 <OS_EventTaskRdy>
                 nbr_tasks++;
   89aa0:	e0bffb03 	ldbu	r2,-20(fp)
   89aa4:	10800044 	addi	r2,r2,1
   89aa8:	e0bffb05 	stb	r2,-20(fp)
   89aac:	e0bffa17 	ldw	r2,-24(fp)
   89ab0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89ab4:	e0bff817 	ldw	r2,-32(fp)
   89ab8:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   89abc:	00855b00 	call	855b0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   89ac0:	e0fffe17 	ldw	r3,-8(fp)
   89ac4:	00800384 	movi	r2,14
   89ac8:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   89acc:	e0bffb03 	ldbu	r2,-20(fp)
   89ad0:	e0bfff15 	stw	r2,-4(fp)
   89ad4:	00000706 	br	89af4 <OSSemPendAbort+0x164>
   89ad8:	e0bffa17 	ldw	r2,-24(fp)
   89adc:	e0bff715 	stw	r2,-36(fp)
   89ae0:	e0bff717 	ldw	r2,-36(fp)
   89ae4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   89ae8:	e0bffe17 	ldw	r2,-8(fp)
   89aec:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   89af0:	e03fff15 	stw	zero,-4(fp)
   89af4:	e0bfff17 	ldw	r2,-4(fp)
}
   89af8:	e037883a 	mov	sp,fp
   89afc:	dfc00117 	ldw	ra,4(sp)
   89b00:	df000017 	ldw	fp,0(sp)
   89b04:	dec00204 	addi	sp,sp,8
   89b08:	f800283a 	ret

00089b0c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   89b0c:	defff704 	addi	sp,sp,-36
   89b10:	dfc00815 	stw	ra,32(sp)
   89b14:	df000715 	stw	fp,28(sp)
   89b18:	df000704 	addi	fp,sp,28
   89b1c:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   89b20:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   89b24:	e0bffe17 	ldw	r2,-8(fp)
   89b28:	1004c03a 	cmpne	r2,r2,zero
   89b2c:	1000031e 	bne	r2,zero,89b3c <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
   89b30:	00800104 	movi	r2,4
   89b34:	e0bfff15 	stw	r2,-4(fp)
   89b38:	00003806 	br	89c1c <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   89b3c:	e0bffe17 	ldw	r2,-8(fp)
   89b40:	10800003 	ldbu	r2,0(r2)
   89b44:	10803fcc 	andi	r2,r2,255
   89b48:	108000e0 	cmpeqi	r2,r2,3
   89b4c:	1000031e 	bne	r2,zero,89b5c <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
   89b50:	00800044 	movi	r2,1
   89b54:	e0bfff15 	stw	r2,-4(fp)
   89b58:	00003006 	br	89c1c <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89b5c:	0005303a 	rdctl	r2,status
   89b60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89b64:	e0fffc17 	ldw	r3,-16(fp)
   89b68:	00bfff84 	movi	r2,-2
   89b6c:	1884703a 	and	r2,r3,r2
   89b70:	1001703a 	wrctl	status,r2
  
  return context;
   89b74:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   89b78:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   89b7c:	e0bffe17 	ldw	r2,-8(fp)
   89b80:	10800283 	ldbu	r2,10(r2)
   89b84:	10803fcc 	andi	r2,r2,255
   89b88:	1005003a 	cmpeq	r2,r2,zero
   89b8c:	10000c1e 	bne	r2,zero,89bc0 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   89b90:	e13ffe17 	ldw	r4,-8(fp)
   89b94:	000b883a 	mov	r5,zero
   89b98:	01800044 	movi	r6,1
   89b9c:	000f883a 	mov	r7,zero
   89ba0:	0084b700 	call	84b70 <OS_EventTaskRdy>
   89ba4:	e0bffd17 	ldw	r2,-12(fp)
   89ba8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89bac:	e0bffb17 	ldw	r2,-20(fp)
   89bb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   89bb4:	00855b00 	call	855b0 <OS_Sched>
        return (OS_ERR_NONE);
   89bb8:	e03fff15 	stw	zero,-4(fp)
   89bbc:	00001706 	br	89c1c <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   89bc0:	e0bffe17 	ldw	r2,-8(fp)
   89bc4:	1080020b 	ldhu	r2,8(r2)
   89bc8:	10ffffcc 	andi	r3,r2,65535
   89bcc:	00bfffd4 	movui	r2,65535
   89bd0:	18800c26 	beq	r3,r2,89c04 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   89bd4:	e0bffe17 	ldw	r2,-8(fp)
   89bd8:	1080020b 	ldhu	r2,8(r2)
   89bdc:	10800044 	addi	r2,r2,1
   89be0:	1007883a 	mov	r3,r2
   89be4:	e0bffe17 	ldw	r2,-8(fp)
   89be8:	10c0020d 	sth	r3,8(r2)
   89bec:	e0bffd17 	ldw	r2,-12(fp)
   89bf0:	e0bffa15 	stw	r2,-24(fp)
   89bf4:	e0bffa17 	ldw	r2,-24(fp)
   89bf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   89bfc:	e03fff15 	stw	zero,-4(fp)
   89c00:	00000606 	br	89c1c <OSSemPost+0x110>
   89c04:	e0bffd17 	ldw	r2,-12(fp)
   89c08:	e0bff915 	stw	r2,-28(fp)
   89c0c:	e0bff917 	ldw	r2,-28(fp)
   89c10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   89c14:	00800c84 	movi	r2,50
   89c18:	e0bfff15 	stw	r2,-4(fp)
   89c1c:	e0bfff17 	ldw	r2,-4(fp)
}
   89c20:	e037883a 	mov	sp,fp
   89c24:	dfc00117 	ldw	ra,4(sp)
   89c28:	df000017 	ldw	fp,0(sp)
   89c2c:	dec00204 	addi	sp,sp,8
   89c30:	f800283a 	ret

00089c34 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   89c34:	defff604 	addi	sp,sp,-40
   89c38:	df000915 	stw	fp,36(sp)
   89c3c:	df000904 	addi	fp,sp,36
   89c40:	e13ffd15 	stw	r4,-12(fp)
   89c44:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   89c48:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   89c4c:	e0bffd17 	ldw	r2,-12(fp)
   89c50:	1004c03a 	cmpne	r2,r2,zero
   89c54:	1000031e 	bne	r2,zero,89c64 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   89c58:	00800104 	movi	r2,4
   89c5c:	e0bfff15 	stw	r2,-4(fp)
   89c60:	00003b06 	br	89d50 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   89c64:	e0bffe17 	ldw	r2,-8(fp)
   89c68:	1004c03a 	cmpne	r2,r2,zero
   89c6c:	1000031e 	bne	r2,zero,89c7c <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   89c70:	00800244 	movi	r2,9
   89c74:	e0bfff15 	stw	r2,-4(fp)
   89c78:	00003506 	br	89d50 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   89c7c:	e0bffd17 	ldw	r2,-12(fp)
   89c80:	10800003 	ldbu	r2,0(r2)
   89c84:	10803fcc 	andi	r2,r2,255
   89c88:	108000e0 	cmpeqi	r2,r2,3
   89c8c:	1000031e 	bne	r2,zero,89c9c <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   89c90:	00800044 	movi	r2,1
   89c94:	e0bfff15 	stw	r2,-4(fp)
   89c98:	00002d06 	br	89d50 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89c9c:	0005303a 	rdctl	r2,status
   89ca0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89ca4:	e0fff817 	ldw	r3,-32(fp)
   89ca8:	00bfff84 	movi	r2,-2
   89cac:	1884703a 	and	r2,r3,r2
   89cb0:	1001703a 	wrctl	status,r2
  
  return context;
   89cb4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   89cb8:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   89cbc:	e0bffd17 	ldw	r2,-12(fp)
   89cc0:	10c00283 	ldbu	r3,10(r2)
   89cc4:	e0bffe17 	ldw	r2,-8(fp)
   89cc8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   89ccc:	e0bffd17 	ldw	r2,-12(fp)
   89cd0:	108002c4 	addi	r2,r2,11
   89cd4:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   89cd8:	e0bffe17 	ldw	r2,-8(fp)
   89cdc:	10800084 	addi	r2,r2,2
   89ce0:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   89ce4:	e03ffa05 	stb	zero,-24(fp)
   89ce8:	00000d06 	br	89d20 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
   89cec:	e0bffc17 	ldw	r2,-16(fp)
   89cf0:	10c00003 	ldbu	r3,0(r2)
   89cf4:	e0bffb17 	ldw	r2,-20(fp)
   89cf8:	10c00005 	stb	r3,0(r2)
   89cfc:	e0bffb17 	ldw	r2,-20(fp)
   89d00:	10800044 	addi	r2,r2,1
   89d04:	e0bffb15 	stw	r2,-20(fp)
   89d08:	e0bffc17 	ldw	r2,-16(fp)
   89d0c:	10800044 	addi	r2,r2,1
   89d10:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   89d14:	e0bffa03 	ldbu	r2,-24(fp)
   89d18:	10800044 	addi	r2,r2,1
   89d1c:	e0bffa05 	stb	r2,-24(fp)
   89d20:	e0bffa03 	ldbu	r2,-24(fp)
   89d24:	108000f0 	cmpltui	r2,r2,3
   89d28:	103ff01e 	bne	r2,zero,89cec <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   89d2c:	e0bffd17 	ldw	r2,-12(fp)
   89d30:	10c0020b 	ldhu	r3,8(r2)
   89d34:	e0bffe17 	ldw	r2,-8(fp)
   89d38:	10c0000d 	sth	r3,0(r2)
   89d3c:	e0bff917 	ldw	r2,-28(fp)
   89d40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89d44:	e0bff717 	ldw	r2,-36(fp)
   89d48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   89d4c:	e03fff15 	stw	zero,-4(fp)
   89d50:	e0bfff17 	ldw	r2,-4(fp)
}
   89d54:	e037883a 	mov	sp,fp
   89d58:	df000017 	ldw	fp,0(sp)
   89d5c:	dec00104 	addi	sp,sp,4
   89d60:	f800283a 	ret

00089d64 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   89d64:	defff904 	addi	sp,sp,-28
   89d68:	df000615 	stw	fp,24(sp)
   89d6c:	df000604 	addi	fp,sp,24
   89d70:	e13ffd15 	stw	r4,-12(fp)
   89d74:	e1bfff15 	stw	r6,-4(fp)
   89d78:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   89d7c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   89d80:	e0bfff17 	ldw	r2,-4(fp)
   89d84:	1005003a 	cmpeq	r2,r2,zero
   89d88:	1000331e 	bne	r2,zero,89e58 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   89d8c:	e0bffd17 	ldw	r2,-12(fp)
   89d90:	1004c03a 	cmpne	r2,r2,zero
   89d94:	1000041e 	bne	r2,zero,89da8 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   89d98:	e0ffff17 	ldw	r3,-4(fp)
   89d9c:	00800104 	movi	r2,4
   89da0:	18800005 	stb	r2,0(r3)
        return;
   89da4:	00002c06 	br	89e58 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   89da8:	e0bffd17 	ldw	r2,-12(fp)
   89dac:	10800003 	ldbu	r2,0(r2)
   89db0:	10803fcc 	andi	r2,r2,255
   89db4:	108000e0 	cmpeqi	r2,r2,3
   89db8:	1000041e 	bne	r2,zero,89dcc <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   89dbc:	e0ffff17 	ldw	r3,-4(fp)
   89dc0:	00800044 	movi	r2,1
   89dc4:	18800005 	stb	r2,0(r3)
        return;
   89dc8:	00002306 	br	89e58 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89dcc:	0005303a 	rdctl	r2,status
   89dd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89dd4:	e0fffb17 	ldw	r3,-20(fp)
   89dd8:	00bfff84 	movi	r2,-2
   89ddc:	1884703a 	and	r2,r3,r2
   89de0:	1001703a 	wrctl	status,r2
  
  return context;
   89de4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   89de8:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
   89dec:	e0bfff17 	ldw	r2,-4(fp)
   89df0:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   89df4:	e0bffd17 	ldw	r2,-12(fp)
   89df8:	1080020b 	ldhu	r2,8(r2)
   89dfc:	10bfffcc 	andi	r2,r2,65535
   89e00:	1005003a 	cmpeq	r2,r2,zero
   89e04:	1000041e 	bne	r2,zero,89e18 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   89e08:	e0fffd17 	ldw	r3,-12(fp)
   89e0c:	e0bffe0b 	ldhu	r2,-8(fp)
   89e10:	1880020d 	sth	r2,8(r3)
   89e14:	00000c06 	br	89e48 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   89e18:	e0bffd17 	ldw	r2,-12(fp)
   89e1c:	10800283 	ldbu	r2,10(r2)
   89e20:	10803fcc 	andi	r2,r2,255
   89e24:	1004c03a 	cmpne	r2,r2,zero
   89e28:	1000041e 	bne	r2,zero,89e3c <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   89e2c:	e0fffd17 	ldw	r3,-12(fp)
   89e30:	e0bffe0b 	ldhu	r2,-8(fp)
   89e34:	1880020d 	sth	r2,8(r3)
   89e38:	00000306 	br	89e48 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   89e3c:	e0ffff17 	ldw	r3,-4(fp)
   89e40:	00801244 	movi	r2,73
   89e44:	18800005 	stb	r2,0(r3)
   89e48:	e0bffc17 	ldw	r2,-16(fp)
   89e4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89e50:	e0bffa17 	ldw	r2,-24(fp)
   89e54:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   89e58:	e037883a 	mov	sp,fp
   89e5c:	df000017 	ldw	fp,0(sp)
   89e60:	dec00104 	addi	sp,sp,4
   89e64:	f800283a 	ret

00089e68 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   89e68:	defff004 	addi	sp,sp,-64
   89e6c:	dfc00f15 	stw	ra,60(sp)
   89e70:	df000e15 	stw	fp,56(sp)
   89e74:	df000e04 	addi	fp,sp,56
   89e78:	e13ffd05 	stb	r4,-12(fp)
   89e7c:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   89e80:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   89e84:	e0bffd03 	ldbu	r2,-12(fp)
   89e88:	10800530 	cmpltui	r2,r2,20
   89e8c:	1000061e 	bne	r2,zero,89ea8 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
   89e90:	e0bffd03 	ldbu	r2,-12(fp)
   89e94:	10803fe0 	cmpeqi	r2,r2,255
   89e98:	1000031e 	bne	r2,zero,89ea8 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
   89e9c:	00800a84 	movi	r2,42
   89ea0:	e0bfff15 	stw	r2,-4(fp)
   89ea4:	00014706 	br	8a3c4 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   89ea8:	e0bffe03 	ldbu	r2,-8(fp)
   89eac:	10800530 	cmpltui	r2,r2,20
   89eb0:	1000031e 	bne	r2,zero,89ec0 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   89eb4:	00800a84 	movi	r2,42
   89eb8:	e0bfff15 	stw	r2,-4(fp)
   89ebc:	00014106 	br	8a3c4 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89ec0:	0005303a 	rdctl	r2,status
   89ec4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89ec8:	e0fff617 	ldw	r3,-40(fp)
   89ecc:	00bfff84 	movi	r2,-2
   89ed0:	1884703a 	and	r2,r3,r2
   89ed4:	1001703a 	wrctl	status,r2
  
  return context;
   89ed8:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   89edc:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   89ee0:	e0bffe03 	ldbu	r2,-8(fp)
   89ee4:	00c002b4 	movhi	r3,10
   89ee8:	18e63204 	addi	r3,r3,-26424
   89eec:	1085883a 	add	r2,r2,r2
   89ef0:	1085883a 	add	r2,r2,r2
   89ef4:	10c5883a 	add	r2,r2,r3
   89ef8:	10800017 	ldw	r2,0(r2)
   89efc:	1005003a 	cmpeq	r2,r2,zero
   89f00:	1000071e 	bne	r2,zero,89f20 <OSTaskChangePrio+0xb8>
   89f04:	e0bff717 	ldw	r2,-36(fp)
   89f08:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89f0c:	e0bff517 	ldw	r2,-44(fp)
   89f10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   89f14:	00800a04 	movi	r2,40
   89f18:	e0bfff15 	stw	r2,-4(fp)
   89f1c:	00012906 	br	8a3c4 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   89f20:	e0bffd03 	ldbu	r2,-12(fp)
   89f24:	10803fd8 	cmpnei	r2,r2,255
   89f28:	1000051e 	bne	r2,zero,89f40 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   89f2c:	00800274 	movhi	r2,9
   89f30:	1089ac04 	addi	r2,r2,9904
   89f34:	10800017 	ldw	r2,0(r2)
   89f38:	10800c83 	ldbu	r2,50(r2)
   89f3c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   89f40:	e0bffd03 	ldbu	r2,-12(fp)
   89f44:	00c002b4 	movhi	r3,10
   89f48:	18e63204 	addi	r3,r3,-26424
   89f4c:	1085883a 	add	r2,r2,r2
   89f50:	1085883a 	add	r2,r2,r2
   89f54:	10c5883a 	add	r2,r2,r3
   89f58:	10800017 	ldw	r2,0(r2)
   89f5c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   89f60:	e0bffa17 	ldw	r2,-24(fp)
   89f64:	1004c03a 	cmpne	r2,r2,zero
   89f68:	1000071e 	bne	r2,zero,89f88 <OSTaskChangePrio+0x120>
   89f6c:	e0bff717 	ldw	r2,-36(fp)
   89f70:	e0bff415 	stw	r2,-48(fp)
   89f74:	e0bff417 	ldw	r2,-48(fp)
   89f78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   89f7c:	00800a44 	movi	r2,41
   89f80:	e0bfff15 	stw	r2,-4(fp)
   89f84:	00010f06 	br	8a3c4 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   89f88:	e0bffa17 	ldw	r2,-24(fp)
   89f8c:	10800058 	cmpnei	r2,r2,1
   89f90:	1000071e 	bne	r2,zero,89fb0 <OSTaskChangePrio+0x148>
   89f94:	e0bff717 	ldw	r2,-36(fp)
   89f98:	e0bff315 	stw	r2,-52(fp)
   89f9c:	e0bff317 	ldw	r2,-52(fp)
   89fa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   89fa4:	008010c4 	movi	r2,67
   89fa8:	e0bfff15 	stw	r2,-4(fp)
   89fac:	00010506 	br	8a3c4 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   89fb0:	e0bffe03 	ldbu	r2,-8(fp)
   89fb4:	1004d0fa 	srli	r2,r2,3
   89fb8:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   89fbc:	e0bffe03 	ldbu	r2,-8(fp)
   89fc0:	108001cc 	andi	r2,r2,7
   89fc4:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
   89fc8:	e0fff983 	ldbu	r3,-26(fp)
   89fcc:	00800044 	movi	r2,1
   89fd0:	10c4983a 	sll	r2,r2,r3
   89fd4:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
   89fd8:	e0fff943 	ldbu	r3,-27(fp)
   89fdc:	00800044 	movi	r2,1
   89fe0:	10c4983a 	sll	r2,r2,r3
   89fe4:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   89fe8:	e0bffd03 	ldbu	r2,-12(fp)
   89fec:	00c002b4 	movhi	r3,10
   89ff0:	18e63204 	addi	r3,r3,-26424
   89ff4:	1085883a 	add	r2,r2,r2
   89ff8:	1085883a 	add	r2,r2,r2
   89ffc:	10c5883a 	add	r2,r2,r3
   8a000:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   8a004:	e0bffe03 	ldbu	r2,-8(fp)
   8a008:	00c002b4 	movhi	r3,10
   8a00c:	18e63204 	addi	r3,r3,-26424
   8a010:	1085883a 	add	r2,r2,r2
   8a014:	1085883a 	add	r2,r2,r2
   8a018:	10c7883a 	add	r3,r2,r3
   8a01c:	e0bffa17 	ldw	r2,-24(fp)
   8a020:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
   8a024:	e0bffa17 	ldw	r2,-24(fp)
   8a028:	10800d03 	ldbu	r2,52(r2)
   8a02c:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
   8a030:	e0bffa17 	ldw	r2,-24(fp)
   8a034:	10800d83 	ldbu	r2,54(r2)
   8a038:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   8a03c:	e0bffa17 	ldw	r2,-24(fp)
   8a040:	10800d43 	ldbu	r2,53(r2)
   8a044:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   8a048:	e0fff903 	ldbu	r3,-28(fp)
   8a04c:	00800274 	movhi	r2,9
   8a050:	1089a944 	addi	r2,r2,9893
   8a054:	10c5883a 	add	r2,r2,r3
   8a058:	10c00003 	ldbu	r3,0(r2)
   8a05c:	e0bff803 	ldbu	r2,-32(fp)
   8a060:	1884703a 	and	r2,r3,r2
   8a064:	10803fcc 	andi	r2,r2,255
   8a068:	1005003a 	cmpeq	r2,r2,zero
   8a06c:	1000381e 	bne	r2,zero,8a150 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
   8a070:	e13ff903 	ldbu	r4,-28(fp)
   8a074:	e0fff903 	ldbu	r3,-28(fp)
   8a078:	00800274 	movhi	r2,9
   8a07c:	1089a944 	addi	r2,r2,9893
   8a080:	10c5883a 	add	r2,r2,r3
   8a084:	10800003 	ldbu	r2,0(r2)
   8a088:	1007883a 	mov	r3,r2
   8a08c:	e0bff803 	ldbu	r2,-32(fp)
   8a090:	0084303a 	nor	r2,zero,r2
   8a094:	1884703a 	and	r2,r3,r2
   8a098:	1007883a 	mov	r3,r2
   8a09c:	00800274 	movhi	r2,9
   8a0a0:	1089a944 	addi	r2,r2,9893
   8a0a4:	1105883a 	add	r2,r2,r4
   8a0a8:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   8a0ac:	e0fff903 	ldbu	r3,-28(fp)
   8a0b0:	00800274 	movhi	r2,9
   8a0b4:	1089a944 	addi	r2,r2,9893
   8a0b8:	10c5883a 	add	r2,r2,r3
   8a0bc:	10800003 	ldbu	r2,0(r2)
   8a0c0:	10803fcc 	andi	r2,r2,255
   8a0c4:	1004c03a 	cmpne	r2,r2,zero
   8a0c8:	10000b1e 	bne	r2,zero,8a0f8 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
   8a0cc:	e0bff843 	ldbu	r2,-31(fp)
   8a0d0:	0084303a 	nor	r2,zero,r2
   8a0d4:	1007883a 	mov	r3,r2
   8a0d8:	00800274 	movhi	r2,9
   8a0dc:	1089a904 	addi	r2,r2,9892
   8a0e0:	10800003 	ldbu	r2,0(r2)
   8a0e4:	1884703a 	and	r2,r3,r2
   8a0e8:	1007883a 	mov	r3,r2
   8a0ec:	00800274 	movhi	r2,9
   8a0f0:	1089a904 	addi	r2,r2,9892
   8a0f4:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   8a0f8:	00800274 	movhi	r2,9
   8a0fc:	1089a904 	addi	r2,r2,9892
   8a100:	10c00003 	ldbu	r3,0(r2)
   8a104:	e0bff8c3 	ldbu	r2,-29(fp)
   8a108:	1884b03a 	or	r2,r3,r2
   8a10c:	1007883a 	mov	r3,r2
   8a110:	00800274 	movhi	r2,9
   8a114:	1089a904 	addi	r2,r2,9892
   8a118:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   8a11c:	e13ff983 	ldbu	r4,-26(fp)
   8a120:	e0fff983 	ldbu	r3,-26(fp)
   8a124:	00800274 	movhi	r2,9
   8a128:	1089a944 	addi	r2,r2,9893
   8a12c:	10c5883a 	add	r2,r2,r3
   8a130:	10c00003 	ldbu	r3,0(r2)
   8a134:	e0bff883 	ldbu	r2,-30(fp)
   8a138:	1884b03a 	or	r2,r3,r2
   8a13c:	1007883a 	mov	r3,r2
   8a140:	00800274 	movhi	r2,9
   8a144:	1089a944 	addi	r2,r2,9893
   8a148:	1105883a 	add	r2,r2,r4
   8a14c:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   8a150:	e0bffa17 	ldw	r2,-24(fp)
   8a154:	10800717 	ldw	r2,28(r2)
   8a158:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
   8a15c:	e0bffc17 	ldw	r2,-16(fp)
   8a160:	1005003a 	cmpeq	r2,r2,zero
   8a164:	1000341e 	bne	r2,zero,8a238 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   8a168:	e13ff903 	ldbu	r4,-28(fp)
   8a16c:	e0fff903 	ldbu	r3,-28(fp)
   8a170:	e0bffc17 	ldw	r2,-16(fp)
   8a174:	1885883a 	add	r2,r3,r2
   8a178:	10800204 	addi	r2,r2,8
   8a17c:	108000c3 	ldbu	r2,3(r2)
   8a180:	1007883a 	mov	r3,r2
   8a184:	e0bff803 	ldbu	r2,-32(fp)
   8a188:	0084303a 	nor	r2,zero,r2
   8a18c:	1884703a 	and	r2,r3,r2
   8a190:	1007883a 	mov	r3,r2
   8a194:	e0bffc17 	ldw	r2,-16(fp)
   8a198:	2085883a 	add	r2,r4,r2
   8a19c:	10800204 	addi	r2,r2,8
   8a1a0:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   8a1a4:	e0fff903 	ldbu	r3,-28(fp)
   8a1a8:	e0bffc17 	ldw	r2,-16(fp)
   8a1ac:	1885883a 	add	r2,r3,r2
   8a1b0:	10800204 	addi	r2,r2,8
   8a1b4:	108000c3 	ldbu	r2,3(r2)
   8a1b8:	10803fcc 	andi	r2,r2,255
   8a1bc:	1004c03a 	cmpne	r2,r2,zero
   8a1c0:	1000091e 	bne	r2,zero,8a1e8 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
   8a1c4:	e0bffc17 	ldw	r2,-16(fp)
   8a1c8:	10800283 	ldbu	r2,10(r2)
   8a1cc:	1007883a 	mov	r3,r2
   8a1d0:	e0bff843 	ldbu	r2,-31(fp)
   8a1d4:	0084303a 	nor	r2,zero,r2
   8a1d8:	1884703a 	and	r2,r3,r2
   8a1dc:	1007883a 	mov	r3,r2
   8a1e0:	e0bffc17 	ldw	r2,-16(fp)
   8a1e4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   8a1e8:	e0bffc17 	ldw	r2,-16(fp)
   8a1ec:	10c00283 	ldbu	r3,10(r2)
   8a1f0:	e0bff8c3 	ldbu	r2,-29(fp)
   8a1f4:	1884b03a 	or	r2,r3,r2
   8a1f8:	1007883a 	mov	r3,r2
   8a1fc:	e0bffc17 	ldw	r2,-16(fp)
   8a200:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   8a204:	e13ff983 	ldbu	r4,-26(fp)
   8a208:	e0fff983 	ldbu	r3,-26(fp)
   8a20c:	e0bffc17 	ldw	r2,-16(fp)
   8a210:	1885883a 	add	r2,r3,r2
   8a214:	10800204 	addi	r2,r2,8
   8a218:	10c000c3 	ldbu	r3,3(r2)
   8a21c:	e0bff883 	ldbu	r2,-30(fp)
   8a220:	1884b03a 	or	r2,r3,r2
   8a224:	1007883a 	mov	r3,r2
   8a228:	e0bffc17 	ldw	r2,-16(fp)
   8a22c:	2085883a 	add	r2,r4,r2
   8a230:	10800204 	addi	r2,r2,8
   8a234:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   8a238:	e0bffa17 	ldw	r2,-24(fp)
   8a23c:	10800817 	ldw	r2,32(r2)
   8a240:	1005003a 	cmpeq	r2,r2,zero
   8a244:	1000441e 	bne	r2,zero,8a358 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   8a248:	e0bffa17 	ldw	r2,-24(fp)
   8a24c:	10800817 	ldw	r2,32(r2)
   8a250:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
   8a254:	e0bffb17 	ldw	r2,-20(fp)
   8a258:	10800017 	ldw	r2,0(r2)
   8a25c:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
   8a260:	00003a06 	br	8a34c <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   8a264:	e13ff903 	ldbu	r4,-28(fp)
   8a268:	e0fff903 	ldbu	r3,-28(fp)
   8a26c:	e0bffc17 	ldw	r2,-16(fp)
   8a270:	1885883a 	add	r2,r3,r2
   8a274:	10800204 	addi	r2,r2,8
   8a278:	108000c3 	ldbu	r2,3(r2)
   8a27c:	1007883a 	mov	r3,r2
   8a280:	e0bff803 	ldbu	r2,-32(fp)
   8a284:	0084303a 	nor	r2,zero,r2
   8a288:	1884703a 	and	r2,r3,r2
   8a28c:	1007883a 	mov	r3,r2
   8a290:	e0bffc17 	ldw	r2,-16(fp)
   8a294:	2085883a 	add	r2,r4,r2
   8a298:	10800204 	addi	r2,r2,8
   8a29c:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   8a2a0:	e0fff903 	ldbu	r3,-28(fp)
   8a2a4:	e0bffc17 	ldw	r2,-16(fp)
   8a2a8:	1885883a 	add	r2,r3,r2
   8a2ac:	10800204 	addi	r2,r2,8
   8a2b0:	108000c3 	ldbu	r2,3(r2)
   8a2b4:	10803fcc 	andi	r2,r2,255
   8a2b8:	1004c03a 	cmpne	r2,r2,zero
   8a2bc:	1000091e 	bne	r2,zero,8a2e4 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
   8a2c0:	e0bffc17 	ldw	r2,-16(fp)
   8a2c4:	10800283 	ldbu	r2,10(r2)
   8a2c8:	1007883a 	mov	r3,r2
   8a2cc:	e0bff843 	ldbu	r2,-31(fp)
   8a2d0:	0084303a 	nor	r2,zero,r2
   8a2d4:	1884703a 	and	r2,r3,r2
   8a2d8:	1007883a 	mov	r3,r2
   8a2dc:	e0bffc17 	ldw	r2,-16(fp)
   8a2e0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   8a2e4:	e0bffc17 	ldw	r2,-16(fp)
   8a2e8:	10c00283 	ldbu	r3,10(r2)
   8a2ec:	e0bff8c3 	ldbu	r2,-29(fp)
   8a2f0:	1884b03a 	or	r2,r3,r2
   8a2f4:	1007883a 	mov	r3,r2
   8a2f8:	e0bffc17 	ldw	r2,-16(fp)
   8a2fc:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   8a300:	e13ff983 	ldbu	r4,-26(fp)
   8a304:	e0fff983 	ldbu	r3,-26(fp)
   8a308:	e0bffc17 	ldw	r2,-16(fp)
   8a30c:	1885883a 	add	r2,r3,r2
   8a310:	10800204 	addi	r2,r2,8
   8a314:	10c000c3 	ldbu	r3,3(r2)
   8a318:	e0bff883 	ldbu	r2,-30(fp)
   8a31c:	1884b03a 	or	r2,r3,r2
   8a320:	1007883a 	mov	r3,r2
   8a324:	e0bffc17 	ldw	r2,-16(fp)
   8a328:	2085883a 	add	r2,r4,r2
   8a32c:	10800204 	addi	r2,r2,8
   8a330:	10c000c5 	stb	r3,3(r2)
            pevents++;
   8a334:	e0bffb17 	ldw	r2,-20(fp)
   8a338:	10800104 	addi	r2,r2,4
   8a33c:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
   8a340:	e0bffb17 	ldw	r2,-20(fp)
   8a344:	10800017 	ldw	r2,0(r2)
   8a348:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   8a34c:	e0bffc17 	ldw	r2,-16(fp)
   8a350:	1004c03a 	cmpne	r2,r2,zero
   8a354:	103fc31e 	bne	r2,zero,8a264 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   8a358:	e0fffa17 	ldw	r3,-24(fp)
   8a35c:	e0bffe03 	ldbu	r2,-8(fp)
   8a360:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
   8a364:	e0fffa17 	ldw	r3,-24(fp)
   8a368:	e0bff983 	ldbu	r2,-26(fp)
   8a36c:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
   8a370:	e0fffa17 	ldw	r3,-24(fp)
   8a374:	e0bff943 	ldbu	r2,-27(fp)
   8a378:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
   8a37c:	e0fffa17 	ldw	r3,-24(fp)
   8a380:	e0bff8c3 	ldbu	r2,-29(fp)
   8a384:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
   8a388:	e0fffa17 	ldw	r3,-24(fp)
   8a38c:	e0bff883 	ldbu	r2,-30(fp)
   8a390:	18800d45 	stb	r2,53(r3)
   8a394:	e0bff717 	ldw	r2,-36(fp)
   8a398:	e0bff215 	stw	r2,-56(fp)
   8a39c:	e0bff217 	ldw	r2,-56(fp)
   8a3a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   8a3a4:	00800274 	movhi	r2,9
   8a3a8:	10899d44 	addi	r2,r2,9845
   8a3ac:	10800003 	ldbu	r2,0(r2)
   8a3b0:	10803fcc 	andi	r2,r2,255
   8a3b4:	10800058 	cmpnei	r2,r2,1
   8a3b8:	1000011e 	bne	r2,zero,8a3c0 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
   8a3bc:	00855b00 	call	855b0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   8a3c0:	e03fff15 	stw	zero,-4(fp)
   8a3c4:	e0bfff17 	ldw	r2,-4(fp)
}
   8a3c8:	e037883a 	mov	sp,fp
   8a3cc:	dfc00117 	ldw	ra,4(sp)
   8a3d0:	df000017 	ldw	fp,0(sp)
   8a3d4:	dec00204 	addi	sp,sp,8
   8a3d8:	f800283a 	ret

0008a3dc <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   8a3dc:	deffed04 	addi	sp,sp,-76
   8a3e0:	dfc01215 	stw	ra,72(sp)
   8a3e4:	df001115 	stw	fp,68(sp)
   8a3e8:	df001104 	addi	fp,sp,68
   8a3ec:	e13ffb15 	stw	r4,-20(fp)
   8a3f0:	e17ffc15 	stw	r5,-16(fp)
   8a3f4:	e1bffd15 	stw	r6,-12(fp)
   8a3f8:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   8a3fc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   8a400:	e0bffe03 	ldbu	r2,-8(fp)
   8a404:	10800570 	cmpltui	r2,r2,21
   8a408:	1000031e 	bne	r2,zero,8a418 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   8a40c:	00800a84 	movi	r2,42
   8a410:	e0bfff15 	stw	r2,-4(fp)
   8a414:	00006006 	br	8a598 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a418:	0005303a 	rdctl	r2,status
   8a41c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a420:	e0fff717 	ldw	r3,-36(fp)
   8a424:	00bfff84 	movi	r2,-2
   8a428:	1884703a 	and	r2,r3,r2
   8a42c:	1001703a 	wrctl	status,r2
  
  return context;
   8a430:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8a434:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   8a438:	00800274 	movhi	r2,9
   8a43c:	1089ab04 	addi	r2,r2,9900
   8a440:	10800003 	ldbu	r2,0(r2)
   8a444:	10803fcc 	andi	r2,r2,255
   8a448:	1005003a 	cmpeq	r2,r2,zero
   8a44c:	1000071e 	bne	r2,zero,8a46c <OSTaskCreate+0x90>
   8a450:	e0bff817 	ldw	r2,-32(fp)
   8a454:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a458:	e0bff617 	ldw	r2,-40(fp)
   8a45c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   8a460:	00800f04 	movi	r2,60
   8a464:	e0bfff15 	stw	r2,-4(fp)
   8a468:	00004b06 	br	8a598 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   8a46c:	e0bffe03 	ldbu	r2,-8(fp)
   8a470:	00c002b4 	movhi	r3,10
   8a474:	18e63204 	addi	r3,r3,-26424
   8a478:	1085883a 	add	r2,r2,r2
   8a47c:	1085883a 	add	r2,r2,r2
   8a480:	10c5883a 	add	r2,r2,r3
   8a484:	10800017 	ldw	r2,0(r2)
   8a488:	1004c03a 	cmpne	r2,r2,zero
   8a48c:	10003c1e 	bne	r2,zero,8a580 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   8a490:	e0bffe03 	ldbu	r2,-8(fp)
   8a494:	00c002b4 	movhi	r3,10
   8a498:	18e63204 	addi	r3,r3,-26424
   8a49c:	1085883a 	add	r2,r2,r2
   8a4a0:	1085883a 	add	r2,r2,r2
   8a4a4:	10c7883a 	add	r3,r2,r3
   8a4a8:	00800044 	movi	r2,1
   8a4ac:	18800015 	stw	r2,0(r3)
   8a4b0:	e0bff817 	ldw	r2,-32(fp)
   8a4b4:	e0bff515 	stw	r2,-44(fp)
   8a4b8:	e0bff517 	ldw	r2,-44(fp)
   8a4bc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   8a4c0:	e13ffb17 	ldw	r4,-20(fp)
   8a4c4:	e17ffc17 	ldw	r5,-16(fp)
   8a4c8:	e1bffd17 	ldw	r6,-12(fp)
   8a4cc:	000f883a 	mov	r7,zero
   8a4d0:	008e2a80 	call	8e2a8 <OSTaskStkInit>
   8a4d4:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   8a4d8:	e13ffe03 	ldbu	r4,-8(fp)
   8a4dc:	d8000015 	stw	zero,0(sp)
   8a4e0:	d8000115 	stw	zero,4(sp)
   8a4e4:	d8000215 	stw	zero,8(sp)
   8a4e8:	e17ffa17 	ldw	r5,-24(fp)
   8a4ec:	000d883a 	mov	r6,zero
   8a4f0:	000f883a 	mov	r7,zero
   8a4f4:	00859b80 	call	859b8 <OS_TCBInit>
   8a4f8:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
   8a4fc:	e0bff903 	ldbu	r2,-28(fp)
   8a500:	1004c03a 	cmpne	r2,r2,zero
   8a504:	1000081e 	bne	r2,zero,8a528 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   8a508:	00800274 	movhi	r2,9
   8a50c:	10899d44 	addi	r2,r2,9845
   8a510:	10800003 	ldbu	r2,0(r2)
   8a514:	10803fcc 	andi	r2,r2,255
   8a518:	10800058 	cmpnei	r2,r2,1
   8a51c:	1000151e 	bne	r2,zero,8a574 <OSTaskCreate+0x198>
                OS_Sched();
   8a520:	00855b00 	call	855b0 <OS_Sched>
   8a524:	00001306 	br	8a574 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a528:	0005303a 	rdctl	r2,status
   8a52c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a530:	e0fff417 	ldw	r3,-48(fp)
   8a534:	00bfff84 	movi	r2,-2
   8a538:	1884703a 	and	r2,r3,r2
   8a53c:	1001703a 	wrctl	status,r2
  
  return context;
   8a540:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   8a544:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   8a548:	e0bffe03 	ldbu	r2,-8(fp)
   8a54c:	00c002b4 	movhi	r3,10
   8a550:	18e63204 	addi	r3,r3,-26424
   8a554:	1085883a 	add	r2,r2,r2
   8a558:	1085883a 	add	r2,r2,r2
   8a55c:	10c5883a 	add	r2,r2,r3
   8a560:	10000015 	stw	zero,0(r2)
   8a564:	e0bff817 	ldw	r2,-32(fp)
   8a568:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a56c:	e0bff317 	ldw	r2,-52(fp)
   8a570:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   8a574:	e0bff903 	ldbu	r2,-28(fp)
   8a578:	e0bfff15 	stw	r2,-4(fp)
   8a57c:	00000606 	br	8a598 <OSTaskCreate+0x1bc>
   8a580:	e0bff817 	ldw	r2,-32(fp)
   8a584:	e0bff215 	stw	r2,-56(fp)
   8a588:	e0bff217 	ldw	r2,-56(fp)
   8a58c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   8a590:	00800a04 	movi	r2,40
   8a594:	e0bfff15 	stw	r2,-4(fp)
   8a598:	e0bfff17 	ldw	r2,-4(fp)
}
   8a59c:	e037883a 	mov	sp,fp
   8a5a0:	dfc00117 	ldw	ra,4(sp)
   8a5a4:	df000017 	ldw	fp,0(sp)
   8a5a8:	dec00204 	addi	sp,sp,8
   8a5ac:	f800283a 	ret

0008a5b0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   8a5b0:	deffeb04 	addi	sp,sp,-84
   8a5b4:	dfc01415 	stw	ra,80(sp)
   8a5b8:	df001315 	stw	fp,76(sp)
   8a5bc:	df001304 	addi	fp,sp,76
   8a5c0:	e13ff915 	stw	r4,-28(fp)
   8a5c4:	e17ffa15 	stw	r5,-24(fp)
   8a5c8:	e1bffb15 	stw	r6,-20(fp)
   8a5cc:	e0800217 	ldw	r2,8(fp)
   8a5d0:	e0c00617 	ldw	r3,24(fp)
   8a5d4:	e1fffc05 	stb	r7,-16(fp)
   8a5d8:	e0bffd0d 	sth	r2,-12(fp)
   8a5dc:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   8a5e0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   8a5e4:	e0bffc03 	ldbu	r2,-16(fp)
   8a5e8:	10800570 	cmpltui	r2,r2,21
   8a5ec:	1000031e 	bne	r2,zero,8a5fc <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   8a5f0:	00800a84 	movi	r2,42
   8a5f4:	e0bfff15 	stw	r2,-4(fp)
   8a5f8:	00006706 	br	8a798 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a5fc:	0005303a 	rdctl	r2,status
   8a600:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a604:	e0fff517 	ldw	r3,-44(fp)
   8a608:	00bfff84 	movi	r2,-2
   8a60c:	1884703a 	and	r2,r3,r2
   8a610:	1001703a 	wrctl	status,r2
  
  return context;
   8a614:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8a618:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   8a61c:	00800274 	movhi	r2,9
   8a620:	1089ab04 	addi	r2,r2,9900
   8a624:	10800003 	ldbu	r2,0(r2)
   8a628:	10803fcc 	andi	r2,r2,255
   8a62c:	1005003a 	cmpeq	r2,r2,zero
   8a630:	1000071e 	bne	r2,zero,8a650 <OSTaskCreateExt+0xa0>
   8a634:	e0bff617 	ldw	r2,-40(fp)
   8a638:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a63c:	e0bff417 	ldw	r2,-48(fp)
   8a640:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   8a644:	00800f04 	movi	r2,60
   8a648:	e0bfff15 	stw	r2,-4(fp)
   8a64c:	00005206 	br	8a798 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   8a650:	e0bffc03 	ldbu	r2,-16(fp)
   8a654:	00c002b4 	movhi	r3,10
   8a658:	18e63204 	addi	r3,r3,-26424
   8a65c:	1085883a 	add	r2,r2,r2
   8a660:	1085883a 	add	r2,r2,r2
   8a664:	10c5883a 	add	r2,r2,r3
   8a668:	10800017 	ldw	r2,0(r2)
   8a66c:	1004c03a 	cmpne	r2,r2,zero
   8a670:	1000431e 	bne	r2,zero,8a780 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   8a674:	e0bffc03 	ldbu	r2,-16(fp)
   8a678:	00c002b4 	movhi	r3,10
   8a67c:	18e63204 	addi	r3,r3,-26424
   8a680:	1085883a 	add	r2,r2,r2
   8a684:	1085883a 	add	r2,r2,r2
   8a688:	10c7883a 	add	r3,r2,r3
   8a68c:	00800044 	movi	r2,1
   8a690:	18800015 	stw	r2,0(r3)
   8a694:	e0bff617 	ldw	r2,-40(fp)
   8a698:	e0bff315 	stw	r2,-52(fp)
   8a69c:	e0bff317 	ldw	r2,-52(fp)
   8a6a0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   8a6a4:	e1bffe0b 	ldhu	r6,-8(fp)
   8a6a8:	e1000317 	ldw	r4,12(fp)
   8a6ac:	e1400417 	ldw	r5,16(fp)
   8a6b0:	008b82c0 	call	8b82c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   8a6b4:	e1fffe0b 	ldhu	r7,-8(fp)
   8a6b8:	e13ff917 	ldw	r4,-28(fp)
   8a6bc:	e17ffa17 	ldw	r5,-24(fp)
   8a6c0:	e1bffb17 	ldw	r6,-20(fp)
   8a6c4:	008e2a80 	call	8e2a8 <OSTaskStkInit>
   8a6c8:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   8a6cc:	e13ffc03 	ldbu	r4,-16(fp)
   8a6d0:	e1fffd0b 	ldhu	r7,-12(fp)
   8a6d4:	e0fffe0b 	ldhu	r3,-8(fp)
   8a6d8:	e0800417 	ldw	r2,16(fp)
   8a6dc:	d8800015 	stw	r2,0(sp)
   8a6e0:	e0800517 	ldw	r2,20(fp)
   8a6e4:	d8800115 	stw	r2,4(sp)
   8a6e8:	d8c00215 	stw	r3,8(sp)
   8a6ec:	e17ff817 	ldw	r5,-32(fp)
   8a6f0:	e1800317 	ldw	r6,12(fp)
   8a6f4:	00859b80 	call	859b8 <OS_TCBInit>
   8a6f8:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
   8a6fc:	e0bff703 	ldbu	r2,-36(fp)
   8a700:	1004c03a 	cmpne	r2,r2,zero
   8a704:	1000081e 	bne	r2,zero,8a728 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   8a708:	00800274 	movhi	r2,9
   8a70c:	10899d44 	addi	r2,r2,9845
   8a710:	10800003 	ldbu	r2,0(r2)
   8a714:	10803fcc 	andi	r2,r2,255
   8a718:	10800058 	cmpnei	r2,r2,1
   8a71c:	1000151e 	bne	r2,zero,8a774 <OSTaskCreateExt+0x1c4>
                OS_Sched();
   8a720:	00855b00 	call	855b0 <OS_Sched>
   8a724:	00001306 	br	8a774 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a728:	0005303a 	rdctl	r2,status
   8a72c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a730:	e0fff217 	ldw	r3,-56(fp)
   8a734:	00bfff84 	movi	r2,-2
   8a738:	1884703a 	and	r2,r3,r2
   8a73c:	1001703a 	wrctl	status,r2
  
  return context;
   8a740:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   8a744:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   8a748:	e0bffc03 	ldbu	r2,-16(fp)
   8a74c:	00c002b4 	movhi	r3,10
   8a750:	18e63204 	addi	r3,r3,-26424
   8a754:	1085883a 	add	r2,r2,r2
   8a758:	1085883a 	add	r2,r2,r2
   8a75c:	10c5883a 	add	r2,r2,r3
   8a760:	10000015 	stw	zero,0(r2)
   8a764:	e0bff617 	ldw	r2,-40(fp)
   8a768:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a76c:	e0bff117 	ldw	r2,-60(fp)
   8a770:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   8a774:	e0bff703 	ldbu	r2,-36(fp)
   8a778:	e0bfff15 	stw	r2,-4(fp)
   8a77c:	00000606 	br	8a798 <OSTaskCreateExt+0x1e8>
   8a780:	e0bff617 	ldw	r2,-40(fp)
   8a784:	e0bff015 	stw	r2,-64(fp)
   8a788:	e0bff017 	ldw	r2,-64(fp)
   8a78c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   8a790:	00800a04 	movi	r2,40
   8a794:	e0bfff15 	stw	r2,-4(fp)
   8a798:	e0bfff17 	ldw	r2,-4(fp)
}
   8a79c:	e037883a 	mov	sp,fp
   8a7a0:	dfc00117 	ldw	ra,4(sp)
   8a7a4:	df000017 	ldw	fp,0(sp)
   8a7a8:	dec00204 	addi	sp,sp,8
   8a7ac:	f800283a 	ret

0008a7b0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   8a7b0:	defff304 	addi	sp,sp,-52
   8a7b4:	dfc00c15 	stw	ra,48(sp)
   8a7b8:	df000b15 	stw	fp,44(sp)
   8a7bc:	df000b04 	addi	fp,sp,44
   8a7c0:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   8a7c4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   8a7c8:	00800274 	movhi	r2,9
   8a7cc:	1089ab04 	addi	r2,r2,9900
   8a7d0:	10800003 	ldbu	r2,0(r2)
   8a7d4:	10803fcc 	andi	r2,r2,255
   8a7d8:	1005003a 	cmpeq	r2,r2,zero
   8a7dc:	1000031e 	bne	r2,zero,8a7ec <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
   8a7e0:	00801004 	movi	r2,64
   8a7e4:	e0bfff15 	stw	r2,-4(fp)
   8a7e8:	0000ee06 	br	8aba4 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   8a7ec:	e0bffe03 	ldbu	r2,-8(fp)
   8a7f0:	10800518 	cmpnei	r2,r2,20
   8a7f4:	1000031e 	bne	r2,zero,8a804 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
   8a7f8:	00800f84 	movi	r2,62
   8a7fc:	e0bfff15 	stw	r2,-4(fp)
   8a800:	0000e806 	br	8aba4 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   8a804:	e0bffe03 	ldbu	r2,-8(fp)
   8a808:	10800530 	cmpltui	r2,r2,20
   8a80c:	1000061e 	bne	r2,zero,8a828 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
   8a810:	e0bffe03 	ldbu	r2,-8(fp)
   8a814:	10803fe0 	cmpeqi	r2,r2,255
   8a818:	1000031e 	bne	r2,zero,8a828 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
   8a81c:	00800a84 	movi	r2,42
   8a820:	e0bfff15 	stw	r2,-4(fp)
   8a824:	0000df06 	br	8aba4 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a828:	0005303a 	rdctl	r2,status
   8a82c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a830:	e0fffa17 	ldw	r3,-24(fp)
   8a834:	00bfff84 	movi	r2,-2
   8a838:	1884703a 	and	r2,r3,r2
   8a83c:	1001703a 	wrctl	status,r2
  
  return context;
   8a840:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   8a844:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   8a848:	e0bffe03 	ldbu	r2,-8(fp)
   8a84c:	10803fd8 	cmpnei	r2,r2,255
   8a850:	1000051e 	bne	r2,zero,8a868 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   8a854:	00800274 	movhi	r2,9
   8a858:	1089ac04 	addi	r2,r2,9904
   8a85c:	10800017 	ldw	r2,0(r2)
   8a860:	10800c83 	ldbu	r2,50(r2)
   8a864:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   8a868:	e0bffe03 	ldbu	r2,-8(fp)
   8a86c:	00c002b4 	movhi	r3,10
   8a870:	18e63204 	addi	r3,r3,-26424
   8a874:	1085883a 	add	r2,r2,r2
   8a878:	1085883a 	add	r2,r2,r2
   8a87c:	10c5883a 	add	r2,r2,r3
   8a880:	10800017 	ldw	r2,0(r2)
   8a884:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   8a888:	e0bffc17 	ldw	r2,-16(fp)
   8a88c:	1004c03a 	cmpne	r2,r2,zero
   8a890:	1000071e 	bne	r2,zero,8a8b0 <OSTaskDel+0x100>
   8a894:	e0bffb17 	ldw	r2,-20(fp)
   8a898:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a89c:	e0bff917 	ldw	r2,-28(fp)
   8a8a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   8a8a4:	008010c4 	movi	r2,67
   8a8a8:	e0bfff15 	stw	r2,-4(fp)
   8a8ac:	0000bd06 	br	8aba4 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   8a8b0:	e0bffc17 	ldw	r2,-16(fp)
   8a8b4:	10800058 	cmpnei	r2,r2,1
   8a8b8:	1000071e 	bne	r2,zero,8a8d8 <OSTaskDel+0x128>
   8a8bc:	e0bffb17 	ldw	r2,-20(fp)
   8a8c0:	e0bff815 	stw	r2,-32(fp)
   8a8c4:	e0bff817 	ldw	r2,-32(fp)
   8a8c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   8a8cc:	00800f44 	movi	r2,61
   8a8d0:	e0bfff15 	stw	r2,-4(fp)
   8a8d4:	0000b306 	br	8aba4 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   8a8d8:	e0bffc17 	ldw	r2,-16(fp)
   8a8dc:	10800d03 	ldbu	r2,52(r2)
   8a8e0:	11003fcc 	andi	r4,r2,255
   8a8e4:	e0bffc17 	ldw	r2,-16(fp)
   8a8e8:	10800d03 	ldbu	r2,52(r2)
   8a8ec:	10c03fcc 	andi	r3,r2,255
   8a8f0:	00800274 	movhi	r2,9
   8a8f4:	1089a944 	addi	r2,r2,9893
   8a8f8:	10c5883a 	add	r2,r2,r3
   8a8fc:	10800003 	ldbu	r2,0(r2)
   8a900:	1007883a 	mov	r3,r2
   8a904:	e0bffc17 	ldw	r2,-16(fp)
   8a908:	10800d43 	ldbu	r2,53(r2)
   8a90c:	0084303a 	nor	r2,zero,r2
   8a910:	1884703a 	and	r2,r3,r2
   8a914:	1007883a 	mov	r3,r2
   8a918:	00800274 	movhi	r2,9
   8a91c:	1089a944 	addi	r2,r2,9893
   8a920:	1105883a 	add	r2,r2,r4
   8a924:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   8a928:	e0bffc17 	ldw	r2,-16(fp)
   8a92c:	10800d03 	ldbu	r2,52(r2)
   8a930:	10c03fcc 	andi	r3,r2,255
   8a934:	00800274 	movhi	r2,9
   8a938:	1089a944 	addi	r2,r2,9893
   8a93c:	10c5883a 	add	r2,r2,r3
   8a940:	10800003 	ldbu	r2,0(r2)
   8a944:	10803fcc 	andi	r2,r2,255
   8a948:	1004c03a 	cmpne	r2,r2,zero
   8a94c:	10000c1e 	bne	r2,zero,8a980 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   8a950:	e0bffc17 	ldw	r2,-16(fp)
   8a954:	10800d83 	ldbu	r2,54(r2)
   8a958:	0084303a 	nor	r2,zero,r2
   8a95c:	1007883a 	mov	r3,r2
   8a960:	00800274 	movhi	r2,9
   8a964:	1089a904 	addi	r2,r2,9892
   8a968:	10800003 	ldbu	r2,0(r2)
   8a96c:	1884703a 	and	r2,r3,r2
   8a970:	1007883a 	mov	r3,r2
   8a974:	00800274 	movhi	r2,9
   8a978:	1089a904 	addi	r2,r2,9892
   8a97c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   8a980:	e0bffc17 	ldw	r2,-16(fp)
   8a984:	10800717 	ldw	r2,28(r2)
   8a988:	1005003a 	cmpeq	r2,r2,zero
   8a98c:	1000041e 	bne	r2,zero,8a9a0 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   8a990:	e0bffc17 	ldw	r2,-16(fp)
   8a994:	11400717 	ldw	r5,28(r2)
   8a998:	e13ffc17 	ldw	r4,-16(fp)
   8a99c:	0084f680 	call	84f68 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   8a9a0:	e0bffc17 	ldw	r2,-16(fp)
   8a9a4:	10800817 	ldw	r2,32(r2)
   8a9a8:	1005003a 	cmpeq	r2,r2,zero
   8a9ac:	1000041e 	bne	r2,zero,8a9c0 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   8a9b0:	e0bffc17 	ldw	r2,-16(fp)
   8a9b4:	11400817 	ldw	r5,32(r2)
   8a9b8:	e13ffc17 	ldw	r4,-16(fp)
   8a9bc:	00850200 	call	85020 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   8a9c0:	e0bffc17 	ldw	r2,-16(fp)
   8a9c4:	10800a17 	ldw	r2,40(r2)
   8a9c8:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   8a9cc:	e0bffd17 	ldw	r2,-12(fp)
   8a9d0:	1005003a 	cmpeq	r2,r2,zero
   8a9d4:	1000021e 	bne	r2,zero,8a9e0 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   8a9d8:	e13ffd17 	ldw	r4,-12(fp)
   8a9dc:	00876b40 	call	876b4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   8a9e0:	e0bffc17 	ldw	r2,-16(fp)
   8a9e4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   8a9e8:	e0bffc17 	ldw	r2,-16(fp)
   8a9ec:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   8a9f0:	e0bffc17 	ldw	r2,-16(fp)
   8a9f4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   8a9f8:	00800274 	movhi	r2,9
   8a9fc:	10899d04 	addi	r2,r2,9844
   8aa00:	10800003 	ldbu	r2,0(r2)
   8aa04:	10803fcc 	andi	r2,r2,255
   8aa08:	10803fe0 	cmpeqi	r2,r2,255
   8aa0c:	1000081e 	bne	r2,zero,8aa30 <OSTaskDel+0x280>
        OSLockNesting++;
   8aa10:	00800274 	movhi	r2,9
   8aa14:	10899d04 	addi	r2,r2,9844
   8aa18:	10800003 	ldbu	r2,0(r2)
   8aa1c:	10800044 	addi	r2,r2,1
   8aa20:	1007883a 	mov	r3,r2
   8aa24:	00800274 	movhi	r2,9
   8aa28:	10899d04 	addi	r2,r2,9844
   8aa2c:	10c00005 	stb	r3,0(r2)
   8aa30:	e0bffb17 	ldw	r2,-20(fp)
   8aa34:	e0bff715 	stw	r2,-36(fp)
   8aa38:	e0bff717 	ldw	r2,-36(fp)
   8aa3c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   8aa40:	0084b540 	call	84b54 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8aa44:	0005303a 	rdctl	r2,status
   8aa48:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8aa4c:	e0fff617 	ldw	r3,-40(fp)
   8aa50:	00bfff84 	movi	r2,-2
   8aa54:	1884703a 	and	r2,r3,r2
   8aa58:	1001703a 	wrctl	status,r2
  
  return context;
   8aa5c:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   8aa60:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   8aa64:	00800274 	movhi	r2,9
   8aa68:	10899d04 	addi	r2,r2,9844
   8aa6c:	10800003 	ldbu	r2,0(r2)
   8aa70:	10803fcc 	andi	r2,r2,255
   8aa74:	1005003a 	cmpeq	r2,r2,zero
   8aa78:	1000081e 	bne	r2,zero,8aa9c <OSTaskDel+0x2ec>
        OSLockNesting--;
   8aa7c:	00800274 	movhi	r2,9
   8aa80:	10899d04 	addi	r2,r2,9844
   8aa84:	10800003 	ldbu	r2,0(r2)
   8aa88:	10bfffc4 	addi	r2,r2,-1
   8aa8c:	1007883a 	mov	r3,r2
   8aa90:	00800274 	movhi	r2,9
   8aa94:	10899d04 	addi	r2,r2,9844
   8aa98:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   8aa9c:	e13ffc17 	ldw	r4,-16(fp)
   8aaa0:	008e5d80 	call	8e5d8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   8aaa4:	00800274 	movhi	r2,9
   8aaa8:	1089a544 	addi	r2,r2,9877
   8aaac:	10800003 	ldbu	r2,0(r2)
   8aab0:	10bfffc4 	addi	r2,r2,-1
   8aab4:	1007883a 	mov	r3,r2
   8aab8:	00800274 	movhi	r2,9
   8aabc:	1089a544 	addi	r2,r2,9877
   8aac0:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   8aac4:	e0bffe03 	ldbu	r2,-8(fp)
   8aac8:	00c002b4 	movhi	r3,10
   8aacc:	18e63204 	addi	r3,r3,-26424
   8aad0:	1085883a 	add	r2,r2,r2
   8aad4:	1085883a 	add	r2,r2,r2
   8aad8:	10c5883a 	add	r2,r2,r3
   8aadc:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   8aae0:	e0bffc17 	ldw	r2,-16(fp)
   8aae4:	10800617 	ldw	r2,24(r2)
   8aae8:	1004c03a 	cmpne	r2,r2,zero
   8aaec:	1000091e 	bne	r2,zero,8ab14 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   8aaf0:	e0bffc17 	ldw	r2,-16(fp)
   8aaf4:	10800517 	ldw	r2,20(r2)
   8aaf8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   8aafc:	e0bffc17 	ldw	r2,-16(fp)
   8ab00:	10c00517 	ldw	r3,20(r2)
   8ab04:	00800274 	movhi	r2,9
   8ab08:	1089a004 	addi	r2,r2,9856
   8ab0c:	10c00015 	stw	r3,0(r2)
   8ab10:	00000a06 	br	8ab3c <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   8ab14:	e0bffc17 	ldw	r2,-16(fp)
   8ab18:	10c00617 	ldw	r3,24(r2)
   8ab1c:	e0bffc17 	ldw	r2,-16(fp)
   8ab20:	10800517 	ldw	r2,20(r2)
   8ab24:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   8ab28:	e0bffc17 	ldw	r2,-16(fp)
   8ab2c:	10c00517 	ldw	r3,20(r2)
   8ab30:	e0bffc17 	ldw	r2,-16(fp)
   8ab34:	10800617 	ldw	r2,24(r2)
   8ab38:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   8ab3c:	00800274 	movhi	r2,9
   8ab40:	1089a404 	addi	r2,r2,9872
   8ab44:	10c00017 	ldw	r3,0(r2)
   8ab48:	e0bffc17 	ldw	r2,-16(fp)
   8ab4c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   8ab50:	00c00274 	movhi	r3,9
   8ab54:	18c9a404 	addi	r3,r3,9872
   8ab58:	e0bffc17 	ldw	r2,-16(fp)
   8ab5c:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   8ab60:	e0fffc17 	ldw	r3,-16(fp)
   8ab64:	00800fc4 	movi	r2,63
   8ab68:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   8ab6c:	e0bffc17 	ldw	r2,-16(fp)
   8ab70:	10001345 	stb	zero,77(r2)
   8ab74:	e0bffb17 	ldw	r2,-20(fp)
   8ab78:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ab7c:	e0bff517 	ldw	r2,-44(fp)
   8ab80:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   8ab84:	00800274 	movhi	r2,9
   8ab88:	10899d44 	addi	r2,r2,9845
   8ab8c:	10800003 	ldbu	r2,0(r2)
   8ab90:	10803fcc 	andi	r2,r2,255
   8ab94:	10800058 	cmpnei	r2,r2,1
   8ab98:	1000011e 	bne	r2,zero,8aba0 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
   8ab9c:	00855b00 	call	855b0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   8aba0:	e03fff15 	stw	zero,-4(fp)
   8aba4:	e0bfff17 	ldw	r2,-4(fp)
}
   8aba8:	e037883a 	mov	sp,fp
   8abac:	dfc00117 	ldw	ra,4(sp)
   8abb0:	df000017 	ldw	fp,0(sp)
   8abb4:	dec00204 	addi	sp,sp,8
   8abb8:	f800283a 	ret

0008abbc <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   8abbc:	defff404 	addi	sp,sp,-48
   8abc0:	df000b15 	stw	fp,44(sp)
   8abc4:	df000b04 	addi	fp,sp,44
   8abc8:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8abcc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   8abd0:	e0bffe03 	ldbu	r2,-8(fp)
   8abd4:	10800518 	cmpnei	r2,r2,20
   8abd8:	1000031e 	bne	r2,zero,8abe8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   8abdc:	00800f84 	movi	r2,62
   8abe0:	e0bfff15 	stw	r2,-4(fp)
   8abe4:	00004c06 	br	8ad18 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   8abe8:	e0bffe03 	ldbu	r2,-8(fp)
   8abec:	10800530 	cmpltui	r2,r2,20
   8abf0:	1000061e 	bne	r2,zero,8ac0c <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
   8abf4:	e0bffe03 	ldbu	r2,-8(fp)
   8abf8:	10803fe0 	cmpeqi	r2,r2,255
   8abfc:	1000031e 	bne	r2,zero,8ac0c <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
   8ac00:	00800a84 	movi	r2,42
   8ac04:	e0bfff15 	stw	r2,-4(fp)
   8ac08:	00004306 	br	8ad18 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   8ac0c:	e0bffe03 	ldbu	r2,-8(fp)
   8ac10:	10803fd8 	cmpnei	r2,r2,255
   8ac14:	1000141e 	bne	r2,zero,8ac68 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ac18:	0005303a 	rdctl	r2,status
   8ac1c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ac20:	e0fffa17 	ldw	r3,-24(fp)
   8ac24:	00bfff84 	movi	r2,-2
   8ac28:	1884703a 	and	r2,r3,r2
   8ac2c:	1001703a 	wrctl	status,r2
  
  return context;
   8ac30:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   8ac34:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   8ac38:	00800274 	movhi	r2,9
   8ac3c:	1089ac04 	addi	r2,r2,9904
   8ac40:	10800017 	ldw	r2,0(r2)
   8ac44:	10800dc3 	ldbu	r2,55(r2)
   8ac48:	e0bffd05 	stb	r2,-12(fp)
   8ac4c:	e0bffb17 	ldw	r2,-20(fp)
   8ac50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ac54:	e0bff917 	ldw	r2,-28(fp)
   8ac58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   8ac5c:	e0bffd03 	ldbu	r2,-12(fp)
   8ac60:	e0bfff15 	stw	r2,-4(fp)
   8ac64:	00002c06 	br	8ad18 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ac68:	0005303a 	rdctl	r2,status
   8ac6c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ac70:	e0fff817 	ldw	r3,-32(fp)
   8ac74:	00bfff84 	movi	r2,-2
   8ac78:	1884703a 	and	r2,r3,r2
   8ac7c:	1001703a 	wrctl	status,r2
  
  return context;
   8ac80:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   8ac84:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
   8ac88:	e0bffe03 	ldbu	r2,-8(fp)
   8ac8c:	00c002b4 	movhi	r3,10
   8ac90:	18e63204 	addi	r3,r3,-26424
   8ac94:	1085883a 	add	r2,r2,r2
   8ac98:	1085883a 	add	r2,r2,r2
   8ac9c:	10c5883a 	add	r2,r2,r3
   8aca0:	10800017 	ldw	r2,0(r2)
   8aca4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   8aca8:	e0bffc17 	ldw	r2,-16(fp)
   8acac:	1004c03a 	cmpne	r2,r2,zero
   8acb0:	1000071e 	bne	r2,zero,8acd0 <OSTaskDelReq+0x114>
   8acb4:	e0bffb17 	ldw	r2,-20(fp)
   8acb8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8acbc:	e0bff717 	ldw	r2,-36(fp)
   8acc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   8acc4:	008010c4 	movi	r2,67
   8acc8:	e0bfff15 	stw	r2,-4(fp)
   8accc:	00001206 	br	8ad18 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   8acd0:	e0bffc17 	ldw	r2,-16(fp)
   8acd4:	10800058 	cmpnei	r2,r2,1
   8acd8:	1000071e 	bne	r2,zero,8acf8 <OSTaskDelReq+0x13c>
   8acdc:	e0bffb17 	ldw	r2,-20(fp)
   8ace0:	e0bff615 	stw	r2,-40(fp)
   8ace4:	e0bff617 	ldw	r2,-40(fp)
   8ace8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   8acec:	00800f44 	movi	r2,61
   8acf0:	e0bfff15 	stw	r2,-4(fp)
   8acf4:	00000806 	br	8ad18 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   8acf8:	e0fffc17 	ldw	r3,-16(fp)
   8acfc:	00800fc4 	movi	r2,63
   8ad00:	18800dc5 	stb	r2,55(r3)
   8ad04:	e0bffb17 	ldw	r2,-20(fp)
   8ad08:	e0bff515 	stw	r2,-44(fp)
   8ad0c:	e0bff517 	ldw	r2,-44(fp)
   8ad10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   8ad14:	e03fff15 	stw	zero,-4(fp)
   8ad18:	e0bfff17 	ldw	r2,-4(fp)
}
   8ad1c:	e037883a 	mov	sp,fp
   8ad20:	df000017 	ldw	fp,0(sp)
   8ad24:	dec00104 	addi	sp,sp,4
   8ad28:	f800283a 	ret

0008ad2c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   8ad2c:	defff304 	addi	sp,sp,-52
   8ad30:	dfc00c15 	stw	ra,48(sp)
   8ad34:	df000b15 	stw	fp,44(sp)
   8ad38:	df000b04 	addi	fp,sp,44
   8ad3c:	e17ffd15 	stw	r5,-12(fp)
   8ad40:	e1bffe15 	stw	r6,-8(fp)
   8ad44:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   8ad48:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   8ad4c:	e0bffe17 	ldw	r2,-8(fp)
   8ad50:	1004c03a 	cmpne	r2,r2,zero
   8ad54:	1000021e 	bne	r2,zero,8ad60 <OSTaskNameGet+0x34>
        return (0);
   8ad58:	e03fff15 	stw	zero,-4(fp)
   8ad5c:	00005b06 	br	8aecc <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   8ad60:	e0bffc03 	ldbu	r2,-16(fp)
   8ad64:	10800570 	cmpltui	r2,r2,21
   8ad68:	1000081e 	bne	r2,zero,8ad8c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   8ad6c:	e0bffc03 	ldbu	r2,-16(fp)
   8ad70:	10803fe0 	cmpeqi	r2,r2,255
   8ad74:	1000051e 	bne	r2,zero,8ad8c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   8ad78:	e0fffe17 	ldw	r3,-8(fp)
   8ad7c:	00800a84 	movi	r2,42
   8ad80:	18800005 	stb	r2,0(r3)
            return (0);
   8ad84:	e03fff15 	stw	zero,-4(fp)
   8ad88:	00005006 	br	8aecc <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   8ad8c:	e0bffd17 	ldw	r2,-12(fp)
   8ad90:	1004c03a 	cmpne	r2,r2,zero
   8ad94:	1000051e 	bne	r2,zero,8adac <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   8ad98:	e0fffe17 	ldw	r3,-8(fp)
   8ad9c:	00800304 	movi	r2,12
   8ada0:	18800005 	stb	r2,0(r3)
        return (0);
   8ada4:	e03fff15 	stw	zero,-4(fp)
   8ada8:	00004806 	br	8aecc <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   8adac:	00800274 	movhi	r2,9
   8adb0:	1089ab04 	addi	r2,r2,9900
   8adb4:	10800003 	ldbu	r2,0(r2)
   8adb8:	10803fcc 	andi	r2,r2,255
   8adbc:	1005003a 	cmpeq	r2,r2,zero
   8adc0:	1000051e 	bne	r2,zero,8add8 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
   8adc4:	e0fffe17 	ldw	r3,-8(fp)
   8adc8:	00800444 	movi	r2,17
   8adcc:	18800005 	stb	r2,0(r3)
        return (0);
   8add0:	e03fff15 	stw	zero,-4(fp)
   8add4:	00003d06 	br	8aecc <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8add8:	0005303a 	rdctl	r2,status
   8addc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ade0:	e0fff817 	ldw	r3,-32(fp)
   8ade4:	00bfff84 	movi	r2,-2
   8ade8:	1884703a 	and	r2,r3,r2
   8adec:	1001703a 	wrctl	status,r2
  
  return context;
   8adf0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   8adf4:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   8adf8:	e0bffc03 	ldbu	r2,-16(fp)
   8adfc:	10803fd8 	cmpnei	r2,r2,255
   8ae00:	1000051e 	bne	r2,zero,8ae18 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
   8ae04:	00800274 	movhi	r2,9
   8ae08:	1089ac04 	addi	r2,r2,9904
   8ae0c:	10800017 	ldw	r2,0(r2)
   8ae10:	10800c83 	ldbu	r2,50(r2)
   8ae14:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   8ae18:	e0bffc03 	ldbu	r2,-16(fp)
   8ae1c:	00c002b4 	movhi	r3,10
   8ae20:	18e63204 	addi	r3,r3,-26424
   8ae24:	1085883a 	add	r2,r2,r2
   8ae28:	1085883a 	add	r2,r2,r2
   8ae2c:	10c5883a 	add	r2,r2,r3
   8ae30:	10800017 	ldw	r2,0(r2)
   8ae34:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   8ae38:	e0bffb17 	ldw	r2,-20(fp)
   8ae3c:	1004c03a 	cmpne	r2,r2,zero
   8ae40:	1000091e 	bne	r2,zero,8ae68 <OSTaskNameGet+0x13c>
   8ae44:	e0bff917 	ldw	r2,-28(fp)
   8ae48:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ae4c:	e0bff717 	ldw	r2,-36(fp)
   8ae50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   8ae54:	e0fffe17 	ldw	r3,-8(fp)
   8ae58:	008010c4 	movi	r2,67
   8ae5c:	18800005 	stb	r2,0(r3)
        return (0);
   8ae60:	e03fff15 	stw	zero,-4(fp)
   8ae64:	00001906 	br	8aecc <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   8ae68:	e0bffb17 	ldw	r2,-20(fp)
   8ae6c:	10800058 	cmpnei	r2,r2,1
   8ae70:	1000091e 	bne	r2,zero,8ae98 <OSTaskNameGet+0x16c>
   8ae74:	e0bff917 	ldw	r2,-28(fp)
   8ae78:	e0bff615 	stw	r2,-40(fp)
   8ae7c:	e0bff617 	ldw	r2,-40(fp)
   8ae80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   8ae84:	e0fffe17 	ldw	r3,-8(fp)
   8ae88:	008010c4 	movi	r2,67
   8ae8c:	18800005 	stb	r2,0(r3)
        return (0);
   8ae90:	e03fff15 	stw	zero,-4(fp)
   8ae94:	00000d06 	br	8aecc <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   8ae98:	e0bffb17 	ldw	r2,-20(fp)
   8ae9c:	11401304 	addi	r5,r2,76
   8aea0:	e13ffd17 	ldw	r4,-12(fp)
   8aea4:	00856f40 	call	856f4 <OS_StrCopy>
   8aea8:	e0bffa05 	stb	r2,-24(fp)
   8aeac:	e0bff917 	ldw	r2,-28(fp)
   8aeb0:	e0bff515 	stw	r2,-44(fp)
   8aeb4:	e0bff517 	ldw	r2,-44(fp)
   8aeb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8aebc:	e0bffe17 	ldw	r2,-8(fp)
   8aec0:	10000005 	stb	zero,0(r2)
    return (len);
   8aec4:	e0bffa03 	ldbu	r2,-24(fp)
   8aec8:	e0bfff15 	stw	r2,-4(fp)
   8aecc:	e0bfff17 	ldw	r2,-4(fp)
}
   8aed0:	e037883a 	mov	sp,fp
   8aed4:	dfc00117 	ldw	ra,4(sp)
   8aed8:	df000017 	ldw	fp,0(sp)
   8aedc:	dec00204 	addi	sp,sp,8
   8aee0:	f800283a 	ret

0008aee4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   8aee4:	defff304 	addi	sp,sp,-52
   8aee8:	dfc00c15 	stw	ra,48(sp)
   8aeec:	df000b15 	stw	fp,44(sp)
   8aef0:	df000b04 	addi	fp,sp,44
   8aef4:	e17ffe15 	stw	r5,-8(fp)
   8aef8:	e1bfff15 	stw	r6,-4(fp)
   8aefc:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   8af00:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   8af04:	e0bfff17 	ldw	r2,-4(fp)
   8af08:	1005003a 	cmpeq	r2,r2,zero
   8af0c:	1000611e 	bne	r2,zero,8b094 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   8af10:	e0bffd03 	ldbu	r2,-12(fp)
   8af14:	10800570 	cmpltui	r2,r2,21
   8af18:	1000071e 	bne	r2,zero,8af38 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   8af1c:	e0bffd03 	ldbu	r2,-12(fp)
   8af20:	10803fe0 	cmpeqi	r2,r2,255
   8af24:	1000041e 	bne	r2,zero,8af38 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   8af28:	e0ffff17 	ldw	r3,-4(fp)
   8af2c:	00800a84 	movi	r2,42
   8af30:	18800005 	stb	r2,0(r3)
            return;
   8af34:	00005706 	br	8b094 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   8af38:	e0bffe17 	ldw	r2,-8(fp)
   8af3c:	1004c03a 	cmpne	r2,r2,zero
   8af40:	1000041e 	bne	r2,zero,8af54 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   8af44:	e0ffff17 	ldw	r3,-4(fp)
   8af48:	00800304 	movi	r2,12
   8af4c:	18800005 	stb	r2,0(r3)
        return;
   8af50:	00005006 	br	8b094 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   8af54:	00800274 	movhi	r2,9
   8af58:	1089ab04 	addi	r2,r2,9900
   8af5c:	10800003 	ldbu	r2,0(r2)
   8af60:	10803fcc 	andi	r2,r2,255
   8af64:	1005003a 	cmpeq	r2,r2,zero
   8af68:	1000041e 	bne	r2,zero,8af7c <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
   8af6c:	e0ffff17 	ldw	r3,-4(fp)
   8af70:	00800484 	movi	r2,18
   8af74:	18800005 	stb	r2,0(r3)
        return;
   8af78:	00004606 	br	8b094 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8af7c:	0005303a 	rdctl	r2,status
   8af80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8af84:	e0fff917 	ldw	r3,-28(fp)
   8af88:	00bfff84 	movi	r2,-2
   8af8c:	1884703a 	and	r2,r3,r2
   8af90:	1001703a 	wrctl	status,r2
  
  return context;
   8af94:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   8af98:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   8af9c:	e0bffd03 	ldbu	r2,-12(fp)
   8afa0:	10803fd8 	cmpnei	r2,r2,255
   8afa4:	1000051e 	bne	r2,zero,8afbc <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
   8afa8:	00800274 	movhi	r2,9
   8afac:	1089ac04 	addi	r2,r2,9904
   8afb0:	10800017 	ldw	r2,0(r2)
   8afb4:	10800c83 	ldbu	r2,50(r2)
   8afb8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   8afbc:	e0bffd03 	ldbu	r2,-12(fp)
   8afc0:	00c002b4 	movhi	r3,10
   8afc4:	18e63204 	addi	r3,r3,-26424
   8afc8:	1085883a 	add	r2,r2,r2
   8afcc:	1085883a 	add	r2,r2,r2
   8afd0:	10c5883a 	add	r2,r2,r3
   8afd4:	10800017 	ldw	r2,0(r2)
   8afd8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   8afdc:	e0bffb17 	ldw	r2,-20(fp)
   8afe0:	1004c03a 	cmpne	r2,r2,zero
   8afe4:	1000081e 	bne	r2,zero,8b008 <OSTaskNameSet+0x124>
   8afe8:	e0bffa17 	ldw	r2,-24(fp)
   8afec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8aff0:	e0bff817 	ldw	r2,-32(fp)
   8aff4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   8aff8:	e0ffff17 	ldw	r3,-4(fp)
   8affc:	008010c4 	movi	r2,67
   8b000:	18800005 	stb	r2,0(r3)
        return;
   8b004:	00002306 	br	8b094 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   8b008:	e0bffb17 	ldw	r2,-20(fp)
   8b00c:	10800058 	cmpnei	r2,r2,1
   8b010:	1000081e 	bne	r2,zero,8b034 <OSTaskNameSet+0x150>
   8b014:	e0bffa17 	ldw	r2,-24(fp)
   8b018:	e0bff715 	stw	r2,-36(fp)
   8b01c:	e0bff717 	ldw	r2,-36(fp)
   8b020:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   8b024:	e0ffff17 	ldw	r3,-4(fp)
   8b028:	008010c4 	movi	r2,67
   8b02c:	18800005 	stb	r2,0(r3)
        return;
   8b030:	00001806 	br	8b094 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   8b034:	e13ffe17 	ldw	r4,-8(fp)
   8b038:	00857740 	call	85774 <OS_StrLen>
   8b03c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   8b040:	e0bffc03 	ldbu	r2,-16(fp)
   8b044:	10800830 	cmpltui	r2,r2,32
   8b048:	1000081e 	bne	r2,zero,8b06c <OSTaskNameSet+0x188>
   8b04c:	e0bffa17 	ldw	r2,-24(fp)
   8b050:	e0bff615 	stw	r2,-40(fp)
   8b054:	e0bff617 	ldw	r2,-40(fp)
   8b058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   8b05c:	e0ffff17 	ldw	r3,-4(fp)
   8b060:	00801044 	movi	r2,65
   8b064:	18800005 	stb	r2,0(r3)
        return;
   8b068:	00000a06 	br	8b094 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   8b06c:	e0bffb17 	ldw	r2,-20(fp)
   8b070:	11001304 	addi	r4,r2,76
   8b074:	e17ffe17 	ldw	r5,-8(fp)
   8b078:	00856f40 	call	856f4 <OS_StrCopy>
   8b07c:	e0bffa17 	ldw	r2,-24(fp)
   8b080:	e0bff515 	stw	r2,-44(fp)
   8b084:	e0bff517 	ldw	r2,-44(fp)
   8b088:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8b08c:	e0bfff17 	ldw	r2,-4(fp)
   8b090:	10000005 	stb	zero,0(r2)
}
   8b094:	e037883a 	mov	sp,fp
   8b098:	dfc00117 	ldw	ra,4(sp)
   8b09c:	df000017 	ldw	fp,0(sp)
   8b0a0:	dec00204 	addi	sp,sp,8
   8b0a4:	f800283a 	ret

0008b0a8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   8b0a8:	defff304 	addi	sp,sp,-52
   8b0ac:	dfc00c15 	stw	ra,48(sp)
   8b0b0:	df000b15 	stw	fp,44(sp)
   8b0b4:	df000b04 	addi	fp,sp,44
   8b0b8:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   8b0bc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   8b0c0:	e0bffe03 	ldbu	r2,-8(fp)
   8b0c4:	10800530 	cmpltui	r2,r2,20
   8b0c8:	1000031e 	bne	r2,zero,8b0d8 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   8b0cc:	00800a84 	movi	r2,42
   8b0d0:	e0bfff15 	stw	r2,-4(fp)
   8b0d4:	00007406 	br	8b2a8 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b0d8:	0005303a 	rdctl	r2,status
   8b0dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b0e0:	e0fffb17 	ldw	r3,-20(fp)
   8b0e4:	00bfff84 	movi	r2,-2
   8b0e8:	1884703a 	and	r2,r3,r2
   8b0ec:	1001703a 	wrctl	status,r2
  
  return context;
   8b0f0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8b0f4:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
   8b0f8:	e0bffe03 	ldbu	r2,-8(fp)
   8b0fc:	00c002b4 	movhi	r3,10
   8b100:	18e63204 	addi	r3,r3,-26424
   8b104:	1085883a 	add	r2,r2,r2
   8b108:	1085883a 	add	r2,r2,r2
   8b10c:	10c5883a 	add	r2,r2,r3
   8b110:	10800017 	ldw	r2,0(r2)
   8b114:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   8b118:	e0bffd17 	ldw	r2,-12(fp)
   8b11c:	1004c03a 	cmpne	r2,r2,zero
   8b120:	1000071e 	bne	r2,zero,8b140 <OSTaskResume+0x98>
   8b124:	e0bffc17 	ldw	r2,-16(fp)
   8b128:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b12c:	e0bffa17 	ldw	r2,-24(fp)
   8b130:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   8b134:	00801184 	movi	r2,70
   8b138:	e0bfff15 	stw	r2,-4(fp)
   8b13c:	00005a06 	br	8b2a8 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   8b140:	e0bffd17 	ldw	r2,-12(fp)
   8b144:	10800058 	cmpnei	r2,r2,1
   8b148:	1000071e 	bne	r2,zero,8b168 <OSTaskResume+0xc0>
   8b14c:	e0bffc17 	ldw	r2,-16(fp)
   8b150:	e0bff915 	stw	r2,-28(fp)
   8b154:	e0bff917 	ldw	r2,-28(fp)
   8b158:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   8b15c:	008010c4 	movi	r2,67
   8b160:	e0bfff15 	stw	r2,-4(fp)
   8b164:	00005006 	br	8b2a8 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   8b168:	e0bffd17 	ldw	r2,-12(fp)
   8b16c:	10800c03 	ldbu	r2,48(r2)
   8b170:	10803fcc 	andi	r2,r2,255
   8b174:	1080020c 	andi	r2,r2,8
   8b178:	1005003a 	cmpeq	r2,r2,zero
   8b17c:	1000441e 	bne	r2,zero,8b290 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   8b180:	e0bffd17 	ldw	r2,-12(fp)
   8b184:	10c00c03 	ldbu	r3,48(r2)
   8b188:	00bffdc4 	movi	r2,-9
   8b18c:	1884703a 	and	r2,r3,r2
   8b190:	1007883a 	mov	r3,r2
   8b194:	e0bffd17 	ldw	r2,-12(fp)
   8b198:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   8b19c:	e0bffd17 	ldw	r2,-12(fp)
   8b1a0:	10800c03 	ldbu	r2,48(r2)
   8b1a4:	10803fcc 	andi	r2,r2,255
   8b1a8:	1004c03a 	cmpne	r2,r2,zero
   8b1ac:	1000321e 	bne	r2,zero,8b278 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
   8b1b0:	e0bffd17 	ldw	r2,-12(fp)
   8b1b4:	10800b8b 	ldhu	r2,46(r2)
   8b1b8:	10bfffcc 	andi	r2,r2,65535
   8b1bc:	1004c03a 	cmpne	r2,r2,zero
   8b1c0:	1000281e 	bne	r2,zero,8b264 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   8b1c4:	e0bffd17 	ldw	r2,-12(fp)
   8b1c8:	10c00d83 	ldbu	r3,54(r2)
   8b1cc:	00800274 	movhi	r2,9
   8b1d0:	1089a904 	addi	r2,r2,9892
   8b1d4:	10800003 	ldbu	r2,0(r2)
   8b1d8:	1884b03a 	or	r2,r3,r2
   8b1dc:	1007883a 	mov	r3,r2
   8b1e0:	00800274 	movhi	r2,9
   8b1e4:	1089a904 	addi	r2,r2,9892
   8b1e8:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8b1ec:	e0bffd17 	ldw	r2,-12(fp)
   8b1f0:	10800d03 	ldbu	r2,52(r2)
   8b1f4:	11003fcc 	andi	r4,r2,255
   8b1f8:	e0bffd17 	ldw	r2,-12(fp)
   8b1fc:	10800d03 	ldbu	r2,52(r2)
   8b200:	10c03fcc 	andi	r3,r2,255
   8b204:	00800274 	movhi	r2,9
   8b208:	1089a944 	addi	r2,r2,9893
   8b20c:	10c5883a 	add	r2,r2,r3
   8b210:	10c00003 	ldbu	r3,0(r2)
   8b214:	e0bffd17 	ldw	r2,-12(fp)
   8b218:	10800d43 	ldbu	r2,53(r2)
   8b21c:	1884b03a 	or	r2,r3,r2
   8b220:	1007883a 	mov	r3,r2
   8b224:	00800274 	movhi	r2,9
   8b228:	1089a944 	addi	r2,r2,9893
   8b22c:	1105883a 	add	r2,r2,r4
   8b230:	10c00005 	stb	r3,0(r2)
   8b234:	e0bffc17 	ldw	r2,-16(fp)
   8b238:	e0bff815 	stw	r2,-32(fp)
   8b23c:	e0bff817 	ldw	r2,-32(fp)
   8b240:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   8b244:	00800274 	movhi	r2,9
   8b248:	10899d44 	addi	r2,r2,9845
   8b24c:	10800003 	ldbu	r2,0(r2)
   8b250:	10803fcc 	andi	r2,r2,255
   8b254:	10800058 	cmpnei	r2,r2,1
   8b258:	10000b1e 	bne	r2,zero,8b288 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
   8b25c:	00855b00 	call	855b0 <OS_Sched>
   8b260:	00000906 	br	8b288 <OSTaskResume+0x1e0>
   8b264:	e0bffc17 	ldw	r2,-16(fp)
   8b268:	e0bff715 	stw	r2,-36(fp)
   8b26c:	e0bff717 	ldw	r2,-36(fp)
   8b270:	1001703a 	wrctl	status,r2
   8b274:	00000406 	br	8b288 <OSTaskResume+0x1e0>
   8b278:	e0bffc17 	ldw	r2,-16(fp)
   8b27c:	e0bff615 	stw	r2,-40(fp)
   8b280:	e0bff617 	ldw	r2,-40(fp)
   8b284:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   8b288:	e03fff15 	stw	zero,-4(fp)
   8b28c:	00000606 	br	8b2a8 <OSTaskResume+0x200>
   8b290:	e0bffc17 	ldw	r2,-16(fp)
   8b294:	e0bff515 	stw	r2,-44(fp)
   8b298:	e0bff517 	ldw	r2,-44(fp)
   8b29c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   8b2a0:	00801104 	movi	r2,68
   8b2a4:	e0bfff15 	stw	r2,-4(fp)
   8b2a8:	e0bfff17 	ldw	r2,-4(fp)
}
   8b2ac:	e037883a 	mov	sp,fp
   8b2b0:	dfc00117 	ldw	ra,4(sp)
   8b2b4:	df000017 	ldw	fp,0(sp)
   8b2b8:	dec00204 	addi	sp,sp,8
   8b2bc:	f800283a 	ret

0008b2c0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   8b2c0:	defff204 	addi	sp,sp,-56
   8b2c4:	df000d15 	stw	fp,52(sp)
   8b2c8:	df000d04 	addi	fp,sp,52
   8b2cc:	e17ffe15 	stw	r5,-8(fp)
   8b2d0:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   8b2d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   8b2d8:	e0bffd03 	ldbu	r2,-12(fp)
   8b2dc:	10800570 	cmpltui	r2,r2,21
   8b2e0:	1000061e 	bne	r2,zero,8b2fc <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   8b2e4:	e0bffd03 	ldbu	r2,-12(fp)
   8b2e8:	10803fe0 	cmpeqi	r2,r2,255
   8b2ec:	1000031e 	bne	r2,zero,8b2fc <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   8b2f0:	00800a84 	movi	r2,42
   8b2f4:	e0bfff15 	stw	r2,-4(fp)
   8b2f8:	00006b06 	br	8b4a8 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   8b2fc:	e0bffe17 	ldw	r2,-8(fp)
   8b300:	1004c03a 	cmpne	r2,r2,zero
   8b304:	1000031e 	bne	r2,zero,8b314 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
   8b308:	00800244 	movi	r2,9
   8b30c:	e0bfff15 	stw	r2,-4(fp)
   8b310:	00006506 	br	8b4a8 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   8b314:	e0bffe17 	ldw	r2,-8(fp)
   8b318:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   8b31c:	e0bffe17 	ldw	r2,-8(fp)
   8b320:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b324:	0005303a 	rdctl	r2,status
   8b328:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b32c:	e0fff717 	ldw	r3,-36(fp)
   8b330:	00bfff84 	movi	r2,-2
   8b334:	1884703a 	and	r2,r3,r2
   8b338:	1001703a 	wrctl	status,r2
  
  return context;
   8b33c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   8b340:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   8b344:	e0bffd03 	ldbu	r2,-12(fp)
   8b348:	10803fd8 	cmpnei	r2,r2,255
   8b34c:	1000051e 	bne	r2,zero,8b364 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
   8b350:	00800274 	movhi	r2,9
   8b354:	1089ac04 	addi	r2,r2,9904
   8b358:	10800017 	ldw	r2,0(r2)
   8b35c:	10800c83 	ldbu	r2,50(r2)
   8b360:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   8b364:	e0bffd03 	ldbu	r2,-12(fp)
   8b368:	00c002b4 	movhi	r3,10
   8b36c:	18e63204 	addi	r3,r3,-26424
   8b370:	1085883a 	add	r2,r2,r2
   8b374:	1085883a 	add	r2,r2,r2
   8b378:	10c5883a 	add	r2,r2,r3
   8b37c:	10800017 	ldw	r2,0(r2)
   8b380:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   8b384:	e0bffc17 	ldw	r2,-16(fp)
   8b388:	1004c03a 	cmpne	r2,r2,zero
   8b38c:	1000071e 	bne	r2,zero,8b3ac <OSTaskStkChk+0xec>
   8b390:	e0bff817 	ldw	r2,-32(fp)
   8b394:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b398:	e0bff617 	ldw	r2,-40(fp)
   8b39c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   8b3a0:	008010c4 	movi	r2,67
   8b3a4:	e0bfff15 	stw	r2,-4(fp)
   8b3a8:	00003f06 	br	8b4a8 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   8b3ac:	e0bffc17 	ldw	r2,-16(fp)
   8b3b0:	10800058 	cmpnei	r2,r2,1
   8b3b4:	1000071e 	bne	r2,zero,8b3d4 <OSTaskStkChk+0x114>
   8b3b8:	e0bff817 	ldw	r2,-32(fp)
   8b3bc:	e0bff515 	stw	r2,-44(fp)
   8b3c0:	e0bff517 	ldw	r2,-44(fp)
   8b3c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   8b3c8:	008010c4 	movi	r2,67
   8b3cc:	e0bfff15 	stw	r2,-4(fp)
   8b3d0:	00003506 	br	8b4a8 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   8b3d4:	e0bffc17 	ldw	r2,-16(fp)
   8b3d8:	1080040b 	ldhu	r2,16(r2)
   8b3dc:	10bfffcc 	andi	r2,r2,65535
   8b3e0:	1080004c 	andi	r2,r2,1
   8b3e4:	1004c03a 	cmpne	r2,r2,zero
   8b3e8:	1000071e 	bne	r2,zero,8b408 <OSTaskStkChk+0x148>
   8b3ec:	e0bff817 	ldw	r2,-32(fp)
   8b3f0:	e0bff415 	stw	r2,-48(fp)
   8b3f4:	e0bff417 	ldw	r2,-48(fp)
   8b3f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   8b3fc:	00801144 	movi	r2,69
   8b400:	e0bfff15 	stw	r2,-4(fp)
   8b404:	00002806 	br	8b4a8 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
   8b408:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
   8b40c:	e0bffc17 	ldw	r2,-16(fp)
   8b410:	10800317 	ldw	r2,12(r2)
   8b414:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
   8b418:	e0bffc17 	ldw	r2,-16(fp)
   8b41c:	10800217 	ldw	r2,8(r2)
   8b420:	e0bffb15 	stw	r2,-20(fp)
   8b424:	e0bff817 	ldw	r2,-32(fp)
   8b428:	e0bff315 	stw	r2,-52(fp)
   8b42c:	e0bff317 	ldw	r2,-52(fp)
   8b430:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   8b434:	00000306 	br	8b444 <OSTaskStkChk+0x184>
        nfree++;
   8b438:	e0bffa17 	ldw	r2,-24(fp)
   8b43c:	10800044 	addi	r2,r2,1
   8b440:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   8b444:	e0bffb17 	ldw	r2,-20(fp)
   8b448:	10800017 	ldw	r2,0(r2)
   8b44c:	1005003a 	cmpeq	r2,r2,zero
   8b450:	1007883a 	mov	r3,r2
   8b454:	e0bffb17 	ldw	r2,-20(fp)
   8b458:	10800104 	addi	r2,r2,4
   8b45c:	e0bffb15 	stw	r2,-20(fp)
   8b460:	18803fcc 	andi	r2,r3,255
   8b464:	1004c03a 	cmpne	r2,r2,zero
   8b468:	103ff31e 	bne	r2,zero,8b438 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   8b46c:	e0bffa17 	ldw	r2,-24(fp)
   8b470:	1085883a 	add	r2,r2,r2
   8b474:	1085883a 	add	r2,r2,r2
   8b478:	1007883a 	mov	r3,r2
   8b47c:	e0bffe17 	ldw	r2,-8(fp)
   8b480:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   8b484:	e0fff917 	ldw	r3,-28(fp)
   8b488:	e0bffa17 	ldw	r2,-24(fp)
   8b48c:	1885c83a 	sub	r2,r3,r2
   8b490:	1085883a 	add	r2,r2,r2
   8b494:	1085883a 	add	r2,r2,r2
   8b498:	1007883a 	mov	r3,r2
   8b49c:	e0bffe17 	ldw	r2,-8(fp)
   8b4a0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   8b4a4:	e03fff15 	stw	zero,-4(fp)
   8b4a8:	e0bfff17 	ldw	r2,-4(fp)
}
   8b4ac:	e037883a 	mov	sp,fp
   8b4b0:	df000017 	ldw	fp,0(sp)
   8b4b4:	dec00104 	addi	sp,sp,4
   8b4b8:	f800283a 	ret

0008b4bc <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   8b4bc:	defff404 	addi	sp,sp,-48
   8b4c0:	dfc00b15 	stw	ra,44(sp)
   8b4c4:	df000a15 	stw	fp,40(sp)
   8b4c8:	df000a04 	addi	fp,sp,40
   8b4cc:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8b4d0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   8b4d4:	e0bffe03 	ldbu	r2,-8(fp)
   8b4d8:	10800518 	cmpnei	r2,r2,20
   8b4dc:	1000031e 	bne	r2,zero,8b4ec <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   8b4e0:	008011c4 	movi	r2,71
   8b4e4:	e0bfff15 	stw	r2,-4(fp)
   8b4e8:	00007906 	br	8b6d0 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   8b4ec:	e0bffe03 	ldbu	r2,-8(fp)
   8b4f0:	10800530 	cmpltui	r2,r2,20
   8b4f4:	1000061e 	bne	r2,zero,8b510 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
   8b4f8:	e0bffe03 	ldbu	r2,-8(fp)
   8b4fc:	10803fe0 	cmpeqi	r2,r2,255
   8b500:	1000031e 	bne	r2,zero,8b510 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
   8b504:	00800a84 	movi	r2,42
   8b508:	e0bfff15 	stw	r2,-4(fp)
   8b50c:	00007006 	br	8b6d0 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b510:	0005303a 	rdctl	r2,status
   8b514:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b518:	e0fff917 	ldw	r3,-28(fp)
   8b51c:	00bfff84 	movi	r2,-2
   8b520:	1884703a 	and	r2,r3,r2
   8b524:	1001703a 	wrctl	status,r2
  
  return context;
   8b528:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   8b52c:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   8b530:	e0bffe03 	ldbu	r2,-8(fp)
   8b534:	10803fd8 	cmpnei	r2,r2,255
   8b538:	1000081e 	bne	r2,zero,8b55c <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
   8b53c:	00800274 	movhi	r2,9
   8b540:	1089ac04 	addi	r2,r2,9904
   8b544:	10800017 	ldw	r2,0(r2)
   8b548:	10800c83 	ldbu	r2,50(r2)
   8b54c:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
   8b550:	00800044 	movi	r2,1
   8b554:	e0bffd05 	stb	r2,-12(fp)
   8b558:	00000b06 	br	8b588 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   8b55c:	00800274 	movhi	r2,9
   8b560:	1089ac04 	addi	r2,r2,9904
   8b564:	10800017 	ldw	r2,0(r2)
   8b568:	10800c83 	ldbu	r2,50(r2)
   8b56c:	10c03fcc 	andi	r3,r2,255
   8b570:	e0bffe03 	ldbu	r2,-8(fp)
   8b574:	1880031e 	bne	r3,r2,8b584 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
   8b578:	00800044 	movi	r2,1
   8b57c:	e0bffd05 	stb	r2,-12(fp)
   8b580:	00000106 	br	8b588 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   8b584:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   8b588:	e0bffe03 	ldbu	r2,-8(fp)
   8b58c:	00c002b4 	movhi	r3,10
   8b590:	18e63204 	addi	r3,r3,-26424
   8b594:	1085883a 	add	r2,r2,r2
   8b598:	1085883a 	add	r2,r2,r2
   8b59c:	10c5883a 	add	r2,r2,r3
   8b5a0:	10800017 	ldw	r2,0(r2)
   8b5a4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   8b5a8:	e0bffc17 	ldw	r2,-16(fp)
   8b5ac:	1004c03a 	cmpne	r2,r2,zero
   8b5b0:	1000071e 	bne	r2,zero,8b5d0 <OSTaskSuspend+0x114>
   8b5b4:	e0bffa17 	ldw	r2,-24(fp)
   8b5b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b5bc:	e0bff817 	ldw	r2,-32(fp)
   8b5c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   8b5c4:	00801204 	movi	r2,72
   8b5c8:	e0bfff15 	stw	r2,-4(fp)
   8b5cc:	00004006 	br	8b6d0 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   8b5d0:	e0bffc17 	ldw	r2,-16(fp)
   8b5d4:	10800058 	cmpnei	r2,r2,1
   8b5d8:	1000071e 	bne	r2,zero,8b5f8 <OSTaskSuspend+0x13c>
   8b5dc:	e0bffa17 	ldw	r2,-24(fp)
   8b5e0:	e0bff715 	stw	r2,-36(fp)
   8b5e4:	e0bff717 	ldw	r2,-36(fp)
   8b5e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   8b5ec:	008010c4 	movi	r2,67
   8b5f0:	e0bfff15 	stw	r2,-4(fp)
   8b5f4:	00003606 	br	8b6d0 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
   8b5f8:	e0bffc17 	ldw	r2,-16(fp)
   8b5fc:	10800d03 	ldbu	r2,52(r2)
   8b600:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   8b604:	e13ffb03 	ldbu	r4,-20(fp)
   8b608:	e0fffb03 	ldbu	r3,-20(fp)
   8b60c:	00800274 	movhi	r2,9
   8b610:	1089a944 	addi	r2,r2,9893
   8b614:	10c5883a 	add	r2,r2,r3
   8b618:	10800003 	ldbu	r2,0(r2)
   8b61c:	1007883a 	mov	r3,r2
   8b620:	e0bffc17 	ldw	r2,-16(fp)
   8b624:	10800d43 	ldbu	r2,53(r2)
   8b628:	0084303a 	nor	r2,zero,r2
   8b62c:	1884703a 	and	r2,r3,r2
   8b630:	1007883a 	mov	r3,r2
   8b634:	00800274 	movhi	r2,9
   8b638:	1089a944 	addi	r2,r2,9893
   8b63c:	1105883a 	add	r2,r2,r4
   8b640:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   8b644:	e0fffb03 	ldbu	r3,-20(fp)
   8b648:	00800274 	movhi	r2,9
   8b64c:	1089a944 	addi	r2,r2,9893
   8b650:	10c5883a 	add	r2,r2,r3
   8b654:	10800003 	ldbu	r2,0(r2)
   8b658:	10803fcc 	andi	r2,r2,255
   8b65c:	1004c03a 	cmpne	r2,r2,zero
   8b660:	10000c1e 	bne	r2,zero,8b694 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   8b664:	e0bffc17 	ldw	r2,-16(fp)
   8b668:	10800d83 	ldbu	r2,54(r2)
   8b66c:	0084303a 	nor	r2,zero,r2
   8b670:	1007883a 	mov	r3,r2
   8b674:	00800274 	movhi	r2,9
   8b678:	1089a904 	addi	r2,r2,9892
   8b67c:	10800003 	ldbu	r2,0(r2)
   8b680:	1884703a 	and	r2,r3,r2
   8b684:	1007883a 	mov	r3,r2
   8b688:	00800274 	movhi	r2,9
   8b68c:	1089a904 	addi	r2,r2,9892
   8b690:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   8b694:	e0bffc17 	ldw	r2,-16(fp)
   8b698:	10800c03 	ldbu	r2,48(r2)
   8b69c:	10800214 	ori	r2,r2,8
   8b6a0:	1007883a 	mov	r3,r2
   8b6a4:	e0bffc17 	ldw	r2,-16(fp)
   8b6a8:	10c00c05 	stb	r3,48(r2)
   8b6ac:	e0bffa17 	ldw	r2,-24(fp)
   8b6b0:	e0bff615 	stw	r2,-40(fp)
   8b6b4:	e0bff617 	ldw	r2,-40(fp)
   8b6b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   8b6bc:	e0bffd03 	ldbu	r2,-12(fp)
   8b6c0:	10800058 	cmpnei	r2,r2,1
   8b6c4:	1000011e 	bne	r2,zero,8b6cc <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
   8b6c8:	00855b00 	call	855b0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   8b6cc:	e03fff15 	stw	zero,-4(fp)
   8b6d0:	e0bfff17 	ldw	r2,-4(fp)
}
   8b6d4:	e037883a 	mov	sp,fp
   8b6d8:	dfc00117 	ldw	ra,4(sp)
   8b6dc:	df000017 	ldw	fp,0(sp)
   8b6e0:	dec00204 	addi	sp,sp,8
   8b6e4:	f800283a 	ret

0008b6e8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   8b6e8:	defff504 	addi	sp,sp,-44
   8b6ec:	dfc00a15 	stw	ra,40(sp)
   8b6f0:	df000915 	stw	fp,36(sp)
   8b6f4:	df000904 	addi	fp,sp,36
   8b6f8:	e17ffe15 	stw	r5,-8(fp)
   8b6fc:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8b700:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   8b704:	e0bffd03 	ldbu	r2,-12(fp)
   8b708:	10800570 	cmpltui	r2,r2,21
   8b70c:	1000061e 	bne	r2,zero,8b728 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   8b710:	e0bffd03 	ldbu	r2,-12(fp)
   8b714:	10803fe0 	cmpeqi	r2,r2,255
   8b718:	1000031e 	bne	r2,zero,8b728 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   8b71c:	00800a84 	movi	r2,42
   8b720:	e0bfff15 	stw	r2,-4(fp)
   8b724:	00003b06 	br	8b814 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   8b728:	e0bffe17 	ldw	r2,-8(fp)
   8b72c:	1004c03a 	cmpne	r2,r2,zero
   8b730:	1000031e 	bne	r2,zero,8b740 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
   8b734:	00800244 	movi	r2,9
   8b738:	e0bfff15 	stw	r2,-4(fp)
   8b73c:	00003506 	br	8b814 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b740:	0005303a 	rdctl	r2,status
   8b744:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b748:	e0fffa17 	ldw	r3,-24(fp)
   8b74c:	00bfff84 	movi	r2,-2
   8b750:	1884703a 	and	r2,r3,r2
   8b754:	1001703a 	wrctl	status,r2
  
  return context;
   8b758:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8b75c:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   8b760:	e0bffd03 	ldbu	r2,-12(fp)
   8b764:	10803fd8 	cmpnei	r2,r2,255
   8b768:	1000051e 	bne	r2,zero,8b780 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
   8b76c:	00800274 	movhi	r2,9
   8b770:	1089ac04 	addi	r2,r2,9904
   8b774:	10800017 	ldw	r2,0(r2)
   8b778:	10800c83 	ldbu	r2,50(r2)
   8b77c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   8b780:	e0bffd03 	ldbu	r2,-12(fp)
   8b784:	00c002b4 	movhi	r3,10
   8b788:	18e63204 	addi	r3,r3,-26424
   8b78c:	1085883a 	add	r2,r2,r2
   8b790:	1085883a 	add	r2,r2,r2
   8b794:	10c5883a 	add	r2,r2,r3
   8b798:	10800017 	ldw	r2,0(r2)
   8b79c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   8b7a0:	e0bffc17 	ldw	r2,-16(fp)
   8b7a4:	1004c03a 	cmpne	r2,r2,zero
   8b7a8:	1000071e 	bne	r2,zero,8b7c8 <OSTaskQuery+0xe0>
   8b7ac:	e0bffb17 	ldw	r2,-20(fp)
   8b7b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b7b4:	e0bff917 	ldw	r2,-28(fp)
   8b7b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   8b7bc:	00800a44 	movi	r2,41
   8b7c0:	e0bfff15 	stw	r2,-4(fp)
   8b7c4:	00001306 	br	8b814 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   8b7c8:	e0bffc17 	ldw	r2,-16(fp)
   8b7cc:	10800058 	cmpnei	r2,r2,1
   8b7d0:	1000071e 	bne	r2,zero,8b7f0 <OSTaskQuery+0x108>
   8b7d4:	e0bffb17 	ldw	r2,-20(fp)
   8b7d8:	e0bff815 	stw	r2,-32(fp)
   8b7dc:	e0bff817 	ldw	r2,-32(fp)
   8b7e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   8b7e4:	008010c4 	movi	r2,67
   8b7e8:	e0bfff15 	stw	r2,-4(fp)
   8b7ec:	00000906 	br	8b814 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   8b7f0:	e13ffe17 	ldw	r4,-8(fp)
   8b7f4:	e17ffc17 	ldw	r5,-16(fp)
   8b7f8:	01801b04 	movi	r6,108
   8b7fc:	00855440 	call	85544 <OS_MemCopy>
   8b800:	e0bffb17 	ldw	r2,-20(fp)
   8b804:	e0bff715 	stw	r2,-36(fp)
   8b808:	e0bff717 	ldw	r2,-36(fp)
   8b80c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   8b810:	e03fff15 	stw	zero,-4(fp)
   8b814:	e0bfff17 	ldw	r2,-4(fp)
}
   8b818:	e037883a 	mov	sp,fp
   8b81c:	dfc00117 	ldw	ra,4(sp)
   8b820:	df000017 	ldw	fp,0(sp)
   8b824:	dec00204 	addi	sp,sp,8
   8b828:	f800283a 	ret

0008b82c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   8b82c:	defffc04 	addi	sp,sp,-16
   8b830:	df000315 	stw	fp,12(sp)
   8b834:	df000304 	addi	fp,sp,12
   8b838:	e13ffd15 	stw	r4,-12(fp)
   8b83c:	e17ffe15 	stw	r5,-8(fp)
   8b840:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   8b844:	e0bfff0b 	ldhu	r2,-4(fp)
   8b848:	1080004c 	andi	r2,r2,1
   8b84c:	10803fcc 	andi	r2,r2,255
   8b850:	1005003a 	cmpeq	r2,r2,zero
   8b854:	1000101e 	bne	r2,zero,8b898 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   8b858:	e0bfff0b 	ldhu	r2,-4(fp)
   8b85c:	1080008c 	andi	r2,r2,2
   8b860:	1005003a 	cmpeq	r2,r2,zero
   8b864:	10000c1e 	bne	r2,zero,8b898 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   8b868:	00000806 	br	8b88c <OS_TaskStkClr+0x60>
                size--;
   8b86c:	e0bffe17 	ldw	r2,-8(fp)
   8b870:	10bfffc4 	addi	r2,r2,-1
   8b874:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   8b878:	e0bffd17 	ldw	r2,-12(fp)
   8b87c:	10000015 	stw	zero,0(r2)
   8b880:	e0bffd17 	ldw	r2,-12(fp)
   8b884:	10800104 	addi	r2,r2,4
   8b888:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   8b88c:	e0bffe17 	ldw	r2,-8(fp)
   8b890:	1004c03a 	cmpne	r2,r2,zero
   8b894:	103ff51e 	bne	r2,zero,8b86c <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   8b898:	e037883a 	mov	sp,fp
   8b89c:	df000017 	ldw	fp,0(sp)
   8b8a0:	dec00104 	addi	sp,sp,4
   8b8a4:	f800283a 	ret

0008b8a8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   8b8a8:	defff904 	addi	sp,sp,-28
   8b8ac:	dfc00615 	stw	ra,24(sp)
   8b8b0:	df000515 	stw	fp,20(sp)
   8b8b4:	df000504 	addi	fp,sp,20
   8b8b8:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8b8bc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8b8c0:	00800274 	movhi	r2,9
   8b8c4:	1089ab04 	addi	r2,r2,9900
   8b8c8:	10800003 	ldbu	r2,0(r2)
   8b8cc:	10803fcc 	andi	r2,r2,255
   8b8d0:	1004c03a 	cmpne	r2,r2,zero
   8b8d4:	1000421e 	bne	r2,zero,8b9e0 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   8b8d8:	e0bfff0b 	ldhu	r2,-4(fp)
   8b8dc:	1005003a 	cmpeq	r2,r2,zero
   8b8e0:	10003f1e 	bne	r2,zero,8b9e0 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b8e4:	0005303a 	rdctl	r2,status
   8b8e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b8ec:	e0fffc17 	ldw	r3,-16(fp)
   8b8f0:	00bfff84 	movi	r2,-2
   8b8f4:	1884703a 	and	r2,r3,r2
   8b8f8:	1001703a 	wrctl	status,r2
  
  return context;
   8b8fc:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
   8b900:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   8b904:	00800274 	movhi	r2,9
   8b908:	1089ac04 	addi	r2,r2,9904
   8b90c:	10800017 	ldw	r2,0(r2)
   8b910:	10800d03 	ldbu	r2,52(r2)
   8b914:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   8b918:	e13ffe03 	ldbu	r4,-8(fp)
   8b91c:	e0fffe03 	ldbu	r3,-8(fp)
   8b920:	00800274 	movhi	r2,9
   8b924:	1089a944 	addi	r2,r2,9893
   8b928:	10c5883a 	add	r2,r2,r3
   8b92c:	10800003 	ldbu	r2,0(r2)
   8b930:	1007883a 	mov	r3,r2
   8b934:	00800274 	movhi	r2,9
   8b938:	1089ac04 	addi	r2,r2,9904
   8b93c:	10800017 	ldw	r2,0(r2)
   8b940:	10800d43 	ldbu	r2,53(r2)
   8b944:	0084303a 	nor	r2,zero,r2
   8b948:	1884703a 	and	r2,r3,r2
   8b94c:	1007883a 	mov	r3,r2
   8b950:	00800274 	movhi	r2,9
   8b954:	1089a944 	addi	r2,r2,9893
   8b958:	1105883a 	add	r2,r2,r4
   8b95c:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
   8b960:	e0fffe03 	ldbu	r3,-8(fp)
   8b964:	00800274 	movhi	r2,9
   8b968:	1089a944 	addi	r2,r2,9893
   8b96c:	10c5883a 	add	r2,r2,r3
   8b970:	10800003 	ldbu	r2,0(r2)
   8b974:	10803fcc 	andi	r2,r2,255
   8b978:	1004c03a 	cmpne	r2,r2,zero
   8b97c:	10000e1e 	bne	r2,zero,8b9b8 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   8b980:	00800274 	movhi	r2,9
   8b984:	1089ac04 	addi	r2,r2,9904
   8b988:	10800017 	ldw	r2,0(r2)
   8b98c:	10800d83 	ldbu	r2,54(r2)
   8b990:	0084303a 	nor	r2,zero,r2
   8b994:	1007883a 	mov	r3,r2
   8b998:	00800274 	movhi	r2,9
   8b99c:	1089a904 	addi	r2,r2,9892
   8b9a0:	10800003 	ldbu	r2,0(r2)
   8b9a4:	1884703a 	and	r2,r3,r2
   8b9a8:	1007883a 	mov	r3,r2
   8b9ac:	00800274 	movhi	r2,9
   8b9b0:	1089a904 	addi	r2,r2,9892
   8b9b4:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   8b9b8:	00800274 	movhi	r2,9
   8b9bc:	1089ac04 	addi	r2,r2,9904
   8b9c0:	10c00017 	ldw	r3,0(r2)
   8b9c4:	e0bfff0b 	ldhu	r2,-4(fp)
   8b9c8:	18800b8d 	sth	r2,46(r3)
   8b9cc:	e0bffd17 	ldw	r2,-12(fp)
   8b9d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b9d4:	e0bffb17 	ldw	r2,-20(fp)
   8b9d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   8b9dc:	00855b00 	call	855b0 <OS_Sched>
    }
}
   8b9e0:	e037883a 	mov	sp,fp
   8b9e4:	dfc00117 	ldw	ra,4(sp)
   8b9e8:	df000017 	ldw	fp,0(sp)
   8b9ec:	dec00204 	addi	sp,sp,8
   8b9f0:	f800283a 	ret

0008b9f4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   8b9f4:	defff604 	addi	sp,sp,-40
   8b9f8:	dfc00915 	stw	ra,36(sp)
   8b9fc:	df000815 	stw	fp,32(sp)
   8ba00:	dc000715 	stw	r16,28(sp)
   8ba04:	df000704 	addi	fp,sp,28
   8ba08:	e13ffb05 	stb	r4,-20(fp)
   8ba0c:	e17ffc05 	stb	r5,-16(fp)
   8ba10:	e1bffd05 	stb	r6,-12(fp)
   8ba14:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8ba18:	00800274 	movhi	r2,9
   8ba1c:	1089ab04 	addi	r2,r2,9900
   8ba20:	10800003 	ldbu	r2,0(r2)
   8ba24:	10803fcc 	andi	r2,r2,255
   8ba28:	1005003a 	cmpeq	r2,r2,zero
   8ba2c:	1000031e 	bne	r2,zero,8ba3c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   8ba30:	00801544 	movi	r2,85
   8ba34:	e0bfff15 	stw	r2,-4(fp)
   8ba38:	00004b06 	br	8bb68 <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   8ba3c:	e0bffb03 	ldbu	r2,-20(fp)
   8ba40:	1004c03a 	cmpne	r2,r2,zero
   8ba44:	10000c1e 	bne	r2,zero,8ba78 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
   8ba48:	e0bffc03 	ldbu	r2,-16(fp)
   8ba4c:	1004c03a 	cmpne	r2,r2,zero
   8ba50:	1000091e 	bne	r2,zero,8ba78 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
   8ba54:	e0bffd03 	ldbu	r2,-12(fp)
   8ba58:	1004c03a 	cmpne	r2,r2,zero
   8ba5c:	1000061e 	bne	r2,zero,8ba78 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
   8ba60:	e0bffe0b 	ldhu	r2,-8(fp)
   8ba64:	1004c03a 	cmpne	r2,r2,zero
   8ba68:	1000031e 	bne	r2,zero,8ba78 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
   8ba6c:	00801504 	movi	r2,84
   8ba70:	e0bfff15 	stw	r2,-4(fp)
   8ba74:	00003c06 	br	8bb68 <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
   8ba78:	e0bffc03 	ldbu	r2,-16(fp)
   8ba7c:	10800f30 	cmpltui	r2,r2,60
   8ba80:	1000031e 	bne	r2,zero,8ba90 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   8ba84:	00801444 	movi	r2,81
   8ba88:	e0bfff15 	stw	r2,-4(fp)
   8ba8c:	00003606 	br	8bb68 <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
   8ba90:	e0bffd03 	ldbu	r2,-12(fp)
   8ba94:	10800f30 	cmpltui	r2,r2,60
   8ba98:	1000031e 	bne	r2,zero,8baa8 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
   8ba9c:	00801484 	movi	r2,82
   8baa0:	e0bfff15 	stw	r2,-4(fp)
   8baa4:	00003006 	br	8bb68 <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
   8baa8:	e0bffe0b 	ldhu	r2,-8(fp)
   8baac:	1080fa30 	cmpltui	r2,r2,1000
   8bab0:	1000031e 	bne	r2,zero,8bac0 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
   8bab4:	008014c4 	movi	r2,83
   8bab8:	e0bfff15 	stw	r2,-4(fp)
   8babc:	00002a06 	br	8bb68 <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   8bac0:	e13ffb03 	ldbu	r4,-20(fp)
   8bac4:	01438404 	movi	r5,3600
   8bac8:	0082d2c0 	call	82d2c <__mulsi3>
   8bacc:	1021883a 	mov	r16,r2
   8bad0:	e13ffc03 	ldbu	r4,-16(fp)
   8bad4:	01400f04 	movi	r5,60
   8bad8:	0082d2c0 	call	82d2c <__mulsi3>
   8badc:	8087883a 	add	r3,r16,r2
   8bae0:	e0bffd03 	ldbu	r2,-12(fp)
   8bae4:	1889883a 	add	r4,r3,r2
   8bae8:	0140fa04 	movi	r5,1000
   8baec:	0082d2c0 	call	82d2c <__mulsi3>
   8baf0:	1021883a 	mov	r16,r2
   8baf4:	e13ffe0b 	ldhu	r4,-8(fp)
   8baf8:	0140fa04 	movi	r5,1000
   8bafc:	0082d2c0 	call	82d2c <__mulsi3>
   8bb00:	1009883a 	mov	r4,r2
   8bb04:	0140fa04 	movi	r5,1000
   8bb08:	008edc80 	call	8edc8 <__udivsi3>
   8bb0c:	8085883a 	add	r2,r16,r2
   8bb10:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   8bb14:	e0bffa17 	ldw	r2,-24(fp)
   8bb18:	1004d43a 	srli	r2,r2,16
   8bb1c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   8bb20:	e0bffa17 	ldw	r2,-24(fp)
   8bb24:	10bfffcc 	andi	r2,r2,65535
   8bb28:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   8bb2c:	e0bffa17 	ldw	r2,-24(fp)
   8bb30:	113fffcc 	andi	r4,r2,65535
   8bb34:	008b8a80 	call	8b8a8 <OSTimeDly>
    while (loops > 0) {
   8bb38:	00000706 	br	8bb58 <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
   8bb3c:	01200014 	movui	r4,32768
   8bb40:	008b8a80 	call	8b8a8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   8bb44:	01200014 	movui	r4,32768
   8bb48:	008b8a80 	call	8b8a8 <OSTimeDly>
        loops--;
   8bb4c:	e0bff90b 	ldhu	r2,-28(fp)
   8bb50:	10bfffc4 	addi	r2,r2,-1
   8bb54:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   8bb58:	e0bff90b 	ldhu	r2,-28(fp)
   8bb5c:	1004c03a 	cmpne	r2,r2,zero
   8bb60:	103ff61e 	bne	r2,zero,8bb3c <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   8bb64:	e03fff15 	stw	zero,-4(fp)
   8bb68:	e0bfff17 	ldw	r2,-4(fp)
}
   8bb6c:	e037883a 	mov	sp,fp
   8bb70:	dfc00217 	ldw	ra,8(sp)
   8bb74:	df000117 	ldw	fp,4(sp)
   8bb78:	dc000017 	ldw	r16,0(sp)
   8bb7c:	dec00304 	addi	sp,sp,12
   8bb80:	f800283a 	ret

0008bb84 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   8bb84:	defff404 	addi	sp,sp,-48
   8bb88:	dfc00b15 	stw	ra,44(sp)
   8bb8c:	df000a15 	stw	fp,40(sp)
   8bb90:	df000a04 	addi	fp,sp,40
   8bb94:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   8bb98:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   8bb9c:	e0bffe03 	ldbu	r2,-8(fp)
   8bba0:	10800530 	cmpltui	r2,r2,20
   8bba4:	1000031e 	bne	r2,zero,8bbb4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   8bba8:	00800a84 	movi	r2,42
   8bbac:	e0bfff15 	stw	r2,-4(fp)
   8bbb0:	00007206 	br	8bd7c <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bbb4:	0005303a 	rdctl	r2,status
   8bbb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bbbc:	e0fffb17 	ldw	r3,-20(fp)
   8bbc0:	00bfff84 	movi	r2,-2
   8bbc4:	1884703a 	and	r2,r3,r2
   8bbc8:	1001703a 	wrctl	status,r2
  
  return context;
   8bbcc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   8bbd0:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   8bbd4:	e0bffe03 	ldbu	r2,-8(fp)
   8bbd8:	00c002b4 	movhi	r3,10
   8bbdc:	18e63204 	addi	r3,r3,-26424
   8bbe0:	1085883a 	add	r2,r2,r2
   8bbe4:	1085883a 	add	r2,r2,r2
   8bbe8:	10c5883a 	add	r2,r2,r3
   8bbec:	10800017 	ldw	r2,0(r2)
   8bbf0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
   8bbf4:	e0bffd17 	ldw	r2,-12(fp)
   8bbf8:	1004c03a 	cmpne	r2,r2,zero
   8bbfc:	1000071e 	bne	r2,zero,8bc1c <OSTimeDlyResume+0x98>
   8bc00:	e0bffc17 	ldw	r2,-16(fp)
   8bc04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bc08:	e0bffa17 	ldw	r2,-24(fp)
   8bc0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   8bc10:	008010c4 	movi	r2,67
   8bc14:	e0bfff15 	stw	r2,-4(fp)
   8bc18:	00005806 	br	8bd7c <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   8bc1c:	e0bffd17 	ldw	r2,-12(fp)
   8bc20:	10800058 	cmpnei	r2,r2,1
   8bc24:	1000071e 	bne	r2,zero,8bc44 <OSTimeDlyResume+0xc0>
   8bc28:	e0bffc17 	ldw	r2,-16(fp)
   8bc2c:	e0bff915 	stw	r2,-28(fp)
   8bc30:	e0bff917 	ldw	r2,-28(fp)
   8bc34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   8bc38:	008010c4 	movi	r2,67
   8bc3c:	e0bfff15 	stw	r2,-4(fp)
   8bc40:	00004e06 	br	8bd7c <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   8bc44:	e0bffd17 	ldw	r2,-12(fp)
   8bc48:	10800b8b 	ldhu	r2,46(r2)
   8bc4c:	10bfffcc 	andi	r2,r2,65535
   8bc50:	1004c03a 	cmpne	r2,r2,zero
   8bc54:	1000071e 	bne	r2,zero,8bc74 <OSTimeDlyResume+0xf0>
   8bc58:	e0bffc17 	ldw	r2,-16(fp)
   8bc5c:	e0bff815 	stw	r2,-32(fp)
   8bc60:	e0bff817 	ldw	r2,-32(fp)
   8bc64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   8bc68:	00801404 	movi	r2,80
   8bc6c:	e0bfff15 	stw	r2,-4(fp)
   8bc70:	00004206 	br	8bd7c <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   8bc74:	e0bffd17 	ldw	r2,-12(fp)
   8bc78:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   8bc7c:	e0bffd17 	ldw	r2,-12(fp)
   8bc80:	10800c03 	ldbu	r2,48(r2)
   8bc84:	10803fcc 	andi	r2,r2,255
   8bc88:	10800dcc 	andi	r2,r2,55
   8bc8c:	1005003a 	cmpeq	r2,r2,zero
   8bc90:	10000b1e 	bne	r2,zero,8bcc0 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   8bc94:	e0bffd17 	ldw	r2,-12(fp)
   8bc98:	10c00c03 	ldbu	r3,48(r2)
   8bc9c:	00bff204 	movi	r2,-56
   8bca0:	1884703a 	and	r2,r3,r2
   8bca4:	1007883a 	mov	r3,r2
   8bca8:	e0bffd17 	ldw	r2,-12(fp)
   8bcac:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   8bcb0:	e0fffd17 	ldw	r3,-12(fp)
   8bcb4:	00800044 	movi	r2,1
   8bcb8:	18800c45 	stb	r2,49(r3)
   8bcbc:	00000206 	br	8bcc8 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   8bcc0:	e0bffd17 	ldw	r2,-12(fp)
   8bcc4:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   8bcc8:	e0bffd17 	ldw	r2,-12(fp)
   8bccc:	10800c03 	ldbu	r2,48(r2)
   8bcd0:	10803fcc 	andi	r2,r2,255
   8bcd4:	1080020c 	andi	r2,r2,8
   8bcd8:	1004c03a 	cmpne	r2,r2,zero
   8bcdc:	1000221e 	bne	r2,zero,8bd68 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   8bce0:	e0bffd17 	ldw	r2,-12(fp)
   8bce4:	10c00d83 	ldbu	r3,54(r2)
   8bce8:	00800274 	movhi	r2,9
   8bcec:	1089a904 	addi	r2,r2,9892
   8bcf0:	10800003 	ldbu	r2,0(r2)
   8bcf4:	1884b03a 	or	r2,r3,r2
   8bcf8:	1007883a 	mov	r3,r2
   8bcfc:	00800274 	movhi	r2,9
   8bd00:	1089a904 	addi	r2,r2,9892
   8bd04:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8bd08:	e0bffd17 	ldw	r2,-12(fp)
   8bd0c:	10800d03 	ldbu	r2,52(r2)
   8bd10:	11003fcc 	andi	r4,r2,255
   8bd14:	e0bffd17 	ldw	r2,-12(fp)
   8bd18:	10800d03 	ldbu	r2,52(r2)
   8bd1c:	10c03fcc 	andi	r3,r2,255
   8bd20:	00800274 	movhi	r2,9
   8bd24:	1089a944 	addi	r2,r2,9893
   8bd28:	10c5883a 	add	r2,r2,r3
   8bd2c:	10c00003 	ldbu	r3,0(r2)
   8bd30:	e0bffd17 	ldw	r2,-12(fp)
   8bd34:	10800d43 	ldbu	r2,53(r2)
   8bd38:	1884b03a 	or	r2,r3,r2
   8bd3c:	1007883a 	mov	r3,r2
   8bd40:	00800274 	movhi	r2,9
   8bd44:	1089a944 	addi	r2,r2,9893
   8bd48:	1105883a 	add	r2,r2,r4
   8bd4c:	10c00005 	stb	r3,0(r2)
   8bd50:	e0bffc17 	ldw	r2,-16(fp)
   8bd54:	e0bff715 	stw	r2,-36(fp)
   8bd58:	e0bff717 	ldw	r2,-36(fp)
   8bd5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   8bd60:	00855b00 	call	855b0 <OS_Sched>
   8bd64:	00000406 	br	8bd78 <OSTimeDlyResume+0x1f4>
   8bd68:	e0bffc17 	ldw	r2,-16(fp)
   8bd6c:	e0bff615 	stw	r2,-40(fp)
   8bd70:	e0bff617 	ldw	r2,-40(fp)
   8bd74:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   8bd78:	e03fff15 	stw	zero,-4(fp)
   8bd7c:	e0bfff17 	ldw	r2,-4(fp)
}
   8bd80:	e037883a 	mov	sp,fp
   8bd84:	dfc00117 	ldw	ra,4(sp)
   8bd88:	df000017 	ldw	fp,0(sp)
   8bd8c:	dec00204 	addi	sp,sp,8
   8bd90:	f800283a 	ret

0008bd94 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   8bd94:	defffb04 	addi	sp,sp,-20
   8bd98:	df000415 	stw	fp,16(sp)
   8bd9c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8bda0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bda4:	0005303a 	rdctl	r2,status
   8bda8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bdac:	e0fffd17 	ldw	r3,-12(fp)
   8bdb0:	00bfff84 	movi	r2,-2
   8bdb4:	1884703a 	and	r2,r3,r2
   8bdb8:	1001703a 	wrctl	status,r2
  
  return context;
   8bdbc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   8bdc0:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
   8bdc4:	00800274 	movhi	r2,9
   8bdc8:	1089ad04 	addi	r2,r2,9908
   8bdcc:	10800017 	ldw	r2,0(r2)
   8bdd0:	e0bfff15 	stw	r2,-4(fp)
   8bdd4:	e0bffe17 	ldw	r2,-8(fp)
   8bdd8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bddc:	e0bffc17 	ldw	r2,-16(fp)
   8bde0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   8bde4:	e0bfff17 	ldw	r2,-4(fp)
}
   8bde8:	e037883a 	mov	sp,fp
   8bdec:	df000017 	ldw	fp,0(sp)
   8bdf0:	dec00104 	addi	sp,sp,4
   8bdf4:	f800283a 	ret

0008bdf8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   8bdf8:	defffb04 	addi	sp,sp,-20
   8bdfc:	df000415 	stw	fp,16(sp)
   8be00:	df000404 	addi	fp,sp,16
   8be04:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8be08:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8be0c:	0005303a 	rdctl	r2,status
   8be10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8be14:	e0fffd17 	ldw	r3,-12(fp)
   8be18:	00bfff84 	movi	r2,-2
   8be1c:	1884703a 	and	r2,r3,r2
   8be20:	1001703a 	wrctl	status,r2
  
  return context;
   8be24:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   8be28:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
   8be2c:	00c00274 	movhi	r3,9
   8be30:	18c9ad04 	addi	r3,r3,9908
   8be34:	e0bfff17 	ldw	r2,-4(fp)
   8be38:	18800015 	stw	r2,0(r3)
   8be3c:	e0bffe17 	ldw	r2,-8(fp)
   8be40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8be44:	e0bffc17 	ldw	r2,-16(fp)
   8be48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   8be4c:	e037883a 	mov	sp,fp
   8be50:	df000017 	ldw	fp,0(sp)
   8be54:	dec00104 	addi	sp,sp,4
   8be58:	f800283a 	ret

0008be5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8be5c:	defffd04 	addi	sp,sp,-12
   8be60:	dfc00215 	stw	ra,8(sp)
   8be64:	df000115 	stw	fp,4(sp)
   8be68:	df000104 	addi	fp,sp,4
   8be6c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   8be70:	008e1b80 	call	8e1b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8be74:	00800044 	movi	r2,1
   8be78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8be7c:	e037883a 	mov	sp,fp
   8be80:	dfc00117 	ldw	ra,4(sp)
   8be84:	df000017 	ldw	fp,0(sp)
   8be88:	dec00204 	addi	sp,sp,8
   8be8c:	f800283a 	ret

0008be90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8be90:	defffe04 	addi	sp,sp,-8
   8be94:	dfc00115 	stw	ra,4(sp)
   8be98:	df000015 	stw	fp,0(sp)
   8be9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   8bea0:	01000474 	movhi	r4,17
   8bea4:	21240004 	addi	r4,r4,-28672
   8bea8:	000b883a 	mov	r5,zero
   8beac:	000d883a 	mov	r6,zero
   8beb0:	01c0fa04 	movi	r7,1000
   8beb4:	008ccfc0 	call	8ccfc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8beb8:	01000274 	movhi	r4,9
   8bebc:	213e8704 	addi	r4,r4,-1508
   8bec0:	000b883a 	mov	r5,zero
   8bec4:	01800044 	movi	r6,1
   8bec8:	008c0780 	call	8c078 <altera_avalon_jtag_uart_init>
   8becc:	01000274 	movhi	r4,9
   8bed0:	213e7d04 	addi	r4,r4,-1548
   8bed4:	008bef80 	call	8bef8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
   8bed8:	01000274 	movhi	r4,9
   8bedc:	21029804 	addi	r4,r4,2656
   8bee0:	008bef80 	call	8bef8 <alt_dev_reg>
}
   8bee4:	e037883a 	mov	sp,fp
   8bee8:	dfc00117 	ldw	ra,4(sp)
   8beec:	df000017 	ldw	fp,0(sp)
   8bef0:	dec00204 	addi	sp,sp,8
   8bef4:	f800283a 	ret

0008bef8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8bef8:	defffd04 	addi	sp,sp,-12
   8befc:	dfc00215 	stw	ra,8(sp)
   8bf00:	df000115 	stw	fp,4(sp)
   8bf04:	df000104 	addi	fp,sp,4
   8bf08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8bf0c:	e13fff17 	ldw	r4,-4(fp)
   8bf10:	01400274 	movhi	r5,9
   8bf14:	2942aa04 	addi	r5,r5,2728
   8bf18:	008d6840 	call	8d684 <alt_dev_llist_insert>
}
   8bf1c:	e037883a 	mov	sp,fp
   8bf20:	dfc00117 	ldw	ra,4(sp)
   8bf24:	df000017 	ldw	fp,0(sp)
   8bf28:	dec00204 	addi	sp,sp,8
   8bf2c:	f800283a 	ret

0008bf30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8bf30:	defffa04 	addi	sp,sp,-24
   8bf34:	dfc00515 	stw	ra,20(sp)
   8bf38:	df000415 	stw	fp,16(sp)
   8bf3c:	df000404 	addi	fp,sp,16
   8bf40:	e13ffd15 	stw	r4,-12(fp)
   8bf44:	e17ffe15 	stw	r5,-8(fp)
   8bf48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8bf4c:	e0bffd17 	ldw	r2,-12(fp)
   8bf50:	10800017 	ldw	r2,0(r2)
   8bf54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8bf58:	e0bffc17 	ldw	r2,-16(fp)
   8bf5c:	11000a04 	addi	r4,r2,40
   8bf60:	e0bffd17 	ldw	r2,-12(fp)
   8bf64:	11c00217 	ldw	r7,8(r2)
   8bf68:	e17ffe17 	ldw	r5,-8(fp)
   8bf6c:	e1bfff17 	ldw	r6,-4(fp)
   8bf70:	008c6f00 	call	8c6f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8bf74:	e037883a 	mov	sp,fp
   8bf78:	dfc00117 	ldw	ra,4(sp)
   8bf7c:	df000017 	ldw	fp,0(sp)
   8bf80:	dec00204 	addi	sp,sp,8
   8bf84:	f800283a 	ret

0008bf88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8bf88:	defffa04 	addi	sp,sp,-24
   8bf8c:	dfc00515 	stw	ra,20(sp)
   8bf90:	df000415 	stw	fp,16(sp)
   8bf94:	df000404 	addi	fp,sp,16
   8bf98:	e13ffd15 	stw	r4,-12(fp)
   8bf9c:	e17ffe15 	stw	r5,-8(fp)
   8bfa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8bfa4:	e0bffd17 	ldw	r2,-12(fp)
   8bfa8:	10800017 	ldw	r2,0(r2)
   8bfac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8bfb0:	e0bffc17 	ldw	r2,-16(fp)
   8bfb4:	11000a04 	addi	r4,r2,40
   8bfb8:	e0bffd17 	ldw	r2,-12(fp)
   8bfbc:	11c00217 	ldw	r7,8(r2)
   8bfc0:	e17ffe17 	ldw	r5,-8(fp)
   8bfc4:	e1bfff17 	ldw	r6,-4(fp)
   8bfc8:	008c9b00 	call	8c9b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8bfcc:	e037883a 	mov	sp,fp
   8bfd0:	dfc00117 	ldw	ra,4(sp)
   8bfd4:	df000017 	ldw	fp,0(sp)
   8bfd8:	dec00204 	addi	sp,sp,8
   8bfdc:	f800283a 	ret

0008bfe0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8bfe0:	defffc04 	addi	sp,sp,-16
   8bfe4:	dfc00315 	stw	ra,12(sp)
   8bfe8:	df000215 	stw	fp,8(sp)
   8bfec:	df000204 	addi	fp,sp,8
   8bff0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8bff4:	e0bfff17 	ldw	r2,-4(fp)
   8bff8:	10800017 	ldw	r2,0(r2)
   8bffc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8c000:	e0bffe17 	ldw	r2,-8(fp)
   8c004:	11000a04 	addi	r4,r2,40
   8c008:	e0bfff17 	ldw	r2,-4(fp)
   8c00c:	11400217 	ldw	r5,8(r2)
   8c010:	008c5880 	call	8c588 <altera_avalon_jtag_uart_close>
}
   8c014:	e037883a 	mov	sp,fp
   8c018:	dfc00117 	ldw	ra,4(sp)
   8c01c:	df000017 	ldw	fp,0(sp)
   8c020:	dec00204 	addi	sp,sp,8
   8c024:	f800283a 	ret

0008c028 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8c028:	defffa04 	addi	sp,sp,-24
   8c02c:	dfc00515 	stw	ra,20(sp)
   8c030:	df000415 	stw	fp,16(sp)
   8c034:	df000404 	addi	fp,sp,16
   8c038:	e13ffd15 	stw	r4,-12(fp)
   8c03c:	e17ffe15 	stw	r5,-8(fp)
   8c040:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8c044:	e0bffd17 	ldw	r2,-12(fp)
   8c048:	10800017 	ldw	r2,0(r2)
   8c04c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8c050:	e0bffc17 	ldw	r2,-16(fp)
   8c054:	11000a04 	addi	r4,r2,40
   8c058:	e17ffe17 	ldw	r5,-8(fp)
   8c05c:	e1bfff17 	ldw	r6,-4(fp)
   8c060:	008c5fc0 	call	8c5fc <altera_avalon_jtag_uart_ioctl>
}
   8c064:	e037883a 	mov	sp,fp
   8c068:	dfc00117 	ldw	ra,4(sp)
   8c06c:	df000017 	ldw	fp,0(sp)
   8c070:	dec00204 	addi	sp,sp,8
   8c074:	f800283a 	ret

0008c078 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8c078:	defff404 	addi	sp,sp,-48
   8c07c:	dfc00b15 	stw	ra,44(sp)
   8c080:	df000a15 	stw	fp,40(sp)
   8c084:	df000a04 	addi	fp,sp,40
   8c088:	e13ffd15 	stw	r4,-12(fp)
   8c08c:	e17ffe15 	stw	r5,-8(fp)
   8c090:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   8c094:	e0bffd17 	ldw	r2,-12(fp)
   8c098:	10800c04 	addi	r2,r2,48
   8c09c:	e0bffb15 	stw	r2,-20(fp)
   8c0a0:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   8c0a4:	e13ffc0b 	ldhu	r4,-16(fp)
   8c0a8:	e17ffc84 	addi	r5,fp,-14
   8c0ac:	00861580 	call	86158 <OSFlagCreate>
   8c0b0:	1007883a 	mov	r3,r2
   8c0b4:	e0bffb17 	ldw	r2,-20(fp)
   8c0b8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   8c0bc:	e0bffd17 	ldw	r2,-12(fp)
   8c0c0:	10800a04 	addi	r2,r2,40
   8c0c4:	e0bff915 	stw	r2,-28(fp)
   8c0c8:	00800044 	movi	r2,1
   8c0cc:	e0bffa0d 	sth	r2,-24(fp)
   8c0d0:	e13ffa0b 	ldhu	r4,-24(fp)
   8c0d4:	00893600 	call	89360 <OSSemCreate>
   8c0d8:	1007883a 	mov	r3,r2
   8c0dc:	e0bff917 	ldw	r2,-28(fp)
   8c0e0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   8c0e4:	e0bffd17 	ldw	r2,-12(fp)
   8c0e8:	10800b04 	addi	r2,r2,44
   8c0ec:	e0bff715 	stw	r2,-36(fp)
   8c0f0:	00800044 	movi	r2,1
   8c0f4:	e0bff80d 	sth	r2,-32(fp)
   8c0f8:	e13ff80b 	ldhu	r4,-32(fp)
   8c0fc:	00893600 	call	89360 <OSSemCreate>
   8c100:	1007883a 	mov	r3,r2
   8c104:	e0bff717 	ldw	r2,-36(fp)
   8c108:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c10c:	e0fffd17 	ldw	r3,-12(fp)
   8c110:	00800044 	movi	r2,1
   8c114:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8c118:	e0bffd17 	ldw	r2,-12(fp)
   8c11c:	10800017 	ldw	r2,0(r2)
   8c120:	11000104 	addi	r4,r2,4
   8c124:	e0bffd17 	ldw	r2,-12(fp)
   8c128:	10800817 	ldw	r2,32(r2)
   8c12c:	1007883a 	mov	r3,r2
   8c130:	2005883a 	mov	r2,r4
   8c134:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8c138:	e13ffe17 	ldw	r4,-8(fp)
   8c13c:	e17fff17 	ldw	r5,-4(fp)
   8c140:	d8000015 	stw	zero,0(sp)
   8c144:	01800274 	movhi	r6,9
   8c148:	31b06c04 	addi	r6,r6,-15952
   8c14c:	e1fffd17 	ldw	r7,-12(fp)
   8c150:	008d9100 	call	8d910 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8c154:	e0bffd17 	ldw	r2,-12(fp)
   8c158:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8c15c:	e0bffd17 	ldw	r2,-12(fp)
   8c160:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8c164:	00800274 	movhi	r2,9
   8c168:	1089b204 	addi	r2,r2,9928
   8c16c:	10800017 	ldw	r2,0(r2)
   8c170:	100b883a 	mov	r5,r2
   8c174:	01800274 	movhi	r6,9
   8c178:	31b11d04 	addi	r6,r6,-15244
   8c17c:	e1fffd17 	ldw	r7,-12(fp)
   8c180:	008d5140 	call	8d514 <alt_alarm_start>
   8c184:	1004403a 	cmpge	r2,r2,zero
   8c188:	1000041e 	bne	r2,zero,8c19c <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8c18c:	e0fffd17 	ldw	r3,-12(fp)
   8c190:	00a00034 	movhi	r2,32768
   8c194:	10bfffc4 	addi	r2,r2,-1
   8c198:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8c19c:	e037883a 	mov	sp,fp
   8c1a0:	dfc00117 	ldw	ra,4(sp)
   8c1a4:	df000017 	ldw	fp,0(sp)
   8c1a8:	dec00204 	addi	sp,sp,8
   8c1ac:	f800283a 	ret

0008c1b0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8c1b0:	defff204 	addi	sp,sp,-56
   8c1b4:	dfc00d15 	stw	ra,52(sp)
   8c1b8:	df000c15 	stw	fp,48(sp)
   8c1bc:	df000c04 	addi	fp,sp,48
   8c1c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8c1c4:	e0bfff17 	ldw	r2,-4(fp)
   8c1c8:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   8c1cc:	e0bffd17 	ldw	r2,-12(fp)
   8c1d0:	10800017 	ldw	r2,0(r2)
   8c1d4:	e0bffc15 	stw	r2,-16(fp)
   8c1d8:	00000006 	br	8c1dc <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c1dc:	e0bffc17 	ldw	r2,-16(fp)
   8c1e0:	10800104 	addi	r2,r2,4
   8c1e4:	10800037 	ldwio	r2,0(r2)
   8c1e8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8c1ec:	e0bffb17 	ldw	r2,-20(fp)
   8c1f0:	1080c00c 	andi	r2,r2,768
   8c1f4:	1005003a 	cmpeq	r2,r2,zero
   8c1f8:	1000991e 	bne	r2,zero,8c460 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8c1fc:	e0bffb17 	ldw	r2,-20(fp)
   8c200:	1080400c 	andi	r2,r2,256
   8c204:	1005003a 	cmpeq	r2,r2,zero
   8c208:	1000481e 	bne	r2,zero,8c32c <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8c20c:	00800074 	movhi	r2,1
   8c210:	e0bffa15 	stw	r2,-24(fp)
   8c214:	00000006 	br	8c218 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c218:	e0bffd17 	ldw	r2,-12(fp)
   8c21c:	10800d17 	ldw	r2,52(r2)
   8c220:	10800044 	addi	r2,r2,1
   8c224:	1081ffcc 	andi	r2,r2,2047
   8c228:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   8c22c:	e0bffd17 	ldw	r2,-12(fp)
   8c230:	10c00e17 	ldw	r3,56(r2)
   8c234:	e0bff917 	ldw	r2,-28(fp)
   8c238:	18802826 	beq	r3,r2,8c2dc <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8c23c:	e0bffc17 	ldw	r2,-16(fp)
   8c240:	10800037 	ldwio	r2,0(r2)
   8c244:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8c248:	e0bffa17 	ldw	r2,-24(fp)
   8c24c:	10a0000c 	andi	r2,r2,32768
   8c250:	1005003a 	cmpeq	r2,r2,zero
   8c254:	1000211e 	bne	r2,zero,8c2dc <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8c258:	e0bffd17 	ldw	r2,-12(fp)
   8c25c:	10c00d17 	ldw	r3,52(r2)
   8c260:	e0bffa17 	ldw	r2,-24(fp)
   8c264:	1009883a 	mov	r4,r2
   8c268:	e0bffd17 	ldw	r2,-12(fp)
   8c26c:	1885883a 	add	r2,r3,r2
   8c270:	10801104 	addi	r2,r2,68
   8c274:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c278:	e0bffd17 	ldw	r2,-12(fp)
   8c27c:	10800d17 	ldw	r2,52(r2)
   8c280:	10800044 	addi	r2,r2,1
   8c284:	10c1ffcc 	andi	r3,r2,2047
   8c288:	e0bffd17 	ldw	r2,-12(fp)
   8c28c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   8c290:	e0bffd17 	ldw	r2,-12(fp)
   8c294:	10800c17 	ldw	r2,48(r2)
   8c298:	e0bff615 	stw	r2,-40(fp)
   8c29c:	00800044 	movi	r2,1
   8c2a0:	e0bff70d 	sth	r2,-36(fp)
   8c2a4:	00800044 	movi	r2,1
   8c2a8:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   8c2ac:	00800274 	movhi	r2,9
   8c2b0:	10899d44 	addi	r2,r2,9845
   8c2b4:	10800003 	ldbu	r2,0(r2)
   8c2b8:	10803fcc 	andi	r2,r2,255
   8c2bc:	1005003a 	cmpeq	r2,r2,zero
   8c2c0:	103fd51e 	bne	r2,zero,8c218 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
   8c2c4:	e17ff70b 	ldhu	r5,-36(fp)
   8c2c8:	e1bff783 	ldbu	r6,-34(fp)
   8c2cc:	e1fffe04 	addi	r7,fp,-8
   8c2d0:	e13ff617 	ldw	r4,-40(fp)
   8c2d4:	0086e800 	call	86e80 <OSFlagPost>
    return err;
   8c2d8:	003fcf06 	br	8c218 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8c2dc:	e0bffa17 	ldw	r2,-24(fp)
   8c2e0:	10bfffec 	andhi	r2,r2,65535
   8c2e4:	1005003a 	cmpeq	r2,r2,zero
   8c2e8:	1000101e 	bne	r2,zero,8c32c <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c2ec:	e0bffd17 	ldw	r2,-12(fp)
   8c2f0:	10c00817 	ldw	r3,32(r2)
   8c2f4:	00bfff84 	movi	r2,-2
   8c2f8:	1886703a 	and	r3,r3,r2
   8c2fc:	e0bffd17 	ldw	r2,-12(fp)
   8c300:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8c304:	e0bffc17 	ldw	r2,-16(fp)
   8c308:	11000104 	addi	r4,r2,4
   8c30c:	e0bffd17 	ldw	r2,-12(fp)
   8c310:	10800817 	ldw	r2,32(r2)
   8c314:	1007883a 	mov	r3,r2
   8c318:	2005883a 	mov	r2,r4
   8c31c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c320:	e0bffc17 	ldw	r2,-16(fp)
   8c324:	10800104 	addi	r2,r2,4
   8c328:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8c32c:	e0bffb17 	ldw	r2,-20(fp)
   8c330:	1080800c 	andi	r2,r2,512
   8c334:	1005003a 	cmpeq	r2,r2,zero
   8c338:	103fa81e 	bne	r2,zero,8c1dc <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8c33c:	e0bffb17 	ldw	r2,-20(fp)
   8c340:	10bfffec 	andhi	r2,r2,65535
   8c344:	1004d43a 	srli	r2,r2,16
   8c348:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c34c:	00002706 	br	8c3ec <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8c350:	e13ffc17 	ldw	r4,-16(fp)
   8c354:	e0bffd17 	ldw	r2,-12(fp)
   8c358:	10c01017 	ldw	r3,64(r2)
   8c35c:	e0bffd17 	ldw	r2,-12(fp)
   8c360:	1885883a 	add	r2,r3,r2
   8c364:	10821104 	addi	r2,r2,2116
   8c368:	10800003 	ldbu	r2,0(r2)
   8c36c:	10c03fcc 	andi	r3,r2,255
   8c370:	18c0201c 	xori	r3,r3,128
   8c374:	18ffe004 	addi	r3,r3,-128
   8c378:	2005883a 	mov	r2,r4
   8c37c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c380:	e0bffd17 	ldw	r2,-12(fp)
   8c384:	10801017 	ldw	r2,64(r2)
   8c388:	10800044 	addi	r2,r2,1
   8c38c:	10c1ffcc 	andi	r3,r2,2047
   8c390:	e0bffd17 	ldw	r2,-12(fp)
   8c394:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   8c398:	e0bffd17 	ldw	r2,-12(fp)
   8c39c:	10800c17 	ldw	r2,48(r2)
   8c3a0:	e0bff415 	stw	r2,-48(fp)
   8c3a4:	00800084 	movi	r2,2
   8c3a8:	e0bff50d 	sth	r2,-44(fp)
   8c3ac:	00800044 	movi	r2,1
   8c3b0:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   8c3b4:	00800274 	movhi	r2,9
   8c3b8:	10899d44 	addi	r2,r2,9845
   8c3bc:	10800003 	ldbu	r2,0(r2)
   8c3c0:	10803fcc 	andi	r2,r2,255
   8c3c4:	1005003a 	cmpeq	r2,r2,zero
   8c3c8:	1000051e 	bne	r2,zero,8c3e0 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
   8c3cc:	e17ff50b 	ldhu	r5,-44(fp)
   8c3d0:	e1bff583 	ldbu	r6,-42(fp)
   8c3d4:	e1fffe44 	addi	r7,fp,-7
   8c3d8:	e13ff417 	ldw	r4,-48(fp)
   8c3dc:	0086e800 	call	86e80 <OSFlagPost>

        space--;
   8c3e0:	e0bff817 	ldw	r2,-32(fp)
   8c3e4:	10bfffc4 	addi	r2,r2,-1
   8c3e8:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c3ec:	e0bff817 	ldw	r2,-32(fp)
   8c3f0:	1005003a 	cmpeq	r2,r2,zero
   8c3f4:	1000051e 	bne	r2,zero,8c40c <altera_avalon_jtag_uart_irq+0x25c>
   8c3f8:	e0bffd17 	ldw	r2,-12(fp)
   8c3fc:	10c01017 	ldw	r3,64(r2)
   8c400:	e0bffd17 	ldw	r2,-12(fp)
   8c404:	10800f17 	ldw	r2,60(r2)
   8c408:	18bfd11e 	bne	r3,r2,8c350 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8c40c:	e0bff817 	ldw	r2,-32(fp)
   8c410:	1005003a 	cmpeq	r2,r2,zero
   8c414:	103f711e 	bne	r2,zero,8c1dc <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c418:	e0bffd17 	ldw	r2,-12(fp)
   8c41c:	10c00817 	ldw	r3,32(r2)
   8c420:	00bfff44 	movi	r2,-3
   8c424:	1886703a 	and	r3,r3,r2
   8c428:	e0bffd17 	ldw	r2,-12(fp)
   8c42c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c430:	e0bffd17 	ldw	r2,-12(fp)
   8c434:	10800017 	ldw	r2,0(r2)
   8c438:	11000104 	addi	r4,r2,4
   8c43c:	e0bffd17 	ldw	r2,-12(fp)
   8c440:	10800817 	ldw	r2,32(r2)
   8c444:	1007883a 	mov	r3,r2
   8c448:	2005883a 	mov	r2,r4
   8c44c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c450:	e0bffc17 	ldw	r2,-16(fp)
   8c454:	10800104 	addi	r2,r2,4
   8c458:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8c45c:	003f5f06 	br	8c1dc <altera_avalon_jtag_uart_irq+0x2c>
}
   8c460:	e037883a 	mov	sp,fp
   8c464:	dfc00117 	ldw	ra,4(sp)
   8c468:	df000017 	ldw	fp,0(sp)
   8c46c:	dec00204 	addi	sp,sp,8
   8c470:	f800283a 	ret

0008c474 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8c474:	defff804 	addi	sp,sp,-32
   8c478:	dfc00715 	stw	ra,28(sp)
   8c47c:	df000615 	stw	fp,24(sp)
   8c480:	df000604 	addi	fp,sp,24
   8c484:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8c488:	e0bfff17 	ldw	r2,-4(fp)
   8c48c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8c490:	e0bffd17 	ldw	r2,-12(fp)
   8c494:	10800017 	ldw	r2,0(r2)
   8c498:	10800104 	addi	r2,r2,4
   8c49c:	10800037 	ldwio	r2,0(r2)
   8c4a0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8c4a4:	e0bffc17 	ldw	r2,-16(fp)
   8c4a8:	1081000c 	andi	r2,r2,1024
   8c4ac:	1005003a 	cmpeq	r2,r2,zero
   8c4b0:	10000c1e 	bne	r2,zero,8c4e4 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8c4b4:	e0bffd17 	ldw	r2,-12(fp)
   8c4b8:	10800017 	ldw	r2,0(r2)
   8c4bc:	11000104 	addi	r4,r2,4
   8c4c0:	e0bffd17 	ldw	r2,-12(fp)
   8c4c4:	10800817 	ldw	r2,32(r2)
   8c4c8:	10810014 	ori	r2,r2,1024
   8c4cc:	1007883a 	mov	r3,r2
   8c4d0:	2005883a 	mov	r2,r4
   8c4d4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8c4d8:	e0bffd17 	ldw	r2,-12(fp)
   8c4dc:	10000915 	stw	zero,36(r2)
   8c4e0:	00002106 	br	8c568 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8c4e4:	e0bffd17 	ldw	r2,-12(fp)
   8c4e8:	10c00917 	ldw	r3,36(r2)
   8c4ec:	00a00034 	movhi	r2,32768
   8c4f0:	10bfff04 	addi	r2,r2,-4
   8c4f4:	10c01c36 	bltu	r2,r3,8c568 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
   8c4f8:	e0bffd17 	ldw	r2,-12(fp)
   8c4fc:	10800917 	ldw	r2,36(r2)
   8c500:	10c00044 	addi	r3,r2,1
   8c504:	e0bffd17 	ldw	r2,-12(fp)
   8c508:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   8c50c:	e0bffd17 	ldw	r2,-12(fp)
   8c510:	10c00917 	ldw	r3,36(r2)
   8c514:	e0bffd17 	ldw	r2,-12(fp)
   8c518:	10800117 	ldw	r2,4(r2)
   8c51c:	18801236 	bltu	r3,r2,8c568 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   8c520:	e0bffd17 	ldw	r2,-12(fp)
   8c524:	10800c17 	ldw	r2,48(r2)
   8c528:	e0bffa15 	stw	r2,-24(fp)
   8c52c:	00800104 	movi	r2,4
   8c530:	e0bffb0d 	sth	r2,-20(fp)
   8c534:	00800044 	movi	r2,1
   8c538:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   8c53c:	00800274 	movhi	r2,9
   8c540:	10899d44 	addi	r2,r2,9845
   8c544:	10800003 	ldbu	r2,0(r2)
   8c548:	10803fcc 	andi	r2,r2,255
   8c54c:	1005003a 	cmpeq	r2,r2,zero
   8c550:	1000051e 	bne	r2,zero,8c568 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
   8c554:	e17ffb0b 	ldhu	r5,-20(fp)
   8c558:	e1bffb83 	ldbu	r6,-18(fp)
   8c55c:	e1fffe04 	addi	r7,fp,-8
   8c560:	e13ffa17 	ldw	r4,-24(fp)
   8c564:	0086e800 	call	86e80 <OSFlagPost>
   8c568:	00800274 	movhi	r2,9
   8c56c:	1089b204 	addi	r2,r2,9928
   8c570:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   8c574:	e037883a 	mov	sp,fp
   8c578:	dfc00117 	ldw	ra,4(sp)
   8c57c:	df000017 	ldw	fp,0(sp)
   8c580:	dec00204 	addi	sp,sp,8
   8c584:	f800283a 	ret

0008c588 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8c588:	defffc04 	addi	sp,sp,-16
   8c58c:	df000315 	stw	fp,12(sp)
   8c590:	df000304 	addi	fp,sp,12
   8c594:	e13ffd15 	stw	r4,-12(fp)
   8c598:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c59c:	00000706 	br	8c5bc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8c5a0:	e0bffe17 	ldw	r2,-8(fp)
   8c5a4:	1090000c 	andi	r2,r2,16384
   8c5a8:	1005003a 	cmpeq	r2,r2,zero
   8c5ac:	1000031e 	bne	r2,zero,8c5bc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8c5b0:	00bffd44 	movi	r2,-11
   8c5b4:	e0bfff15 	stw	r2,-4(fp)
   8c5b8:	00000b06 	br	8c5e8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c5bc:	e0bffd17 	ldw	r2,-12(fp)
   8c5c0:	10c01017 	ldw	r3,64(r2)
   8c5c4:	e0bffd17 	ldw	r2,-12(fp)
   8c5c8:	10800f17 	ldw	r2,60(r2)
   8c5cc:	18800526 	beq	r3,r2,8c5e4 <altera_avalon_jtag_uart_close+0x5c>
   8c5d0:	e0bffd17 	ldw	r2,-12(fp)
   8c5d4:	10c00917 	ldw	r3,36(r2)
   8c5d8:	e0bffd17 	ldw	r2,-12(fp)
   8c5dc:	10800117 	ldw	r2,4(r2)
   8c5e0:	18bfef36 	bltu	r3,r2,8c5a0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8c5e4:	e03fff15 	stw	zero,-4(fp)
   8c5e8:	e0bfff17 	ldw	r2,-4(fp)
}
   8c5ec:	e037883a 	mov	sp,fp
   8c5f0:	df000017 	ldw	fp,0(sp)
   8c5f4:	dec00104 	addi	sp,sp,4
   8c5f8:	f800283a 	ret

0008c5fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8c5fc:	defff804 	addi	sp,sp,-32
   8c600:	df000715 	stw	fp,28(sp)
   8c604:	df000704 	addi	fp,sp,28
   8c608:	e13ffb15 	stw	r4,-20(fp)
   8c60c:	e17ffc15 	stw	r5,-16(fp)
   8c610:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8c614:	00bff9c4 	movi	r2,-25
   8c618:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   8c61c:	e0bffc17 	ldw	r2,-16(fp)
   8c620:	e0bfff15 	stw	r2,-4(fp)
   8c624:	e0ffff17 	ldw	r3,-4(fp)
   8c628:	189a8060 	cmpeqi	r2,r3,27137
   8c62c:	1000041e 	bne	r2,zero,8c640 <altera_avalon_jtag_uart_ioctl+0x44>
   8c630:	e0ffff17 	ldw	r3,-4(fp)
   8c634:	189a80a0 	cmpeqi	r2,r3,27138
   8c638:	10001b1e 	bne	r2,zero,8c6a8 <altera_avalon_jtag_uart_ioctl+0xac>
   8c63c:	00002706 	br	8c6dc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8c640:	e0bffb17 	ldw	r2,-20(fp)
   8c644:	10c00117 	ldw	r3,4(r2)
   8c648:	00a00034 	movhi	r2,32768
   8c64c:	10bfffc4 	addi	r2,r2,-1
   8c650:	18802226 	beq	r3,r2,8c6dc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   8c654:	e0bffd17 	ldw	r2,-12(fp)
   8c658:	10800017 	ldw	r2,0(r2)
   8c65c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8c660:	e0bff917 	ldw	r2,-28(fp)
   8c664:	10800090 	cmplti	r2,r2,2
   8c668:	1000071e 	bne	r2,zero,8c688 <altera_avalon_jtag_uart_ioctl+0x8c>
   8c66c:	e0fff917 	ldw	r3,-28(fp)
   8c670:	00a00034 	movhi	r2,32768
   8c674:	10bfffc4 	addi	r2,r2,-1
   8c678:	18800326 	beq	r3,r2,8c688 <altera_avalon_jtag_uart_ioctl+0x8c>
   8c67c:	e0bff917 	ldw	r2,-28(fp)
   8c680:	e0bffe15 	stw	r2,-8(fp)
   8c684:	00000306 	br	8c694 <altera_avalon_jtag_uart_ioctl+0x98>
   8c688:	00e00034 	movhi	r3,32768
   8c68c:	18ffff84 	addi	r3,r3,-2
   8c690:	e0fffe15 	stw	r3,-8(fp)
   8c694:	e0bffb17 	ldw	r2,-20(fp)
   8c698:	e0fffe17 	ldw	r3,-8(fp)
   8c69c:	10c00115 	stw	r3,4(r2)
      rc = 0;
   8c6a0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8c6a4:	00000d06 	br	8c6dc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8c6a8:	e0bffb17 	ldw	r2,-20(fp)
   8c6ac:	10c00117 	ldw	r3,4(r2)
   8c6b0:	00a00034 	movhi	r2,32768
   8c6b4:	10bfffc4 	addi	r2,r2,-1
   8c6b8:	18800826 	beq	r3,r2,8c6dc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8c6bc:	e13ffd17 	ldw	r4,-12(fp)
   8c6c0:	e0bffb17 	ldw	r2,-20(fp)
   8c6c4:	10c00917 	ldw	r3,36(r2)
   8c6c8:	e0bffb17 	ldw	r2,-20(fp)
   8c6cc:	10800117 	ldw	r2,4(r2)
   8c6d0:	1885803a 	cmpltu	r2,r3,r2
   8c6d4:	20800015 	stw	r2,0(r4)
      rc = 0;
   8c6d8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   8c6dc:	e0bffa17 	ldw	r2,-24(fp)
}
   8c6e0:	e037883a 	mov	sp,fp
   8c6e4:	df000017 	ldw	fp,0(sp)
   8c6e8:	dec00104 	addi	sp,sp,4
   8c6ec:	f800283a 	ret

0008c6f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8c6f0:	deffeb04 	addi	sp,sp,-84
   8c6f4:	dfc01415 	stw	ra,80(sp)
   8c6f8:	df001315 	stw	fp,76(sp)
   8c6fc:	df001304 	addi	fp,sp,76
   8c700:	e13ffb15 	stw	r4,-20(fp)
   8c704:	e17ffc15 	stw	r5,-16(fp)
   8c708:	e1bffd15 	stw	r6,-12(fp)
   8c70c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8c710:	e0bffc17 	ldw	r2,-16(fp)
   8c714:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   8c718:	e0bffb17 	ldw	r2,-20(fp)
   8c71c:	10800a17 	ldw	r2,40(r2)
   8c720:	e0bff315 	stw	r2,-52(fp)
   8c724:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   8c728:	e17ff40b 	ldhu	r5,-48(fp)
   8c72c:	e1bffa44 	addi	r6,fp,-23
   8c730:	e13ff317 	ldw	r4,-52(fp)
   8c734:	00897140 	call	89714 <OSSemPend>

  while (space > 0)
   8c738:	00006406 	br	8c8cc <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8c73c:	e0bffb17 	ldw	r2,-20(fp)
   8c740:	10800d17 	ldw	r2,52(r2)
   8c744:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
   8c748:	e0bffb17 	ldw	r2,-20(fp)
   8c74c:	10800e17 	ldw	r2,56(r2)
   8c750:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
   8c754:	e0fff617 	ldw	r3,-40(fp)
   8c758:	e0bff517 	ldw	r2,-44(fp)
   8c75c:	18800536 	bltu	r3,r2,8c774 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
   8c760:	e0bff617 	ldw	r2,-40(fp)
   8c764:	e0fff517 	ldw	r3,-44(fp)
   8c768:	10c5c83a 	sub	r2,r2,r3
   8c76c:	e0bff715 	stw	r2,-36(fp)
   8c770:	00000406 	br	8c784 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8c774:	00820004 	movi	r2,2048
   8c778:	e0fff517 	ldw	r3,-44(fp)
   8c77c:	10c5c83a 	sub	r2,r2,r3
   8c780:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   8c784:	e0bff717 	ldw	r2,-36(fp)
   8c788:	1005003a 	cmpeq	r2,r2,zero
   8c78c:	10001f1e 	bne	r2,zero,8c80c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   8c790:	e0fffd17 	ldw	r3,-12(fp)
   8c794:	e0bff717 	ldw	r2,-36(fp)
   8c798:	1880022e 	bgeu	r3,r2,8c7a4 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
   8c79c:	e0bffd17 	ldw	r2,-12(fp)
   8c7a0:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8c7a4:	e0bffb17 	ldw	r2,-20(fp)
   8c7a8:	10c01104 	addi	r3,r2,68
   8c7ac:	e0bff517 	ldw	r2,-44(fp)
   8c7b0:	1887883a 	add	r3,r3,r2
   8c7b4:	e0bff917 	ldw	r2,-28(fp)
   8c7b8:	1009883a 	mov	r4,r2
   8c7bc:	180b883a 	mov	r5,r3
   8c7c0:	e1bff717 	ldw	r6,-36(fp)
   8c7c4:	00811d00 	call	811d0 <memcpy>
      ptr   += n;
   8c7c8:	e0fff717 	ldw	r3,-36(fp)
   8c7cc:	e0bff917 	ldw	r2,-28(fp)
   8c7d0:	10c5883a 	add	r2,r2,r3
   8c7d4:	e0bff915 	stw	r2,-28(fp)
      space -= n;
   8c7d8:	e0fffd17 	ldw	r3,-12(fp)
   8c7dc:	e0bff717 	ldw	r2,-36(fp)
   8c7e0:	1885c83a 	sub	r2,r3,r2
   8c7e4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c7e8:	e0fff517 	ldw	r3,-44(fp)
   8c7ec:	e0bff717 	ldw	r2,-36(fp)
   8c7f0:	1885883a 	add	r2,r3,r2
   8c7f4:	10c1ffcc 	andi	r3,r2,2047
   8c7f8:	e0bffb17 	ldw	r2,-20(fp)
   8c7fc:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   8c800:	e0bffd17 	ldw	r2,-12(fp)
   8c804:	10800048 	cmpgei	r2,r2,1
   8c808:	103fcc1e 	bne	r2,zero,8c73c <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
   8c80c:	e0fff917 	ldw	r3,-28(fp)
   8c810:	e0bffc17 	ldw	r2,-16(fp)
   8c814:	1880301e 	bne	r3,r2,8c8d8 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8c818:	e0bffe17 	ldw	r2,-8(fp)
   8c81c:	1090000c 	andi	r2,r2,16384
   8c820:	1004c03a 	cmpne	r2,r2,zero
   8c824:	10002c1e 	bne	r2,zero,8c8d8 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   8c828:	00800274 	movhi	r2,9
   8c82c:	10899d44 	addi	r2,r2,9845
   8c830:	10800003 	ldbu	r2,0(r2)
   8c834:	10803fcc 	andi	r2,r2,255
   8c838:	10800058 	cmpnei	r2,r2,1
   8c83c:	1000161e 	bne	r2,zero,8c898 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   8c840:	e0bffb17 	ldw	r2,-20(fp)
   8c844:	10800c17 	ldw	r2,48(r2)
   8c848:	e0bff015 	stw	r2,-64(fp)
   8c84c:	00800144 	movi	r2,5
   8c850:	e0bff10d 	sth	r2,-60(fp)
   8c854:	00bfe0c4 	movi	r2,-125
   8c858:	e0bff185 	stb	r2,-58(fp)
   8c85c:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   8c860:	00800274 	movhi	r2,9
   8c864:	10899d44 	addi	r2,r2,9845
   8c868:	10800003 	ldbu	r2,0(r2)
   8c86c:	10803fcc 	andi	r2,r2,255
   8c870:	1005003a 	cmpeq	r2,r2,zero
   8c874:	1000111e 	bne	r2,zero,8c8bc <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   8c878:	e17ff10b 	ldhu	r5,-60(fp)
   8c87c:	e1bff183 	ldbu	r6,-58(fp)
   8c880:	e1fff20b 	ldhu	r7,-56(fp)
   8c884:	e0bffa04 	addi	r2,fp,-24
   8c888:	d8800015 	stw	r2,0(sp)
   8c88c:	e13ff017 	ldw	r4,-64(fp)
   8c890:	00867d40 	call	867d4 <OSFlagPend>
    return err;
   8c894:	00000906 	br	8c8bc <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8c898:	e0bffb17 	ldw	r2,-20(fp)
   8c89c:	10c00d17 	ldw	r3,52(r2)
   8c8a0:	e0bff617 	ldw	r2,-40(fp)
   8c8a4:	1880051e 	bne	r3,r2,8c8bc <altera_avalon_jtag_uart_read+0x1cc>
   8c8a8:	e0bffb17 	ldw	r2,-20(fp)
   8c8ac:	10c00917 	ldw	r3,36(r2)
   8c8b0:	e0bffb17 	ldw	r2,-20(fp)
   8c8b4:	10800117 	ldw	r2,4(r2)
   8c8b8:	18bff736 	bltu	r3,r2,8c898 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8c8bc:	e0bffb17 	ldw	r2,-20(fp)
   8c8c0:	10c00d17 	ldw	r3,52(r2)
   8c8c4:	e0bff617 	ldw	r2,-40(fp)
   8c8c8:	18800326 	beq	r3,r2,8c8d8 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c8cc:	e0bffd17 	ldw	r2,-12(fp)
   8c8d0:	10800048 	cmpgei	r2,r2,1
   8c8d4:	103f991e 	bne	r2,zero,8c73c <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   8c8d8:	e0bffb17 	ldw	r2,-20(fp)
   8c8dc:	11000a17 	ldw	r4,40(r2)
   8c8e0:	0089b0c0 	call	89b0c <OSSemPost>

  if (ptr != buffer)
   8c8e4:	e0fff917 	ldw	r3,-28(fp)
   8c8e8:	e0bffc17 	ldw	r2,-16(fp)
   8c8ec:	18801926 	beq	r3,r2,8c954 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c8f0:	0005303a 	rdctl	r2,status
   8c8f4:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c8f8:	e0ffef17 	ldw	r3,-68(fp)
   8c8fc:	00bfff84 	movi	r2,-2
   8c900:	1884703a 	and	r2,r3,r2
   8c904:	1001703a 	wrctl	status,r2
  
  return context;
   8c908:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8c90c:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c910:	e0bffb17 	ldw	r2,-20(fp)
   8c914:	10800817 	ldw	r2,32(r2)
   8c918:	10c00054 	ori	r3,r2,1
   8c91c:	e0bffb17 	ldw	r2,-20(fp)
   8c920:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c924:	e0bffb17 	ldw	r2,-20(fp)
   8c928:	10800017 	ldw	r2,0(r2)
   8c92c:	11000104 	addi	r4,r2,4
   8c930:	e0bffb17 	ldw	r2,-20(fp)
   8c934:	10800817 	ldw	r2,32(r2)
   8c938:	1007883a 	mov	r3,r2
   8c93c:	2005883a 	mov	r2,r4
   8c940:	10c00035 	stwio	r3,0(r2)
   8c944:	e0bff817 	ldw	r2,-32(fp)
   8c948:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c94c:	e0bfee17 	ldw	r2,-72(fp)
   8c950:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8c954:	e0fff917 	ldw	r3,-28(fp)
   8c958:	e0bffc17 	ldw	r2,-16(fp)
   8c95c:	18800526 	beq	r3,r2,8c974 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
   8c960:	e0fff917 	ldw	r3,-28(fp)
   8c964:	e0bffc17 	ldw	r2,-16(fp)
   8c968:	1887c83a 	sub	r3,r3,r2
   8c96c:	e0ffff15 	stw	r3,-4(fp)
   8c970:	00000906 	br	8c998 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   8c974:	e0bffe17 	ldw	r2,-8(fp)
   8c978:	1090000c 	andi	r2,r2,16384
   8c97c:	1005003a 	cmpeq	r2,r2,zero
   8c980:	1000031e 	bne	r2,zero,8c990 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
   8c984:	00bffd44 	movi	r2,-11
   8c988:	e0bfff15 	stw	r2,-4(fp)
   8c98c:	00000206 	br	8c998 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   8c990:	00bffec4 	movi	r2,-5
   8c994:	e0bfff15 	stw	r2,-4(fp)
   8c998:	e0bfff17 	ldw	r2,-4(fp)
}
   8c99c:	e037883a 	mov	sp,fp
   8c9a0:	dfc00117 	ldw	ra,4(sp)
   8c9a4:	df000017 	ldw	fp,0(sp)
   8c9a8:	dec00204 	addi	sp,sp,8
   8c9ac:	f800283a 	ret

0008c9b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8c9b0:	deffeb04 	addi	sp,sp,-84
   8c9b4:	dfc01415 	stw	ra,80(sp)
   8c9b8:	df001315 	stw	fp,76(sp)
   8c9bc:	df001304 	addi	fp,sp,76
   8c9c0:	e13ffb15 	stw	r4,-20(fp)
   8c9c4:	e17ffc15 	stw	r5,-16(fp)
   8c9c8:	e1bffd15 	stw	r6,-12(fp)
   8c9cc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8c9d0:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8c9d4:	e0bffc17 	ldw	r2,-16(fp)
   8c9d8:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   8c9dc:	e0bffb17 	ldw	r2,-20(fp)
   8c9e0:	10800b17 	ldw	r2,44(r2)
   8c9e4:	e0bff315 	stw	r2,-52(fp)
   8c9e8:	e03ff40d 	sth	zero,-48(fp)
   8c9ec:	e17ff40b 	ldhu	r5,-48(fp)
   8c9f0:	e1bffa04 	addi	r6,fp,-24
   8c9f4:	e13ff317 	ldw	r4,-52(fp)
   8c9f8:	00897140 	call	89714 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8c9fc:	00003a06 	br	8cae8 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8ca00:	e0bffb17 	ldw	r2,-20(fp)
   8ca04:	10800f17 	ldw	r2,60(r2)
   8ca08:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   8ca0c:	e0bffb17 	ldw	r2,-20(fp)
   8ca10:	10801017 	ldw	r2,64(r2)
   8ca14:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
   8ca18:	e0fff917 	ldw	r3,-28(fp)
   8ca1c:	e0bff817 	ldw	r2,-32(fp)
   8ca20:	1880062e 	bgeu	r3,r2,8ca3c <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
   8ca24:	e0fff817 	ldw	r3,-32(fp)
   8ca28:	e0bff917 	ldw	r2,-28(fp)
   8ca2c:	1885c83a 	sub	r2,r3,r2
   8ca30:	10bfffc4 	addi	r2,r2,-1
   8ca34:	e0bff715 	stw	r2,-36(fp)
   8ca38:	00000c06 	br	8ca6c <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
   8ca3c:	e0bff817 	ldw	r2,-32(fp)
   8ca40:	1005003a 	cmpeq	r2,r2,zero
   8ca44:	1000051e 	bne	r2,zero,8ca5c <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8ca48:	00820004 	movi	r2,2048
   8ca4c:	e0fff917 	ldw	r3,-28(fp)
   8ca50:	10c5c83a 	sub	r2,r2,r3
   8ca54:	e0bff715 	stw	r2,-36(fp)
   8ca58:	00000406 	br	8ca6c <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8ca5c:	0081ffc4 	movi	r2,2047
   8ca60:	e0fff917 	ldw	r3,-28(fp)
   8ca64:	10c5c83a 	sub	r2,r2,r3
   8ca68:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   8ca6c:	e0bff717 	ldw	r2,-36(fp)
   8ca70:	1005003a 	cmpeq	r2,r2,zero
   8ca74:	10001f1e 	bne	r2,zero,8caf4 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
   8ca78:	e0fffd17 	ldw	r3,-12(fp)
   8ca7c:	e0bff717 	ldw	r2,-36(fp)
   8ca80:	1880022e 	bgeu	r3,r2,8ca8c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   8ca84:	e0bffd17 	ldw	r2,-12(fp)
   8ca88:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8ca8c:	e0bffb17 	ldw	r2,-20(fp)
   8ca90:	10c21104 	addi	r3,r2,2116
   8ca94:	e0bff917 	ldw	r2,-28(fp)
   8ca98:	1885883a 	add	r2,r3,r2
   8ca9c:	e0fffc17 	ldw	r3,-16(fp)
   8caa0:	1009883a 	mov	r4,r2
   8caa4:	180b883a 	mov	r5,r3
   8caa8:	e1bff717 	ldw	r6,-36(fp)
   8caac:	00811d00 	call	811d0 <memcpy>
      ptr   += n;
   8cab0:	e0fff717 	ldw	r3,-36(fp)
   8cab4:	e0bffc17 	ldw	r2,-16(fp)
   8cab8:	10c5883a 	add	r2,r2,r3
   8cabc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8cac0:	e0fffd17 	ldw	r3,-12(fp)
   8cac4:	e0bff717 	ldw	r2,-36(fp)
   8cac8:	1885c83a 	sub	r2,r3,r2
   8cacc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8cad0:	e0fff917 	ldw	r3,-28(fp)
   8cad4:	e0bff717 	ldw	r2,-36(fp)
   8cad8:	1885883a 	add	r2,r3,r2
   8cadc:	10c1ffcc 	andi	r3,r2,2047
   8cae0:	e0bffb17 	ldw	r2,-20(fp)
   8cae4:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8cae8:	e0bffd17 	ldw	r2,-12(fp)
   8caec:	10800048 	cmpgei	r2,r2,1
   8caf0:	103fc31e 	bne	r2,zero,8ca00 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8caf4:	0005303a 	rdctl	r2,status
   8caf8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cafc:	e0fff217 	ldw	r3,-56(fp)
   8cb00:	00bfff84 	movi	r2,-2
   8cb04:	1884703a 	and	r2,r3,r2
   8cb08:	1001703a 	wrctl	status,r2
  
  return context;
   8cb0c:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8cb10:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8cb14:	e0bffb17 	ldw	r2,-20(fp)
   8cb18:	10800817 	ldw	r2,32(r2)
   8cb1c:	10c00094 	ori	r3,r2,2
   8cb20:	e0bffb17 	ldw	r2,-20(fp)
   8cb24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8cb28:	e0bffb17 	ldw	r2,-20(fp)
   8cb2c:	10800017 	ldw	r2,0(r2)
   8cb30:	11000104 	addi	r4,r2,4
   8cb34:	e0bffb17 	ldw	r2,-20(fp)
   8cb38:	10800817 	ldw	r2,32(r2)
   8cb3c:	1007883a 	mov	r3,r2
   8cb40:	2005883a 	mov	r2,r4
   8cb44:	10c00035 	stwio	r3,0(r2)
   8cb48:	e0bff617 	ldw	r2,-40(fp)
   8cb4c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cb50:	e0bff117 	ldw	r2,-60(fp)
   8cb54:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8cb58:	e0bffd17 	ldw	r2,-12(fp)
   8cb5c:	10800050 	cmplti	r2,r2,1
   8cb60:	10002d1e 	bne	r2,zero,8cc18 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
   8cb64:	e0bffe17 	ldw	r2,-8(fp)
   8cb68:	1090000c 	andi	r2,r2,16384
   8cb6c:	1004c03a 	cmpne	r2,r2,zero
   8cb70:	10002c1e 	bne	r2,zero,8cc24 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   8cb74:	00800274 	movhi	r2,9
   8cb78:	10899d44 	addi	r2,r2,9845
   8cb7c:	10800003 	ldbu	r2,0(r2)
   8cb80:	10803fcc 	andi	r2,r2,255
   8cb84:	10800058 	cmpnei	r2,r2,1
   8cb88:	1000161e 	bne	r2,zero,8cbe4 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
   8cb8c:	e0bffb17 	ldw	r2,-20(fp)
   8cb90:	10800c17 	ldw	r2,48(r2)
   8cb94:	e0bfee15 	stw	r2,-72(fp)
   8cb98:	00800184 	movi	r2,6
   8cb9c:	e0bfef0d 	sth	r2,-68(fp)
   8cba0:	00bfe0c4 	movi	r2,-125
   8cba4:	e0bfef85 	stb	r2,-66(fp)
   8cba8:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   8cbac:	00800274 	movhi	r2,9
   8cbb0:	10899d44 	addi	r2,r2,9845
   8cbb4:	10800003 	ldbu	r2,0(r2)
   8cbb8:	10803fcc 	andi	r2,r2,255
   8cbbc:	1005003a 	cmpeq	r2,r2,zero
   8cbc0:	1000111e 	bne	r2,zero,8cc08 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   8cbc4:	e17fef0b 	ldhu	r5,-68(fp)
   8cbc8:	e1bfef83 	ldbu	r6,-66(fp)
   8cbcc:	e1fff00b 	ldhu	r7,-64(fp)
   8cbd0:	e0bffa44 	addi	r2,fp,-23
   8cbd4:	d8800015 	stw	r2,0(sp)
   8cbd8:	e13fee17 	ldw	r4,-72(fp)
   8cbdc:	00867d40 	call	867d4 <OSFlagPend>
    return err;
   8cbe0:	00000906 	br	8cc08 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8cbe4:	e0bffb17 	ldw	r2,-20(fp)
   8cbe8:	10c01017 	ldw	r3,64(r2)
   8cbec:	e0bff817 	ldw	r2,-32(fp)
   8cbf0:	1880051e 	bne	r3,r2,8cc08 <altera_avalon_jtag_uart_write+0x258>
   8cbf4:	e0bffb17 	ldw	r2,-20(fp)
   8cbf8:	10c00917 	ldw	r3,36(r2)
   8cbfc:	e0bffb17 	ldw	r2,-20(fp)
   8cc00:	10800117 	ldw	r2,4(r2)
   8cc04:	18bff736 	bltu	r3,r2,8cbe4 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8cc08:	e0bffb17 	ldw	r2,-20(fp)
   8cc0c:	10c01017 	ldw	r3,64(r2)
   8cc10:	e0bff817 	ldw	r2,-32(fp)
   8cc14:	18800326 	beq	r3,r2,8cc24 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
   8cc18:	e0bffd17 	ldw	r2,-12(fp)
   8cc1c:	10800048 	cmpgei	r2,r2,1
   8cc20:	103fb11e 	bne	r2,zero,8cae8 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   8cc24:	e0bffb17 	ldw	r2,-20(fp)
   8cc28:	11000b17 	ldw	r4,44(r2)
   8cc2c:	0089b0c0 	call	89b0c <OSSemPost>

  if (ptr != start)
   8cc30:	e0fffc17 	ldw	r3,-16(fp)
   8cc34:	e0bff517 	ldw	r2,-44(fp)
   8cc38:	18800526 	beq	r3,r2,8cc50 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
   8cc3c:	e0fffc17 	ldw	r3,-16(fp)
   8cc40:	e0bff517 	ldw	r2,-44(fp)
   8cc44:	1887c83a 	sub	r3,r3,r2
   8cc48:	e0ffff15 	stw	r3,-4(fp)
   8cc4c:	00000906 	br	8cc74 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
   8cc50:	e0bffe17 	ldw	r2,-8(fp)
   8cc54:	1090000c 	andi	r2,r2,16384
   8cc58:	1005003a 	cmpeq	r2,r2,zero
   8cc5c:	1000031e 	bne	r2,zero,8cc6c <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
   8cc60:	00bffd44 	movi	r2,-11
   8cc64:	e0bfff15 	stw	r2,-4(fp)
   8cc68:	00000206 	br	8cc74 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
   8cc6c:	00bffec4 	movi	r2,-5
   8cc70:	e0bfff15 	stw	r2,-4(fp)
   8cc74:	e0bfff17 	ldw	r2,-4(fp)
}
   8cc78:	e037883a 	mov	sp,fp
   8cc7c:	dfc00117 	ldw	ra,4(sp)
   8cc80:	df000017 	ldw	fp,0(sp)
   8cc84:	dec00204 	addi	sp,sp,8
   8cc88:	f800283a 	ret

0008cc8c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8cc8c:	defffa04 	addi	sp,sp,-24
   8cc90:	dfc00515 	stw	ra,20(sp)
   8cc94:	df000415 	stw	fp,16(sp)
   8cc98:	df000404 	addi	fp,sp,16
   8cc9c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   8cca0:	e0bfff17 	ldw	r2,-4(fp)
   8cca4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8cca8:	e0bfff17 	ldw	r2,-4(fp)
   8ccac:	10800104 	addi	r2,r2,4
   8ccb0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ccb4:	0005303a 	rdctl	r2,status
   8ccb8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ccbc:	e0fffd17 	ldw	r3,-12(fp)
   8ccc0:	00bfff84 	movi	r2,-2
   8ccc4:	1884703a 	and	r2,r3,r2
   8ccc8:	1001703a 	wrctl	status,r2
  
  return context;
   8cccc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   8ccd0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   8ccd4:	008e0a80 	call	8e0a8 <alt_tick>
   8ccd8:	e0bffe17 	ldw	r2,-8(fp)
   8ccdc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cce0:	e0bffc17 	ldw	r2,-16(fp)
   8cce4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   8cce8:	e037883a 	mov	sp,fp
   8ccec:	dfc00117 	ldw	ra,4(sp)
   8ccf0:	df000017 	ldw	fp,0(sp)
   8ccf4:	dec00204 	addi	sp,sp,8
   8ccf8:	f800283a 	ret

0008ccfc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   8ccfc:	defff804 	addi	sp,sp,-32
   8cd00:	dfc00715 	stw	ra,28(sp)
   8cd04:	df000615 	stw	fp,24(sp)
   8cd08:	df000604 	addi	fp,sp,24
   8cd0c:	e13ffc15 	stw	r4,-16(fp)
   8cd10:	e17ffd15 	stw	r5,-12(fp)
   8cd14:	e1bffe15 	stw	r6,-8(fp)
   8cd18:	e1ffff15 	stw	r7,-4(fp)
   8cd1c:	e0bfff17 	ldw	r2,-4(fp)
   8cd20:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   8cd24:	00800274 	movhi	r2,9
   8cd28:	1089b204 	addi	r2,r2,9928
   8cd2c:	10800017 	ldw	r2,0(r2)
   8cd30:	1004c03a 	cmpne	r2,r2,zero
   8cd34:	1000041e 	bne	r2,zero,8cd48 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   8cd38:	00c00274 	movhi	r3,9
   8cd3c:	18c9b204 	addi	r3,r3,9928
   8cd40:	e0bffb17 	ldw	r2,-20(fp)
   8cd44:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8cd48:	e0bffc17 	ldw	r2,-16(fp)
   8cd4c:	10800104 	addi	r2,r2,4
   8cd50:	1007883a 	mov	r3,r2
   8cd54:	008001c4 	movi	r2,7
   8cd58:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8cd5c:	d8000015 	stw	zero,0(sp)
   8cd60:	e13ffd17 	ldw	r4,-12(fp)
   8cd64:	e17ffe17 	ldw	r5,-8(fp)
   8cd68:	01800274 	movhi	r6,9
   8cd6c:	31b32304 	addi	r6,r6,-13172
   8cd70:	e1fffc17 	ldw	r7,-16(fp)
   8cd74:	008d9100 	call	8d910 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8cd78:	e037883a 	mov	sp,fp
   8cd7c:	dfc00117 	ldw	ra,4(sp)
   8cd80:	df000017 	ldw	fp,0(sp)
   8cd84:	dec00204 	addi	sp,sp,8
   8cd88:	f800283a 	ret

0008cd8c <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
   8cd8c:	defffc04 	addi	sp,sp,-16
   8cd90:	dfc00315 	stw	ra,12(sp)
   8cd94:	df000215 	stw	fp,8(sp)
   8cd98:	df000204 	addi	fp,sp,8
   8cd9c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
   8cda0:	e13fff17 	ldw	r4,-4(fp)
   8cda4:	01400274 	movhi	r5,9
   8cda8:	2942aa04 	addi	r5,r5,2728
   8cdac:	008d8600 	call	8d860 <alt_find_dev>
   8cdb0:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
   8cdb4:	e0bffe17 	ldw	r2,-8(fp)
   8cdb8:	10800a17 	ldw	r2,40(r2)
   8cdbc:	10800104 	addi	r2,r2,4
   8cdc0:	10800037 	ldwio	r2,0(r2)
   8cdc4:	10803fec 	andhi	r2,r2,255
   8cdc8:	1005d43a 	srai	r2,r2,16
   8cdcc:	1007883a 	mov	r3,r2
   8cdd0:	e0bffe17 	ldw	r2,-8(fp)
   8cdd4:	10c00b15 	stw	r3,44(r2)

  return dev;
   8cdd8:	e0bffe17 	ldw	r2,-8(fp)
}
   8cddc:	e037883a 	mov	sp,fp
   8cde0:	dfc00117 	ldw	ra,4(sp)
   8cde4:	df000017 	ldw	fp,0(sp)
   8cde8:	dec00204 	addi	sp,sp,8
   8cdec:	f800283a 	ret

0008cdf0 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   8cdf0:	defffc04 	addi	sp,sp,-16
   8cdf4:	df000315 	stw	fp,12(sp)
   8cdf8:	df000304 	addi	fp,sp,12
   8cdfc:	e13ffd15 	stw	r4,-12(fp)
   8ce00:	e17ffe15 	stw	r5,-8(fp)
   8ce04:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
   8ce08:	e0bffd17 	ldw	r2,-12(fp)
   8ce0c:	10800a17 	ldw	r2,40(r2)
   8ce10:	11000204 	addi	r4,r2,8
   8ce14:	e0bffe17 	ldw	r2,-8(fp)
   8ce18:	10c03fcc 	andi	r3,r2,255
   8ce1c:	2005883a 	mov	r2,r4
   8ce20:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
   8ce24:	e0bffd17 	ldw	r2,-12(fp)
   8ce28:	10800a17 	ldw	r2,40(r2)
   8ce2c:	11000304 	addi	r4,r2,12
   8ce30:	e0bfff17 	ldw	r2,-4(fp)
   8ce34:	10ffffcc 	andi	r3,r2,65535
   8ce38:	2005883a 	mov	r2,r4
   8ce3c:	10c00035 	stwio	r3,0(r2)

	return 0;
   8ce40:	0005883a 	mov	r2,zero
}
   8ce44:	e037883a 	mov	sp,fp
   8ce48:	df000017 	ldw	fp,0(sp)
   8ce4c:	dec00104 	addi	sp,sp,4
   8ce50:	f800283a 	ret

0008ce54 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
   8ce54:	defffa04 	addi	sp,sp,-24
   8ce58:	dfc00515 	stw	ra,20(sp)
   8ce5c:	df000415 	stw	fp,16(sp)
   8ce60:	df000404 	addi	fp,sp,16
   8ce64:	e13ffc15 	stw	r4,-16(fp)
   8ce68:	e17ffd15 	stw	r5,-12(fp)
   8ce6c:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
   8ce70:	e0bffc17 	ldw	r2,-16(fp)
   8ce74:	10800a17 	ldw	r2,40(r2)
   8ce78:	11000204 	addi	r4,r2,8
   8ce7c:	e0bffd17 	ldw	r2,-12(fp)
   8ce80:	10c03fcc 	andi	r3,r2,255
   8ce84:	2005883a 	mov	r2,r4
   8ce88:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
   8ce8c:	e0bffc17 	ldw	r2,-16(fp)
   8ce90:	10800a17 	ldw	r2,40(r2)
   8ce94:	10800304 	addi	r2,r2,12
   8ce98:	10800037 	ldwio	r2,0(r2)
   8ce9c:	1007883a 	mov	r3,r2
   8cea0:	e0bffe17 	ldw	r2,-8(fp)
   8cea4:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
   8cea8:	e13ffc17 	ldw	r4,-16(fp)
   8ceac:	008cf800 	call	8cf80 <alt_up_av_config_read_acknowledge>
   8ceb0:	1005003a 	cmpeq	r2,r2,zero
   8ceb4:	1000031e 	bne	r2,zero,8cec4 <alt_up_av_config_read_data+0x70>
		return -1;
   8ceb8:	00bfffc4 	movi	r2,-1
   8cebc:	e0bfff15 	stw	r2,-4(fp)
   8cec0:	00000106 	br	8cec8 <alt_up_av_config_read_data+0x74>

	return 0;
   8cec4:	e03fff15 	stw	zero,-4(fp)
   8cec8:	e0bfff17 	ldw	r2,-4(fp)
}
   8cecc:	e037883a 	mov	sp,fp
   8ced0:	dfc00117 	ldw	ra,4(sp)
   8ced4:	df000017 	ldw	fp,0(sp)
   8ced8:	dec00204 	addi	sp,sp,8
   8cedc:	f800283a 	ret

0008cee0 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
   8cee0:	defffe04 	addi	sp,sp,-8
   8cee4:	df000115 	stw	fp,4(sp)
   8cee8:	df000104 	addi	fp,sp,4
   8ceec:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
   8cef0:	e0bfff17 	ldw	r2,-4(fp)
   8cef4:	10800a17 	ldw	r2,40(r2)
   8cef8:	1007883a 	mov	r3,r2
   8cefc:	00800044 	movi	r2,1
   8cf00:	18800025 	stbio	r2,0(r3)
	return 0;
   8cf04:	0005883a 	mov	r2,zero
}
   8cf08:	e037883a 	mov	sp,fp
   8cf0c:	df000017 	ldw	fp,0(sp)
   8cf10:	dec00104 	addi	sp,sp,4
   8cf14:	f800283a 	ret

0008cf18 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
   8cf18:	defffe04 	addi	sp,sp,-8
   8cf1c:	df000115 	stw	fp,4(sp)
   8cf20:	df000104 	addi	fp,sp,4
   8cf24:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
   8cf28:	e0bfff17 	ldw	r2,-4(fp)
   8cf2c:	10800a17 	ldw	r2,40(r2)
   8cf30:	1007883a 	mov	r3,r2
   8cf34:	00800084 	movi	r2,2
   8cf38:	18800025 	stbio	r2,0(r3)
	return 0;
   8cf3c:	0005883a 	mov	r2,zero
}
   8cf40:	e037883a 	mov	sp,fp
   8cf44:	df000017 	ldw	fp,0(sp)
   8cf48:	dec00104 	addi	sp,sp,4
   8cf4c:	f800283a 	ret

0008cf50 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
   8cf50:	defffe04 	addi	sp,sp,-8
   8cf54:	df000115 	stw	fp,4(sp)
   8cf58:	df000104 	addi	fp,sp,4
   8cf5c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
   8cf60:	e0bfff17 	ldw	r2,-4(fp)
   8cf64:	10800a17 	ldw	r2,40(r2)
   8cf68:	10000025 	stbio	zero,0(r2)
	return 0;
   8cf6c:	0005883a 	mov	r2,zero
}
   8cf70:	e037883a 	mov	sp,fp
   8cf74:	df000017 	ldw	fp,0(sp)
   8cf78:	dec00104 	addi	sp,sp,4
   8cf7c:	f800283a 	ret

0008cf80 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
   8cf80:	defffd04 	addi	sp,sp,-12
   8cf84:	df000215 	stw	fp,8(sp)
   8cf88:	df000204 	addi	fp,sp,8
   8cf8c:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
   8cf90:	e0bffe17 	ldw	r2,-8(fp)
   8cf94:	10800a17 	ldw	r2,40(r2)
   8cf98:	10800104 	addi	r2,r2,4
   8cf9c:	10800037 	ldwio	r2,0(r2)
   8cfa0:	1080008c 	andi	r2,r2,2
   8cfa4:	1005d07a 	srai	r2,r2,1
   8cfa8:	1005003a 	cmpeq	r2,r2,zero
   8cfac:	1000071e 	bne	r2,zero,8cfcc <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
   8cfb0:	e0bffe17 	ldw	r2,-8(fp)
   8cfb4:	10800a17 	ldw	r2,40(r2)
   8cfb8:	10800104 	addi	r2,r2,4
   8cfbc:	10800037 	ldwio	r2,0(r2)
   8cfc0:	1080004c 	andi	r2,r2,1
   8cfc4:	e0bfff15 	stw	r2,-4(fp)
   8cfc8:	00000206 	br	8cfd4 <alt_up_av_config_read_acknowledge+0x54>
	return -1;
   8cfcc:	00bfffc4 	movi	r2,-1
   8cfd0:	e0bfff15 	stw	r2,-4(fp)
   8cfd4:	e0bfff17 	ldw	r2,-4(fp)
}
   8cfd8:	e037883a 	mov	sp,fp
   8cfdc:	df000017 	ldw	fp,0(sp)
   8cfe0:	dec00104 	addi	sp,sp,4
   8cfe4:	f800283a 	ret

0008cfe8 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
   8cfe8:	defffe04 	addi	sp,sp,-8
   8cfec:	df000115 	stw	fp,4(sp)
   8cff0:	df000104 	addi	fp,sp,4
   8cff4:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
   8cff8:	e0bfff17 	ldw	r2,-4(fp)
   8cffc:	10800a17 	ldw	r2,40(r2)
   8d000:	10800104 	addi	r2,r2,4
   8d004:	10800037 	ldwio	r2,0(r2)
   8d008:	1080008c 	andi	r2,r2,2
   8d00c:	1005d07a 	srai	r2,r2,1
}
   8d010:	e037883a 	mov	sp,fp
   8d014:	df000017 	ldw	fp,0(sp)
   8d018:	dec00104 	addi	sp,sp,4
   8d01c:	f800283a 	ret

0008d020 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   8d020:	defff904 	addi	sp,sp,-28
   8d024:	dfc00615 	stw	ra,24(sp)
   8d028:	df000515 	stw	fp,20(sp)
   8d02c:	df000504 	addi	fp,sp,20
   8d030:	e13ffc15 	stw	r4,-16(fp)
   8d034:	e17ffd15 	stw	r5,-12(fp)
   8d038:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   8d03c:	e0bffc17 	ldw	r2,-16(fp)
   8d040:	10800b17 	ldw	r2,44(r2)
   8d044:	10800060 	cmpeqi	r2,r2,1
   8d048:	10000f1e 	bne	r2,zero,8d088 <alt_up_av_config_write_audio_cfg_register+0x68>
   8d04c:	e0bffc17 	ldw	r2,-16(fp)
   8d050:	10800b17 	ldw	r2,44(r2)
   8d054:	108000a0 	cmpeqi	r2,r2,2
   8d058:	10000b1e 	bne	r2,zero,8d088 <alt_up_av_config_write_audio_cfg_register+0x68>
   8d05c:	e0bffc17 	ldw	r2,-16(fp)
   8d060:	10800b17 	ldw	r2,44(r2)
   8d064:	108000e0 	cmpeqi	r2,r2,3
   8d068:	1000071e 	bne	r2,zero,8d088 <alt_up_av_config_write_audio_cfg_register+0x68>
   8d06c:	e0bffc17 	ldw	r2,-16(fp)
   8d070:	10800b17 	ldw	r2,44(r2)
   8d074:	10800120 	cmpeqi	r2,r2,4
   8d078:	1000031e 	bne	r2,zero,8d088 <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
   8d07c:	00bffa84 	movi	r2,-22
   8d080:	e0bfff15 	stw	r2,-4(fp)
   8d084:	00000b06 	br	8d0b4 <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
   8d088:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
   8d08c:	e0bffc17 	ldw	r2,-16(fp)
   8d090:	10800a17 	ldw	r2,40(r2)
   8d094:	10800084 	addi	r2,r2,2
   8d098:	e0fffb17 	ldw	r3,-20(fp)
   8d09c:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
   8d0a0:	e13ffc17 	ldw	r4,-16(fp)
   8d0a4:	e17ffd17 	ldw	r5,-12(fp)
   8d0a8:	e1bffe17 	ldw	r6,-8(fp)
   8d0ac:	008cdf00 	call	8cdf0 <alt_up_av_config_write_data>
   8d0b0:	e0bfff15 	stw	r2,-4(fp)
   8d0b4:	e0bfff17 	ldw	r2,-4(fp)
}
   8d0b8:	e037883a 	mov	sp,fp
   8d0bc:	dfc00117 	ldw	ra,4(sp)
   8d0c0:	df000017 	ldw	fp,0(sp)
   8d0c4:	dec00204 	addi	sp,sp,8
   8d0c8:	f800283a 	ret

0008d0cc <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
   8d0cc:	defff904 	addi	sp,sp,-28
   8d0d0:	dfc00615 	stw	ra,24(sp)
   8d0d4:	df000515 	stw	fp,20(sp)
   8d0d8:	df000504 	addi	fp,sp,20
   8d0dc:	e13ffb15 	stw	r4,-20(fp)
   8d0e0:	e17ffc15 	stw	r5,-16(fp)
   8d0e4:	e1bffd15 	stw	r6,-12(fp)
   8d0e8:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   8d0ec:	e0bffb17 	ldw	r2,-20(fp)
   8d0f0:	10800b17 	ldw	r2,44(r2)
   8d0f4:	108000a0 	cmpeqi	r2,r2,2
   8d0f8:	10000b1e 	bne	r2,zero,8d128 <alt_up_av_config_read_video_cfg_register+0x5c>
   8d0fc:	e0bffb17 	ldw	r2,-20(fp)
   8d100:	10800b17 	ldw	r2,44(r2)
   8d104:	108000e0 	cmpeqi	r2,r2,3
   8d108:	1000071e 	bne	r2,zero,8d128 <alt_up_av_config_read_video_cfg_register+0x5c>
   8d10c:	e0bffb17 	ldw	r2,-20(fp)
   8d110:	10800b17 	ldw	r2,44(r2)
   8d114:	10800120 	cmpeqi	r2,r2,4
   8d118:	1000031e 	bne	r2,zero,8d128 <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
   8d11c:	00bffa84 	movi	r2,-22
   8d120:	e0bfff15 	stw	r2,-4(fp)
   8d124:	00002106 	br	8d1ac <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
   8d128:	e0bffb17 	ldw	r2,-20(fp)
   8d12c:	10800b17 	ldw	r2,44(r2)
   8d130:	108000a0 	cmpeqi	r2,r2,2
   8d134:	1000041e 	bne	r2,zero,8d148 <alt_up_av_config_read_video_cfg_register+0x7c>
   8d138:	e0bffb17 	ldw	r2,-20(fp)
   8d13c:	10800b17 	ldw	r2,44(r2)
   8d140:	10800118 	cmpnei	r2,r2,4
   8d144:	1000061e 	bne	r2,zero,8d160 <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
   8d148:	e0bffe17 	ldw	r2,-8(fp)
   8d14c:	10800060 	cmpeqi	r2,r2,1
   8d150:	10000c1e 	bne	r2,zero,8d184 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
   8d154:	00bffa84 	movi	r2,-22
   8d158:	e0bfff15 	stw	r2,-4(fp)
   8d15c:	00001306 	br	8d1ac <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
   8d160:	e0bffe17 	ldw	r2,-8(fp)
   8d164:	10800060 	cmpeqi	r2,r2,1
   8d168:	1000061e 	bne	r2,zero,8d184 <alt_up_av_config_read_video_cfg_register+0xb8>
   8d16c:	e0bffe17 	ldw	r2,-8(fp)
   8d170:	108000a0 	cmpeqi	r2,r2,2
   8d174:	1000031e 	bne	r2,zero,8d184 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
   8d178:	00bffa84 	movi	r2,-22
   8d17c:	e0bfff15 	stw	r2,-4(fp)
   8d180:	00000a06 	br	8d1ac <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
   8d184:	e0bffb17 	ldw	r2,-20(fp)
   8d188:	10800a17 	ldw	r2,40(r2)
   8d18c:	10800084 	addi	r2,r2,2
   8d190:	e0fffe17 	ldw	r3,-8(fp)
   8d194:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
   8d198:	e13ffb17 	ldw	r4,-20(fp)
   8d19c:	e17ffc17 	ldw	r5,-16(fp)
   8d1a0:	e1bffd17 	ldw	r6,-12(fp)
   8d1a4:	008ce540 	call	8ce54 <alt_up_av_config_read_data>
   8d1a8:	e0bfff15 	stw	r2,-4(fp)
   8d1ac:	e0bfff17 	ldw	r2,-4(fp)
}
   8d1b0:	e037883a 	mov	sp,fp
   8d1b4:	dfc00117 	ldw	ra,4(sp)
   8d1b8:	df000017 	ldw	fp,0(sp)
   8d1bc:	dec00204 	addi	sp,sp,8
   8d1c0:	f800283a 	ret

0008d1c4 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
   8d1c4:	defff904 	addi	sp,sp,-28
   8d1c8:	dfc00615 	stw	ra,24(sp)
   8d1cc:	df000515 	stw	fp,20(sp)
   8d1d0:	df000504 	addi	fp,sp,20
   8d1d4:	e13ffb15 	stw	r4,-20(fp)
   8d1d8:	e17ffc15 	stw	r5,-16(fp)
   8d1dc:	e1bffd15 	stw	r6,-12(fp)
   8d1e0:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
   8d1e4:	e0bffb17 	ldw	r2,-20(fp)
   8d1e8:	10800b17 	ldw	r2,44(r2)
   8d1ec:	108000a0 	cmpeqi	r2,r2,2
   8d1f0:	10000b1e 	bne	r2,zero,8d220 <alt_up_av_config_write_video_cfg_register+0x5c>
   8d1f4:	e0bffb17 	ldw	r2,-20(fp)
   8d1f8:	10800b17 	ldw	r2,44(r2)
   8d1fc:	108000e0 	cmpeqi	r2,r2,3
   8d200:	1000071e 	bne	r2,zero,8d220 <alt_up_av_config_write_video_cfg_register+0x5c>
   8d204:	e0bffb17 	ldw	r2,-20(fp)
   8d208:	10800b17 	ldw	r2,44(r2)
   8d20c:	10800120 	cmpeqi	r2,r2,4
   8d210:	1000031e 	bne	r2,zero,8d220 <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
   8d214:	00bffa84 	movi	r2,-22
   8d218:	e0bfff15 	stw	r2,-4(fp)
   8d21c:	00002106 	br	8d2a4 <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
   8d220:	e0bffb17 	ldw	r2,-20(fp)
   8d224:	10800b17 	ldw	r2,44(r2)
   8d228:	108000a0 	cmpeqi	r2,r2,2
   8d22c:	1000041e 	bne	r2,zero,8d240 <alt_up_av_config_write_video_cfg_register+0x7c>
   8d230:	e0bffb17 	ldw	r2,-20(fp)
   8d234:	10800b17 	ldw	r2,44(r2)
   8d238:	10800118 	cmpnei	r2,r2,4
   8d23c:	1000061e 	bne	r2,zero,8d258 <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
   8d240:	e0bffe17 	ldw	r2,-8(fp)
   8d244:	10800060 	cmpeqi	r2,r2,1
   8d248:	10000c1e 	bne	r2,zero,8d27c <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
   8d24c:	00bffa84 	movi	r2,-22
   8d250:	e0bfff15 	stw	r2,-4(fp)
   8d254:	00001306 	br	8d2a4 <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
   8d258:	e0bffe17 	ldw	r2,-8(fp)
   8d25c:	10800060 	cmpeqi	r2,r2,1
   8d260:	1000061e 	bne	r2,zero,8d27c <alt_up_av_config_write_video_cfg_register+0xb8>
   8d264:	e0bffe17 	ldw	r2,-8(fp)
   8d268:	108000a0 	cmpeqi	r2,r2,2
   8d26c:	1000031e 	bne	r2,zero,8d27c <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
   8d270:	00bffa84 	movi	r2,-22
   8d274:	e0bfff15 	stw	r2,-4(fp)
   8d278:	00000a06 	br	8d2a4 <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
   8d27c:	e0bffb17 	ldw	r2,-20(fp)
   8d280:	10800a17 	ldw	r2,40(r2)
   8d284:	10800084 	addi	r2,r2,2
   8d288:	e0fffe17 	ldw	r3,-8(fp)
   8d28c:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
   8d290:	e13ffb17 	ldw	r4,-20(fp)
   8d294:	e17ffc17 	ldw	r5,-16(fp)
   8d298:	e1bffd17 	ldw	r6,-12(fp)
   8d29c:	008cdf00 	call	8cdf0 <alt_up_av_config_write_data>
   8d2a0:	e0bfff15 	stw	r2,-4(fp)
   8d2a4:	e0bfff17 	ldw	r2,-4(fp)
}
   8d2a8:	e037883a 	mov	sp,fp
   8d2ac:	dfc00117 	ldw	ra,4(sp)
   8d2b0:	df000017 	ldw	fp,0(sp)
   8d2b4:	dec00204 	addi	sp,sp,8
   8d2b8:	f800283a 	ret

0008d2bc <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   8d2bc:	defffa04 	addi	sp,sp,-24
   8d2c0:	dfc00515 	stw	ra,20(sp)
   8d2c4:	df000415 	stw	fp,16(sp)
   8d2c8:	df000404 	addi	fp,sp,16
   8d2cc:	e13ffc15 	stw	r4,-16(fp)
   8d2d0:	e17ffd15 	stw	r5,-12(fp)
   8d2d4:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
   8d2d8:	e0bffc17 	ldw	r2,-16(fp)
   8d2dc:	10800b17 	ldw	r2,44(r2)
   8d2e0:	10800220 	cmpeqi	r2,r2,8
   8d2e4:	1000031e 	bne	r2,zero,8d2f4 <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
   8d2e8:	00bffa84 	movi	r2,-22
   8d2ec:	e0bfff15 	stw	r2,-4(fp)
   8d2f0:	00000506 	br	8d308 <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
   8d2f4:	e13ffc17 	ldw	r4,-16(fp)
   8d2f8:	e17ffd17 	ldw	r5,-12(fp)
   8d2fc:	e1bffe17 	ldw	r6,-8(fp)
   8d300:	008ce540 	call	8ce54 <alt_up_av_config_read_data>
   8d304:	e0bfff15 	stw	r2,-4(fp)
   8d308:	e0bfff17 	ldw	r2,-4(fp)
}
   8d30c:	e037883a 	mov	sp,fp
   8d310:	dfc00117 	ldw	ra,4(sp)
   8d314:	df000017 	ldw	fp,0(sp)
   8d318:	dec00204 	addi	sp,sp,8
   8d31c:	f800283a 	ret

0008d320 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   8d320:	defffa04 	addi	sp,sp,-24
   8d324:	dfc00515 	stw	ra,20(sp)
   8d328:	df000415 	stw	fp,16(sp)
   8d32c:	df000404 	addi	fp,sp,16
   8d330:	e13ffc15 	stw	r4,-16(fp)
   8d334:	e17ffd15 	stw	r5,-12(fp)
   8d338:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
   8d33c:	e0bffc17 	ldw	r2,-16(fp)
   8d340:	10800b17 	ldw	r2,44(r2)
   8d344:	10800220 	cmpeqi	r2,r2,8
   8d348:	1000031e 	bne	r2,zero,8d358 <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
   8d34c:	00bffa84 	movi	r2,-22
   8d350:	e0bfff15 	stw	r2,-4(fp)
   8d354:	00000506 	br	8d36c <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
   8d358:	e13ffc17 	ldw	r4,-16(fp)
   8d35c:	e17ffd17 	ldw	r5,-12(fp)
   8d360:	e1bffe17 	ldw	r6,-8(fp)
   8d364:	008cdf00 	call	8cdf0 <alt_up_av_config_write_data>
   8d368:	e0bfff15 	stw	r2,-4(fp)
   8d36c:	e0bfff17 	ldw	r2,-4(fp)
}
   8d370:	e037883a 	mov	sp,fp
   8d374:	dfc00117 	ldw	ra,4(sp)
   8d378:	df000017 	ldw	fp,0(sp)
   8d37c:	dec00204 	addi	sp,sp,8
   8d380:	f800283a 	ret

0008d384 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   8d384:	defffa04 	addi	sp,sp,-24
   8d388:	dfc00515 	stw	ra,20(sp)
   8d38c:	df000415 	stw	fp,16(sp)
   8d390:	df000404 	addi	fp,sp,16
   8d394:	e13ffc15 	stw	r4,-16(fp)
   8d398:	e17ffd15 	stw	r5,-12(fp)
   8d39c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
   8d3a0:	e0bffc17 	ldw	r2,-16(fp)
   8d3a4:	10800b17 	ldw	r2,44(r2)
   8d3a8:	10800260 	cmpeqi	r2,r2,9
   8d3ac:	1000031e 	bne	r2,zero,8d3bc <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
   8d3b0:	00bffa84 	movi	r2,-22
   8d3b4:	e0bfff15 	stw	r2,-4(fp)
   8d3b8:	00000506 	br	8d3d0 <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
   8d3bc:	e13ffc17 	ldw	r4,-16(fp)
   8d3c0:	e17ffd17 	ldw	r5,-12(fp)
   8d3c4:	e1bffe17 	ldw	r6,-8(fp)
   8d3c8:	008ce540 	call	8ce54 <alt_up_av_config_read_data>
   8d3cc:	e0bfff15 	stw	r2,-4(fp)
   8d3d0:	e0bfff17 	ldw	r2,-4(fp)
}
   8d3d4:	e037883a 	mov	sp,fp
   8d3d8:	dfc00117 	ldw	ra,4(sp)
   8d3dc:	df000017 	ldw	fp,0(sp)
   8d3e0:	dec00204 	addi	sp,sp,8
   8d3e4:	f800283a 	ret

0008d3e8 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   8d3e8:	defffa04 	addi	sp,sp,-24
   8d3ec:	dfc00515 	stw	ra,20(sp)
   8d3f0:	df000415 	stw	fp,16(sp)
   8d3f4:	df000404 	addi	fp,sp,16
   8d3f8:	e13ffc15 	stw	r4,-16(fp)
   8d3fc:	e17ffd15 	stw	r5,-12(fp)
   8d400:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
   8d404:	e0bffc17 	ldw	r2,-16(fp)
   8d408:	10800b17 	ldw	r2,44(r2)
   8d40c:	10800260 	cmpeqi	r2,r2,9
   8d410:	1000031e 	bne	r2,zero,8d420 <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
   8d414:	00bffa84 	movi	r2,-22
   8d418:	e0bfff15 	stw	r2,-4(fp)
   8d41c:	00000506 	br	8d434 <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
   8d420:	e13ffc17 	ldw	r4,-16(fp)
   8d424:	e17ffd17 	ldw	r5,-12(fp)
   8d428:	e1bffe17 	ldw	r6,-8(fp)
   8d42c:	008cdf00 	call	8cdf0 <alt_up_av_config_write_data>
   8d430:	e0bfff15 	stw	r2,-4(fp)
   8d434:	e0bfff17 	ldw	r2,-4(fp)
}
   8d438:	e037883a 	mov	sp,fp
   8d43c:	dfc00117 	ldw	ra,4(sp)
   8d440:	df000017 	ldw	fp,0(sp)
   8d444:	dec00204 	addi	sp,sp,8
   8d448:	f800283a 	ret

0008d44c <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
   8d44c:	defffa04 	addi	sp,sp,-24
   8d450:	dfc00515 	stw	ra,20(sp)
   8d454:	df000415 	stw	fp,16(sp)
   8d458:	df000404 	addi	fp,sp,16
   8d45c:	e13ffc15 	stw	r4,-16(fp)
   8d460:	e17ffd15 	stw	r5,-12(fp)
   8d464:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
   8d468:	e0bffc17 	ldw	r2,-16(fp)
   8d46c:	10800b17 	ldw	r2,44(r2)
   8d470:	108002a0 	cmpeqi	r2,r2,10
   8d474:	1000031e 	bne	r2,zero,8d484 <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
   8d478:	00bffa84 	movi	r2,-22
   8d47c:	e0bfff15 	stw	r2,-4(fp)
   8d480:	00000506 	br	8d498 <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
   8d484:	e13ffc17 	ldw	r4,-16(fp)
   8d488:	e17ffd17 	ldw	r5,-12(fp)
   8d48c:	e1bffe17 	ldw	r6,-8(fp)
   8d490:	008ce540 	call	8ce54 <alt_up_av_config_read_data>
   8d494:	e0bfff15 	stw	r2,-4(fp)
   8d498:	e0bfff17 	ldw	r2,-4(fp)
}
   8d49c:	e037883a 	mov	sp,fp
   8d4a0:	dfc00117 	ldw	ra,4(sp)
   8d4a4:	df000017 	ldw	fp,0(sp)
   8d4a8:	dec00204 	addi	sp,sp,8
   8d4ac:	f800283a 	ret

0008d4b0 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
   8d4b0:	defffa04 	addi	sp,sp,-24
   8d4b4:	dfc00515 	stw	ra,20(sp)
   8d4b8:	df000415 	stw	fp,16(sp)
   8d4bc:	df000404 	addi	fp,sp,16
   8d4c0:	e13ffc15 	stw	r4,-16(fp)
   8d4c4:	e17ffd15 	stw	r5,-12(fp)
   8d4c8:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
   8d4cc:	e0bffc17 	ldw	r2,-16(fp)
   8d4d0:	10800b17 	ldw	r2,44(r2)
   8d4d4:	108002a0 	cmpeqi	r2,r2,10
   8d4d8:	1000031e 	bne	r2,zero,8d4e8 <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
   8d4dc:	00bffa84 	movi	r2,-22
   8d4e0:	e0bfff15 	stw	r2,-4(fp)
   8d4e4:	00000506 	br	8d4fc <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
   8d4e8:	e13ffc17 	ldw	r4,-16(fp)
   8d4ec:	e17ffd17 	ldw	r5,-12(fp)
   8d4f0:	e1bffe17 	ldw	r6,-8(fp)
   8d4f4:	008cdf00 	call	8cdf0 <alt_up_av_config_write_data>
   8d4f8:	e0bfff15 	stw	r2,-4(fp)
   8d4fc:	e0bfff17 	ldw	r2,-4(fp)
}
   8d500:	e037883a 	mov	sp,fp
   8d504:	dfc00117 	ldw	ra,4(sp)
   8d508:	df000017 	ldw	fp,0(sp)
   8d50c:	dec00204 	addi	sp,sp,8
   8d510:	f800283a 	ret

0008d514 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8d514:	defff404 	addi	sp,sp,-48
   8d518:	df000b15 	stw	fp,44(sp)
   8d51c:	df000b04 	addi	fp,sp,44
   8d520:	e13ffb15 	stw	r4,-20(fp)
   8d524:	e17ffc15 	stw	r5,-16(fp)
   8d528:	e1bffd15 	stw	r6,-12(fp)
   8d52c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8d530:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8d534:	00800274 	movhi	r2,9
   8d538:	1089b204 	addi	r2,r2,9928
   8d53c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8d540:	1005003a 	cmpeq	r2,r2,zero
   8d544:	1000411e 	bne	r2,zero,8d64c <alt_alarm_start+0x138>
  {
    if (alarm)
   8d548:	e0bffb17 	ldw	r2,-20(fp)
   8d54c:	1005003a 	cmpeq	r2,r2,zero
   8d550:	10003b1e 	bne	r2,zero,8d640 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8d554:	e0fffb17 	ldw	r3,-20(fp)
   8d558:	e0bffd17 	ldw	r2,-12(fp)
   8d55c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   8d560:	e0fffb17 	ldw	r3,-20(fp)
   8d564:	e0bffe17 	ldw	r2,-8(fp)
   8d568:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d56c:	0005303a 	rdctl	r2,status
   8d570:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d574:	e0fff817 	ldw	r3,-32(fp)
   8d578:	00bfff84 	movi	r2,-2
   8d57c:	1884703a 	and	r2,r3,r2
   8d580:	1001703a 	wrctl	status,r2
  
  return context;
   8d584:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8d588:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8d58c:	00800274 	movhi	r2,9
   8d590:	1089b304 	addi	r2,r2,9932
   8d594:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8d598:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8d59c:	e0fffc17 	ldw	r3,-16(fp)
   8d5a0:	e0bff917 	ldw	r2,-28(fp)
   8d5a4:	1885883a 	add	r2,r3,r2
   8d5a8:	10c00044 	addi	r3,r2,1
   8d5ac:	e0bffb17 	ldw	r2,-20(fp)
   8d5b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8d5b4:	e0bffb17 	ldw	r2,-20(fp)
   8d5b8:	10c00217 	ldw	r3,8(r2)
   8d5bc:	e0bff917 	ldw	r2,-28(fp)
   8d5c0:	1880042e 	bgeu	r3,r2,8d5d4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8d5c4:	e0fffb17 	ldw	r3,-20(fp)
   8d5c8:	00800044 	movi	r2,1
   8d5cc:	18800405 	stb	r2,16(r3)
   8d5d0:	00000206 	br	8d5dc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8d5d4:	e0bffb17 	ldw	r2,-20(fp)
   8d5d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8d5dc:	e0fffb17 	ldw	r3,-20(fp)
   8d5e0:	00800274 	movhi	r2,9
   8d5e4:	1082cf04 	addi	r2,r2,2876
   8d5e8:	e0bff615 	stw	r2,-40(fp)
   8d5ec:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8d5f0:	e0fff717 	ldw	r3,-36(fp)
   8d5f4:	e0bff617 	ldw	r2,-40(fp)
   8d5f8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8d5fc:	e0bff617 	ldw	r2,-40(fp)
   8d600:	10c00017 	ldw	r3,0(r2)
   8d604:	e0bff717 	ldw	r2,-36(fp)
   8d608:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8d60c:	e0bff617 	ldw	r2,-40(fp)
   8d610:	10c00017 	ldw	r3,0(r2)
   8d614:	e0bff717 	ldw	r2,-36(fp)
   8d618:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8d61c:	e0fff617 	ldw	r3,-40(fp)
   8d620:	e0bff717 	ldw	r2,-36(fp)
   8d624:	18800015 	stw	r2,0(r3)
   8d628:	e0bffa17 	ldw	r2,-24(fp)
   8d62c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d630:	e0bff517 	ldw	r2,-44(fp)
   8d634:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8d638:	e03fff15 	stw	zero,-4(fp)
   8d63c:	00000506 	br	8d654 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   8d640:	00bffa84 	movi	r2,-22
   8d644:	e0bfff15 	stw	r2,-4(fp)
   8d648:	00000206 	br	8d654 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   8d64c:	00bfde84 	movi	r2,-134
   8d650:	e0bfff15 	stw	r2,-4(fp)
   8d654:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8d658:	e037883a 	mov	sp,fp
   8d65c:	df000017 	ldw	fp,0(sp)
   8d660:	dec00104 	addi	sp,sp,4
   8d664:	f800283a 	ret

0008d668 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8d668:	deffff04 	addi	sp,sp,-4
   8d66c:	df000015 	stw	fp,0(sp)
   8d670:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8d674:	e037883a 	mov	sp,fp
   8d678:	df000017 	ldw	fp,0(sp)
   8d67c:	dec00104 	addi	sp,sp,4
   8d680:	f800283a 	ret

0008d684 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8d684:	defff904 	addi	sp,sp,-28
   8d688:	dfc00615 	stw	ra,24(sp)
   8d68c:	df000515 	stw	fp,20(sp)
   8d690:	df000504 	addi	fp,sp,20
   8d694:	e13ffd15 	stw	r4,-12(fp)
   8d698:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8d69c:	e0bffd17 	ldw	r2,-12(fp)
   8d6a0:	1005003a 	cmpeq	r2,r2,zero
   8d6a4:	1000041e 	bne	r2,zero,8d6b8 <alt_dev_llist_insert+0x34>
   8d6a8:	e0bffd17 	ldw	r2,-12(fp)
   8d6ac:	10800217 	ldw	r2,8(r2)
   8d6b0:	1004c03a 	cmpne	r2,r2,zero
   8d6b4:	1000071e 	bne	r2,zero,8d6d4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   8d6b8:	008d7380 	call	8d738 <alt_get_errno>
   8d6bc:	1007883a 	mov	r3,r2
   8d6c0:	00800584 	movi	r2,22
   8d6c4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8d6c8:	00bffa84 	movi	r2,-22
   8d6cc:	e0bfff15 	stw	r2,-4(fp)
   8d6d0:	00001306 	br	8d720 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8d6d4:	e0fffd17 	ldw	r3,-12(fp)
   8d6d8:	e0bffe17 	ldw	r2,-8(fp)
   8d6dc:	e0bffb15 	stw	r2,-20(fp)
   8d6e0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8d6e4:	e0fffc17 	ldw	r3,-16(fp)
   8d6e8:	e0bffb17 	ldw	r2,-20(fp)
   8d6ec:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8d6f0:	e0bffb17 	ldw	r2,-20(fp)
   8d6f4:	10c00017 	ldw	r3,0(r2)
   8d6f8:	e0bffc17 	ldw	r2,-16(fp)
   8d6fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8d700:	e0bffb17 	ldw	r2,-20(fp)
   8d704:	10c00017 	ldw	r3,0(r2)
   8d708:	e0bffc17 	ldw	r2,-16(fp)
   8d70c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8d710:	e0fffb17 	ldw	r3,-20(fp)
   8d714:	e0bffc17 	ldw	r2,-16(fp)
   8d718:	18800015 	stw	r2,0(r3)

  return 0;  
   8d71c:	e03fff15 	stw	zero,-4(fp)
   8d720:	e0bfff17 	ldw	r2,-4(fp)
}
   8d724:	e037883a 	mov	sp,fp
   8d728:	dfc00117 	ldw	ra,4(sp)
   8d72c:	df000017 	ldw	fp,0(sp)
   8d730:	dec00204 	addi	sp,sp,8
   8d734:	f800283a 	ret

0008d738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d738:	defffd04 	addi	sp,sp,-12
   8d73c:	dfc00215 	stw	ra,8(sp)
   8d740:	df000115 	stw	fp,4(sp)
   8d744:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8d748:	00800274 	movhi	r2,9
   8d74c:	1082ad04 	addi	r2,r2,2740
   8d750:	10800017 	ldw	r2,0(r2)
   8d754:	1005003a 	cmpeq	r2,r2,zero
   8d758:	1000061e 	bne	r2,zero,8d774 <alt_get_errno+0x3c>
   8d75c:	00800274 	movhi	r2,9
   8d760:	1082ad04 	addi	r2,r2,2740
   8d764:	10800017 	ldw	r2,0(r2)
   8d768:	103ee83a 	callr	r2
   8d76c:	e0bfff15 	stw	r2,-4(fp)
   8d770:	00000306 	br	8d780 <alt_get_errno+0x48>
   8d774:	00800274 	movhi	r2,9
   8d778:	10899404 	addi	r2,r2,9808
   8d77c:	e0bfff15 	stw	r2,-4(fp)
   8d780:	e0bfff17 	ldw	r2,-4(fp)
}
   8d784:	e037883a 	mov	sp,fp
   8d788:	dfc00117 	ldw	ra,4(sp)
   8d78c:	df000017 	ldw	fp,0(sp)
   8d790:	dec00204 	addi	sp,sp,8
   8d794:	f800283a 	ret

0008d798 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8d798:	defffd04 	addi	sp,sp,-12
   8d79c:	dfc00215 	stw	ra,8(sp)
   8d7a0:	df000115 	stw	fp,4(sp)
   8d7a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8d7a8:	00bfff04 	movi	r2,-4
   8d7ac:	00c00274 	movhi	r3,9
   8d7b0:	18fb9204 	addi	r3,r3,-4536
   8d7b4:	1885883a 	add	r2,r3,r2
   8d7b8:	e0bfff15 	stw	r2,-4(fp)
   8d7bc:	00000606 	br	8d7d8 <_do_ctors+0x40>
        (*ctor) (); 
   8d7c0:	e0bfff17 	ldw	r2,-4(fp)
   8d7c4:	10800017 	ldw	r2,0(r2)
   8d7c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8d7cc:	e0bfff17 	ldw	r2,-4(fp)
   8d7d0:	10bfff04 	addi	r2,r2,-4
   8d7d4:	e0bfff15 	stw	r2,-4(fp)
   8d7d8:	e0ffff17 	ldw	r3,-4(fp)
   8d7dc:	00800274 	movhi	r2,9
   8d7e0:	10bb9104 	addi	r2,r2,-4540
   8d7e4:	18bff62e 	bgeu	r3,r2,8d7c0 <_do_ctors+0x28>
        (*ctor) (); 
}
   8d7e8:	e037883a 	mov	sp,fp
   8d7ec:	dfc00117 	ldw	ra,4(sp)
   8d7f0:	df000017 	ldw	fp,0(sp)
   8d7f4:	dec00204 	addi	sp,sp,8
   8d7f8:	f800283a 	ret

0008d7fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8d7fc:	defffd04 	addi	sp,sp,-12
   8d800:	dfc00215 	stw	ra,8(sp)
   8d804:	df000115 	stw	fp,4(sp)
   8d808:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8d80c:	00bfff04 	movi	r2,-4
   8d810:	00c00274 	movhi	r3,9
   8d814:	18fb9204 	addi	r3,r3,-4536
   8d818:	1885883a 	add	r2,r3,r2
   8d81c:	e0bfff15 	stw	r2,-4(fp)
   8d820:	00000606 	br	8d83c <_do_dtors+0x40>
        (*dtor) (); 
   8d824:	e0bfff17 	ldw	r2,-4(fp)
   8d828:	10800017 	ldw	r2,0(r2)
   8d82c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8d830:	e0bfff17 	ldw	r2,-4(fp)
   8d834:	10bfff04 	addi	r2,r2,-4
   8d838:	e0bfff15 	stw	r2,-4(fp)
   8d83c:	e0ffff17 	ldw	r3,-4(fp)
   8d840:	00800274 	movhi	r2,9
   8d844:	10bb9204 	addi	r2,r2,-4536
   8d848:	18bff62e 	bgeu	r3,r2,8d824 <_do_dtors+0x28>
        (*dtor) (); 
}
   8d84c:	e037883a 	mov	sp,fp
   8d850:	dfc00117 	ldw	ra,4(sp)
   8d854:	df000017 	ldw	fp,0(sp)
   8d858:	dec00204 	addi	sp,sp,8
   8d85c:	f800283a 	ret

0008d860 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8d860:	defff904 	addi	sp,sp,-28
   8d864:	dfc00615 	stw	ra,24(sp)
   8d868:	df000515 	stw	fp,20(sp)
   8d86c:	df000504 	addi	fp,sp,20
   8d870:	e13ffd15 	stw	r4,-12(fp)
   8d874:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8d878:	e0bffe17 	ldw	r2,-8(fp)
   8d87c:	10800017 	ldw	r2,0(r2)
   8d880:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8d884:	e13ffd17 	ldw	r4,-12(fp)
   8d888:	008049c0 	call	8049c <strlen>
   8d88c:	10800044 	addi	r2,r2,1
   8d890:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8d894:	00000d06 	br	8d8cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8d898:	e0bffc17 	ldw	r2,-16(fp)
   8d89c:	11000217 	ldw	r4,8(r2)
   8d8a0:	e1bffb17 	ldw	r6,-20(fp)
   8d8a4:	e17ffd17 	ldw	r5,-12(fp)
   8d8a8:	008e9300 	call	8e930 <memcmp>
   8d8ac:	1004c03a 	cmpne	r2,r2,zero
   8d8b0:	1000031e 	bne	r2,zero,8d8c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8d8b4:	e0bffc17 	ldw	r2,-16(fp)
   8d8b8:	e0bfff15 	stw	r2,-4(fp)
   8d8bc:	00000706 	br	8d8dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8d8c0:	e0bffc17 	ldw	r2,-16(fp)
   8d8c4:	10800017 	ldw	r2,0(r2)
   8d8c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8d8cc:	e0fffe17 	ldw	r3,-8(fp)
   8d8d0:	e0bffc17 	ldw	r2,-16(fp)
   8d8d4:	10fff01e 	bne	r2,r3,8d898 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8d8d8:	e03fff15 	stw	zero,-4(fp)
   8d8dc:	e0bfff17 	ldw	r2,-4(fp)
}
   8d8e0:	e037883a 	mov	sp,fp
   8d8e4:	dfc00117 	ldw	ra,4(sp)
   8d8e8:	df000017 	ldw	fp,0(sp)
   8d8ec:	dec00204 	addi	sp,sp,8
   8d8f0:	f800283a 	ret

0008d8f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8d8f4:	deffff04 	addi	sp,sp,-4
   8d8f8:	df000015 	stw	fp,0(sp)
   8d8fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8d900:	e037883a 	mov	sp,fp
   8d904:	df000017 	ldw	fp,0(sp)
   8d908:	dec00104 	addi	sp,sp,4
   8d90c:	f800283a 	ret

0008d910 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8d910:	defff904 	addi	sp,sp,-28
   8d914:	dfc00615 	stw	ra,24(sp)
   8d918:	df000515 	stw	fp,20(sp)
   8d91c:	df000504 	addi	fp,sp,20
   8d920:	e13ffc15 	stw	r4,-16(fp)
   8d924:	e17ffd15 	stw	r5,-12(fp)
   8d928:	e1bffe15 	stw	r6,-8(fp)
   8d92c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8d930:	e0800217 	ldw	r2,8(fp)
   8d934:	d8800015 	stw	r2,0(sp)
   8d938:	e13ffc17 	ldw	r4,-16(fp)
   8d93c:	e17ffd17 	ldw	r5,-12(fp)
   8d940:	e1bffe17 	ldw	r6,-8(fp)
   8d944:	e1ffff17 	ldw	r7,-4(fp)
   8d948:	008dae40 	call	8dae4 <alt_iic_isr_register>
}  
   8d94c:	e037883a 	mov	sp,fp
   8d950:	dfc00117 	ldw	ra,4(sp)
   8d954:	df000017 	ldw	fp,0(sp)
   8d958:	dec00204 	addi	sp,sp,8
   8d95c:	f800283a 	ret

0008d960 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8d960:	defff904 	addi	sp,sp,-28
   8d964:	df000615 	stw	fp,24(sp)
   8d968:	df000604 	addi	fp,sp,24
   8d96c:	e13ffe15 	stw	r4,-8(fp)
   8d970:	e17fff15 	stw	r5,-4(fp)
   8d974:	e0bfff17 	ldw	r2,-4(fp)
   8d978:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d97c:	0005303a 	rdctl	r2,status
   8d980:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d984:	e0fffb17 	ldw	r3,-20(fp)
   8d988:	00bfff84 	movi	r2,-2
   8d98c:	1884703a 	and	r2,r3,r2
   8d990:	1001703a 	wrctl	status,r2
  
  return context;
   8d994:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8d998:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   8d99c:	e0fffc17 	ldw	r3,-16(fp)
   8d9a0:	00800044 	movi	r2,1
   8d9a4:	10c4983a 	sll	r2,r2,r3
   8d9a8:	1007883a 	mov	r3,r2
   8d9ac:	00800274 	movhi	r2,9
   8d9b0:	1089b104 	addi	r2,r2,9924
   8d9b4:	10800017 	ldw	r2,0(r2)
   8d9b8:	1886b03a 	or	r3,r3,r2
   8d9bc:	00800274 	movhi	r2,9
   8d9c0:	1089b104 	addi	r2,r2,9924
   8d9c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8d9c8:	00800274 	movhi	r2,9
   8d9cc:	1089b104 	addi	r2,r2,9924
   8d9d0:	10800017 	ldw	r2,0(r2)
   8d9d4:	100170fa 	wrctl	ienable,r2
   8d9d8:	e0bffd17 	ldw	r2,-12(fp)
   8d9dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d9e0:	e0bffa17 	ldw	r2,-24(fp)
   8d9e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8d9e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8d9ec:	e037883a 	mov	sp,fp
   8d9f0:	df000017 	ldw	fp,0(sp)
   8d9f4:	dec00104 	addi	sp,sp,4
   8d9f8:	f800283a 	ret

0008d9fc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8d9fc:	defff904 	addi	sp,sp,-28
   8da00:	df000615 	stw	fp,24(sp)
   8da04:	df000604 	addi	fp,sp,24
   8da08:	e13ffe15 	stw	r4,-8(fp)
   8da0c:	e17fff15 	stw	r5,-4(fp)
   8da10:	e0bfff17 	ldw	r2,-4(fp)
   8da14:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8da18:	0005303a 	rdctl	r2,status
   8da1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8da20:	e0fffb17 	ldw	r3,-20(fp)
   8da24:	00bfff84 	movi	r2,-2
   8da28:	1884703a 	and	r2,r3,r2
   8da2c:	1001703a 	wrctl	status,r2
  
  return context;
   8da30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8da34:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   8da38:	e0fffc17 	ldw	r3,-16(fp)
   8da3c:	00800044 	movi	r2,1
   8da40:	10c4983a 	sll	r2,r2,r3
   8da44:	0084303a 	nor	r2,zero,r2
   8da48:	1007883a 	mov	r3,r2
   8da4c:	00800274 	movhi	r2,9
   8da50:	1089b104 	addi	r2,r2,9924
   8da54:	10800017 	ldw	r2,0(r2)
   8da58:	1886703a 	and	r3,r3,r2
   8da5c:	00800274 	movhi	r2,9
   8da60:	1089b104 	addi	r2,r2,9924
   8da64:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8da68:	00800274 	movhi	r2,9
   8da6c:	1089b104 	addi	r2,r2,9924
   8da70:	10800017 	ldw	r2,0(r2)
   8da74:	100170fa 	wrctl	ienable,r2
   8da78:	e0bffd17 	ldw	r2,-12(fp)
   8da7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8da80:	e0bffa17 	ldw	r2,-24(fp)
   8da84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8da88:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8da8c:	e037883a 	mov	sp,fp
   8da90:	df000017 	ldw	fp,0(sp)
   8da94:	dec00104 	addi	sp,sp,4
   8da98:	f800283a 	ret

0008da9c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8da9c:	defffc04 	addi	sp,sp,-16
   8daa0:	df000315 	stw	fp,12(sp)
   8daa4:	df000304 	addi	fp,sp,12
   8daa8:	e13ffe15 	stw	r4,-8(fp)
   8daac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8dab0:	000530fa 	rdctl	r2,ienable
   8dab4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8dab8:	e0ffff17 	ldw	r3,-4(fp)
   8dabc:	00800044 	movi	r2,1
   8dac0:	10c4983a 	sll	r2,r2,r3
   8dac4:	1007883a 	mov	r3,r2
   8dac8:	e0bffd17 	ldw	r2,-12(fp)
   8dacc:	1884703a 	and	r2,r3,r2
   8dad0:	1004c03a 	cmpne	r2,r2,zero
}
   8dad4:	e037883a 	mov	sp,fp
   8dad8:	df000017 	ldw	fp,0(sp)
   8dadc:	dec00104 	addi	sp,sp,4
   8dae0:	f800283a 	ret

0008dae4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8dae4:	defff404 	addi	sp,sp,-48
   8dae8:	dfc00b15 	stw	ra,44(sp)
   8daec:	df000a15 	stw	fp,40(sp)
   8daf0:	df000a04 	addi	fp,sp,40
   8daf4:	e13ffb15 	stw	r4,-20(fp)
   8daf8:	e17ffc15 	stw	r5,-16(fp)
   8dafc:	e1bffd15 	stw	r6,-12(fp)
   8db00:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   8db04:	00bffa84 	movi	r2,-22
   8db08:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8db0c:	e0bffc17 	ldw	r2,-16(fp)
   8db10:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8db14:	e0bff917 	ldw	r2,-28(fp)
   8db18:	10800808 	cmpgei	r2,r2,32
   8db1c:	1000291e 	bne	r2,zero,8dbc4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8db20:	0005303a 	rdctl	r2,status
   8db24:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8db28:	e0fff717 	ldw	r3,-36(fp)
   8db2c:	00bfff84 	movi	r2,-2
   8db30:	1884703a 	and	r2,r3,r2
   8db34:	1001703a 	wrctl	status,r2
  
  return context;
   8db38:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8db3c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   8db40:	e0bff917 	ldw	r2,-28(fp)
   8db44:	00c002b4 	movhi	r3,10
   8db48:	18e64704 	addi	r3,r3,-26340
   8db4c:	100490fa 	slli	r2,r2,3
   8db50:	10c7883a 	add	r3,r2,r3
   8db54:	e0bffd17 	ldw	r2,-12(fp)
   8db58:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   8db5c:	e0bff917 	ldw	r2,-28(fp)
   8db60:	00c002b4 	movhi	r3,10
   8db64:	18e64704 	addi	r3,r3,-26340
   8db68:	100490fa 	slli	r2,r2,3
   8db6c:	10c5883a 	add	r2,r2,r3
   8db70:	10c00104 	addi	r3,r2,4
   8db74:	e0bffe17 	ldw	r2,-8(fp)
   8db78:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8db7c:	e0bffd17 	ldw	r2,-12(fp)
   8db80:	1005003a 	cmpeq	r2,r2,zero
   8db84:	1000051e 	bne	r2,zero,8db9c <alt_iic_isr_register+0xb8>
   8db88:	e17ff917 	ldw	r5,-28(fp)
   8db8c:	e13ffb17 	ldw	r4,-20(fp)
   8db90:	008d9600 	call	8d960 <alt_ic_irq_enable>
   8db94:	e0bfff15 	stw	r2,-4(fp)
   8db98:	00000406 	br	8dbac <alt_iic_isr_register+0xc8>
   8db9c:	e17ff917 	ldw	r5,-28(fp)
   8dba0:	e13ffb17 	ldw	r4,-20(fp)
   8dba4:	008d9fc0 	call	8d9fc <alt_ic_irq_disable>
   8dba8:	e0bfff15 	stw	r2,-4(fp)
   8dbac:	e0bfff17 	ldw	r2,-4(fp)
   8dbb0:	e0bffa15 	stw	r2,-24(fp)
   8dbb4:	e0bff817 	ldw	r2,-32(fp)
   8dbb8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8dbbc:	e0bff617 	ldw	r2,-40(fp)
   8dbc0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8dbc4:	e0bffa17 	ldw	r2,-24(fp)
}
   8dbc8:	e037883a 	mov	sp,fp
   8dbcc:	dfc00117 	ldw	ra,4(sp)
   8dbd0:	df000017 	ldw	fp,0(sp)
   8dbd4:	dec00204 	addi	sp,sp,8
   8dbd8:	f800283a 	ret

0008dbdc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8dbdc:	defff804 	addi	sp,sp,-32
   8dbe0:	dfc00715 	stw	ra,28(sp)
   8dbe4:	df000615 	stw	fp,24(sp)
   8dbe8:	dc000515 	stw	r16,20(sp)
   8dbec:	df000504 	addi	fp,sp,20
   8dbf0:	e13ffc15 	stw	r4,-16(fp)
   8dbf4:	e17ffd15 	stw	r5,-12(fp)
   8dbf8:	e1bffe15 	stw	r6,-8(fp)
   8dbfc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8dc00:	e13ffd17 	ldw	r4,-12(fp)
   8dc04:	e17ffe17 	ldw	r5,-8(fp)
   8dc08:	e1bfff17 	ldw	r6,-4(fp)
   8dc0c:	008de240 	call	8de24 <open>
   8dc10:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8dc14:	e0bffb17 	ldw	r2,-20(fp)
   8dc18:	1004803a 	cmplt	r2,r2,zero
   8dc1c:	10001f1e 	bne	r2,zero,8dc9c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   8dc20:	e13ffb17 	ldw	r4,-20(fp)
   8dc24:	04000274 	movhi	r16,9
   8dc28:	843e1d04 	addi	r16,r16,-1932
   8dc2c:	01400304 	movi	r5,12
   8dc30:	0082d2c0 	call	82d2c <__mulsi3>
   8dc34:	1405883a 	add	r2,r2,r16
   8dc38:	10c00017 	ldw	r3,0(r2)
   8dc3c:	e0bffc17 	ldw	r2,-16(fp)
   8dc40:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8dc44:	e13ffb17 	ldw	r4,-20(fp)
   8dc48:	04000274 	movhi	r16,9
   8dc4c:	843e1d04 	addi	r16,r16,-1932
   8dc50:	01400304 	movi	r5,12
   8dc54:	0082d2c0 	call	82d2c <__mulsi3>
   8dc58:	1405883a 	add	r2,r2,r16
   8dc5c:	10800104 	addi	r2,r2,4
   8dc60:	10c00017 	ldw	r3,0(r2)
   8dc64:	e0bffc17 	ldw	r2,-16(fp)
   8dc68:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8dc6c:	e13ffb17 	ldw	r4,-20(fp)
   8dc70:	04000274 	movhi	r16,9
   8dc74:	843e1d04 	addi	r16,r16,-1932
   8dc78:	01400304 	movi	r5,12
   8dc7c:	0082d2c0 	call	82d2c <__mulsi3>
   8dc80:	1405883a 	add	r2,r2,r16
   8dc84:	10800204 	addi	r2,r2,8
   8dc88:	10c00017 	ldw	r3,0(r2)
   8dc8c:	e0bffc17 	ldw	r2,-16(fp)
   8dc90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8dc94:	e13ffb17 	ldw	r4,-20(fp)
   8dc98:	00835d80 	call	835d8 <alt_release_fd>
  }
} 
   8dc9c:	e037883a 	mov	sp,fp
   8dca0:	dfc00217 	ldw	ra,8(sp)
   8dca4:	df000117 	ldw	fp,4(sp)
   8dca8:	dc000017 	ldw	r16,0(sp)
   8dcac:	dec00304 	addi	sp,sp,12
   8dcb0:	f800283a 	ret

0008dcb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8dcb4:	defffb04 	addi	sp,sp,-20
   8dcb8:	dfc00415 	stw	ra,16(sp)
   8dcbc:	df000315 	stw	fp,12(sp)
   8dcc0:	df000304 	addi	fp,sp,12
   8dcc4:	e13ffd15 	stw	r4,-12(fp)
   8dcc8:	e17ffe15 	stw	r5,-8(fp)
   8dccc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8dcd0:	01000274 	movhi	r4,9
   8dcd4:	213e2004 	addi	r4,r4,-1920
   8dcd8:	e17ffd17 	ldw	r5,-12(fp)
   8dcdc:	01800044 	movi	r6,1
   8dce0:	01c07fc4 	movi	r7,511
   8dce4:	008dbdc0 	call	8dbdc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8dce8:	01000274 	movhi	r4,9
   8dcec:	213e1d04 	addi	r4,r4,-1932
   8dcf0:	e17ffe17 	ldw	r5,-8(fp)
   8dcf4:	000d883a 	mov	r6,zero
   8dcf8:	01c07fc4 	movi	r7,511
   8dcfc:	008dbdc0 	call	8dbdc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8dd00:	01000274 	movhi	r4,9
   8dd04:	213e2304 	addi	r4,r4,-1908
   8dd08:	e17fff17 	ldw	r5,-4(fp)
   8dd0c:	01800044 	movi	r6,1
   8dd10:	01c07fc4 	movi	r7,511
   8dd14:	008dbdc0 	call	8dbdc <alt_open_fd>
}  
   8dd18:	e037883a 	mov	sp,fp
   8dd1c:	dfc00117 	ldw	ra,4(sp)
   8dd20:	df000017 	ldw	fp,0(sp)
   8dd24:	dec00204 	addi	sp,sp,8
   8dd28:	f800283a 	ret

0008dd2c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8dd2c:	defffa04 	addi	sp,sp,-24
   8dd30:	dfc00515 	stw	ra,20(sp)
   8dd34:	df000415 	stw	fp,16(sp)
   8dd38:	dc000315 	stw	r16,12(sp)
   8dd3c:	df000304 	addi	fp,sp,12
   8dd40:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8dd44:	e0bffe17 	ldw	r2,-8(fp)
   8dd48:	10800217 	ldw	r2,8(r2)
   8dd4c:	10d00034 	orhi	r3,r2,16384
   8dd50:	e0bffe17 	ldw	r2,-8(fp)
   8dd54:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8dd58:	e03ffd15 	stw	zero,-12(fp)
   8dd5c:	00002306 	br	8ddec <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8dd60:	e13ffd17 	ldw	r4,-12(fp)
   8dd64:	04000274 	movhi	r16,9
   8dd68:	843e1d04 	addi	r16,r16,-1932
   8dd6c:	01400304 	movi	r5,12
   8dd70:	0082d2c0 	call	82d2c <__mulsi3>
   8dd74:	1405883a 	add	r2,r2,r16
   8dd78:	10c00017 	ldw	r3,0(r2)
   8dd7c:	e0bffe17 	ldw	r2,-8(fp)
   8dd80:	10800017 	ldw	r2,0(r2)
   8dd84:	1880161e 	bne	r3,r2,8dde0 <alt_file_locked+0xb4>
   8dd88:	e13ffd17 	ldw	r4,-12(fp)
   8dd8c:	04000274 	movhi	r16,9
   8dd90:	843e1d04 	addi	r16,r16,-1932
   8dd94:	01400304 	movi	r5,12
   8dd98:	0082d2c0 	call	82d2c <__mulsi3>
   8dd9c:	1405883a 	add	r2,r2,r16
   8dda0:	10800204 	addi	r2,r2,8
   8dda4:	10800017 	ldw	r2,0(r2)
   8dda8:	1004403a 	cmpge	r2,r2,zero
   8ddac:	10000c1e 	bne	r2,zero,8dde0 <alt_file_locked+0xb4>
   8ddb0:	e13ffd17 	ldw	r4,-12(fp)
   8ddb4:	01400304 	movi	r5,12
   8ddb8:	0082d2c0 	call	82d2c <__mulsi3>
   8ddbc:	1007883a 	mov	r3,r2
   8ddc0:	00800274 	movhi	r2,9
   8ddc4:	10be1d04 	addi	r2,r2,-1932
   8ddc8:	1887883a 	add	r3,r3,r2
   8ddcc:	e0bffe17 	ldw	r2,-8(fp)
   8ddd0:	18800326 	beq	r3,r2,8dde0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8ddd4:	00bffcc4 	movi	r2,-13
   8ddd8:	e0bfff15 	stw	r2,-4(fp)
   8dddc:	00000a06 	br	8de08 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8dde0:	e0bffd17 	ldw	r2,-12(fp)
   8dde4:	10800044 	addi	r2,r2,1
   8dde8:	e0bffd15 	stw	r2,-12(fp)
   8ddec:	00800274 	movhi	r2,9
   8ddf0:	1082ac04 	addi	r2,r2,2736
   8ddf4:	10800017 	ldw	r2,0(r2)
   8ddf8:	1007883a 	mov	r3,r2
   8ddfc:	e0bffd17 	ldw	r2,-12(fp)
   8de00:	18bfd72e 	bgeu	r3,r2,8dd60 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8de04:	e03fff15 	stw	zero,-4(fp)
   8de08:	e0bfff17 	ldw	r2,-4(fp)
}
   8de0c:	e037883a 	mov	sp,fp
   8de10:	dfc00217 	ldw	ra,8(sp)
   8de14:	df000117 	ldw	fp,4(sp)
   8de18:	dc000017 	ldw	r16,0(sp)
   8de1c:	dec00304 	addi	sp,sp,12
   8de20:	f800283a 	ret

0008de24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8de24:	defff404 	addi	sp,sp,-48
   8de28:	dfc00b15 	stw	ra,44(sp)
   8de2c:	df000a15 	stw	fp,40(sp)
   8de30:	df000a04 	addi	fp,sp,40
   8de34:	e13ffb15 	stw	r4,-20(fp)
   8de38:	e17ffc15 	stw	r5,-16(fp)
   8de3c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8de40:	00bfffc4 	movi	r2,-1
   8de44:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8de48:	00bffb44 	movi	r2,-19
   8de4c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   8de50:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8de54:	e13ffb17 	ldw	r4,-20(fp)
   8de58:	01400274 	movhi	r5,9
   8de5c:	2942aa04 	addi	r5,r5,2728
   8de60:	008d8600 	call	8d860 <alt_find_dev>
   8de64:	e0bffa15 	stw	r2,-24(fp)
   8de68:	e0bffa17 	ldw	r2,-24(fp)
   8de6c:	1004c03a 	cmpne	r2,r2,zero
   8de70:	1000051e 	bne	r2,zero,8de88 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8de74:	e13ffb17 	ldw	r4,-20(fp)
   8de78:	008e6c00 	call	8e6c0 <alt_find_file>
   8de7c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   8de80:	00800044 	movi	r2,1
   8de84:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8de88:	e0bffa17 	ldw	r2,-24(fp)
   8de8c:	1005003a 	cmpeq	r2,r2,zero
   8de90:	1000311e 	bne	r2,zero,8df58 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8de94:	e13ffa17 	ldw	r4,-24(fp)
   8de98:	008e7e00 	call	8e7e0 <alt_get_fd>
   8de9c:	e0bff815 	stw	r2,-32(fp)
   8dea0:	e0bff817 	ldw	r2,-32(fp)
   8dea4:	1004403a 	cmpge	r2,r2,zero
   8dea8:	1000031e 	bne	r2,zero,8deb8 <open+0x94>
    {
      status = index;
   8deac:	e0bff817 	ldw	r2,-32(fp)
   8deb0:	e0bff715 	stw	r2,-36(fp)
   8deb4:	00002a06 	br	8df60 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   8deb8:	e13ff817 	ldw	r4,-32(fp)
   8debc:	01400304 	movi	r5,12
   8dec0:	0082d2c0 	call	82d2c <__mulsi3>
   8dec4:	1007883a 	mov	r3,r2
   8dec8:	00800274 	movhi	r2,9
   8decc:	10be1d04 	addi	r2,r2,-1932
   8ded0:	1885883a 	add	r2,r3,r2
   8ded4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8ded8:	e0fffc17 	ldw	r3,-16(fp)
   8dedc:	00900034 	movhi	r2,16384
   8dee0:	10bfffc4 	addi	r2,r2,-1
   8dee4:	1886703a 	and	r3,r3,r2
   8dee8:	e0bff917 	ldw	r2,-28(fp)
   8deec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8def0:	e0bff617 	ldw	r2,-40(fp)
   8def4:	1004c03a 	cmpne	r2,r2,zero
   8def8:	1000061e 	bne	r2,zero,8df14 <open+0xf0>
   8defc:	e13ff917 	ldw	r4,-28(fp)
   8df00:	008dd2c0 	call	8dd2c <alt_file_locked>
   8df04:	e0bff715 	stw	r2,-36(fp)
   8df08:	e0bff717 	ldw	r2,-36(fp)
   8df0c:	1004803a 	cmplt	r2,r2,zero
   8df10:	1000131e 	bne	r2,zero,8df60 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8df14:	e0bffa17 	ldw	r2,-24(fp)
   8df18:	10800317 	ldw	r2,12(r2)
   8df1c:	1005003a 	cmpeq	r2,r2,zero
   8df20:	1000091e 	bne	r2,zero,8df48 <open+0x124>
   8df24:	e0bffa17 	ldw	r2,-24(fp)
   8df28:	10800317 	ldw	r2,12(r2)
   8df2c:	e13ff917 	ldw	r4,-28(fp)
   8df30:	e17ffb17 	ldw	r5,-20(fp)
   8df34:	e1bffc17 	ldw	r6,-16(fp)
   8df38:	e1fffd17 	ldw	r7,-12(fp)
   8df3c:	103ee83a 	callr	r2
   8df40:	e0bfff15 	stw	r2,-4(fp)
   8df44:	00000106 	br	8df4c <open+0x128>
   8df48:	e03fff15 	stw	zero,-4(fp)
   8df4c:	e0bfff17 	ldw	r2,-4(fp)
   8df50:	e0bff715 	stw	r2,-36(fp)
   8df54:	00000206 	br	8df60 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8df58:	00bffb44 	movi	r2,-19
   8df5c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8df60:	e0bff717 	ldw	r2,-36(fp)
   8df64:	1004403a 	cmpge	r2,r2,zero
   8df68:	1000091e 	bne	r2,zero,8df90 <open+0x16c>
  {
    alt_release_fd (index);  
   8df6c:	e13ff817 	ldw	r4,-32(fp)
   8df70:	00835d80 	call	835d8 <alt_release_fd>
    ALT_ERRNO = -status;
   8df74:	008dfb00 	call	8dfb0 <alt_get_errno>
   8df78:	e0fff717 	ldw	r3,-36(fp)
   8df7c:	00c7c83a 	sub	r3,zero,r3
   8df80:	10c00015 	stw	r3,0(r2)
    return -1;
   8df84:	00bfffc4 	movi	r2,-1
   8df88:	e0bffe15 	stw	r2,-8(fp)
   8df8c:	00000206 	br	8df98 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   8df90:	e0bff817 	ldw	r2,-32(fp)
   8df94:	e0bffe15 	stw	r2,-8(fp)
   8df98:	e0bffe17 	ldw	r2,-8(fp)
}
   8df9c:	e037883a 	mov	sp,fp
   8dfa0:	dfc00117 	ldw	ra,4(sp)
   8dfa4:	df000017 	ldw	fp,0(sp)
   8dfa8:	dec00204 	addi	sp,sp,8
   8dfac:	f800283a 	ret

0008dfb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8dfb0:	defffd04 	addi	sp,sp,-12
   8dfb4:	dfc00215 	stw	ra,8(sp)
   8dfb8:	df000115 	stw	fp,4(sp)
   8dfbc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8dfc0:	00800274 	movhi	r2,9
   8dfc4:	1082ad04 	addi	r2,r2,2740
   8dfc8:	10800017 	ldw	r2,0(r2)
   8dfcc:	1005003a 	cmpeq	r2,r2,zero
   8dfd0:	1000061e 	bne	r2,zero,8dfec <alt_get_errno+0x3c>
   8dfd4:	00800274 	movhi	r2,9
   8dfd8:	1082ad04 	addi	r2,r2,2740
   8dfdc:	10800017 	ldw	r2,0(r2)
   8dfe0:	103ee83a 	callr	r2
   8dfe4:	e0bfff15 	stw	r2,-4(fp)
   8dfe8:	00000306 	br	8dff8 <alt_get_errno+0x48>
   8dfec:	00800274 	movhi	r2,9
   8dff0:	10899404 	addi	r2,r2,9808
   8dff4:	e0bfff15 	stw	r2,-4(fp)
   8dff8:	e0bfff17 	ldw	r2,-4(fp)
}
   8dffc:	e037883a 	mov	sp,fp
   8e000:	dfc00117 	ldw	ra,4(sp)
   8e004:	df000017 	ldw	fp,0(sp)
   8e008:	dec00204 	addi	sp,sp,8
   8e00c:	f800283a 	ret

0008e010 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8e010:	defffa04 	addi	sp,sp,-24
   8e014:	df000515 	stw	fp,20(sp)
   8e018:	df000504 	addi	fp,sp,20
   8e01c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e020:	0005303a 	rdctl	r2,status
   8e024:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e028:	e0fffd17 	ldw	r3,-12(fp)
   8e02c:	00bfff84 	movi	r2,-2
   8e030:	1884703a 	and	r2,r3,r2
   8e034:	1001703a 	wrctl	status,r2
  
  return context;
   8e038:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8e03c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   8e040:	e0bfff17 	ldw	r2,-4(fp)
   8e044:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8e048:	e0bffc17 	ldw	r2,-16(fp)
   8e04c:	10c00017 	ldw	r3,0(r2)
   8e050:	e0bffc17 	ldw	r2,-16(fp)
   8e054:	10800117 	ldw	r2,4(r2)
   8e058:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   8e05c:	e0bffc17 	ldw	r2,-16(fp)
   8e060:	10c00117 	ldw	r3,4(r2)
   8e064:	e0bffc17 	ldw	r2,-16(fp)
   8e068:	10800017 	ldw	r2,0(r2)
   8e06c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8e070:	e0fffc17 	ldw	r3,-16(fp)
   8e074:	e0bffc17 	ldw	r2,-16(fp)
   8e078:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   8e07c:	e0fffc17 	ldw	r3,-16(fp)
   8e080:	e0bffc17 	ldw	r2,-16(fp)
   8e084:	18800015 	stw	r2,0(r3)
   8e088:	e0bffe17 	ldw	r2,-8(fp)
   8e08c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e090:	e0bffb17 	ldw	r2,-20(fp)
   8e094:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8e098:	e037883a 	mov	sp,fp
   8e09c:	df000017 	ldw	fp,0(sp)
   8e0a0:	dec00104 	addi	sp,sp,4
   8e0a4:	f800283a 	ret

0008e0a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8e0a8:	defffb04 	addi	sp,sp,-20
   8e0ac:	dfc00415 	stw	ra,16(sp)
   8e0b0:	df000315 	stw	fp,12(sp)
   8e0b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8e0b8:	d0a02b17 	ldw	r2,-32596(gp)
   8e0bc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8e0c0:	d0a70f17 	ldw	r2,-25540(gp)
   8e0c4:	10800044 	addi	r2,r2,1
   8e0c8:	d0a70f15 	stw	r2,-25540(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8e0cc:	00003106 	br	8e194 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   8e0d0:	e0bffe17 	ldw	r2,-8(fp)
   8e0d4:	10800017 	ldw	r2,0(r2)
   8e0d8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8e0dc:	e0bffe17 	ldw	r2,-8(fp)
   8e0e0:	10800403 	ldbu	r2,16(r2)
   8e0e4:	10803fcc 	andi	r2,r2,255
   8e0e8:	1005003a 	cmpeq	r2,r2,zero
   8e0ec:	1000051e 	bne	r2,zero,8e104 <alt_tick+0x5c>
   8e0f0:	d0a70f17 	ldw	r2,-25540(gp)
   8e0f4:	1004c03a 	cmpne	r2,r2,zero
   8e0f8:	1000021e 	bne	r2,zero,8e104 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   8e0fc:	e0bffe17 	ldw	r2,-8(fp)
   8e100:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8e104:	e0bffe17 	ldw	r2,-8(fp)
   8e108:	10c00217 	ldw	r3,8(r2)
   8e10c:	d0a70f17 	ldw	r2,-25540(gp)
   8e110:	10c01e36 	bltu	r2,r3,8e18c <alt_tick+0xe4>
   8e114:	e0bffe17 	ldw	r2,-8(fp)
   8e118:	10800403 	ldbu	r2,16(r2)
   8e11c:	10803fcc 	andi	r2,r2,255
   8e120:	1004c03a 	cmpne	r2,r2,zero
   8e124:	1000191e 	bne	r2,zero,8e18c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8e128:	e0bffe17 	ldw	r2,-8(fp)
   8e12c:	10c00317 	ldw	r3,12(r2)
   8e130:	e0bffe17 	ldw	r2,-8(fp)
   8e134:	11000517 	ldw	r4,20(r2)
   8e138:	183ee83a 	callr	r3
   8e13c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8e140:	e0bffd17 	ldw	r2,-12(fp)
   8e144:	1004c03a 	cmpne	r2,r2,zero
   8e148:	1000031e 	bne	r2,zero,8e158 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   8e14c:	e13ffe17 	ldw	r4,-8(fp)
   8e150:	008e0100 	call	8e010 <alt_alarm_stop>
   8e154:	00000d06 	br	8e18c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8e158:	e0bffe17 	ldw	r2,-8(fp)
   8e15c:	10c00217 	ldw	r3,8(r2)
   8e160:	e0bffd17 	ldw	r2,-12(fp)
   8e164:	1887883a 	add	r3,r3,r2
   8e168:	e0bffe17 	ldw	r2,-8(fp)
   8e16c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8e170:	e0bffe17 	ldw	r2,-8(fp)
   8e174:	10c00217 	ldw	r3,8(r2)
   8e178:	d0a70f17 	ldw	r2,-25540(gp)
   8e17c:	1880032e 	bgeu	r3,r2,8e18c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   8e180:	e0fffe17 	ldw	r3,-8(fp)
   8e184:	00800044 	movi	r2,1
   8e188:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   8e18c:	e0bfff17 	ldw	r2,-4(fp)
   8e190:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8e194:	d0e02b04 	addi	r3,gp,-32596
   8e198:	e0bffe17 	ldw	r2,-8(fp)
   8e19c:	10ffcc1e 	bne	r2,r3,8e0d0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   8e1a0:	00848f40 	call	848f4 <OSTimeTick>
}
   8e1a4:	e037883a 	mov	sp,fp
   8e1a8:	dfc00117 	ldw	ra,4(sp)
   8e1ac:	df000017 	ldw	fp,0(sp)
   8e1b0:	dec00204 	addi	sp,sp,8
   8e1b4:	f800283a 	ret

0008e1b8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8e1b8:	deffff04 	addi	sp,sp,-4
   8e1bc:	df000015 	stw	fp,0(sp)
   8e1c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8e1c4:	000170fa 	wrctl	ienable,zero
}
   8e1c8:	e037883a 	mov	sp,fp
   8e1cc:	df000017 	ldw	fp,0(sp)
   8e1d0:	dec00104 	addi	sp,sp,4
   8e1d4:	f800283a 	ret

0008e1d8 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   8e1d8:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   8e1dc:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   8e1e0:	d1270817 	ldw	r4,-25568(gp)

      stw ra,  0(sp)
   8e1e4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   8e1e8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   8e1ec:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   8e1f0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   8e1f4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   8e1f8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   8e1fc:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   8e200:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   8e204:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   8e208:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   8e20c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   8e210:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   8e214:	008e5f80 	call	8e5f8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   8e218:	d1270317 	ldw	r4,-25588(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   8e21c:	d166fb07 	ldb	r5,-25620(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   8e220:	d1270815 	stw	r4,-25568(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   8e224:	d166fb45 	stb	r5,-25619(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   8e228:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   8e22c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   8e230:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   8e234:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   8e238:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   8e23c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   8e240:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   8e244:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   8e248:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   8e24c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   8e250:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   8e254:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   8e258:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   8e25c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   8e260:	f800283a 	ret

0008e264 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   8e264:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   8e268:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   8e26c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   8e270:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   8e274:	008e5f80 	call	8e5f8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   8e278:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   8e27c:	d4a6f945 	stb	r18,-25627(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   8e280:	003fe506 	br	8e218 <OSCtxSw+0x40>

0008e284 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   8e284:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   8e288:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   8e28c:	10800054 	ori	r2,r2,1
      wrctl status, r2
   8e290:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   8e294:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   8e298:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   8e29c:	dec00204 	addi	sp,sp,8

      callr r2
   8e2a0:	103ee83a 	callr	r2

      nop
   8e2a4:	0001883a 	nop

0008e2a8 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   8e2a8:	defff704 	addi	sp,sp,-36
   8e2ac:	dfc00815 	stw	ra,32(sp)
   8e2b0:	df000715 	stw	fp,28(sp)
   8e2b4:	df000704 	addi	fp,sp,28
   8e2b8:	e13ffc15 	stw	r4,-16(fp)
   8e2bc:	e17ffd15 	stw	r5,-12(fp)
   8e2c0:	e1bffe15 	stw	r6,-8(fp)
   8e2c4:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   8e2c8:	e0bffe17 	ldw	r2,-8(fp)
   8e2cc:	1007883a 	mov	r3,r2
   8e2d0:	00bfff04 	movi	r2,-4
   8e2d4:	1884703a 	and	r2,r3,r2
   8e2d8:	10bf0004 	addi	r2,r2,-1024
   8e2dc:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   8e2e0:	e0bff917 	ldw	r2,-28(fp)
   8e2e4:	10000015 	stw	zero,0(r2)
   8e2e8:	e0bff917 	ldw	r2,-28(fp)
   8e2ec:	10c0bb04 	addi	r3,r2,748
   8e2f0:	e0bff917 	ldw	r2,-28(fp)
   8e2f4:	10c00115 	stw	r3,4(r2)
   8e2f8:	e0bff917 	ldw	r2,-28(fp)
   8e2fc:	1080bb04 	addi	r2,r2,748
   8e300:	10c01704 	addi	r3,r2,92
   8e304:	e0bff917 	ldw	r2,-28(fp)
   8e308:	10c00215 	stw	r3,8(r2)
   8e30c:	e0bff917 	ldw	r2,-28(fp)
   8e310:	1080bb04 	addi	r2,r2,748
   8e314:	10c02e04 	addi	r3,r2,184
   8e318:	e0bff917 	ldw	r2,-28(fp)
   8e31c:	10c00315 	stw	r3,12(r2)
   8e320:	e0bff917 	ldw	r2,-28(fp)
   8e324:	10000415 	stw	zero,16(r2)
   8e328:	e0bff917 	ldw	r2,-28(fp)
   8e32c:	10800504 	addi	r2,r2,20
   8e330:	1009883a 	mov	r4,r2
   8e334:	01800644 	movi	r6,25
   8e338:	000b883a 	mov	r5,zero
   8e33c:	00827680 	call	82768 <memset>
   8e340:	e0bff917 	ldw	r2,-28(fp)
   8e344:	10000c15 	stw	zero,48(r2)
   8e348:	e0fff917 	ldw	r3,-28(fp)
   8e34c:	00800274 	movhi	r2,9
   8e350:	10bc1004 	addi	r2,r2,-4032
   8e354:	18800d15 	stw	r2,52(r3)
   8e358:	e0bff917 	ldw	r2,-28(fp)
   8e35c:	10000e15 	stw	zero,56(r2)
   8e360:	e0bff917 	ldw	r2,-28(fp)
   8e364:	10000f15 	stw	zero,60(r2)
   8e368:	e0bff917 	ldw	r2,-28(fp)
   8e36c:	10001015 	stw	zero,64(r2)
   8e370:	e0bff917 	ldw	r2,-28(fp)
   8e374:	10001115 	stw	zero,68(r2)
   8e378:	e0bff917 	ldw	r2,-28(fp)
   8e37c:	10001215 	stw	zero,72(r2)
   8e380:	e0bff917 	ldw	r2,-28(fp)
   8e384:	10001315 	stw	zero,76(r2)
   8e388:	e0bff917 	ldw	r2,-28(fp)
   8e38c:	10001415 	stw	zero,80(r2)
   8e390:	e0bff917 	ldw	r2,-28(fp)
   8e394:	10001515 	stw	zero,84(r2)
   8e398:	e0bff917 	ldw	r2,-28(fp)
   8e39c:	10001615 	stw	zero,88(r2)
   8e3a0:	e0bff917 	ldw	r2,-28(fp)
   8e3a4:	10001715 	stw	zero,92(r2)
   8e3a8:	e0bff917 	ldw	r2,-28(fp)
   8e3ac:	10001805 	stb	zero,96(r2)
   8e3b0:	e0bff917 	ldw	r2,-28(fp)
   8e3b4:	10801f04 	addi	r2,r2,124
   8e3b8:	10000015 	stw	zero,0(r2)
   8e3bc:	10000115 	stw	zero,4(r2)
   8e3c0:	10000215 	stw	zero,8(r2)
   8e3c4:	10000315 	stw	zero,12(r2)
   8e3c8:	10000415 	stw	zero,16(r2)
   8e3cc:	10000515 	stw	zero,20(r2)
   8e3d0:	10000615 	stw	zero,24(r2)
   8e3d4:	10000715 	stw	zero,28(r2)
   8e3d8:	10000815 	stw	zero,32(r2)
   8e3dc:	e0bff917 	ldw	r2,-28(fp)
   8e3e0:	10002815 	stw	zero,160(r2)
   8e3e4:	e0fff917 	ldw	r3,-28(fp)
   8e3e8:	00800044 	movi	r2,1
   8e3ec:	18802915 	stw	r2,164(r3)
   8e3f0:	18002a15 	stw	zero,168(r3)
   8e3f4:	e0fff917 	ldw	r3,-28(fp)
   8e3f8:	008cc384 	movi	r2,13070
   8e3fc:	18802b0d 	sth	r2,172(r3)
   8e400:	e0fff917 	ldw	r3,-28(fp)
   8e404:	00aaf344 	movi	r2,-21555
   8e408:	18802b8d 	sth	r2,174(r3)
   8e40c:	e0fff917 	ldw	r3,-28(fp)
   8e410:	00848d04 	movi	r2,4660
   8e414:	18802c0d 	sth	r2,176(r3)
   8e418:	e0fff917 	ldw	r3,-28(fp)
   8e41c:	00b99b44 	movi	r2,-6547
   8e420:	18802c8d 	sth	r2,178(r3)
   8e424:	e0fff917 	ldw	r3,-28(fp)
   8e428:	00b7bb04 	movi	r2,-8468
   8e42c:	18802d0d 	sth	r2,180(r3)
   8e430:	e0fff917 	ldw	r3,-28(fp)
   8e434:	00800144 	movi	r2,5
   8e438:	18802d8d 	sth	r2,182(r3)
   8e43c:	e0fff917 	ldw	r3,-28(fp)
   8e440:	008002c4 	movi	r2,11
   8e444:	18802e0d 	sth	r2,184(r3)
   8e448:	e0bff917 	ldw	r2,-28(fp)
   8e44c:	10002f15 	stw	zero,188(r2)
   8e450:	e0bff917 	ldw	r2,-28(fp)
   8e454:	10003015 	stw	zero,192(r2)
   8e458:	e0bff917 	ldw	r2,-28(fp)
   8e45c:	10003115 	stw	zero,196(r2)
   8e460:	e0bff917 	ldw	r2,-28(fp)
   8e464:	10003215 	stw	zero,200(r2)
   8e468:	e0bff917 	ldw	r2,-28(fp)
   8e46c:	10003315 	stw	zero,204(r2)
   8e470:	e0bff917 	ldw	r2,-28(fp)
   8e474:	10003415 	stw	zero,208(r2)
   8e478:	e0bff917 	ldw	r2,-28(fp)
   8e47c:	10003e15 	stw	zero,248(r2)
   8e480:	e0bff917 	ldw	r2,-28(fp)
   8e484:	10003f15 	stw	zero,252(r2)
   8e488:	e0bff917 	ldw	r2,-28(fp)
   8e48c:	10004015 	stw	zero,256(r2)
   8e490:	e0bff917 	ldw	r2,-28(fp)
   8e494:	10004115 	stw	zero,260(r2)
   8e498:	e0bff917 	ldw	r2,-28(fp)
   8e49c:	10004215 	stw	zero,264(r2)
   8e4a0:	e0bff917 	ldw	r2,-28(fp)
   8e4a4:	10004315 	stw	zero,268(r2)
   8e4a8:	e0bff917 	ldw	r2,-28(fp)
   8e4ac:	10004415 	stw	zero,272(r2)
   8e4b0:	e0bff917 	ldw	r2,-28(fp)
   8e4b4:	10004515 	stw	zero,276(r2)
   8e4b8:	e0bff917 	ldw	r2,-28(fp)
   8e4bc:	10004615 	stw	zero,280(r2)
   8e4c0:	e0bff917 	ldw	r2,-28(fp)
   8e4c4:	10004715 	stw	zero,284(r2)
   8e4c8:	e0bff917 	ldw	r2,-28(fp)
   8e4cc:	10003505 	stb	zero,212(r2)
   8e4d0:	e0bff917 	ldw	r2,-28(fp)
   8e4d4:	10003705 	stb	zero,220(r2)
   8e4d8:	e0bff917 	ldw	r2,-28(fp)
   8e4dc:	10003d15 	stw	zero,244(r2)
   8e4e0:	e0bff917 	ldw	r2,-28(fp)
   8e4e4:	10005215 	stw	zero,328(r2)
   8e4e8:	e0bff917 	ldw	r2,-28(fp)
   8e4ec:	10005315 	stw	zero,332(r2)
   8e4f0:	e0bff917 	ldw	r2,-28(fp)
   8e4f4:	10005415 	stw	zero,336(r2)
   8e4f8:	e0bff917 	ldw	r2,-28(fp)
   8e4fc:	10005515 	stw	zero,340(r2)
   8e500:	e0bff917 	ldw	r2,-28(fp)
   8e504:	1000b515 	stw	zero,724(r2)
   8e508:	e0bff917 	ldw	r2,-28(fp)
   8e50c:	10007515 	stw	zero,468(r2)
   8e510:	e0bff917 	ldw	r2,-28(fp)
   8e514:	1000b715 	stw	zero,732(r2)
   8e518:	e0bff917 	ldw	r2,-28(fp)
   8e51c:	1000b815 	stw	zero,736(r2)
   8e520:	e0bff917 	ldw	r2,-28(fp)
   8e524:	1000b915 	stw	zero,740(r2)
   8e528:	e0bff917 	ldw	r2,-28(fp)
   8e52c:	1000ba15 	stw	zero,744(r2)
   8e530:	e0bff917 	ldw	r2,-28(fp)
   8e534:	1080bb04 	addi	r2,r2,748
   8e538:	1009883a 	mov	r4,r2
   8e53c:	01804504 	movi	r6,276
   8e540:	000b883a 	mov	r5,zero
   8e544:	00827680 	call	82768 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   8e548:	e0bff917 	ldw	r2,-28(fp)
   8e54c:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   8e550:	e0bffb17 	ldw	r2,-20(fp)
   8e554:	10bff304 	addi	r2,r2,-52
   8e558:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   8e55c:	e0bffa17 	ldw	r2,-24(fp)
   8e560:	10c00c04 	addi	r3,r2,48
   8e564:	e0bffc17 	ldw	r2,-16(fp)
   8e568:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   8e56c:	e0bffa17 	ldw	r2,-24(fp)
   8e570:	10c00b04 	addi	r3,r2,44
   8e574:	e0bffd17 	ldw	r2,-12(fp)
   8e578:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   8e57c:	e0bffa17 	ldw	r2,-24(fp)
   8e580:	10c00a04 	addi	r3,r2,40
   8e584:	e0bff917 	ldw	r2,-28(fp)
   8e588:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   8e58c:	00800274 	movhi	r2,9
   8e590:	10b8a104 	addi	r2,r2,-7548
   8e594:	10c00104 	addi	r3,r2,4
   8e598:	e0bffa17 	ldw	r2,-24(fp)
   8e59c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   8e5a0:	e0bffa17 	ldw	r2,-24(fp)
}
   8e5a4:	e037883a 	mov	sp,fp
   8e5a8:	dfc00117 	ldw	ra,4(sp)
   8e5ac:	df000017 	ldw	fp,0(sp)
   8e5b0:	dec00204 	addi	sp,sp,8
   8e5b4:	f800283a 	ret

0008e5b8 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   8e5b8:	defffe04 	addi	sp,sp,-8
   8e5bc:	df000115 	stw	fp,4(sp)
   8e5c0:	df000104 	addi	fp,sp,4
   8e5c4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   8e5c8:	e037883a 	mov	sp,fp
   8e5cc:	df000017 	ldw	fp,0(sp)
   8e5d0:	dec00104 	addi	sp,sp,4
   8e5d4:	f800283a 	ret

0008e5d8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   8e5d8:	defffe04 	addi	sp,sp,-8
   8e5dc:	df000115 	stw	fp,4(sp)
   8e5e0:	df000104 	addi	fp,sp,4
   8e5e4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   8e5e8:	e037883a 	mov	sp,fp
   8e5ec:	df000017 	ldw	fp,0(sp)
   8e5f0:	dec00104 	addi	sp,sp,4
   8e5f4:	f800283a 	ret

0008e5f8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   8e5f8:	deffff04 	addi	sp,sp,-4
   8e5fc:	df000015 	stw	fp,0(sp)
   8e600:	d839883a 	mov	fp,sp
}
   8e604:	e037883a 	mov	sp,fp
   8e608:	df000017 	ldw	fp,0(sp)
   8e60c:	dec00104 	addi	sp,sp,4
   8e610:	f800283a 	ret

0008e614 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   8e614:	deffff04 	addi	sp,sp,-4
   8e618:	df000015 	stw	fp,0(sp)
   8e61c:	d839883a 	mov	fp,sp
}
   8e620:	e037883a 	mov	sp,fp
   8e624:	df000017 	ldw	fp,0(sp)
   8e628:	dec00104 	addi	sp,sp,4
   8e62c:	f800283a 	ret

0008e630 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   8e630:	deffff04 	addi	sp,sp,-4
   8e634:	df000015 	stw	fp,0(sp)
   8e638:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   8e63c:	e037883a 	mov	sp,fp
   8e640:	df000017 	ldw	fp,0(sp)
   8e644:	dec00104 	addi	sp,sp,4
   8e648:	f800283a 	ret

0008e64c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   8e64c:	deffff04 	addi	sp,sp,-4
   8e650:	df000015 	stw	fp,0(sp)
   8e654:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   8e658:	e037883a 	mov	sp,fp
   8e65c:	df000017 	ldw	fp,0(sp)
   8e660:	dec00104 	addi	sp,sp,4
   8e664:	f800283a 	ret

0008e668 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   8e668:	deffff04 	addi	sp,sp,-4
   8e66c:	df000015 	stw	fp,0(sp)
   8e670:	d839883a 	mov	fp,sp
}
   8e674:	e037883a 	mov	sp,fp
   8e678:	df000017 	ldw	fp,0(sp)
   8e67c:	dec00104 	addi	sp,sp,4
   8e680:	f800283a 	ret

0008e684 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   8e684:	deffff04 	addi	sp,sp,-4
   8e688:	df000015 	stw	fp,0(sp)
   8e68c:	d839883a 	mov	fp,sp
}
   8e690:	e037883a 	mov	sp,fp
   8e694:	df000017 	ldw	fp,0(sp)
   8e698:	dec00104 	addi	sp,sp,4
   8e69c:	f800283a 	ret

0008e6a0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   8e6a0:	defffe04 	addi	sp,sp,-8
   8e6a4:	df000115 	stw	fp,4(sp)
   8e6a8:	df000104 	addi	fp,sp,4
   8e6ac:	e13fff15 	stw	r4,-4(fp)
}
   8e6b0:	e037883a 	mov	sp,fp
   8e6b4:	df000017 	ldw	fp,0(sp)
   8e6b8:	dec00104 	addi	sp,sp,4
   8e6bc:	f800283a 	ret

0008e6c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8e6c0:	defffa04 	addi	sp,sp,-24
   8e6c4:	dfc00515 	stw	ra,20(sp)
   8e6c8:	df000415 	stw	fp,16(sp)
   8e6cc:	df000404 	addi	fp,sp,16
   8e6d0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8e6d4:	00800274 	movhi	r2,9
   8e6d8:	1082a804 	addi	r2,r2,2720
   8e6dc:	10800017 	ldw	r2,0(r2)
   8e6e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8e6e4:	00003306 	br	8e7b4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   8e6e8:	e0bffd17 	ldw	r2,-12(fp)
   8e6ec:	11000217 	ldw	r4,8(r2)
   8e6f0:	008049c0 	call	8049c <strlen>
   8e6f4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   8e6f8:	e0bffd17 	ldw	r2,-12(fp)
   8e6fc:	10c00217 	ldw	r3,8(r2)
   8e700:	e0bffc17 	ldw	r2,-16(fp)
   8e704:	1885883a 	add	r2,r3,r2
   8e708:	10bfffc4 	addi	r2,r2,-1
   8e70c:	10800003 	ldbu	r2,0(r2)
   8e710:	10803fcc 	andi	r2,r2,255
   8e714:	1080201c 	xori	r2,r2,128
   8e718:	10bfe004 	addi	r2,r2,-128
   8e71c:	10800bd8 	cmpnei	r2,r2,47
   8e720:	1000031e 	bne	r2,zero,8e730 <alt_find_file+0x70>
    {
      len -= 1;
   8e724:	e0bffc17 	ldw	r2,-16(fp)
   8e728:	10bfffc4 	addi	r2,r2,-1
   8e72c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8e730:	e0bffc17 	ldw	r2,-16(fp)
   8e734:	1007883a 	mov	r3,r2
   8e738:	e0bffe17 	ldw	r2,-8(fp)
   8e73c:	1885883a 	add	r2,r3,r2
   8e740:	10800003 	ldbu	r2,0(r2)
   8e744:	10803fcc 	andi	r2,r2,255
   8e748:	1080201c 	xori	r2,r2,128
   8e74c:	10bfe004 	addi	r2,r2,-128
   8e750:	10800be0 	cmpeqi	r2,r2,47
   8e754:	10000a1e 	bne	r2,zero,8e780 <alt_find_file+0xc0>
   8e758:	e0bffc17 	ldw	r2,-16(fp)
   8e75c:	1007883a 	mov	r3,r2
   8e760:	e0bffe17 	ldw	r2,-8(fp)
   8e764:	1885883a 	add	r2,r3,r2
   8e768:	10800003 	ldbu	r2,0(r2)
   8e76c:	10803fcc 	andi	r2,r2,255
   8e770:	1080201c 	xori	r2,r2,128
   8e774:	10bfe004 	addi	r2,r2,-128
   8e778:	1004c03a 	cmpne	r2,r2,zero
   8e77c:	10000a1e 	bne	r2,zero,8e7a8 <alt_find_file+0xe8>
   8e780:	e0bffd17 	ldw	r2,-12(fp)
   8e784:	11000217 	ldw	r4,8(r2)
   8e788:	e1bffc17 	ldw	r6,-16(fp)
   8e78c:	e17ffe17 	ldw	r5,-8(fp)
   8e790:	008e9300 	call	8e930 <memcmp>
   8e794:	1004c03a 	cmpne	r2,r2,zero
   8e798:	1000031e 	bne	r2,zero,8e7a8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8e79c:	e0bffd17 	ldw	r2,-12(fp)
   8e7a0:	e0bfff15 	stw	r2,-4(fp)
   8e7a4:	00000806 	br	8e7c8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   8e7a8:	e0bffd17 	ldw	r2,-12(fp)
   8e7ac:	10800017 	ldw	r2,0(r2)
   8e7b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8e7b4:	00c00274 	movhi	r3,9
   8e7b8:	18c2a804 	addi	r3,r3,2720
   8e7bc:	e0bffd17 	ldw	r2,-12(fp)
   8e7c0:	10ffc91e 	bne	r2,r3,8e6e8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8e7c4:	e03fff15 	stw	zero,-4(fp)
   8e7c8:	e0bfff17 	ldw	r2,-4(fp)
}
   8e7cc:	e037883a 	mov	sp,fp
   8e7d0:	dfc00117 	ldw	ra,4(sp)
   8e7d4:	df000017 	ldw	fp,0(sp)
   8e7d8:	dec00204 	addi	sp,sp,8
   8e7dc:	f800283a 	ret

0008e7e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8e7e0:	defff704 	addi	sp,sp,-36
   8e7e4:	dfc00815 	stw	ra,32(sp)
   8e7e8:	df000715 	stw	fp,28(sp)
   8e7ec:	dc000615 	stw	r16,24(sp)
   8e7f0:	df000604 	addi	fp,sp,24
   8e7f4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8e7f8:	00bffa04 	movi	r2,-24
   8e7fc:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   8e800:	00800274 	movhi	r2,9
   8e804:	10899504 	addi	r2,r2,9812
   8e808:	10800017 	ldw	r2,0(r2)
   8e80c:	e0bffa15 	stw	r2,-24(fp)
   8e810:	e03ffb0d 	sth	zero,-20(fp)
   8e814:	e17ffb0b 	ldhu	r5,-20(fp)
   8e818:	e1bffe04 	addi	r6,fp,-8
   8e81c:	e13ffa17 	ldw	r4,-24(fp)
   8e820:	00897140 	call	89714 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8e824:	e03ffd15 	stw	zero,-12(fp)
   8e828:	00002006 	br	8e8ac <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
   8e82c:	e13ffd17 	ldw	r4,-12(fp)
   8e830:	04000274 	movhi	r16,9
   8e834:	843e1d04 	addi	r16,r16,-1932
   8e838:	01400304 	movi	r5,12
   8e83c:	0082d2c0 	call	82d2c <__mulsi3>
   8e840:	1405883a 	add	r2,r2,r16
   8e844:	10800017 	ldw	r2,0(r2)
   8e848:	1004c03a 	cmpne	r2,r2,zero
   8e84c:	1000141e 	bne	r2,zero,8e8a0 <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
   8e850:	e13ffd17 	ldw	r4,-12(fp)
   8e854:	04000274 	movhi	r16,9
   8e858:	843e1d04 	addi	r16,r16,-1932
   8e85c:	01400304 	movi	r5,12
   8e860:	0082d2c0 	call	82d2c <__mulsi3>
   8e864:	1407883a 	add	r3,r2,r16
   8e868:	e0bfff17 	ldw	r2,-4(fp)
   8e86c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   8e870:	00800274 	movhi	r2,9
   8e874:	1082ac04 	addi	r2,r2,2736
   8e878:	10c00017 	ldw	r3,0(r2)
   8e87c:	e0bffd17 	ldw	r2,-12(fp)
   8e880:	1880040e 	bge	r3,r2,8e894 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
   8e884:	00c00274 	movhi	r3,9
   8e888:	18c2ac04 	addi	r3,r3,2736
   8e88c:	e0bffd17 	ldw	r2,-12(fp)
   8e890:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8e894:	e0bffd17 	ldw	r2,-12(fp)
   8e898:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   8e89c:	00000606 	br	8e8b8 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8e8a0:	e0bffd17 	ldw	r2,-12(fp)
   8e8a4:	10800044 	addi	r2,r2,1
   8e8a8:	e0bffd15 	stw	r2,-12(fp)
   8e8ac:	e0bffd17 	ldw	r2,-12(fp)
   8e8b0:	10800810 	cmplti	r2,r2,32
   8e8b4:	103fdd1e 	bne	r2,zero,8e82c <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   8e8b8:	00800274 	movhi	r2,9
   8e8bc:	10899504 	addi	r2,r2,9812
   8e8c0:	11000017 	ldw	r4,0(r2)
   8e8c4:	0089b0c0 	call	89b0c <OSSemPost>

  return rc;
   8e8c8:	e0bffc17 	ldw	r2,-16(fp)
}
   8e8cc:	e037883a 	mov	sp,fp
   8e8d0:	dfc00217 	ldw	ra,8(sp)
   8e8d4:	df000117 	ldw	fp,4(sp)
   8e8d8:	dc000017 	ldw	r16,0(sp)
   8e8dc:	dec00304 	addi	sp,sp,12
   8e8e0:	f800283a 	ret

0008e8e4 <atexit>:
   8e8e4:	200b883a 	mov	r5,r4
   8e8e8:	000d883a 	mov	r6,zero
   8e8ec:	0009883a 	mov	r4,zero
   8e8f0:	000f883a 	mov	r7,zero
   8e8f4:	008e9a41 	jmpi	8e9a4 <__register_exitproc>

0008e8f8 <exit>:
   8e8f8:	defffe04 	addi	sp,sp,-8
   8e8fc:	000b883a 	mov	r5,zero
   8e900:	dc000015 	stw	r16,0(sp)
   8e904:	dfc00115 	stw	ra,4(sp)
   8e908:	2021883a 	mov	r16,r4
   8e90c:	008eadc0 	call	8eadc <__call_exitprocs>
   8e910:	00800274 	movhi	r2,9
   8e914:	1082a504 	addi	r2,r2,2708
   8e918:	11000017 	ldw	r4,0(r2)
   8e91c:	20800f17 	ldw	r2,60(r4)
   8e920:	10000126 	beq	r2,zero,8e928 <exit+0x30>
   8e924:	103ee83a 	callr	r2
   8e928:	8009883a 	mov	r4,r16
   8e92c:	008ee180 	call	8ee18 <_exit>

0008e930 <memcmp>:
   8e930:	00c000c4 	movi	r3,3
   8e934:	1980032e 	bgeu	r3,r6,8e944 <memcmp+0x14>
   8e938:	2144b03a 	or	r2,r4,r5
   8e93c:	10c4703a 	and	r2,r2,r3
   8e940:	10000f26 	beq	r2,zero,8e980 <memcmp+0x50>
   8e944:	31ffffc4 	addi	r7,r6,-1
   8e948:	3000061e 	bne	r6,zero,8e964 <memcmp+0x34>
   8e94c:	00000a06 	br	8e978 <memcmp+0x48>
   8e950:	39ffffc4 	addi	r7,r7,-1
   8e954:	00bfffc4 	movi	r2,-1
   8e958:	21000044 	addi	r4,r4,1
   8e95c:	29400044 	addi	r5,r5,1
   8e960:	38800526 	beq	r7,r2,8e978 <memcmp+0x48>
   8e964:	20c00003 	ldbu	r3,0(r4)
   8e968:	28800003 	ldbu	r2,0(r5)
   8e96c:	18bff826 	beq	r3,r2,8e950 <memcmp+0x20>
   8e970:	1885c83a 	sub	r2,r3,r2
   8e974:	f800283a 	ret
   8e978:	0005883a 	mov	r2,zero
   8e97c:	f800283a 	ret
   8e980:	180f883a 	mov	r7,r3
   8e984:	20c00017 	ldw	r3,0(r4)
   8e988:	28800017 	ldw	r2,0(r5)
   8e98c:	18bfed1e 	bne	r3,r2,8e944 <memcmp+0x14>
   8e990:	31bfff04 	addi	r6,r6,-4
   8e994:	21000104 	addi	r4,r4,4
   8e998:	29400104 	addi	r5,r5,4
   8e99c:	39bff936 	bltu	r7,r6,8e984 <memcmp+0x54>
   8e9a0:	003fe806 	br	8e944 <memcmp+0x14>

0008e9a4 <__register_exitproc>:
   8e9a4:	defffa04 	addi	sp,sp,-24
   8e9a8:	00800274 	movhi	r2,9
   8e9ac:	1082a504 	addi	r2,r2,2708
   8e9b0:	dc000015 	stw	r16,0(sp)
   8e9b4:	14000017 	ldw	r16,0(r2)
   8e9b8:	dd000415 	stw	r20,16(sp)
   8e9bc:	2829883a 	mov	r20,r5
   8e9c0:	81405217 	ldw	r5,328(r16)
   8e9c4:	dcc00315 	stw	r19,12(sp)
   8e9c8:	dc800215 	stw	r18,8(sp)
   8e9cc:	dc400115 	stw	r17,4(sp)
   8e9d0:	dfc00515 	stw	ra,20(sp)
   8e9d4:	2023883a 	mov	r17,r4
   8e9d8:	3027883a 	mov	r19,r6
   8e9dc:	3825883a 	mov	r18,r7
   8e9e0:	28002526 	beq	r5,zero,8ea78 <__register_exitproc+0xd4>
   8e9e4:	29000117 	ldw	r4,4(r5)
   8e9e8:	008007c4 	movi	r2,31
   8e9ec:	11002716 	blt	r2,r4,8ea8c <__register_exitproc+0xe8>
   8e9f0:	8800101e 	bne	r17,zero,8ea34 <__register_exitproc+0x90>
   8e9f4:	2105883a 	add	r2,r4,r4
   8e9f8:	1085883a 	add	r2,r2,r2
   8e9fc:	20c00044 	addi	r3,r4,1
   8ea00:	1145883a 	add	r2,r2,r5
   8ea04:	0009883a 	mov	r4,zero
   8ea08:	15000215 	stw	r20,8(r2)
   8ea0c:	28c00115 	stw	r3,4(r5)
   8ea10:	2005883a 	mov	r2,r4
   8ea14:	dfc00517 	ldw	ra,20(sp)
   8ea18:	dd000417 	ldw	r20,16(sp)
   8ea1c:	dcc00317 	ldw	r19,12(sp)
   8ea20:	dc800217 	ldw	r18,8(sp)
   8ea24:	dc400117 	ldw	r17,4(sp)
   8ea28:	dc000017 	ldw	r16,0(sp)
   8ea2c:	dec00604 	addi	sp,sp,24
   8ea30:	f800283a 	ret
   8ea34:	29802204 	addi	r6,r5,136
   8ea38:	00800044 	movi	r2,1
   8ea3c:	110e983a 	sll	r7,r2,r4
   8ea40:	30c04017 	ldw	r3,256(r6)
   8ea44:	2105883a 	add	r2,r4,r4
   8ea48:	1085883a 	add	r2,r2,r2
   8ea4c:	1185883a 	add	r2,r2,r6
   8ea50:	19c6b03a 	or	r3,r3,r7
   8ea54:	14802015 	stw	r18,128(r2)
   8ea58:	14c00015 	stw	r19,0(r2)
   8ea5c:	00800084 	movi	r2,2
   8ea60:	30c04015 	stw	r3,256(r6)
   8ea64:	88bfe31e 	bne	r17,r2,8e9f4 <__register_exitproc+0x50>
   8ea68:	30804117 	ldw	r2,260(r6)
   8ea6c:	11c4b03a 	or	r2,r2,r7
   8ea70:	30804115 	stw	r2,260(r6)
   8ea74:	003fdf06 	br	8e9f4 <__register_exitproc+0x50>
   8ea78:	008002b4 	movhi	r2,10
   8ea7c:	10a68704 	addi	r2,r2,-26084
   8ea80:	100b883a 	mov	r5,r2
   8ea84:	80805215 	stw	r2,328(r16)
   8ea88:	003fd606 	br	8e9e4 <__register_exitproc+0x40>
   8ea8c:	00800034 	movhi	r2,0
   8ea90:	10800004 	addi	r2,r2,0
   8ea94:	1000021e 	bne	r2,zero,8eaa0 <__register_exitproc+0xfc>
   8ea98:	013fffc4 	movi	r4,-1
   8ea9c:	003fdc06 	br	8ea10 <__register_exitproc+0x6c>
   8eaa0:	01006404 	movi	r4,400
   8eaa4:	103ee83a 	callr	r2
   8eaa8:	1007883a 	mov	r3,r2
   8eaac:	103ffa26 	beq	r2,zero,8ea98 <__register_exitproc+0xf4>
   8eab0:	80805217 	ldw	r2,328(r16)
   8eab4:	180b883a 	mov	r5,r3
   8eab8:	18000115 	stw	zero,4(r3)
   8eabc:	18800015 	stw	r2,0(r3)
   8eac0:	80c05215 	stw	r3,328(r16)
   8eac4:	18006215 	stw	zero,392(r3)
   8eac8:	18006315 	stw	zero,396(r3)
   8eacc:	0009883a 	mov	r4,zero
   8ead0:	883fc826 	beq	r17,zero,8e9f4 <__register_exitproc+0x50>
   8ead4:	003fd706 	br	8ea34 <__register_exitproc+0x90>

0008ead8 <register_fini>:
   8ead8:	f800283a 	ret

0008eadc <__call_exitprocs>:
   8eadc:	00800274 	movhi	r2,9
   8eae0:	1082a504 	addi	r2,r2,2708
   8eae4:	10800017 	ldw	r2,0(r2)
   8eae8:	defff304 	addi	sp,sp,-52
   8eaec:	df000b15 	stw	fp,44(sp)
   8eaf0:	d8800115 	stw	r2,4(sp)
   8eaf4:	00800034 	movhi	r2,0
   8eaf8:	10800004 	addi	r2,r2,0
   8eafc:	1005003a 	cmpeq	r2,r2,zero
   8eb00:	d8800215 	stw	r2,8(sp)
   8eb04:	d8800117 	ldw	r2,4(sp)
   8eb08:	dd400815 	stw	r21,32(sp)
   8eb0c:	dd000715 	stw	r20,28(sp)
   8eb10:	10805204 	addi	r2,r2,328
   8eb14:	dfc00c15 	stw	ra,48(sp)
   8eb18:	ddc00a15 	stw	r23,40(sp)
   8eb1c:	dd800915 	stw	r22,36(sp)
   8eb20:	dcc00615 	stw	r19,24(sp)
   8eb24:	dc800515 	stw	r18,20(sp)
   8eb28:	dc400415 	stw	r17,16(sp)
   8eb2c:	dc000315 	stw	r16,12(sp)
   8eb30:	282b883a 	mov	r21,r5
   8eb34:	2039883a 	mov	fp,r4
   8eb38:	d8800015 	stw	r2,0(sp)
   8eb3c:	2829003a 	cmpeq	r20,r5,zero
   8eb40:	d8800117 	ldw	r2,4(sp)
   8eb44:	14405217 	ldw	r17,328(r2)
   8eb48:	88001026 	beq	r17,zero,8eb8c <__call_exitprocs+0xb0>
   8eb4c:	ddc00017 	ldw	r23,0(sp)
   8eb50:	88800117 	ldw	r2,4(r17)
   8eb54:	8c802204 	addi	r18,r17,136
   8eb58:	143fffc4 	addi	r16,r2,-1
   8eb5c:	80000916 	blt	r16,zero,8eb84 <__call_exitprocs+0xa8>
   8eb60:	05bfffc4 	movi	r22,-1
   8eb64:	a000151e 	bne	r20,zero,8ebbc <__call_exitprocs+0xe0>
   8eb68:	8409883a 	add	r4,r16,r16
   8eb6c:	2105883a 	add	r2,r4,r4
   8eb70:	1485883a 	add	r2,r2,r18
   8eb74:	10c02017 	ldw	r3,128(r2)
   8eb78:	a8c01126 	beq	r21,r3,8ebc0 <__call_exitprocs+0xe4>
   8eb7c:	843fffc4 	addi	r16,r16,-1
   8eb80:	85bff81e 	bne	r16,r22,8eb64 <__call_exitprocs+0x88>
   8eb84:	d8800217 	ldw	r2,8(sp)
   8eb88:	10003126 	beq	r2,zero,8ec50 <__call_exitprocs+0x174>
   8eb8c:	dfc00c17 	ldw	ra,48(sp)
   8eb90:	df000b17 	ldw	fp,44(sp)
   8eb94:	ddc00a17 	ldw	r23,40(sp)
   8eb98:	dd800917 	ldw	r22,36(sp)
   8eb9c:	dd400817 	ldw	r21,32(sp)
   8eba0:	dd000717 	ldw	r20,28(sp)
   8eba4:	dcc00617 	ldw	r19,24(sp)
   8eba8:	dc800517 	ldw	r18,20(sp)
   8ebac:	dc400417 	ldw	r17,16(sp)
   8ebb0:	dc000317 	ldw	r16,12(sp)
   8ebb4:	dec00d04 	addi	sp,sp,52
   8ebb8:	f800283a 	ret
   8ebbc:	8409883a 	add	r4,r16,r16
   8ebc0:	88c00117 	ldw	r3,4(r17)
   8ebc4:	2105883a 	add	r2,r4,r4
   8ebc8:	1445883a 	add	r2,r2,r17
   8ebcc:	18ffffc4 	addi	r3,r3,-1
   8ebd0:	11800217 	ldw	r6,8(r2)
   8ebd4:	1c001526 	beq	r3,r16,8ec2c <__call_exitprocs+0x150>
   8ebd8:	10000215 	stw	zero,8(r2)
   8ebdc:	303fe726 	beq	r6,zero,8eb7c <__call_exitprocs+0xa0>
   8ebe0:	00c00044 	movi	r3,1
   8ebe4:	1c06983a 	sll	r3,r3,r16
   8ebe8:	90804017 	ldw	r2,256(r18)
   8ebec:	8cc00117 	ldw	r19,4(r17)
   8ebf0:	1884703a 	and	r2,r3,r2
   8ebf4:	10001426 	beq	r2,zero,8ec48 <__call_exitprocs+0x16c>
   8ebf8:	90804117 	ldw	r2,260(r18)
   8ebfc:	1884703a 	and	r2,r3,r2
   8ec00:	10000c1e 	bne	r2,zero,8ec34 <__call_exitprocs+0x158>
   8ec04:	2105883a 	add	r2,r4,r4
   8ec08:	1485883a 	add	r2,r2,r18
   8ec0c:	11400017 	ldw	r5,0(r2)
   8ec10:	e009883a 	mov	r4,fp
   8ec14:	303ee83a 	callr	r6
   8ec18:	88800117 	ldw	r2,4(r17)
   8ec1c:	98bfc81e 	bne	r19,r2,8eb40 <__call_exitprocs+0x64>
   8ec20:	b8800017 	ldw	r2,0(r23)
   8ec24:	147fd526 	beq	r2,r17,8eb7c <__call_exitprocs+0xa0>
   8ec28:	003fc506 	br	8eb40 <__call_exitprocs+0x64>
   8ec2c:	8c000115 	stw	r16,4(r17)
   8ec30:	003fea06 	br	8ebdc <__call_exitprocs+0x100>
   8ec34:	2105883a 	add	r2,r4,r4
   8ec38:	1485883a 	add	r2,r2,r18
   8ec3c:	11000017 	ldw	r4,0(r2)
   8ec40:	303ee83a 	callr	r6
   8ec44:	003ff406 	br	8ec18 <__call_exitprocs+0x13c>
   8ec48:	303ee83a 	callr	r6
   8ec4c:	003ff206 	br	8ec18 <__call_exitprocs+0x13c>
   8ec50:	88800117 	ldw	r2,4(r17)
   8ec54:	1000081e 	bne	r2,zero,8ec78 <__call_exitprocs+0x19c>
   8ec58:	89000017 	ldw	r4,0(r17)
   8ec5c:	20000726 	beq	r4,zero,8ec7c <__call_exitprocs+0x1a0>
   8ec60:	b9000015 	stw	r4,0(r23)
   8ec64:	8809883a 	mov	r4,r17
   8ec68:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   8ec6c:	bc400017 	ldw	r17,0(r23)
   8ec70:	883fb71e 	bne	r17,zero,8eb50 <__call_exitprocs+0x74>
   8ec74:	003fc506 	br	8eb8c <__call_exitprocs+0xb0>
   8ec78:	89000017 	ldw	r4,0(r17)
   8ec7c:	882f883a 	mov	r23,r17
   8ec80:	2023883a 	mov	r17,r4
   8ec84:	883fb21e 	bne	r17,zero,8eb50 <__call_exitprocs+0x74>
   8ec88:	003fc006 	br	8eb8c <__call_exitprocs+0xb0>

0008ec8c <udivmodsi4>:
   8ec8c:	29001b2e 	bgeu	r5,r4,8ecfc <udivmodsi4+0x70>
   8ec90:	28001a16 	blt	r5,zero,8ecfc <udivmodsi4+0x70>
   8ec94:	00800044 	movi	r2,1
   8ec98:	0007883a 	mov	r3,zero
   8ec9c:	01c007c4 	movi	r7,31
   8eca0:	00000306 	br	8ecb0 <udivmodsi4+0x24>
   8eca4:	19c01326 	beq	r3,r7,8ecf4 <udivmodsi4+0x68>
   8eca8:	18c00044 	addi	r3,r3,1
   8ecac:	28000416 	blt	r5,zero,8ecc0 <udivmodsi4+0x34>
   8ecb0:	294b883a 	add	r5,r5,r5
   8ecb4:	1085883a 	add	r2,r2,r2
   8ecb8:	293ffa36 	bltu	r5,r4,8eca4 <udivmodsi4+0x18>
   8ecbc:	10000d26 	beq	r2,zero,8ecf4 <udivmodsi4+0x68>
   8ecc0:	0007883a 	mov	r3,zero
   8ecc4:	21400236 	bltu	r4,r5,8ecd0 <udivmodsi4+0x44>
   8ecc8:	2149c83a 	sub	r4,r4,r5
   8eccc:	1886b03a 	or	r3,r3,r2
   8ecd0:	1004d07a 	srli	r2,r2,1
   8ecd4:	280ad07a 	srli	r5,r5,1
   8ecd8:	103ffa1e 	bne	r2,zero,8ecc4 <udivmodsi4+0x38>
   8ecdc:	30000226 	beq	r6,zero,8ece8 <udivmodsi4+0x5c>
   8ece0:	2005883a 	mov	r2,r4
   8ece4:	f800283a 	ret
   8ece8:	1809883a 	mov	r4,r3
   8ecec:	2005883a 	mov	r2,r4
   8ecf0:	f800283a 	ret
   8ecf4:	0007883a 	mov	r3,zero
   8ecf8:	003ff806 	br	8ecdc <udivmodsi4+0x50>
   8ecfc:	00800044 	movi	r2,1
   8ed00:	0007883a 	mov	r3,zero
   8ed04:	003fef06 	br	8ecc4 <udivmodsi4+0x38>

0008ed08 <__divsi3>:
   8ed08:	defffe04 	addi	sp,sp,-8
   8ed0c:	dc000015 	stw	r16,0(sp)
   8ed10:	dfc00115 	stw	ra,4(sp)
   8ed14:	0021883a 	mov	r16,zero
   8ed18:	20000c16 	blt	r4,zero,8ed4c <__divsi3+0x44>
   8ed1c:	000d883a 	mov	r6,zero
   8ed20:	28000e16 	blt	r5,zero,8ed5c <__divsi3+0x54>
   8ed24:	008ec8c0 	call	8ec8c <udivmodsi4>
   8ed28:	1007883a 	mov	r3,r2
   8ed2c:	8005003a 	cmpeq	r2,r16,zero
   8ed30:	1000011e 	bne	r2,zero,8ed38 <__divsi3+0x30>
   8ed34:	00c7c83a 	sub	r3,zero,r3
   8ed38:	1805883a 	mov	r2,r3
   8ed3c:	dfc00117 	ldw	ra,4(sp)
   8ed40:	dc000017 	ldw	r16,0(sp)
   8ed44:	dec00204 	addi	sp,sp,8
   8ed48:	f800283a 	ret
   8ed4c:	0109c83a 	sub	r4,zero,r4
   8ed50:	04000044 	movi	r16,1
   8ed54:	000d883a 	mov	r6,zero
   8ed58:	283ff20e 	bge	r5,zero,8ed24 <__divsi3+0x1c>
   8ed5c:	014bc83a 	sub	r5,zero,r5
   8ed60:	8021003a 	cmpeq	r16,r16,zero
   8ed64:	003fef06 	br	8ed24 <__divsi3+0x1c>

0008ed68 <__modsi3>:
   8ed68:	deffff04 	addi	sp,sp,-4
   8ed6c:	dfc00015 	stw	ra,0(sp)
   8ed70:	01800044 	movi	r6,1
   8ed74:	2807883a 	mov	r3,r5
   8ed78:	20000416 	blt	r4,zero,8ed8c <__modsi3+0x24>
   8ed7c:	28000c16 	blt	r5,zero,8edb0 <__modsi3+0x48>
   8ed80:	dfc00017 	ldw	ra,0(sp)
   8ed84:	dec00104 	addi	sp,sp,4
   8ed88:	008ec8c1 	jmpi	8ec8c <udivmodsi4>
   8ed8c:	0109c83a 	sub	r4,zero,r4
   8ed90:	28000b16 	blt	r5,zero,8edc0 <__modsi3+0x58>
   8ed94:	180b883a 	mov	r5,r3
   8ed98:	01800044 	movi	r6,1
   8ed9c:	008ec8c0 	call	8ec8c <udivmodsi4>
   8eda0:	0085c83a 	sub	r2,zero,r2
   8eda4:	dfc00017 	ldw	ra,0(sp)
   8eda8:	dec00104 	addi	sp,sp,4
   8edac:	f800283a 	ret
   8edb0:	014bc83a 	sub	r5,zero,r5
   8edb4:	dfc00017 	ldw	ra,0(sp)
   8edb8:	dec00104 	addi	sp,sp,4
   8edbc:	008ec8c1 	jmpi	8ec8c <udivmodsi4>
   8edc0:	0147c83a 	sub	r3,zero,r5
   8edc4:	003ff306 	br	8ed94 <__modsi3+0x2c>

0008edc8 <__udivsi3>:
   8edc8:	000d883a 	mov	r6,zero
   8edcc:	008ec8c1 	jmpi	8ec8c <udivmodsi4>

0008edd0 <__umodsi3>:
   8edd0:	01800044 	movi	r6,1
   8edd4:	008ec8c1 	jmpi	8ec8c <udivmodsi4>

0008edd8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   8edd8:	defffd04 	addi	sp,sp,-12
   8eddc:	df000215 	stw	fp,8(sp)
   8ede0:	df000204 	addi	fp,sp,8
   8ede4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   8ede8:	e0bfff17 	ldw	r2,-4(fp)
   8edec:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8edf0:	e0bffe17 	ldw	r2,-8(fp)
   8edf4:	1005003a 	cmpeq	r2,r2,zero
   8edf8:	1000021e 	bne	r2,zero,8ee04 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   8edfc:	002af070 	cmpltui	zero,zero,43969
   8ee00:	00000106 	br	8ee08 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   8ee04:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   8ee08:	e037883a 	mov	sp,fp
   8ee0c:	df000017 	ldw	fp,0(sp)
   8ee10:	dec00104 	addi	sp,sp,4
   8ee14:	f800283a 	ret

0008ee18 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8ee18:	defffd04 	addi	sp,sp,-12
   8ee1c:	dfc00215 	stw	ra,8(sp)
   8ee20:	df000115 	stw	fp,4(sp)
   8ee24:	df000104 	addi	fp,sp,4
   8ee28:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   8ee2c:	00800274 	movhi	r2,9
   8ee30:	10899d44 	addi	r2,r2,9845
   8ee34:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   8ee38:	e13fff17 	ldw	r4,-4(fp)
   8ee3c:	008edd80 	call	8edd8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8ee40:	003fff06 	br	8ee40 <_exit+0x28>
   8ee44:	0008ead8 	cmpnei	zero,zero,9131
