
SynthesizerSoftware.elf:     file format elf32-littlenios2
SynthesizerSoftware.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0008019c

Program Header:
    LOAD off    0x00001020 vaddr 0x00104020 paddr 0x00080000 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r-x
    LOAD off    0x0000219c vaddr 0x0008019c paddr 0x0008019c align 2**12
         filesz 0x0000f1d4 memsz 0x0000f1d4 flags r-x
    LOAD off    0x00011370 vaddr 0x0008f370 paddr 0x00090a60 align 2**12
         filesz 0x000016f0 memsz 0x000016f0 flags rw-
    LOAD off    0x00013150 vaddr 0x00092150 paddr 0x00092150 align 2**12
         filesz 0x00000000 memsz 0x00007594 flags rw-
    LOAD off    0x00013000 vaddr 0x00104000 paddr 0x00104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00104000  00104000  00013000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00104020  00080000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000eefc  0008019c  0008019c  0000219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002d8  0008f098  0008f098  00011098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016f0  0008f370  00090a60  00011370  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007594  00092150  00092150  00013150  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00013020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a78  00000000  00000000  00013048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000198f  00000000  00000000  00013ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001d12e  00000000  00000000  0001544f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000063a7  00000000  00000000  0003257d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00012c3e  00000000  00000000  00038924  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b1c  00000000  00000000  0004b564  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001830  00000000  00000000  0004d080  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004f33  00000000  00000000  0004e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000537e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000004f8  00000000  00000000  000537f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0005787f  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00057885  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00057891  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00057892  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00057893  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00057897  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0005789b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0005789f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000578aa  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000578b5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000578c0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004c  00000000  00000000  000578cd  2**0
                  CONTENTS, READONLY
 29 .jdi          00005058  00000000  00000000  00057919  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00075889  00000000  00000000  0005c971  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00104000 l    d  .entry	00000000 .entry
00104020 l    d  .exceptions	00000000 .exceptions
0008019c l    d  .text	00000000 .text
0008f098 l    d  .rodata	00000000 .rodata
0008f370 l    d  .rwdata	00000000 .rwdata
00092150 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 MIDISynthesizer.c
000921d0 l     O .bss	00000060 VOICE_TABLE
00000000 l    df *ABS*	00000000 testing.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
0008f0a0 l     O .rodata	00000010 bp
0008f0b0 l     O .rodata	00000010 dp_l
0008f0c0 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0008f0d0 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 dp-bit.c
0008266c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00083604 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0008f370 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 alt_load.c
00083ed0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
000909c0 l     O .rwdata	00000004 lockid
0009215c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
000909c4 l     O .rwdata	00000004 lockid
00092164 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000859dc l     F .text	00000044 OS_InitMisc
00085a20 l     F .text	0000006c OS_InitRdyList
00085b84 l     F .text	000000e0 OS_InitTCBList
00085900 l     F .text	000000dc OS_InitEventList
00085a8c l     F .text	0000007c OS_InitTaskIdle
00085b08 l     F .text	0000007c OS_InitTaskStat
00085df8 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00087d18 l     F .text	00000110 OS_FlagTaskRdy
00087a70 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008f770 l     O .rwdata	0000106c jtag_uart_0
000907dc l     O .rwdata	00000030 audio_and_video_config_0
0008c66c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008c924 l     F .text	000002c4 altera_avalon_jtag_uart_irq
0008cbe8 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008d400 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0008d754 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0008d7d0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008d8b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008dcc0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0008de10 l     F .text	000000f8 alt_file_locked
0008e094 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0008ee74 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0008f028 l     F .text	00000040 alt_sim_halt
00090a12 g     O .rwdata	00000002 OSTaskNameSize
00083f3c g     F .text	000000c8 alt_main
00099454 g     O .bss	00000100 alt_irq
000821dc g     F .text	00000018 fabs
0008860c g     F .text	000000d4 OS_MemInit
00090a60 g       *ABS*	00000000 __flash_rwdata_start
0008c56c g     F .text	00000064 OSTimeSet
0008318c g     F .text	00000088 __eqdf2
00084558 g     F .text	000006b4 OSEventPendMulti
0008e714 g     F .text	00000020 OSTaskCreateHook
00092230 g     O .bss	00002000 task1_stk
000909ea g     O .rwdata	00000002 OSMboxEn
00084c60 g     F .text	0000007c OSIntEnter
000909fa g     O .rwdata	00000002 OSQEn
00084214 g     F .text	000000d0 __malloc_unlock
0008e770 g     F .text	0000001c OSTaskStatHook
0009216c g     O .bss	00000001 OSLockNesting
00090a38 g     O .rwdata	00000002 OSDataSize
0009216d g     O .bss	00000001 OSRunning
0008e7a8 g     F .text	0000001c OSInitHookBegin
00090a30 g     O .rwdata	00000002 OSTmrSize
00092170 g     O .bss	00000004 OSIdleCtr
0008329c g     F .text	00000088 __gtdf2
0008e3e0 g       .text	00000000 OSStartTsk
00083e40 g     F .text	00000010 __errno
0008612c g     F .text	000002e0 OS_TCBInit
00104000 g     F .entry	0000000c __reset
00090a36 g     O .rwdata	00000002 OSTmrWheelTblSize
00080000 g       *ABS*	00000000 __flash_exceptions_start
000909d6 g     O .rwdata	00000002 OSEventSize
00092174 g     O .bss	00000001 OSPrioHighRdy
0008e734 g     F .text	00000020 OSTaskDelHook
000921cc g     O .bss	00000004 errno
0008e3c0 g       .text	00000000 OSStartHighRdy
0008ad24 g     F .text	00000200 OSTaskCreateExt
0008758c g     F .text	00000068 OSFlagPendGetFlagsRdy
00090a16 g     O .rwdata	00000002 OSTaskStatStkSize
00086598 g     F .text	00000334 OSFlagAccept
00088d48 g     F .text	000000c8 OSQFlush
000886e0 g     F .text	00000154 OSQAccept
00092154 g     O .bss	00000004 alt_argv
000989b4 g       *ABS*	00000000 _gp
0008ab50 g     F .text	000001d4 OSTaskCreate
0008a5dc g     F .text	00000574 OSTaskChangePrio
00092168 g     O .bss	00000004 alt_heapsem
0008640c g     F .text	0000018c OSDebugInit
0008af24 g     F .text	0000040c OSTaskDel
00090834 g     O .rwdata	00000180 alt_fd_list
00096230 g     O .bss	00000370 OSFlagTbl
000856dc g     F .text	000000b8 OS_EventTaskRemove
0008e81c g     F .text	00000094 alt_find_dev
0008eb94 g     F .text	000000a0 memcpy
00090a00 g     O .rwdata	00000002 OSRdyTblSize
00083434 g     F .text	000000f8 __floatsidf
0008dd98 g     F .text	00000078 alt_io_redirect
00083324 g     F .text	00000088 __ltdf2
0008f098 g       *ABS*	00000000 __DTOR_END__
000842e4 g     F .text	00000130 OSEventNameGet
000909e4 g     O .rwdata	00000002 OSFlagMax
00084cdc g     F .text	00000100 OSIntExit
00090a1e g     O .rwdata	00000002 OSTCBSize
00080480 g     F .text	000000f4 turnOffVoice
00092175 g     O .bss	00000001 OSPrioCur
0008ce64 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00083740 g     F .text	00000008 __udivsi3
00090a04 g     O .rwdata	00000002 OSStkWidth
000909f8 g     O .rwdata	00000002 OSPtrSize
000909d8 g     O .rwdata	00000002 OSEventTblSize
0008e334 g       .text	00000000 OSCtxSw
00092178 g     O .bss	00000004 OSTCBList
000921bc g     O .bss	00000004 alt_fd_list_lock
000965a0 g     O .bss	00000c30 OSMemTbl
0009217c g     O .bss	00000001 OSTickStepState
000801d8 g     F .text	0000019c sendNoteOn2Voice
000909fc g     O .rwdata	00000002 OSQMax
000971d0 g     O .bss	00000800 OSTaskStatStk
000881f4 g     F .text	0000010c OSMemNameGet
000909dc g     O .rwdata	00000002 OSFlagEn
00090a22 g     O .rwdata	00000002 OSTimeTickHookEn
000892ac g     F .text	00000180 OSQPost
00087e28 g     F .text	000000ac OS_FlagUnlink
00090a4c g     O .rwdata	00000004 alt_max_fd
00085cb8 g     F .text	0000006c OS_MemCopy
00085d24 g     F .text	000000d4 OS_Sched
00083c40 g     F .text	00000138 __unpack_d
000880f0 g     F .text	00000104 OSMemGet
0008b658 g     F .text	000001c4 OSTaskNameSet
00092180 g     O .bss	00000004 OSCtxSwCtr
0008e78c g     F .text	0000001c OSTimeTickHook
000909e6 g     O .rwdata	00000002 OSFlagNameSize
00085794 g     F .text	00000104 OS_EventTaskRemoveMulti
00082afc g     F .text	00000074 __adddf3
00085588 g     F .text	00000154 OS_EventTaskWaitMulti
000909fe g     O .rwdata	00000002 OSQSize
00089e88 g     F .text	0000027c OSSemPend
000909b4 g     O .rwdata	00000004 __fdlib_version
000909bc g     O .rwdata	00000004 _global_impure_ptr
000909e8 g     O .rwdata	00000002 OSLowestPrio
000996e4 g       *ABS*	00000000 __bss_end
0008dbc8 g     F .text	000000f8 alt_iic_isr_register
0008e7fc g     F .text	00000020 OSTCBInitHook
00090a2e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0008e204 g     F .text	00000110 alt_tick
000909d0 g     O .rwdata	00000002 OSEventEn
00090a2a g     O .rwdata	00000002 OSTmrCfgNameSize
0008db80 g     F .text	00000048 alt_ic_irq_enabled
00087c34 g     F .text	000000e4 OS_FlagInit
0008e16c g     F .text	00000098 alt_alarm_stop
00090a0c g     O .rwdata	00000002 OSTaskIdleStkSize
000921c0 g     O .bss	00000004 alt_irq_active
00089a14 g     F .text	000000c0 OSSemAccept
00088420 g     F .text	000000f0 OSMemPut
00087ed4 g     F .text	0000021c OSMemCreate
00092184 g     O .bss	00000004 OSIdleCtrMax
001040ec g     F .exceptions	000000d0 alt_irq_handler
0009080c g     O .rwdata	00000028 alt_dev_null
00090a20 g     O .rwdata	00000002 OSTicksPerSec
00082258 g     F .text	00000210 rint
0008e334 g       .text	00000000 OSIntCtxSw
0008d7b4 g     F .text	0000001c alt_dcache_flush_all
0008352c g     F .text	000000d8 __fixdfsi
00092188 g     O .bss	00000004 OSTCBFreeList
00090a60 g       *ABS*	00000000 __ram_rwdata_end
0008a104 g     F .text	0000017c OSSemPendAbort
00090a44 g     O .rwdata	00000008 alt_dev_list
00090a24 g     O .rwdata	00000002 OSVersionNbr
0008f370 g       *ABS*	00000000 __ram_rodata_end
00080374 g     F .text	0000010c turnOnVoice
000833ac g     F .text	00000088 __ledf2
000909cc g     O .rwdata	00000004 OSEndiannessTest
00083748 g     F .text	00000008 __umodsi3
000909de g     O .rwdata	00000002 OSFlagGrpSize
000996e4 g       *ABS*	00000000 end
0008c7ec g     F .text	00000138 altera_avalon_jtag_uart_init
00085f9c g     F .text	000000c8 OS_TaskStat
0008f094 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
0008d470 g     F .text	00000090 alt_avalon_timer_sc_init
000838ac g     F .text	00000080 __clzsi2
0008d124 g     F .text	000002dc altera_avalon_jtag_uart_write
00085c64 g     F .text	00000054 OS_MemClr
0008e404 g     F .text	00000310 OSTaskStkInit
000852e4 g     F .text	00000194 OS_EventTaskRdy
000806c0 g     F .text	000000b0 PollForNotesTask
0008ee78 g     F .text	000001b0 __call_exitprocs
0009218c g     O .bss	00000001 OSCPUUsage
0008019c g     F .text	0000003c _start
000921c4 g     O .bss	00000004 _alt_tick_rate
00088e10 g     F .text	00000320 OSQPend
0008c01c g     F .text	0000014c OSTimeDly
000921c8 g     O .bss	00000004 _alt_nticks
0008c604 g     F .text	00000068 alt_sys_init
0008ed40 g     F .text	00000134 __register_exitproc
0009218d g     O .bss	00000001 OSTaskCtr
0008c168 g     F .text	00000190 OSTimeDlyHMSM
00080c14 g     F .text	00001300 __ieee754_pow
0008ccfc g     F .text	00000074 altera_avalon_jtag_uart_close
0008078c g     F .text	00000488 pow
00083750 g     F .text	00000038 __mulsi3
0008f370 g       *ABS*	00000000 __ram_rwdata_start
0008f098 g       *ABS*	00000000 __ram_rodata_start
000909d2 g     O .rwdata	00000002 OSEventMax
0008a280 g     F .text	00000128 OSSemPost
00084e68 g     F .text	000000e4 OSSchedUnlock
0008c6a4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008e9d0 g     F .text	00000104 alt_get_fd
00092190 g     O .bss	00000004 OSMemFreeList
00084fbc g     F .text	000000ac OSStatInit
0008799c g     F .text	000000d4 OSFlagQuery
00083d78 g     F .text	000000c8 __fpcmp_parts_d
00090a08 g     O .rwdata	00000002 OSTaskCreateExtEn
0008eb20 g     F .text	00000074 memcmp
000852c8 g     F .text	0000001c OS_Dummy
0008c754 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000996e4 g       *ABS*	00000000 __alt_stack_base
0008c79c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000979d0 g     O .bss	000001e0 OSQTbl
00082f34 g     F .text	00000258 __divdf3
00092194 g     O .bss	00000004 OSTCBHighRdy
00082b70 g     F .text	000003c4 __muldf3
00092198 g     O .bss	00000004 OSQFreeList
0008e8b0 g     F .text	00000120 alt_find_file
0008d7fc g     F .text	000000b4 alt_dev_llist_insert
0008410c g     F .text	00000108 __malloc_lock
00084414 g     F .text	00000144 OSEventNameSet
0009219c g     O .bss	00000001 OSRdyGrp
00092150 g       *ABS*	00000000 __bss_start
0008ec34 g     F .text	00000098 memset
00080770 g     F .text	0000001c main
00092158 g     O .bss	00000004 alt_envp
0008c6fc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0008f20c g     O .rodata	00000100 OSUnMapTbl
00090a02 g     O .rwdata	00000002 OSSemEn
000875f4 g     F .text	000003a8 OSFlagPost
00082240 g     F .text	00000008 matherr
00085478 g     F .text	00000110 OS_EventTaskWait
00094230 g     O .bss	00002000 task2_stk
00086064 g     F .text	000000c8 OS_TaskStatStkChk
00099554 g     O .bss	00000190 _atexit0
0008b330 g     F .text	00000170 OSTaskDelReq
00090a50 g     O .rwdata	00000004 alt_errno
00084f4c g     F .text	00000070 OSStart
000840b0 g     F .text	0000005c __env_unlock
0008b81c g     F .text	00000218 OSTaskResume
00088510 g     F .text	000000fc OSMemQuery
00090a14 g     O .rwdata	00000002 OSTaskStatEn
000909ee g     O .rwdata	00000002 OSMemMax
0008942c g     F .text	00000188 OSQPostFront
00083680 g     F .text	00000060 __divsi3
0009219d g     O .bss	00000003 OSRdyTbl
000909c8 g     O .rwdata	00000002 OSDebugEn
0008f0e0 g     O .rodata	00000014 __thenan_df
0008f098 g       *ABS*	00000000 __CTOR_END__
000821f4 g     F .text	0000001c finite
000909e0 g     O .rwdata	00000002 OSFlagNodeSize
00090a28 g     O .rwdata	00000002 OSTmrCfgMax
00088834 g     F .text	00000214 OSQCreate
0008b4a0 g     F .text	000001b8 OSTaskNameGet
0008f098 g       *ABS*	00000000 __flash_rodata_start
000895b4 g     F .text	00000234 OSQPostOpt
00085068 g     F .text	00000240 OSTimeTick
00090a10 g     O .rwdata	00000002 OSTaskMax
0008f098 g       *ABS*	00000000 __DTOR_LIST__
00089ad4 g     F .text	00000114 OSSemCreate
00090a34 g     O .rwdata	00000002 OSTmrWheelSize
00082648 g     F .text	00000024 copysign
00083214 g     F .text	00000088 __nedf2
00090a0a g     O .rwdata	00000002 OSTaskDelEn
00080000 g       *ABS*	00000000 __alt_mem_sram_0
0008a3a8 g     F .text	00000130 OSSemQuery
00088a48 g     F .text	00000300 OSQDel
00089130 g     F .text	0000017c OSQPendAbort
0008c5d0 g     F .text	00000034 alt_irq_init
0008e0f4 g     F .text	00000078 alt_release_fd
0008f0f4 g     O .rodata	00000100 __clz_tab
0008ead4 g     F .text	00000014 atexit
00080574 g     F .text	000000a4 midiNote2midiFreq
00084ddc g     F .text	0000008c OSSchedLock
000868cc g     F .text	0000013c OSFlagCreate
000909b8 g     O .rwdata	00000004 _impure_ptr
00092150 g     O .bss	00000004 alt_argc
00082468 g     F .text	000001e0 scalbn
0008d974 g     F .text	00000064 _do_dtors
000909da g     O .rwdata	00000002 OSEventMultiEn
00086a08 g     F .text	000002a8 OSFlagDel
000921a0 g     O .bss	00000004 OSEventFreeList
00104020 g       .exceptions	00000000 alt_irq_entry
00086f48 g     F .text	00000644 OSFlagPend
00090a26 g     O .rwdata	00000002 OSTmrEn
00090a3c g     O .rwdata	00000008 alt_fs_list
00085e68 g     F .text	00000080 OS_StrCopy
000909f0 g     O .rwdata	00000002 OSMemNameSize
00082248 g     F .text	00000010 nan
0008e7c4 g     F .text	0000001c OSInitHookEnd
00104020 g       *ABS*	00000000 __ram_exceptions_start
00090a1c g     O .rwdata	00000002 OSTCBPrioTblMax
00081f14 g     F .text	000002c8 __ieee754_sqrt
00090a18 g     O .rwdata	00000002 OSTaskStatStkChkEn
0008d9f4 g     F .text	00000050 alt_ic_isr_register
000909ec g     O .rwdata	00000002 OSMemEn
000909f6 g     O .rwdata	00000002 OSMutexEn
00090a60 g       *ABS*	00000000 _edata
000996e4 g       *ABS*	00000000 _end
000921a4 g     O .bss	00000001 OSIntNesting
001041bc g       *ABS*	00000000 __ram_exceptions_end
0008cd70 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008c2f8 g     F .text	00000210 OSTimeDlyResume
00086df4 g     F .text	00000154 OSFlagNameSet
0008ba34 g     F .text	000001fc OSTaskStkChk
0008dae0 g     F .text	000000a0 alt_ic_irq_disable
000909f2 g     O .rwdata	00000002 OSMemSize
0008e314 g     F .text	00000020 altera_nios2_qsys_irq_init
000921a8 g     O .bss	00000004 OSTCBCur
0008eae8 g     F .text	00000038 exit
000909f4 g     O .rwdata	00000002 OSMemTblSize
000836e0 g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00104020 g     F .exceptions	00000000 alt_exception
00084c0c g     F .text	00000054 OSInit
0008be5c g     F .text	00000144 OSTaskQuery
00089968 g     F .text	000000ac OS_QInit
00085ee8 g     F .text	00000058 OS_StrLen
00088300 g     F .text	00000120 OSMemNameSet
00090a0e g     O .rwdata	00000002 OSTaskProfileEn
000921ac g     O .bss	00000004 OSTime
00097bb0 g     O .bss	00000800 OSTaskIdleStk
0008f068 g     F .text	0000002c _exit
00082210 g     F .text	00000030 __isnand
0008d500 g     F .text	00000154 alt_alarm_start
00086cb0 g     F .text	00000144 OSFlagNameGet
0008c508 g     F .text	00000064 OSTimeGet
00083788 g     F .text	00000124 __muldi3
0008eccc g     F .text	00000074 strlen
0008e754 g     F .text	0000001c OSTaskSwHook
0008df08 g     F .text	0000018c open
000983b0 g     O .bss	00000b40 OSEventTbl
00098ef0 g     O .bss	00000510 OSTCBTbl
0008a4d8 g     F .text	00000104 OSSemSet
0008d9d8 g     F .text	0000001c alt_icache_flush_all
00090a54 g     O .rwdata	00000004 alt_priority_mask
00080618 g     F .text	0000008c midiFreq2sampleFreq
00089be8 g     F .text	000002a0 OSSemDel
000921b0 g     O .bss	00000004 OSFlagFreeList
000806a4 g     F .text	0000001c task3
0008da44 g     F .text	0000009c alt_ic_irq_enable
000909d4 g     O .rwdata	00000002 OSEventNameSize
000921b4 g     O .bss	00000001 OSStatRdy
00099400 g     O .bss	00000054 OSTCBPrioTbl
00084004 g     F .text	000000ac __env_lock
00090a1a g     O .rwdata	00000002 OSTaskSwHookEn
00082a7c g     F .text	00000080 __subdf3
00090a58 g     O .rwdata	00000008 alt_alarm_list
000909e2 g     O .rwdata	00000002 OSFlagWidth
0008d910 g     F .text	00000064 _do_ctors
0008d654 g     F .text	00000100 close
00092160 g     O .bss	00000004 alt_envsem
000921b8 g     O .bss	00000004 OSIdleCtrRun
000852a8 g     F .text	00000020 OSVersion
00090a2c g     O .rwdata	00000002 OSTmrCfgWheelSize
00083e50 g     F .text	00000080 alt_load
0008bfa0 g     F .text	0000007c OS_TaskStkClr
0008392c g     F .text	00000314 __pack_d
00090a06 g     O .rwdata	00000002 OSTaskCreateEn
00085898 g     F .text	00000068 OS_EventWaitListInit
0008e7e0 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
0008bc30 g     F .text	0000022c OSTaskSuspend
00085f40 g     F .text	0000005c OS_TaskIdle
00090a32 g     O .rwdata	00000002 OSTmrTblSize
000897e8 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

00104000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  104000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
  104004:	08406714 	ori	at,at,412
    jmp r1
  104008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  10402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  10403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  10404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  10405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  10406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  10407c:	10000326 	beq	r2,zero,10408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  104080:	20000226 	beq	r4,zero,10408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  104084:	01040ec0 	call	1040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  104088:	00000306 	br	104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  10408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  10409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  1040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  1040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1040e8:	ef80083a 	eret

001040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1040ec:	defff904 	addi	sp,sp,-28
  1040f0:	dfc00615 	stw	ra,24(sp)
  1040f4:	df000515 	stw	fp,20(sp)
  1040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  1040fc:	0084c600 	call	84c60 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  104100:	0005313a 	rdctl	r2,ipending
  104104:	e0bffc15 	stw	r2,-16(fp)

  return active;
  104108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  10410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  104110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  104114:	00800044 	movi	r2,1
  104118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  10411c:	e0ffff17 	ldw	r3,-4(fp)
  104120:	e0bffe17 	ldw	r2,-8(fp)
  104124:	1884703a 	and	r2,r3,r2
  104128:	1005003a 	cmpeq	r2,r2,zero
  10412c:	1000161e 	bne	r2,zero,104188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  104130:	e0bffd17 	ldw	r2,-12(fp)
  104134:	00c002b4 	movhi	r3,10
  104138:	18e51504 	addi	r3,r3,-27564
  10413c:	100490fa 	slli	r2,r2,3
  104140:	10c5883a 	add	r2,r2,r3
  104144:	11400017 	ldw	r5,0(r2)
  104148:	e0bffd17 	ldw	r2,-12(fp)
  10414c:	00c002b4 	movhi	r3,10
  104150:	18e51504 	addi	r3,r3,-27564
  104154:	100490fa 	slli	r2,r2,3
  104158:	10c5883a 	add	r2,r2,r3
  10415c:	10800104 	addi	r2,r2,4
  104160:	11000017 	ldw	r4,0(r2)
  104164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  104168:	0005313a 	rdctl	r2,ipending
  10416c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  104170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  104174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  104178:	e0bfff17 	ldw	r2,-4(fp)
  10417c:	1004c03a 	cmpne	r2,r2,zero
  104180:	103fe31e 	bne	r2,zero,104110 <alt_irq_handler+0x24>
  104184:	00000706 	br	1041a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  104188:	e0bffe17 	ldw	r2,-8(fp)
  10418c:	1085883a 	add	r2,r2,r2
  104190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  104194:	e0bffd17 	ldw	r2,-12(fp)
  104198:	10800044 	addi	r2,r2,1
  10419c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  1041a0:	003fde06 	br	10411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  1041a4:	0084cdc0 	call	84cdc <OSIntExit>
}
  1041a8:	e037883a 	mov	sp,fp
  1041ac:	dfc00117 	ldw	ra,4(sp)
  1041b0:	df000017 	ldw	fp,0(sp)
  1041b4:	dec00204 	addi	sp,sp,8
  1041b8:	f800283a 	ret

Disassembly of section .text:

0008019c <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   8019c:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801a0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801a4:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801a8:	d6a26d14 	ori	gp,gp,35252
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801ac:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801b0:	10885414 	ori	r2,r2,8528

    movhi r3, %hi(__bss_end)
   801b4:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801b8:	18e5b914 	ori	r3,r3,38628

    beq r2, r3, 1f
   801bc:	10c00326 	beq	r2,r3,801cc <_start+0x30>

0:
    stw zero, (r2)
   801c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801c8:	10fffd36 	bltu	r2,r3,801c0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801cc:	0083e500 	call	83e50 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801d0:	0083f3c0 	call	83f3c <alt_main>

000801d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801d4:	003fff06 	br	801d4 <alt_after_alt_main>

000801d8 <sendNoteOn2Voice>:


//this sends the Note to selected voice

void sendNoteOn2Voice(long sampleFreq, int voiceNum)
{
   801d8:	defffa04 	addi	sp,sp,-24
   801dc:	df000515 	stw	fp,20(sp)
   801e0:	df000504 	addi	fp,sp,20
   801e4:	e13ffe15 	stw	r4,-8(fp)
   801e8:	e17fff15 	stw	r5,-4(fp)
	int *voicePhaseAddr = 0;
   801ec:	e03ffd15 	stw	zero,-12(fp)
	int *noteOffAddr = 0;
   801f0:	e03ffc15 	stw	zero,-16(fp)
	int *waveformShapesAddr = (int *)WAVEFORMGENERATOR_0_WAVE_SHAPES_BASE;
   801f4:	00800474 	movhi	r2,17
   801f8:	10a42184 	addi	r2,r2,-28538
   801fc:	e0bffb15 	stw	r2,-20(fp)

	//this gets the memory address of the selected memory components
	switch(voiceNum){
   80200:	e0bfff17 	ldw	r2,-4(fp)
   80204:	10800228 	cmpgeui	r2,r2,8
   80208:	1000481e 	bne	r2,zero,8032c <sendNoteOn2Voice+0x154>
   8020c:	e0bfff17 	ldw	r2,-4(fp)
   80210:	1085883a 	add	r2,r2,r2
   80214:	1087883a 	add	r3,r2,r2
   80218:	00800234 	movhi	r2,8
   8021c:	10808b04 	addi	r2,r2,556
   80220:	1885883a 	add	r2,r3,r2
   80224:	10800017 	ldw	r2,0(r2)
   80228:	1000683a 	jmp	r2
   8022c:	0008024c 	andi	zero,zero,8201
   80230:	00080268 	cmpgeui	zero,zero,8201
   80234:	00080284 	movi	zero,8202
   80238:	000802a0 	cmpeqi	zero,zero,8202
   8023c:	000802bc 	xorhi	zero,zero,8202
   80240:	000802d8 	cmpnei	zero,zero,8203
   80244:	000802f4 	movhi	zero,8203
   80248:	00080310 	cmplti	zero,zero,8204
	case 0:
		voicePhaseAddr = (int *) WAVEFORMGENERATOR_0_PHASE_INCREMENTS_VOICE0_BASE;
   8024c:	00800474 	movhi	r2,17
   80250:	10a41a04 	addi	r2,r2,-28568
   80254:	e0bffd15 	stw	r2,-12(fp)
		noteOffAddr = (int *) WAVEFORMGENERATOR_0_NOTE_END_VOICE0_BASE;
   80258:	00800474 	movhi	r2,17
   8025c:	10a42204 	addi	r2,r2,-28536
   80260:	e0bffc15 	stw	r2,-16(fp)
		break;
   80264:	00003306 	br	80334 <sendNoteOn2Voice+0x15c>
	case 1:
		voicePhaseAddr = (int *) WAVEFORMGENERATOR_0_PHASE_INCREMENTS_VOICE1_BASE;
   80268:	00800474 	movhi	r2,17
   8026c:	10a41604 	addi	r2,r2,-28584
   80270:	e0bffd15 	stw	r2,-12(fp)
		noteOffAddr = (int *) WAVEFORMGENERATOR_0_NOTE_END_VOICE1_BASE;
   80274:	00800474 	movhi	r2,17
   80278:	10a421c4 	addi	r2,r2,-28537
   8027c:	e0bffc15 	stw	r2,-16(fp)
		break;
   80280:	00002c06 	br	80334 <sendNoteOn2Voice+0x15c>
	case 2:
		voicePhaseAddr = (int *)WAVEFORMGENERATOR_0_PHASE_INCREMENTS_VOICE2_BASE;
   80284:	00800474 	movhi	r2,17
   80288:	10a41804 	addi	r2,r2,-28576
   8028c:	e0bffd15 	stw	r2,-12(fp)
		noteOffAddr = (int *) WAVEFORMGENERATOR_0_NOTE_END_VOICE2_BASE;
   80290:	00800474 	movhi	r2,17
   80294:	10a42144 	addi	r2,r2,-28539
   80298:	e0bffc15 	stw	r2,-16(fp)
		break;
   8029c:	00002506 	br	80334 <sendNoteOn2Voice+0x15c>
	case 3:
		voicePhaseAddr = (int *)WAVEFORMGENERATOR_0_PHASE_INCREMENTS_VOICE3_BASE;
   802a0:	00800474 	movhi	r2,17
   802a4:	10a41204 	addi	r2,r2,-28600
   802a8:	e0bffd15 	stw	r2,-12(fp)
		noteOffAddr = (int *) WAVEFORMGENERATOR_0_NOTE_END_VOICE3_BASE;
   802ac:	00800474 	movhi	r2,17
   802b0:	10a420c4 	addi	r2,r2,-28541
   802b4:	e0bffc15 	stw	r2,-16(fp)
		break;
   802b8:	00001e06 	br	80334 <sendNoteOn2Voice+0x15c>
	case 4:
		voicePhaseAddr = (int *)WAVEFORMGENERATOR_0_PHASE_INCREMENTS_VOICE4_BASE;
   802bc:	00800474 	movhi	r2,17
   802c0:	10a41404 	addi	r2,r2,-28592
   802c4:	e0bffd15 	stw	r2,-12(fp)
		noteOffAddr = (int *) WAVEFORMGENERATOR_0_NOTE_END_VOICE4_BASE;
   802c8:	00800474 	movhi	r2,17
   802cc:	10a42084 	addi	r2,r2,-28542
   802d0:	e0bffc15 	stw	r2,-16(fp)
		break;
   802d4:	00001706 	br	80334 <sendNoteOn2Voice+0x15c>
	case 5:
		voicePhaseAddr = (int *)WAVEFORMGENERATOR_0_PHASE_INCREMENTS_VOICE5_BASE;
   802d8:	00800474 	movhi	r2,17
   802dc:	10a41004 	addi	r2,r2,-28608
   802e0:	e0bffd15 	stw	r2,-12(fp)
		noteOffAddr = (int *) WAVEFORMGENERATOR_0_NOTE_END_VOICE5_BASE;
   802e4:	00800474 	movhi	r2,17
   802e8:	10a42044 	addi	r2,r2,-28543
   802ec:	e0bffc15 	stw	r2,-16(fp)
		break;
   802f0:	00001006 	br	80334 <sendNoteOn2Voice+0x15c>
	case 6:
		voicePhaseAddr = (int *)WAVEFORMGENERATOR_0_PHASE_INCREMENTS_VOICE6_BASE;
   802f4:	00800474 	movhi	r2,17
   802f8:	10a40e04 	addi	r2,r2,-28616
   802fc:	e0bffd15 	stw	r2,-12(fp)
		noteOffAddr = (int *) WAVEFORMGENERATOR_0_NOTE_END_VOICE6_BASE;
   80300:	00800474 	movhi	r2,17
   80304:	10a42004 	addi	r2,r2,-28544
   80308:	e0bffc15 	stw	r2,-16(fp)
		break;
   8030c:	00000906 	br	80334 <sendNoteOn2Voice+0x15c>
	case 7:
		voicePhaseAddr = (int *)WAVEFORMGENERATOR_0_PHASE_INCREMENTS_VOICE7_BASE;
   80310:	00800474 	movhi	r2,17
   80314:	10a40c04 	addi	r2,r2,-28624
   80318:	e0bffd15 	stw	r2,-12(fp)
		noteOffAddr = (int *) WAVEFORMGENERATOR_0_NOTE_END_VOICE7_BASE;
   8031c:	00800474 	movhi	r2,17
   80320:	10a42104 	addi	r2,r2,-28540
   80324:	e0bffc15 	stw	r2,-16(fp)
		break;
   80328:	00000206 	br	80334 <sendNoteOn2Voice+0x15c>
	default:
		voicePhaseAddr = 0;
   8032c:	e03ffd15 	stw	zero,-12(fp)
		noteOffAddr = 0;
   80330:	e03ffc15 	stw	zero,-16(fp)
		break;

	}

	//while the address is not 0
	if (voicePhaseAddr != 0)
   80334:	e0bffd17 	ldw	r2,-12(fp)
   80338:	1005003a 	cmpeq	r2,r2,zero
   8033c:	1000091e 	bne	r2,zero,80364 <sendNoteOn2Voice+0x18c>
	{
		*voicePhaseAddr	=  sampleFreq;
   80340:	e0fffd17 	ldw	r3,-12(fp)
   80344:	e0bffe17 	ldw	r2,-8(fp)
   80348:	18800015 	stw	r2,0(r3)
		*noteOffAddr 	= 11;
   8034c:	e0fffc17 	ldw	r3,-16(fp)
   80350:	008002c4 	movi	r2,11
   80354:	18800015 	stw	r2,0(r3)
		*waveformShapesAddr = WAVE_SINE + WAVE_SAW + WAVE_SQUARE;
   80358:	e0fffb17 	ldw	r3,-20(fp)
   8035c:	00800a44 	movi	r2,41
   80360:	18800015 	stw	r2,0(r3)
	}


}
   80364:	e037883a 	mov	sp,fp
   80368:	df000017 	ldw	fp,0(sp)
   8036c:	dec00104 	addi	sp,sp,4
   80370:	f800283a 	ret

00080374 <turnOnVoice>:
 * If it finds an unused (off) note, it will use that voice
 * If all the voices are used, it does nothing
 *
 * it returns the index
 */
int turnOnVoice(int noteNum, int velocity,long sampleFreq){
   80374:	defff804 	addi	sp,sp,-32
   80378:	dfc00715 	stw	ra,28(sp)
   8037c:	df000615 	stw	fp,24(sp)
   80380:	dc000515 	stw	r16,20(sp)
   80384:	df000504 	addi	fp,sp,20
   80388:	e13ffc15 	stw	r4,-16(fp)
   8038c:	e17ffd15 	stw	r5,-12(fp)
   80390:	e1bffe15 	stw	r6,-8(fp)

	int index = 0;
   80394:	e03ffb15 	stw	zero,-20(fp)

	  for (index = 0; index < TOTAL_VOICES; index++)
   80398:	e03ffb15 	stw	zero,-20(fp)
   8039c:	00002c06 	br	80450 <turnOnVoice+0xdc>
	  {
		  if (NOTE_OFF == VOICE_TABLE[index].status)
   803a0:	e13ffb17 	ldw	r4,-20(fp)
   803a4:	04000274 	movhi	r16,9
   803a8:	84087404 	addi	r16,r16,8656
   803ac:	01400304 	movi	r5,12
   803b0:	00837500 	call	83750 <__mulsi3>
   803b4:	1405883a 	add	r2,r2,r16
   803b8:	10800017 	ldw	r2,0(r2)
   803bc:	1004c03a 	cmpne	r2,r2,zero
   803c0:	1000201e 	bne	r2,zero,80444 <turnOnVoice+0xd0>
		  {
			  VOICE_TABLE[index].note = noteNum;
   803c4:	e13ffb17 	ldw	r4,-20(fp)
   803c8:	04000274 	movhi	r16,9
   803cc:	84087404 	addi	r16,r16,8656
   803d0:	01400304 	movi	r5,12
   803d4:	00837500 	call	83750 <__mulsi3>
   803d8:	1405883a 	add	r2,r2,r16
   803dc:	10c00104 	addi	r3,r2,4
   803e0:	e0bffc17 	ldw	r2,-16(fp)
   803e4:	18800015 	stw	r2,0(r3)
			  VOICE_TABLE[index].status = NOTE_ON;
   803e8:	e13ffb17 	ldw	r4,-20(fp)
   803ec:	04000274 	movhi	r16,9
   803f0:	84087404 	addi	r16,r16,8656
   803f4:	01400304 	movi	r5,12
   803f8:	00837500 	call	83750 <__mulsi3>
   803fc:	1407883a 	add	r3,r2,r16
   80400:	00800044 	movi	r2,1
   80404:	18800015 	stw	r2,0(r3)
			  VOICE_TABLE[index].velocity = velocity;
   80408:	e13ffb17 	ldw	r4,-20(fp)
   8040c:	04000274 	movhi	r16,9
   80410:	84087404 	addi	r16,r16,8656
   80414:	01400304 	movi	r5,12
   80418:	00837500 	call	83750 <__mulsi3>
   8041c:	1405883a 	add	r2,r2,r16
   80420:	10c00204 	addi	r3,r2,8
   80424:	e0bffd17 	ldw	r2,-12(fp)
   80428:	18800015 	stw	r2,0(r3)

			  sendNoteOn2Voice(sampleFreq, index);
   8042c:	e13ffe17 	ldw	r4,-8(fp)
   80430:	e17ffb17 	ldw	r5,-20(fp)
   80434:	00801d80 	call	801d8 <sendNoteOn2Voice>

			  return index;
   80438:	e0bffb17 	ldw	r2,-20(fp)
   8043c:	e0bfff15 	stw	r2,-4(fp)
   80440:	00000806 	br	80464 <turnOnVoice+0xf0>
 */
int turnOnVoice(int noteNum, int velocity,long sampleFreq){

	int index = 0;

	  for (index = 0; index < TOTAL_VOICES; index++)
   80444:	e0bffb17 	ldw	r2,-20(fp)
   80448:	10800044 	addi	r2,r2,1
   8044c:	e0bffb15 	stw	r2,-20(fp)
   80450:	e0bffb17 	ldw	r2,-20(fp)
   80454:	10800210 	cmplti	r2,r2,8
   80458:	103fd11e 	bne	r2,zero,803a0 <turnOnVoice+0x2c>

			  return index;
		  }
	  }

	  return -1;
   8045c:	00bfffc4 	movi	r2,-1
   80460:	e0bfff15 	stw	r2,-4(fp)
   80464:	e0bfff17 	ldw	r2,-4(fp)
}
   80468:	e037883a 	mov	sp,fp
   8046c:	dfc00217 	ldw	ra,8(sp)
   80470:	df000117 	ldw	fp,4(sp)
   80474:	dc000017 	ldw	r16,0(sp)
   80478:	dec00304 	addi	sp,sp,12
   8047c:	f800283a 	ret

00080480 <turnOffVoice>:
/**
 * This Iterate through the voice/note table and look for a note to turn off
 * If it finds a specific note, it will reset the note to an off state
 * If it doesn't find it, it does nothing
 */
int turnOffVoice(int noteNum, int velocity){
   80480:	defff904 	addi	sp,sp,-28
   80484:	dfc00615 	stw	ra,24(sp)
   80488:	df000515 	stw	fp,20(sp)
   8048c:	dc000415 	stw	r16,16(sp)
   80490:	df000404 	addi	fp,sp,16
   80494:	e13ffd15 	stw	r4,-12(fp)
   80498:	e17ffe15 	stw	r5,-8(fp)

	int index = 0;
   8049c:	e03ffc15 	stw	zero,-16(fp)

	  for (index = 0; index < TOTAL_VOICES; index++)
   804a0:	e03ffc15 	stw	zero,-16(fp)
   804a4:	00002706 	br	80544 <turnOffVoice+0xc4>
	  {
		  if (noteNum == VOICE_TABLE[index].note)
   804a8:	e13ffc17 	ldw	r4,-16(fp)
   804ac:	04000274 	movhi	r16,9
   804b0:	84087404 	addi	r16,r16,8656
   804b4:	01400304 	movi	r5,12
   804b8:	00837500 	call	83750 <__mulsi3>
   804bc:	1405883a 	add	r2,r2,r16
   804c0:	10800104 	addi	r2,r2,4
   804c4:	10c00017 	ldw	r3,0(r2)
   804c8:	e0bffd17 	ldw	r2,-12(fp)
   804cc:	18801a1e 	bne	r3,r2,80538 <turnOffVoice+0xb8>
		  {
			  VOICE_TABLE[index].note = EMPTY_NOTE;
   804d0:	e13ffc17 	ldw	r4,-16(fp)
   804d4:	04000274 	movhi	r16,9
   804d8:	84087404 	addi	r16,r16,8656
   804dc:	01400304 	movi	r5,12
   804e0:	00837500 	call	83750 <__mulsi3>
   804e4:	1405883a 	add	r2,r2,r16
   804e8:	10800104 	addi	r2,r2,4
   804ec:	10000015 	stw	zero,0(r2)
			  VOICE_TABLE[index].status = NOTE_OFF;
   804f0:	e13ffc17 	ldw	r4,-16(fp)
   804f4:	04000274 	movhi	r16,9
   804f8:	84087404 	addi	r16,r16,8656
   804fc:	01400304 	movi	r5,12
   80500:	00837500 	call	83750 <__mulsi3>
   80504:	1405883a 	add	r2,r2,r16
   80508:	10000015 	stw	zero,0(r2)
			  VOICE_TABLE[index].velocity = OFF_VELOCITY;
   8050c:	e13ffc17 	ldw	r4,-16(fp)
   80510:	04000274 	movhi	r16,9
   80514:	84087404 	addi	r16,r16,8656
   80518:	01400304 	movi	r5,12
   8051c:	00837500 	call	83750 <__mulsi3>
   80520:	1405883a 	add	r2,r2,r16
   80524:	10800204 	addi	r2,r2,8
   80528:	10000015 	stw	zero,0(r2)

			 return index;
   8052c:	e0bffc17 	ldw	r2,-16(fp)
   80530:	e0bfff15 	stw	r2,-4(fp)
   80534:	00000806 	br	80558 <turnOffVoice+0xd8>
 */
int turnOffVoice(int noteNum, int velocity){

	int index = 0;

	  for (index = 0; index < TOTAL_VOICES; index++)
   80538:	e0bffc17 	ldw	r2,-16(fp)
   8053c:	10800044 	addi	r2,r2,1
   80540:	e0bffc15 	stw	r2,-16(fp)
   80544:	e0bffc17 	ldw	r2,-16(fp)
   80548:	10800210 	cmplti	r2,r2,8
   8054c:	103fd61e 	bne	r2,zero,804a8 <turnOffVoice+0x28>

			 return index;
		  }
	  }

	  return -1;
   80550:	00bfffc4 	movi	r2,-1
   80554:	e0bfff15 	stw	r2,-4(fp)
   80558:	e0bfff17 	ldw	r2,-4(fp)
}
   8055c:	e037883a 	mov	sp,fp
   80560:	dfc00217 	ldw	ra,8(sp)
   80564:	df000117 	ldw	fp,4(sp)
   80568:	dc000017 	ldw	r16,0(sp)
   8056c:	dec00304 	addi	sp,sp,12
   80570:	f800283a 	ret

00080574 <midiNote2midiFreq>:
/**
 * This will calculate the frequency of the midi note

 */
double midiNote2midiFreq(int midiNote)
{
   80574:	defffd04 	addi	sp,sp,-12
   80578:	dfc00215 	stw	ra,8(sp)
   8057c:	df000115 	stw	fp,4(sp)
   80580:	df000104 	addi	fp,sp,4
   80584:	e13fff15 	stw	r4,-4(fp)
	return FREQ_BASE*pow(2,(midiNote/12));
   80588:	e13fff17 	ldw	r4,-4(fp)
   8058c:	01400304 	movi	r5,12
   80590:	00836800 	call	83680 <__divsi3>
   80594:	1009883a 	mov	r4,r2
   80598:	00834340 	call	83434 <__floatsidf>
   8059c:	100f883a 	mov	r7,r2
   805a0:	1811883a 	mov	r8,r3
   805a4:	0009883a 	mov	r4,zero
   805a8:	01500034 	movhi	r5,16384
   805ac:	380d883a 	mov	r6,r7
   805b0:	400f883a 	mov	r7,r8
   805b4:	008078c0 	call	8078c <pow>
   805b8:	1009883a 	mov	r4,r2
   805bc:	180b883a 	mov	r5,r3
   805c0:	2005883a 	mov	r2,r4
   805c4:	2807883a 	mov	r3,r5
   805c8:	1009883a 	mov	r4,r2
   805cc:	180b883a 	mov	r5,r3
   805d0:	019430b4 	movhi	r6,20674
   805d4:	31964e44 	addi	r6,r6,22841
   805d8:	01d00834 	movhi	r7,16416
   805dc:	39d68084 	addi	r7,r7,23042
   805e0:	0082b700 	call	82b70 <__muldf3>
   805e4:	1009883a 	mov	r4,r2
   805e8:	180b883a 	mov	r5,r3
   805ec:	200d883a 	mov	r6,r4
   805f0:	280f883a 	mov	r7,r5
   805f4:	3007883a 	mov	r3,r6
   805f8:	3809883a 	mov	r4,r7
}
   805fc:	1805883a 	mov	r2,r3
   80600:	2007883a 	mov	r3,r4
   80604:	e037883a 	mov	sp,fp
   80608:	dfc00117 	ldw	ra,4(sp)
   8060c:	df000017 	ldw	fp,0(sp)
   80610:	dec00204 	addi	sp,sp,8
   80614:	f800283a 	ret

00080618 <midiFreq2sampleFreq>:

/**
 * This will calculate the sampling frequency used to sample the SINE LUT
 */
long midiFreq2sampleFreq(double midiFreq)
{
   80618:	defffb04 	addi	sp,sp,-20
   8061c:	dfc00415 	stw	ra,16(sp)
   80620:	df000315 	stw	fp,12(sp)
   80624:	df000304 	addi	fp,sp,12
   80628:	e13ffe15 	stw	r4,-8(fp)
   8062c:	e17fff15 	stw	r5,-4(fp)

	long sampleFreq = (midiFreq/FREQ_CLK)*SINE_TABLE_SIZE;
   80630:	e13ffe17 	ldw	r4,-8(fp)
   80634:	e17fff17 	ldw	r5,-4(fp)
   80638:	000d883a 	mov	r6,zero
   8063c:	01d06234 	movhi	r7,16776
   80640:	39f5e104 	addi	r7,r7,-10364
   80644:	0082f340 	call	82f34 <__divdf3>
   80648:	1009883a 	mov	r4,r2
   8064c:	180b883a 	mov	r5,r3
   80650:	2005883a 	mov	r2,r4
   80654:	2807883a 	mov	r3,r5
   80658:	1009883a 	mov	r4,r2
   8065c:	180b883a 	mov	r5,r3
   80660:	000d883a 	mov	r6,zero
   80664:	01d02c34 	movhi	r7,16560
   80668:	0082b700 	call	82b70 <__muldf3>
   8066c:	1009883a 	mov	r4,r2
   80670:	180b883a 	mov	r5,r3
   80674:	2005883a 	mov	r2,r4
   80678:	2807883a 	mov	r3,r5
   8067c:	1009883a 	mov	r4,r2
   80680:	180b883a 	mov	r5,r3
   80684:	008352c0 	call	8352c <__fixdfsi>
   80688:	e0bffd15 	stw	r2,-12(fp)

	return sampleFreq;
   8068c:	e0bffd17 	ldw	r2,-12(fp)

}
   80690:	e037883a 	mov	sp,fp
   80694:	dfc00117 	ldw	ra,4(sp)
   80698:	df000017 	ldw	fp,0(sp)
   8069c:	dec00204 	addi	sp,sp,8
   806a0:	f800283a 	ret

000806a4 <task3>:



/* Prints "Hello World" and sleeps for three seconds */
void task3(void* pdata)
{
   806a4:	deff7a04 	addi	sp,sp,-536
   806a8:	df008515 	stw	fp,532(sp)
   806ac:	df008504 	addi	fp,sp,532
   806b0:	e13fff15 	stw	r4,-4(fp)
	alt_up_av_config_dev * audio_config_dev;



	    unsigned int l_buf[BUFFER_SIZE];
	    int i = 0;
   806b4:	e03f7c15 	stw	zero,-528(fp)
	    int writeSizeL = 0;
   806b8:	e03f7b15 	stw	zero,-532(fp)

	            //write data to the L and R buffers; R buffer will receive a copy of L buffer data
	            //alt_up_audio_write_fifo (audio_dev, l_buf, writeSizeL, ALT_UP_AUDIO_RIGHT);
	          //  alt_up_audio_write_fifo (audio_dev, l_buf, writeSizeL, ALT_UP_AUDIO_LEFT);

	    }
   806bc:	003fff06 	br	806bc <task3+0x18>

000806c0 <PollForNotesTask>:


}
/* Prints "Hello World" and sleeps for three seconds */
void PollForNotesTask(void* pdata)
{
   806c0:	defff604 	addi	sp,sp,-40
   806c4:	dfc00915 	stw	ra,36(sp)
   806c8:	df000815 	stw	fp,32(sp)
   806cc:	df000804 	addi	fp,sp,32
   806d0:	e13fff15 	stw	r4,-4(fp)

	int noteStatus = NOTE_OFF;
   806d4:	e03ffe15 	stw	zero,-8(fp)
	int pitch = 60;
   806d8:	00800f04 	movi	r2,60
   806dc:	e0bffd15 	stw	r2,-12(fp)
	int velocity = 120;
   806e0:	00801e04 	movi	r2,120
   806e4:	e0bffc15 	stw	r2,-16(fp)

	double midiFreq = 0;
   806e8:	e03ffa15 	stw	zero,-24(fp)
   806ec:	e03ffb15 	stw	zero,-20(fp)
	long sampleFreq = 0;
   806f0:	e03ff915 	stw	zero,-28(fp)
	int voiceNumber = 0;
   806f4:	e03ff815 	stw	zero,-32(fp)
   806f8:	00000006 	br	806fc <PollForNotesTask+0x3c>

  while (1)
  { 

    OSTimeDlyHMSM(0, 0, 20, 0);
   806fc:	0009883a 	mov	r4,zero
   80700:	000b883a 	mov	r5,zero
   80704:	01800504 	movi	r6,20
   80708:	000f883a 	mov	r7,zero
   8070c:	008c1680 	call	8c168 <OSTimeDlyHMSM>

	  if (velocity != 0)
   80710:	e0bffc17 	ldw	r2,-16(fp)
   80714:	1005003a 	cmpeq	r2,r2,zero
   80718:	1000101e 	bne	r2,zero,8075c <PollForNotesTask+0x9c>
	  {
		  midiFreq = midiNote2midiFreq(pitch);
   8071c:	e13ffd17 	ldw	r4,-12(fp)
   80720:	00805740 	call	80574 <midiNote2midiFreq>
   80724:	1009883a 	mov	r4,r2
   80728:	180b883a 	mov	r5,r3
   8072c:	e13ffa15 	stw	r4,-24(fp)
   80730:	e17ffb15 	stw	r5,-20(fp)
		  sampleFreq = midiFreq2sampleFreq(midiFreq);
   80734:	e13ffa17 	ldw	r4,-24(fp)
   80738:	e17ffb17 	ldw	r5,-20(fp)
   8073c:	00806180 	call	80618 <midiFreq2sampleFreq>
   80740:	e0bff915 	stw	r2,-28(fp)
		  voiceNumber = turnOnVoice(pitch, velocity, sampleFreq);
   80744:	e13ffd17 	ldw	r4,-12(fp)
   80748:	e17ffc17 	ldw	r5,-16(fp)
   8074c:	e1bff917 	ldw	r6,-28(fp)
   80750:	00803740 	call	80374 <turnOnVoice>
   80754:	e0bff815 	stw	r2,-32(fp)
   80758:	003fe806 	br	806fc <PollForNotesTask+0x3c>

	  }
	  else
	  {
		  voiceNumber = turnOffVoice(pitch, velocity);
   8075c:	e13ffd17 	ldw	r4,-12(fp)
   80760:	e17ffc17 	ldw	r5,-16(fp)
   80764:	00804800 	call	80480 <turnOffVoice>
   80768:	e0bff815 	stw	r2,-32(fp)
	  }

  }
   8076c:	003fe306 	br	806fc <PollForNotesTask+0x3c>

00080770 <main>:



/* The main function creates two task and starts multi-tasking */
int main(void)
{
   80770:	deffff04 	addi	sp,sp,-4
   80774:	df000015 	stw	fp,0(sp)
   80778:	d839883a 	mov	fp,sp

}
   8077c:	e037883a 	mov	sp,fp
   80780:	df000017 	ldw	fp,0(sp)
   80784:	dec00104 	addi	sp,sp,4
   80788:	f800283a 	ret

0008078c <pow>:
   8078c:	deffee04 	addi	sp,sp,-72
   80790:	ddc01015 	stw	r23,64(sp)
   80794:	05c00274 	movhi	r23,9
   80798:	bdc26d04 	addi	r23,r23,2484
   8079c:	dd800f15 	stw	r22,60(sp)
   807a0:	dd400e15 	stw	r21,56(sp)
   807a4:	dd000d15 	stw	r20,52(sp)
   807a8:	dcc00c15 	stw	r19,48(sp)
   807ac:	dc800b15 	stw	r18,44(sp)
   807b0:	dc400a15 	stw	r17,40(sp)
   807b4:	dc000915 	stw	r16,36(sp)
   807b8:	2029883a 	mov	r20,r4
   807bc:	dfc01115 	stw	ra,68(sp)
   807c0:	3025883a 	mov	r18,r6
   807c4:	282b883a 	mov	r21,r5
   807c8:	3827883a 	mov	r19,r7
   807cc:	0080c140 	call	80c14 <__ieee754_pow>
   807d0:	b9000017 	ldw	r4,0(r23)
   807d4:	05bfffc4 	movi	r22,-1
   807d8:	1021883a 	mov	r16,r2
   807dc:	1823883a 	mov	r17,r3
   807e0:	25800426 	beq	r4,r22,807f4 <pow+0x68>
   807e4:	9009883a 	mov	r4,r18
   807e8:	980b883a 	mov	r5,r19
   807ec:	00822100 	call	82210 <__isnand>
   807f0:	10000d26 	beq	r2,zero,80828 <pow+0x9c>
   807f4:	8005883a 	mov	r2,r16
   807f8:	8807883a 	mov	r3,r17
   807fc:	dfc01117 	ldw	ra,68(sp)
   80800:	ddc01017 	ldw	r23,64(sp)
   80804:	dd800f17 	ldw	r22,60(sp)
   80808:	dd400e17 	ldw	r21,56(sp)
   8080c:	dd000d17 	ldw	r20,52(sp)
   80810:	dcc00c17 	ldw	r19,48(sp)
   80814:	dc800b17 	ldw	r18,44(sp)
   80818:	dc400a17 	ldw	r17,40(sp)
   8081c:	dc000917 	ldw	r16,36(sp)
   80820:	dec01204 	addi	sp,sp,72
   80824:	f800283a 	ret
   80828:	a009883a 	mov	r4,r20
   8082c:	a80b883a 	mov	r5,r21
   80830:	00822100 	call	82210 <__isnand>
   80834:	1000151e 	bne	r2,zero,8088c <pow+0x100>
   80838:	000d883a 	mov	r6,zero
   8083c:	000f883a 	mov	r7,zero
   80840:	a009883a 	mov	r4,r20
   80844:	a80b883a 	mov	r5,r21
   80848:	008318c0 	call	8318c <__eqdf2>
   8084c:	1000541e 	bne	r2,zero,809a0 <pow+0x214>
   80850:	000d883a 	mov	r6,zero
   80854:	000f883a 	mov	r7,zero
   80858:	9009883a 	mov	r4,r18
   8085c:	980b883a 	mov	r5,r19
   80860:	008318c0 	call	8318c <__eqdf2>
   80864:	10002c1e 	bne	r2,zero,80918 <pow+0x18c>
   80868:	b8800017 	ldw	r2,0(r23)
   8086c:	d8000615 	stw	zero,24(sp)
   80870:	d8000715 	stw	zero,28(sp)
   80874:	10001226 	beq	r2,zero,808c0 <pow+0x134>
   80878:	008ffc34 	movhi	r2,16368
   8087c:	d8800715 	stw	r2,28(sp)
   80880:	dc000617 	ldw	r16,24(sp)
   80884:	dc400717 	ldw	r17,28(sp)
   80888:	003fda06 	br	807f4 <pow+0x68>
   8088c:	000d883a 	mov	r6,zero
   80890:	000f883a 	mov	r7,zero
   80894:	9009883a 	mov	r4,r18
   80898:	980b883a 	mov	r5,r19
   8089c:	008318c0 	call	8318c <__eqdf2>
   808a0:	103fd41e 	bne	r2,zero,807f4 <pow+0x68>
   808a4:	b8c00017 	ldw	r3,0(r23)
   808a8:	010ffc34 	movhi	r4,16368
   808ac:	d8000615 	stw	zero,24(sp)
   808b0:	d9000715 	stw	r4,28(sp)
   808b4:	1d801526 	beq	r3,r22,8090c <pow+0x180>
   808b8:	00800084 	movi	r2,2
   808bc:	18801326 	beq	r3,r2,8090c <pow+0x180>
   808c0:	00800274 	movhi	r2,9
   808c4:	10bc2604 	addi	r2,r2,-3944
   808c8:	00c00044 	movi	r3,1
   808cc:	d809883a 	mov	r4,sp
   808d0:	dcc00515 	stw	r19,20(sp)
   808d4:	dd400315 	stw	r21,12(sp)
   808d8:	d8800115 	stw	r2,4(sp)
   808dc:	d8c00015 	stw	r3,0(sp)
   808e0:	dc800415 	stw	r18,16(sp)
   808e4:	dd000215 	stw	r20,8(sp)
   808e8:	d8000815 	stw	zero,32(sp)
   808ec:	00822400 	call	82240 <matherr>
   808f0:	10002726 	beq	r2,zero,80990 <pow+0x204>
   808f4:	d8800817 	ldw	r2,32(sp)
   808f8:	103fe126 	beq	r2,zero,80880 <pow+0xf4>
   808fc:	0083e400 	call	83e40 <__errno>
   80900:	d8c00817 	ldw	r3,32(sp)
   80904:	10c00015 	stw	r3,0(r2)
   80908:	003fdd06 	br	80880 <pow+0xf4>
   8090c:	d9000715 	stw	r4,28(sp)
   80910:	d8000615 	stw	zero,24(sp)
   80914:	003fda06 	br	80880 <pow+0xf4>
   80918:	9009883a 	mov	r4,r18
   8091c:	980b883a 	mov	r5,r19
   80920:	00821f40 	call	821f4 <finite>
   80924:	103fb326 	beq	r2,zero,807f4 <pow+0x68>
   80928:	000d883a 	mov	r6,zero
   8092c:	000f883a 	mov	r7,zero
   80930:	9009883a 	mov	r4,r18
   80934:	980b883a 	mov	r5,r19
   80938:	00833240 	call	83324 <__ltdf2>
   8093c:	103fad0e 	bge	r2,zero,807f4 <pow+0x68>
   80940:	b9000017 	ldw	r4,0(r23)
   80944:	00800044 	movi	r2,1
   80948:	00c00274 	movhi	r3,9
   8094c:	18fc2604 	addi	r3,r3,-3944
   80950:	d8800015 	stw	r2,0(sp)
   80954:	d8c00115 	stw	r3,4(sp)
   80958:	dd400315 	stw	r21,12(sp)
   8095c:	dcc00515 	stw	r19,20(sp)
   80960:	d8000815 	stw	zero,32(sp)
   80964:	dd000215 	stw	r20,8(sp)
   80968:	dc800415 	stw	r18,16(sp)
   8096c:	20005626 	beq	r4,zero,80ac8 <pow+0x33c>
   80970:	00bffc34 	movhi	r2,65520
   80974:	d8800715 	stw	r2,28(sp)
   80978:	00800084 	movi	r2,2
   8097c:	d8000615 	stw	zero,24(sp)
   80980:	20800326 	beq	r4,r2,80990 <pow+0x204>
   80984:	d809883a 	mov	r4,sp
   80988:	00822400 	call	82240 <matherr>
   8098c:	103fd91e 	bne	r2,zero,808f4 <pow+0x168>
   80990:	0083e400 	call	83e40 <__errno>
   80994:	00c00844 	movi	r3,33
   80998:	10c00015 	stw	r3,0(r2)
   8099c:	003fd506 	br	808f4 <pow+0x168>
   809a0:	8009883a 	mov	r4,r16
   809a4:	880b883a 	mov	r5,r17
   809a8:	00821f40 	call	821f4 <finite>
   809ac:	10002426 	beq	r2,zero,80a40 <pow+0x2b4>
   809b0:	000d883a 	mov	r6,zero
   809b4:	000f883a 	mov	r7,zero
   809b8:	8009883a 	mov	r4,r16
   809bc:	880b883a 	mov	r5,r17
   809c0:	008318c0 	call	8318c <__eqdf2>
   809c4:	103f8b1e 	bne	r2,zero,807f4 <pow+0x68>
   809c8:	a009883a 	mov	r4,r20
   809cc:	a80b883a 	mov	r5,r21
   809d0:	00821f40 	call	821f4 <finite>
   809d4:	103f8726 	beq	r2,zero,807f4 <pow+0x68>
   809d8:	9009883a 	mov	r4,r18
   809dc:	980b883a 	mov	r5,r19
   809e0:	00821f40 	call	821f4 <finite>
   809e4:	103f8326 	beq	r2,zero,807f4 <pow+0x68>
   809e8:	b9000017 	ldw	r4,0(r23)
   809ec:	00800104 	movi	r2,4
   809f0:	d8800015 	stw	r2,0(sp)
   809f4:	00c00274 	movhi	r3,9
   809f8:	18fc2604 	addi	r3,r3,-3944
   809fc:	00800084 	movi	r2,2
   80a00:	d8c00115 	stw	r3,4(sp)
   80a04:	dd400315 	stw	r21,12(sp)
   80a08:	dcc00515 	stw	r19,20(sp)
   80a0c:	d8000815 	stw	zero,32(sp)
   80a10:	dd000215 	stw	r20,8(sp)
   80a14:	dc800415 	stw	r18,16(sp)
   80a18:	d8000615 	stw	zero,24(sp)
   80a1c:	d8000715 	stw	zero,28(sp)
   80a20:	20800326 	beq	r4,r2,80a30 <pow+0x2a4>
   80a24:	d809883a 	mov	r4,sp
   80a28:	00822400 	call	82240 <matherr>
   80a2c:	103fb11e 	bne	r2,zero,808f4 <pow+0x168>
   80a30:	0083e400 	call	83e40 <__errno>
   80a34:	00c00884 	movi	r3,34
   80a38:	10c00015 	stw	r3,0(r2)
   80a3c:	003fad06 	br	808f4 <pow+0x168>
   80a40:	a009883a 	mov	r4,r20
   80a44:	a80b883a 	mov	r5,r21
   80a48:	00821f40 	call	821f4 <finite>
   80a4c:	103fd826 	beq	r2,zero,809b0 <pow+0x224>
   80a50:	9009883a 	mov	r4,r18
   80a54:	980b883a 	mov	r5,r19
   80a58:	00821f40 	call	821f4 <finite>
   80a5c:	103fd426 	beq	r2,zero,809b0 <pow+0x224>
   80a60:	880b883a 	mov	r5,r17
   80a64:	8009883a 	mov	r4,r16
   80a68:	00822100 	call	82210 <__isnand>
   80a6c:	10001926 	beq	r2,zero,80ad4 <pow+0x348>
   80a70:	bc000017 	ldw	r16,0(r23)
   80a74:	00800044 	movi	r2,1
   80a78:	00c00274 	movhi	r3,9
   80a7c:	18fc2604 	addi	r3,r3,-3944
   80a80:	d8800015 	stw	r2,0(sp)
   80a84:	d8c00115 	stw	r3,4(sp)
   80a88:	dd400315 	stw	r21,12(sp)
   80a8c:	dcc00515 	stw	r19,20(sp)
   80a90:	d8000815 	stw	zero,32(sp)
   80a94:	dd000215 	stw	r20,8(sp)
   80a98:	dc800415 	stw	r18,16(sp)
   80a9c:	80000a26 	beq	r16,zero,80ac8 <pow+0x33c>
   80aa0:	0009883a 	mov	r4,zero
   80aa4:	000d883a 	mov	r6,zero
   80aa8:	000b883a 	mov	r5,zero
   80aac:	000f883a 	mov	r7,zero
   80ab0:	0082f340 	call	82f34 <__divdf3>
   80ab4:	d8800615 	stw	r2,24(sp)
   80ab8:	00800084 	movi	r2,2
   80abc:	d8c00715 	stw	r3,28(sp)
   80ac0:	80bfb01e 	bne	r16,r2,80984 <pow+0x1f8>
   80ac4:	003fb206 	br	80990 <pow+0x204>
   80ac8:	d8000615 	stw	zero,24(sp)
   80acc:	d8000715 	stw	zero,28(sp)
   80ad0:	003fac06 	br	80984 <pow+0x1f8>
   80ad4:	b8800017 	ldw	r2,0(r23)
   80ad8:	00c000c4 	movi	r3,3
   80adc:	01000274 	movhi	r4,9
   80ae0:	213c2604 	addi	r4,r4,-3944
   80ae4:	d8c00015 	stw	r3,0(sp)
   80ae8:	d9000115 	stw	r4,4(sp)
   80aec:	d8000815 	stw	zero,32(sp)
   80af0:	dd000215 	stw	r20,8(sp)
   80af4:	dd400315 	stw	r21,12(sp)
   80af8:	dc800415 	stw	r18,16(sp)
   80afc:	dcc00515 	stw	r19,20(sp)
   80b00:	1000251e 	bne	r2,zero,80b98 <pow+0x40c>
   80b04:	05b80034 	movhi	r22,57344
   80b08:	0091fc34 	movhi	r2,18416
   80b0c:	10bfffc4 	addi	r2,r2,-1
   80b10:	000d883a 	mov	r6,zero
   80b14:	000f883a 	mov	r7,zero
   80b18:	a80b883a 	mov	r5,r21
   80b1c:	a009883a 	mov	r4,r20
   80b20:	d8800715 	stw	r2,28(sp)
   80b24:	dd800615 	stw	r22,24(sp)
   80b28:	00833240 	call	83324 <__ltdf2>
   80b2c:	103fbd0e 	bge	r2,zero,80a24 <pow+0x298>
   80b30:	0005883a 	mov	r2,zero
   80b34:	00cff834 	movhi	r3,16352
   80b38:	180f883a 	mov	r7,r3
   80b3c:	100d883a 	mov	r6,r2
   80b40:	980b883a 	mov	r5,r19
   80b44:	9009883a 	mov	r4,r18
   80b48:	0082b700 	call	82b70 <__muldf3>
   80b4c:	1009883a 	mov	r4,r2
   80b50:	180b883a 	mov	r5,r3
   80b54:	1021883a 	mov	r16,r2
   80b58:	1823883a 	mov	r17,r3
   80b5c:	00822580 	call	82258 <rint>
   80b60:	180f883a 	mov	r7,r3
   80b64:	8009883a 	mov	r4,r16
   80b68:	880b883a 	mov	r5,r17
   80b6c:	100d883a 	mov	r6,r2
   80b70:	00832140 	call	83214 <__nedf2>
   80b74:	10000426 	beq	r2,zero,80b88 <pow+0x3fc>
   80b78:	00b1fc34 	movhi	r2,51184
   80b7c:	10bfffc4 	addi	r2,r2,-1
   80b80:	dd800615 	stw	r22,24(sp)
   80b84:	d8800715 	stw	r2,28(sp)
   80b88:	b8c00017 	ldw	r3,0(r23)
   80b8c:	00800084 	movi	r2,2
   80b90:	18bfa41e 	bne	r3,r2,80a24 <pow+0x298>
   80b94:	003fa606 	br	80a30 <pow+0x2a4>
   80b98:	009ffc34 	movhi	r2,32752
   80b9c:	000d883a 	mov	r6,zero
   80ba0:	000f883a 	mov	r7,zero
   80ba4:	a80b883a 	mov	r5,r21
   80ba8:	a009883a 	mov	r4,r20
   80bac:	d8800715 	stw	r2,28(sp)
   80bb0:	d8000615 	stw	zero,24(sp)
   80bb4:	00833240 	call	83324 <__ltdf2>
   80bb8:	103ff30e 	bge	r2,zero,80b88 <pow+0x3fc>
   80bbc:	0005883a 	mov	r2,zero
   80bc0:	00cff834 	movhi	r3,16352
   80bc4:	180f883a 	mov	r7,r3
   80bc8:	100d883a 	mov	r6,r2
   80bcc:	980b883a 	mov	r5,r19
   80bd0:	9009883a 	mov	r4,r18
   80bd4:	0082b700 	call	82b70 <__muldf3>
   80bd8:	1009883a 	mov	r4,r2
   80bdc:	180b883a 	mov	r5,r3
   80be0:	1021883a 	mov	r16,r2
   80be4:	1823883a 	mov	r17,r3
   80be8:	00822580 	call	82258 <rint>
   80bec:	180f883a 	mov	r7,r3
   80bf0:	8009883a 	mov	r4,r16
   80bf4:	880b883a 	mov	r5,r17
   80bf8:	100d883a 	mov	r6,r2
   80bfc:	00832140 	call	83214 <__nedf2>
   80c00:	103fe126 	beq	r2,zero,80b88 <pow+0x3fc>
   80c04:	00bffc34 	movhi	r2,65520
   80c08:	d8800715 	stw	r2,28(sp)
   80c0c:	d8000615 	stw	zero,24(sp)
   80c10:	003fdd06 	br	80b88 <pow+0x3fc>

00080c14 <__ieee754_pow>:
   80c14:	deffbb04 	addi	sp,sp,-276
   80c18:	3005883a 	mov	r2,r6
   80c1c:	dd404015 	stw	r21,256(sp)
   80c20:	dd003f15 	stw	r20,252(sp)
   80c24:	d9802815 	stw	r6,160(sp)
   80c28:	2029883a 	mov	r20,r4
   80c2c:	282b883a 	mov	r21,r5
   80c30:	3009883a 	mov	r4,r6
   80c34:	380b883a 	mov	r5,r7
   80c38:	01a00034 	movhi	r6,32768
   80c3c:	31bfffc4 	addi	r6,r6,-1
   80c40:	dc003b15 	stw	r16,236(sp)
   80c44:	29a0703a 	and	r16,r5,r6
   80c48:	1404b03a 	or	r2,r2,r16
   80c4c:	dd804115 	stw	r22,260(sp)
   80c50:	dc403c15 	stw	r17,240(sp)
   80c54:	d9c02915 	stw	r7,164(sp)
   80c58:	382d883a 	mov	r22,r7
   80c5c:	dfc04415 	stw	ra,272(sp)
   80c60:	200f883a 	mov	r7,r4
   80c64:	df004315 	stw	fp,268(sp)
   80c68:	ddc04215 	stw	r23,264(sp)
   80c6c:	dcc03e15 	stw	r19,248(sp)
   80c70:	dc803d15 	stw	r18,244(sp)
   80c74:	a023883a 	mov	r17,r20
   80c78:	2809883a 	mov	r4,r5
   80c7c:	10000826 	beq	r2,zero,80ca0 <__ieee754_pow+0x8c>
   80c80:	a9a4703a 	and	r18,r21,r6
   80c84:	009ffc34 	movhi	r2,32752
   80c88:	a827883a 	mov	r19,r21
   80c8c:	1480180e 	bge	r2,r18,80cf0 <__ieee754_pow+0xdc>
   80c90:	00b00434 	movhi	r2,49168
   80c94:	9085883a 	add	r2,r18,r2
   80c98:	8884b03a 	or	r2,r17,r2
   80c9c:	1000321e 	bne	r2,zero,80d68 <__ieee754_pow+0x154>
   80ca0:	0009883a 	mov	r4,zero
   80ca4:	014ffc34 	movhi	r5,16368
   80ca8:	d9002815 	stw	r4,160(sp)
   80cac:	d9402915 	stw	r5,164(sp)
   80cb0:	d9002817 	ldw	r4,160(sp)
   80cb4:	d9402917 	ldw	r5,164(sp)
   80cb8:	2005883a 	mov	r2,r4
   80cbc:	2807883a 	mov	r3,r5
   80cc0:	dfc04417 	ldw	ra,272(sp)
   80cc4:	df004317 	ldw	fp,268(sp)
   80cc8:	ddc04217 	ldw	r23,264(sp)
   80ccc:	dd804117 	ldw	r22,260(sp)
   80cd0:	dd404017 	ldw	r21,256(sp)
   80cd4:	dd003f17 	ldw	r20,252(sp)
   80cd8:	dcc03e17 	ldw	r19,248(sp)
   80cdc:	dc803d17 	ldw	r18,244(sp)
   80ce0:	dc403c17 	ldw	r17,240(sp)
   80ce4:	dc003b17 	ldw	r16,236(sp)
   80ce8:	dec04504 	addi	sp,sp,276
   80cec:	f800283a 	ret
   80cf0:	90802b26 	beq	r18,r2,80da0 <__ieee754_pow+0x18c>
   80cf4:	143fe616 	blt	r2,r16,80c90 <__ieee754_pow+0x7c>
   80cf8:	80806126 	beq	r16,r2,80e80 <__ieee754_pow+0x26c>
   80cfc:	982e403a 	cmpge	r23,r19,zero
   80d00:	b8004e26 	beq	r23,zero,80e3c <__ieee754_pow+0x228>
   80d04:	0039883a 	mov	fp,zero
   80d08:	3800281e 	bne	r7,zero,80dac <__ieee754_pow+0x198>
   80d0c:	009ffc34 	movhi	r2,32752
   80d10:	80804f26 	beq	r16,r2,80e50 <__ieee754_pow+0x23c>
   80d14:	008ffc34 	movhi	r2,16368
   80d18:	80808226 	beq	r16,r2,80f24 <__ieee754_pow+0x310>
   80d1c:	00900034 	movhi	r2,16384
   80d20:	20828426 	beq	r4,r2,81734 <__ieee754_pow+0xb20>
   80d24:	008ff834 	movhi	r2,16352
   80d28:	2080201e 	bne	r4,r2,80dac <__ieee754_pow+0x198>
   80d2c:	98001f16 	blt	r19,zero,80dac <__ieee754_pow+0x198>
   80d30:	a80b883a 	mov	r5,r21
   80d34:	a009883a 	mov	r4,r20
   80d38:	dfc04417 	ldw	ra,272(sp)
   80d3c:	df004317 	ldw	fp,268(sp)
   80d40:	ddc04217 	ldw	r23,264(sp)
   80d44:	dd804117 	ldw	r22,260(sp)
   80d48:	dd404017 	ldw	r21,256(sp)
   80d4c:	dd003f17 	ldw	r20,252(sp)
   80d50:	dcc03e17 	ldw	r19,248(sp)
   80d54:	dc803d17 	ldw	r18,244(sp)
   80d58:	dc403c17 	ldw	r17,240(sp)
   80d5c:	dc003b17 	ldw	r16,236(sp)
   80d60:	dec04504 	addi	sp,sp,276
   80d64:	0081f141 	jmpi	81f14 <__ieee754_sqrt>
   80d68:	01000274 	movhi	r4,9
   80d6c:	213c2704 	addi	r4,r4,-3940
   80d70:	dfc04417 	ldw	ra,272(sp)
   80d74:	df004317 	ldw	fp,268(sp)
   80d78:	ddc04217 	ldw	r23,264(sp)
   80d7c:	dd804117 	ldw	r22,260(sp)
   80d80:	dd404017 	ldw	r21,256(sp)
   80d84:	dd003f17 	ldw	r20,252(sp)
   80d88:	dcc03e17 	ldw	r19,248(sp)
   80d8c:	dc803d17 	ldw	r18,244(sp)
   80d90:	dc403c17 	ldw	r17,240(sp)
   80d94:	dc003b17 	ldw	r16,236(sp)
   80d98:	dec04504 	addi	sp,sp,276
   80d9c:	00822481 	jmpi	82248 <nan>
   80da0:	a03fbb1e 	bne	r20,zero,80c90 <__ieee754_pow+0x7c>
   80da4:	003fd306 	br	80cf4 <__ieee754_pow+0xe0>
   80da8:	0039883a 	mov	fp,zero
   80dac:	a009883a 	mov	r4,r20
   80db0:	a80b883a 	mov	r5,r21
   80db4:	00821dc0 	call	821dc <fabs>
   80db8:	1015883a 	mov	r10,r2
   80dbc:	1817883a 	mov	r11,r3
   80dc0:	88001226 	beq	r17,zero,80e0c <__ieee754_pow+0x1f8>
   80dc4:	9804d7fa 	srli	r2,r19,31
   80dc8:	10bfffc4 	addi	r2,r2,-1
   80dcc:	1706b03a 	or	r3,r2,fp
   80dd0:	d8802515 	stw	r2,148(sp)
   80dd4:	18002c1e 	bne	r3,zero,80e88 <__ieee754_pow+0x274>
   80dd8:	a80f883a 	mov	r7,r21
   80ddc:	a009883a 	mov	r4,r20
   80de0:	a80b883a 	mov	r5,r21
   80de4:	a00d883a 	mov	r6,r20
   80de8:	0082a7c0 	call	82a7c <__subdf3>
   80dec:	1009883a 	mov	r4,r2
   80df0:	180b883a 	mov	r5,r3
   80df4:	100d883a 	mov	r6,r2
   80df8:	180f883a 	mov	r7,r3
   80dfc:	0082f340 	call	82f34 <__divdf3>
   80e00:	d8802815 	stw	r2,160(sp)
   80e04:	d8c02915 	stw	r3,164(sp)
   80e08:	003fa906 	br	80cb0 <__ieee754_pow+0x9c>
   80e0c:	009ffc34 	movhi	r2,32752
   80e10:	90800326 	beq	r18,r2,80e20 <__ieee754_pow+0x20c>
   80e14:	90000226 	beq	r18,zero,80e20 <__ieee754_pow+0x20c>
   80e18:	008ffc34 	movhi	r2,16368
   80e1c:	90bfe91e 	bne	r18,r2,80dc4 <__ieee754_pow+0x1b0>
   80e20:	b0026316 	blt	r22,zero,817b0 <__ieee754_pow+0xb9c>
   80e24:	5011883a 	mov	r8,r10
   80e28:	5813883a 	mov	r9,r11
   80e2c:	b8023126 	beq	r23,zero,816f4 <__ieee754_pow+0xae0>
   80e30:	da002815 	stw	r8,160(sp)
   80e34:	da402915 	stw	r9,164(sp)
   80e38:	003f9d06 	br	80cb0 <__ieee754_pow+0x9c>
   80e3c:	0090d034 	movhi	r2,17216
   80e40:	10bfffc4 	addi	r2,r2,-1
   80e44:	1400270e 	bge	r2,r16,80ee4 <__ieee754_pow+0x2d0>
   80e48:	07000084 	movi	fp,2
   80e4c:	003fae06 	br	80d08 <__ieee754_pow+0xf4>
   80e50:	00b00434 	movhi	r2,49168
   80e54:	9085883a 	add	r2,r18,r2
   80e58:	8884b03a 	or	r2,r17,r2
   80e5c:	103f9026 	beq	r2,zero,80ca0 <__ieee754_pow+0x8c>
   80e60:	008ffc34 	movhi	r2,16368
   80e64:	10bfffc4 	addi	r2,r2,-1
   80e68:	1482d00e 	bge	r2,r18,819ac <__ieee754_pow+0xd98>
   80e6c:	b03f900e 	bge	r22,zero,80cb0 <__ieee754_pow+0x9c>
   80e70:	0005883a 	mov	r2,zero
   80e74:	d8802815 	stw	r2,160(sp)
   80e78:	d8802915 	stw	r2,164(sp)
   80e7c:	003f8c06 	br	80cb0 <__ieee754_pow+0x9c>
   80e80:	383f9e26 	beq	r7,zero,80cfc <__ieee754_pow+0xe8>
   80e84:	003f8206 	br	80c90 <__ieee754_pow+0x7c>
   80e88:	00907834 	movhi	r2,16864
   80e8c:	1400290e 	bge	r2,r16,80f34 <__ieee754_pow+0x320>
   80e90:	0090fc34 	movhi	r2,17392
   80e94:	1402500e 	bge	r2,r16,817d8 <__ieee754_pow+0xbc4>
   80e98:	008ffc34 	movhi	r2,16368
   80e9c:	10bfffc4 	addi	r2,r2,-1
   80ea0:	14800b0e 	bge	r2,r18,80ed0 <__ieee754_pow+0x2bc>
   80ea4:	05800b0e 	bge	zero,r22,80ed4 <__ieee754_pow+0x2c0>
   80ea8:	00a20034 	movhi	r2,34816
   80eac:	109d6704 	addi	r2,r2,30108
   80eb0:	00df8e34 	movhi	r3,32312
   80eb4:	18f90f04 	addi	r3,r3,-7108
   80eb8:	100d883a 	mov	r6,r2
   80ebc:	180f883a 	mov	r7,r3
   80ec0:	1009883a 	mov	r4,r2
   80ec4:	180b883a 	mov	r5,r3
   80ec8:	0082b700 	call	82b70 <__muldf3>
   80ecc:	003fcc06 	br	80e00 <__ieee754_pow+0x1ec>
   80ed0:	b03ff516 	blt	r22,zero,80ea8 <__ieee754_pow+0x294>
   80ed4:	0007883a 	mov	r3,zero
   80ed8:	d8c02815 	stw	r3,160(sp)
   80edc:	d8c02915 	stw	r3,164(sp)
   80ee0:	003f7306 	br	80cb0 <__ieee754_pow+0x9c>
   80ee4:	008ffc34 	movhi	r2,16368
   80ee8:	10bfffc4 	addi	r2,r2,-1
   80eec:	143f850e 	bge	r2,r16,80d04 <__ieee754_pow+0xf0>
   80ef0:	8005d53a 	srai	r2,r16,20
   80ef4:	01400504 	movi	r5,20
   80ef8:	10ff0044 	addi	r3,r2,-1023
   80efc:	28c3e10e 	bge	r5,r3,81e84 <__ieee754_pow+0x1270>
   80f00:	00800d04 	movi	r2,52
   80f04:	10c5c83a 	sub	r2,r2,r3
   80f08:	3886d83a 	srl	r3,r7,r2
   80f0c:	1884983a 	sll	r2,r3,r2
   80f10:	38bf7c1e 	bne	r7,r2,80d04 <__ieee754_pow+0xf0>
   80f14:	18c0004c 	andi	r3,r3,1
   80f18:	00800084 	movi	r2,2
   80f1c:	10f9c83a 	sub	fp,r2,r3
   80f20:	003f7906 	br	80d08 <__ieee754_pow+0xf4>
   80f24:	b0038516 	blt	r22,zero,81d3c <__ieee754_pow+0x1128>
   80f28:	dd002815 	stw	r20,160(sp)
   80f2c:	dd402915 	stw	r21,164(sp)
   80f30:	003f5f06 	br	80cb0 <__ieee754_pow+0x9c>
   80f34:	00800434 	movhi	r2,16
   80f38:	10bfffc4 	addi	r2,r2,-1
   80f3c:	1482900e 	bge	r2,r18,81980 <__ieee754_pow+0xd6c>
   80f40:	000b883a 	mov	r5,zero
   80f44:	9005d53a 	srai	r2,r18,20
   80f48:	00c00434 	movhi	r3,16
   80f4c:	18ffffc4 	addi	r3,r3,-1
   80f50:	90c8703a 	and	r4,r18,r3
   80f54:	2887883a 	add	r3,r5,r2
   80f58:	18bf0044 	addi	r2,r3,-1023
   80f5c:	d8800015 	stw	r2,0(sp)
   80f60:	00800134 	movhi	r2,4
   80f64:	10a62384 	addi	r2,r2,-26482
   80f68:	250ffc34 	orhi	r20,r4,16368
   80f6c:	1101ee0e 	bge	r2,r4,81728 <__ieee754_pow+0xb14>
   80f70:	00800334 	movhi	r2,12
   80f74:	10ad9e44 	addi	r2,r2,-18823
   80f78:	1101e716 	blt	r2,r4,81718 <__ieee754_pow+0xb04>
   80f7c:	01000044 	movi	r4,1
   80f80:	04000334 	movhi	r16,12
   80f84:	200890fa 	slli	r4,r4,3
   80f88:	da800115 	stw	r10,4(sp)
   80f8c:	dd000215 	stw	r20,8(sp)
   80f90:	d9002c15 	stw	r4,176(sp)
   80f94:	d9402c17 	ldw	r5,176(sp)
   80f98:	01000274 	movhi	r4,9
   80f9c:	213c2804 	addi	r4,r4,-3936
   80fa0:	a02bd07a 	srai	r21,r20,1
   80fa4:	2909883a 	add	r4,r5,r4
   80fa8:	25800017 	ldw	r22,0(r4)
   80fac:	25c00117 	ldw	r23,4(r4)
   80fb0:	a00b883a 	mov	r5,r20
   80fb4:	5009883a 	mov	r4,r10
   80fb8:	b00d883a 	mov	r6,r22
   80fbc:	b80f883a 	mov	r7,r23
   80fc0:	0082a7c0 	call	82a7c <__subdf3>
   80fc4:	d9000117 	ldw	r4,4(sp)
   80fc8:	a00b883a 	mov	r5,r20
   80fcc:	b00d883a 	mov	r6,r22
   80fd0:	b80f883a 	mov	r7,r23
   80fd4:	1025883a 	mov	r18,r2
   80fd8:	1827883a 	mov	r19,r3
   80fdc:	0082afc0 	call	82afc <__adddf3>
   80fe0:	0011883a 	mov	r8,zero
   80fe4:	024ffc34 	movhi	r9,16368
   80fe8:	480b883a 	mov	r5,r9
   80fec:	4009883a 	mov	r4,r8
   80ff0:	180f883a 	mov	r7,r3
   80ff4:	100d883a 	mov	r6,r2
   80ff8:	0082f340 	call	82f34 <__divdf3>
   80ffc:	d8c02e15 	stw	r3,184(sp)
   81000:	d8800f15 	stw	r2,60(sp)
   81004:	d8802d15 	stw	r2,180(sp)
   81008:	d8802e17 	ldw	r2,184(sp)
   8100c:	d9800f17 	ldw	r6,60(sp)
   81010:	9009883a 	mov	r4,r18
   81014:	980b883a 	mov	r5,r19
   81018:	100f883a 	mov	r7,r2
   8101c:	dc800b15 	stw	r18,44(sp)
   81020:	dcc00c15 	stw	r19,48(sp)
   81024:	d8801015 	stw	r2,64(sp)
   81028:	0082b700 	call	82b70 <__muldf3>
   8102c:	d8c03015 	stw	r3,192(sp)
   81030:	d9003017 	ldw	r4,192(sp)
   81034:	d8802f15 	stw	r2,188(sp)
   81038:	d8800315 	stw	r2,12(sp)
   8103c:	ad480034 	orhi	r21,r21,8192
   81040:	0005883a 	mov	r2,zero
   81044:	ac2b883a 	add	r21,r21,r16
   81048:	000b883a 	mov	r5,zero
   8104c:	1021883a 	mov	r16,r2
   81050:	2005883a 	mov	r2,r4
   81054:	800d883a 	mov	r6,r16
   81058:	a80f883a 	mov	r7,r21
   8105c:	d9000415 	stw	r4,16(sp)
   81060:	d9002715 	stw	r4,156(sp)
   81064:	d9402615 	stw	r5,152(sp)
   81068:	d9401615 	stw	r5,88(sp)
   8106c:	d9001715 	stw	r4,92(sp)
   81070:	100b883a 	mov	r5,r2
   81074:	0009883a 	mov	r4,zero
   81078:	0082b700 	call	82b70 <__muldf3>
   8107c:	d9000b17 	ldw	r4,44(sp)
   81080:	980b883a 	mov	r5,r19
   81084:	180f883a 	mov	r7,r3
   81088:	100d883a 	mov	r6,r2
   8108c:	0082a7c0 	call	82a7c <__subdf3>
   81090:	8009883a 	mov	r4,r16
   81094:	a80b883a 	mov	r5,r21
   81098:	b80f883a 	mov	r7,r23
   8109c:	b00d883a 	mov	r6,r22
   810a0:	1021883a 	mov	r16,r2
   810a4:	1823883a 	mov	r17,r3
   810a8:	0082a7c0 	call	82a7c <__subdf3>
   810ac:	d9000117 	ldw	r4,4(sp)
   810b0:	a00b883a 	mov	r5,r20
   810b4:	180f883a 	mov	r7,r3
   810b8:	100d883a 	mov	r6,r2
   810bc:	0082a7c0 	call	82a7c <__subdf3>
   810c0:	d9001617 	ldw	r4,88(sp)
   810c4:	d9402717 	ldw	r5,156(sp)
   810c8:	180f883a 	mov	r7,r3
   810cc:	100d883a 	mov	r6,r2
   810d0:	0082b700 	call	82b70 <__muldf3>
   810d4:	180f883a 	mov	r7,r3
   810d8:	880b883a 	mov	r5,r17
   810dc:	8009883a 	mov	r4,r16
   810e0:	100d883a 	mov	r6,r2
   810e4:	0082a7c0 	call	82a7c <__subdf3>
   810e8:	d9000f17 	ldw	r4,60(sp)
   810ec:	d9402e17 	ldw	r5,184(sp)
   810f0:	180f883a 	mov	r7,r3
   810f4:	100d883a 	mov	r6,r2
   810f8:	0082b700 	call	82b70 <__muldf3>
   810fc:	d9000317 	ldw	r4,12(sp)
   81100:	d9403017 	ldw	r5,192(sp)
   81104:	d8803115 	stw	r2,196(sp)
   81108:	200d883a 	mov	r6,r4
   8110c:	280f883a 	mov	r7,r5
   81110:	d8c03215 	stw	r3,200(sp)
   81114:	0082b700 	call	82b70 <__muldf3>
   81118:	1009883a 	mov	r4,r2
   8111c:	180b883a 	mov	r5,r3
   81120:	100d883a 	mov	r6,r2
   81124:	180f883a 	mov	r7,r3
   81128:	1021883a 	mov	r16,r2
   8112c:	1823883a 	mov	r17,r3
   81130:	0082b700 	call	82b70 <__muldf3>
   81134:	02129174 	movhi	r8,19013
   81138:	4213bbc4 	addi	r8,r8,20207
   8113c:	024ff2b4 	movhi	r9,16330
   81140:	4a5f8a04 	addi	r9,r9,32296
   81144:	480f883a 	mov	r7,r9
   81148:	8009883a 	mov	r4,r16
   8114c:	880b883a 	mov	r5,r17
   81150:	400d883a 	mov	r6,r8
   81154:	1029883a 	mov	r20,r2
   81158:	182b883a 	mov	r21,r3
   8115c:	0082b700 	call	82b70 <__muldf3>
   81160:	0224f2b4 	movhi	r8,37834
   81164:	4236d944 	addi	r8,r8,-9371
   81168:	024ff3b4 	movhi	r9,16334
   8116c:	4a619284 	addi	r9,r9,-31158
   81170:	480f883a 	mov	r7,r9
   81174:	400d883a 	mov	r6,r8
   81178:	180b883a 	mov	r5,r3
   8117c:	1009883a 	mov	r4,r2
   81180:	0082afc0 	call	82afc <__adddf3>
   81184:	180f883a 	mov	r7,r3
   81188:	8009883a 	mov	r4,r16
   8118c:	880b883a 	mov	r5,r17
   81190:	100d883a 	mov	r6,r2
   81194:	0082b700 	call	82b70 <__muldf3>
   81198:	022a4774 	movhi	r8,43293
   8119c:	42104044 	addi	r8,r8,16641
   811a0:	024ff474 	movhi	r9,16337
   811a4:	4a5d1804 	addi	r9,r9,29792
   811a8:	480f883a 	mov	r7,r9
   811ac:	400d883a 	mov	r6,r8
   811b0:	180b883a 	mov	r5,r3
   811b4:	1009883a 	mov	r4,r2
   811b8:	0082afc0 	call	82afc <__adddf3>
   811bc:	180f883a 	mov	r7,r3
   811c0:	8009883a 	mov	r4,r16
   811c4:	880b883a 	mov	r5,r17
   811c8:	100d883a 	mov	r6,r2
   811cc:	0082b700 	call	82b70 <__muldf3>
   811d0:	021463f4 	movhi	r8,20879
   811d4:	42099344 	addi	r8,r8,9805
   811d8:	024ff574 	movhi	r9,16341
   811dc:	4a555544 	addi	r9,r9,21845
   811e0:	480f883a 	mov	r7,r9
   811e4:	400d883a 	mov	r6,r8
   811e8:	180b883a 	mov	r5,r3
   811ec:	1009883a 	mov	r4,r2
   811f0:	0082afc0 	call	82afc <__adddf3>
   811f4:	180f883a 	mov	r7,r3
   811f8:	8009883a 	mov	r4,r16
   811fc:	880b883a 	mov	r5,r17
   81200:	100d883a 	mov	r6,r2
   81204:	0082b700 	call	82b70 <__muldf3>
   81208:	0236dc34 	movhi	r8,56176
   8120c:	422affc4 	addi	r8,r8,-21505
   81210:	024ff6f4 	movhi	r9,16347
   81214:	4a5b6d84 	addi	r9,r9,28086
   81218:	480f883a 	mov	r7,r9
   8121c:	400d883a 	mov	r6,r8
   81220:	180b883a 	mov	r5,r3
   81224:	1009883a 	mov	r4,r2
   81228:	0082afc0 	call	82afc <__adddf3>
   8122c:	180f883a 	mov	r7,r3
   81230:	8009883a 	mov	r4,r16
   81234:	880b883a 	mov	r5,r17
   81238:	100d883a 	mov	r6,r2
   8123c:	0082b700 	call	82b70 <__muldf3>
   81240:	020cccf4 	movhi	r8,13107
   81244:	420cc0c4 	addi	r8,r8,13059
   81248:	024ff8f4 	movhi	r9,16355
   8124c:	4a4cccc4 	addi	r9,r9,13107
   81250:	480f883a 	mov	r7,r9
   81254:	400d883a 	mov	r6,r8
   81258:	180b883a 	mov	r5,r3
   8125c:	1009883a 	mov	r4,r2
   81260:	0082afc0 	call	82afc <__adddf3>
   81264:	180f883a 	mov	r7,r3
   81268:	a80b883a 	mov	r5,r21
   8126c:	a009883a 	mov	r4,r20
   81270:	100d883a 	mov	r6,r2
   81274:	0082b700 	call	82b70 <__muldf3>
   81278:	d9000317 	ldw	r4,12(sp)
   8127c:	d9403017 	ldw	r5,192(sp)
   81280:	d9801617 	ldw	r6,88(sp)
   81284:	d9c02717 	ldw	r7,156(sp)
   81288:	1021883a 	mov	r16,r2
   8128c:	1823883a 	mov	r17,r3
   81290:	0082afc0 	call	82afc <__adddf3>
   81294:	d9003117 	ldw	r4,196(sp)
   81298:	d9403217 	ldw	r5,200(sp)
   8129c:	180f883a 	mov	r7,r3
   812a0:	100d883a 	mov	r6,r2
   812a4:	d9001415 	stw	r4,80(sp)
   812a8:	d9401515 	stw	r5,84(sp)
   812ac:	0082b700 	call	82b70 <__muldf3>
   812b0:	180f883a 	mov	r7,r3
   812b4:	8009883a 	mov	r4,r16
   812b8:	880b883a 	mov	r5,r17
   812bc:	100d883a 	mov	r6,r2
   812c0:	0082afc0 	call	82afc <__adddf3>
   812c4:	d9001617 	ldw	r4,88(sp)
   812c8:	d9402717 	ldw	r5,156(sp)
   812cc:	d8803315 	stw	r2,204(sp)
   812d0:	200d883a 	mov	r6,r4
   812d4:	280f883a 	mov	r7,r5
   812d8:	d8c03415 	stw	r3,208(sp)
   812dc:	0082b700 	call	82b70 <__muldf3>
   812e0:	182f883a 	mov	r23,r3
   812e4:	05500234 	movhi	r21,16392
   812e8:	0029883a 	mov	r20,zero
   812ec:	b80b883a 	mov	r5,r23
   812f0:	a00d883a 	mov	r6,r20
   812f4:	a80f883a 	mov	r7,r21
   812f8:	1009883a 	mov	r4,r2
   812fc:	d8800715 	stw	r2,28(sp)
   81300:	d8c00815 	stw	r3,32(sp)
   81304:	0082afc0 	call	82afc <__adddf3>
   81308:	d9003317 	ldw	r4,204(sp)
   8130c:	d9403417 	ldw	r5,208(sp)
   81310:	180f883a 	mov	r7,r3
   81314:	100d883a 	mov	r6,r2
   81318:	d9000515 	stw	r4,20(sp)
   8131c:	d9400615 	stw	r5,24(sp)
   81320:	0082afc0 	call	82afc <__adddf3>
   81324:	d9001617 	ldw	r4,88(sp)
   81328:	d9402717 	ldw	r5,156(sp)
   8132c:	0025883a 	mov	r18,zero
   81330:	900d883a 	mov	r6,r18
   81334:	180f883a 	mov	r7,r3
   81338:	1823883a 	mov	r17,r3
   8133c:	0082b700 	call	82b70 <__muldf3>
   81340:	d9001417 	ldw	r4,80(sp)
   81344:	d9403217 	ldw	r5,200(sp)
   81348:	880f883a 	mov	r7,r17
   8134c:	900d883a 	mov	r6,r18
   81350:	d8803515 	stw	r2,212(sp)
   81354:	d8c03615 	stw	r3,216(sp)
   81358:	0082b700 	call	82b70 <__muldf3>
   8135c:	a80f883a 	mov	r7,r21
   81360:	880b883a 	mov	r5,r17
   81364:	000d883a 	mov	r6,zero
   81368:	9009883a 	mov	r4,r18
   8136c:	1021883a 	mov	r16,r2
   81370:	1823883a 	mov	r17,r3
   81374:	0082a7c0 	call	82a7c <__subdf3>
   81378:	d9800717 	ldw	r6,28(sp)
   8137c:	b80f883a 	mov	r7,r23
   81380:	180b883a 	mov	r5,r3
   81384:	1009883a 	mov	r4,r2
   81388:	0082a7c0 	call	82a7c <__subdf3>
   8138c:	d9000517 	ldw	r4,20(sp)
   81390:	d9403417 	ldw	r5,208(sp)
   81394:	180f883a 	mov	r7,r3
   81398:	100d883a 	mov	r6,r2
   8139c:	0082a7c0 	call	82a7c <__subdf3>
   813a0:	d9000317 	ldw	r4,12(sp)
   813a4:	d9403017 	ldw	r5,192(sp)
   813a8:	180f883a 	mov	r7,r3
   813ac:	100d883a 	mov	r6,r2
   813b0:	0082b700 	call	82b70 <__muldf3>
   813b4:	180f883a 	mov	r7,r3
   813b8:	880b883a 	mov	r5,r17
   813bc:	8009883a 	mov	r4,r16
   813c0:	100d883a 	mov	r6,r2
   813c4:	0082afc0 	call	82afc <__adddf3>
   813c8:	102d883a 	mov	r22,r2
   813cc:	d9003617 	ldw	r4,216(sp)
   813d0:	d8803517 	ldw	r2,212(sp)
   813d4:	d9403617 	ldw	r5,216(sp)
   813d8:	182f883a 	mov	r23,r3
   813dc:	b00d883a 	mov	r6,r22
   813e0:	b80f883a 	mov	r7,r23
   813e4:	d9000a15 	stw	r4,40(sp)
   813e8:	1009883a 	mov	r4,r2
   813ec:	054ffbf4 	movhi	r21,16367
   813f0:	ad71c244 	addi	r21,r21,-14583
   813f4:	dd800d15 	stw	r22,52(sp)
   813f8:	ddc00e15 	stw	r23,56(sp)
   813fc:	05380034 	movhi	r20,57344
   81400:	d8800915 	stw	r2,36(sp)
   81404:	0082afc0 	call	82afc <__adddf3>
   81408:	180b883a 	mov	r5,r3
   8140c:	a00d883a 	mov	r6,r20
   81410:	a80f883a 	mov	r7,r21
   81414:	9009883a 	mov	r4,r18
   81418:	1823883a 	mov	r17,r3
   8141c:	0082b700 	call	82b70 <__muldf3>
   81420:	020516f4 	movhi	r8,5211
   81424:	42007d44 	addi	r8,r8,501
   81428:	026f8fb4 	movhi	r9,48702
   8142c:	4a4bf804 	addi	r9,r9,12256
   81430:	480f883a 	mov	r7,r9
   81434:	400d883a 	mov	r6,r8
   81438:	880b883a 	mov	r5,r17
   8143c:	9009883a 	mov	r4,r18
   81440:	d8803715 	stw	r2,220(sp)
   81444:	d8c03815 	stw	r3,224(sp)
   81448:	0082b700 	call	82b70 <__muldf3>
   8144c:	d9800917 	ldw	r6,36(sp)
   81450:	d9c03617 	ldw	r7,216(sp)
   81454:	880b883a 	mov	r5,r17
   81458:	9009883a 	mov	r4,r18
   8145c:	1021883a 	mov	r16,r2
   81460:	1823883a 	mov	r17,r3
   81464:	0082a7c0 	call	82a7c <__subdf3>
   81468:	d9000d17 	ldw	r4,52(sp)
   8146c:	b80b883a 	mov	r5,r23
   81470:	180f883a 	mov	r7,r3
   81474:	100d883a 	mov	r6,r2
   81478:	0082a7c0 	call	82a7c <__subdf3>
   8147c:	180b883a 	mov	r5,r3
   81480:	a80f883a 	mov	r7,r21
   81484:	01b70eb4 	movhi	r6,56378
   81488:	3180ff44 	addi	r6,r6,1021
   8148c:	1009883a 	mov	r4,r2
   81490:	0082b700 	call	82b70 <__muldf3>
   81494:	180f883a 	mov	r7,r3
   81498:	880b883a 	mov	r5,r17
   8149c:	8009883a 	mov	r4,r16
   814a0:	100d883a 	mov	r6,r2
   814a4:	0082afc0 	call	82afc <__adddf3>
   814a8:	d9402c17 	ldw	r5,176(sp)
   814ac:	01000274 	movhi	r4,9
   814b0:	213c2c04 	addi	r4,r4,-3920
   814b4:	2909883a 	add	r4,r5,r4
   814b8:	22400117 	ldw	r9,4(r4)
   814bc:	22000017 	ldw	r8,0(r4)
   814c0:	180b883a 	mov	r5,r3
   814c4:	480f883a 	mov	r7,r9
   814c8:	400d883a 	mov	r6,r8
   814cc:	1009883a 	mov	r4,r2
   814d0:	0082afc0 	call	82afc <__adddf3>
   814d4:	d9000017 	ldw	r4,0(sp)
   814d8:	182f883a 	mov	r23,r3
   814dc:	102d883a 	mov	r22,r2
   814e0:	00834340 	call	83434 <__floatsidf>
   814e4:	d9402c17 	ldw	r5,176(sp)
   814e8:	01000274 	movhi	r4,9
   814ec:	213c3004 	addi	r4,r4,-3904
   814f0:	b00d883a 	mov	r6,r22
   814f4:	2911883a 	add	r8,r5,r4
   814f8:	d9003717 	ldw	r4,220(sp)
   814fc:	d9403817 	ldw	r5,224(sp)
   81500:	45000017 	ldw	r20,0(r8)
   81504:	d9002315 	stw	r4,140(sp)
   81508:	d9003817 	ldw	r4,224(sp)
   8150c:	45400117 	ldw	r21,4(r8)
   81510:	b80f883a 	mov	r7,r23
   81514:	d9002415 	stw	r4,144(sp)
   81518:	d9002317 	ldw	r4,140(sp)
   8151c:	1021883a 	mov	r16,r2
   81520:	1823883a 	mov	r17,r3
   81524:	dd802115 	stw	r22,132(sp)
   81528:	ddc02215 	stw	r23,136(sp)
   8152c:	0082afc0 	call	82afc <__adddf3>
   81530:	180b883a 	mov	r5,r3
   81534:	1009883a 	mov	r4,r2
   81538:	a00d883a 	mov	r6,r20
   8153c:	a80f883a 	mov	r7,r21
   81540:	0082afc0 	call	82afc <__adddf3>
   81544:	180f883a 	mov	r7,r3
   81548:	8009883a 	mov	r4,r16
   8154c:	880b883a 	mov	r5,r17
   81550:	100d883a 	mov	r6,r2
   81554:	0082afc0 	call	82afc <__adddf3>
   81558:	180b883a 	mov	r5,r3
   8155c:	0009883a 	mov	r4,zero
   81560:	800d883a 	mov	r6,r16
   81564:	880f883a 	mov	r7,r17
   81568:	d9001b15 	stw	r4,108(sp)
   8156c:	d8c01c15 	stw	r3,112(sp)
   81570:	0082a7c0 	call	82a7c <__subdf3>
   81574:	180b883a 	mov	r5,r3
   81578:	a80f883a 	mov	r7,r21
   8157c:	1009883a 	mov	r4,r2
   81580:	a00d883a 	mov	r6,r20
   81584:	0082a7c0 	call	82a7c <__subdf3>
   81588:	d9802317 	ldw	r6,140(sp)
   8158c:	d9c03817 	ldw	r7,224(sp)
   81590:	180b883a 	mov	r5,r3
   81594:	1009883a 	mov	r4,r2
   81598:	0082a7c0 	call	82a7c <__subdf3>
   8159c:	d9002117 	ldw	r4,132(sp)
   815a0:	1011883a 	mov	r8,r2
   815a4:	1813883a 	mov	r9,r3
   815a8:	b80b883a 	mov	r5,r23
   815ac:	480f883a 	mov	r7,r9
   815b0:	400d883a 	mov	r6,r8
   815b4:	0082a7c0 	call	82a7c <__subdf3>
   815b8:	1823883a 	mov	r17,r3
   815bc:	d8c02517 	ldw	r3,148(sp)
   815c0:	1021883a 	mov	r16,r2
   815c4:	e0bfffc4 	addi	r2,fp,-1
   815c8:	1884b03a 	or	r2,r3,r2
   815cc:	1000731e 	bne	r2,zero,8179c <__ieee754_pow+0xb88>
   815d0:	0009883a 	mov	r4,zero
   815d4:	016ffc34 	movhi	r5,49136
   815d8:	d9001915 	stw	r4,100(sp)
   815dc:	d9401a15 	stw	r5,104(sp)
   815e0:	d9402917 	ldw	r5,164(sp)
   815e4:	d9002817 	ldw	r4,160(sp)
   815e8:	0029883a 	mov	r20,zero
   815ec:	a00d883a 	mov	r6,r20
   815f0:	280f883a 	mov	r7,r5
   815f4:	2827883a 	mov	r19,r5
   815f8:	0082a7c0 	call	82a7c <__subdf3>
   815fc:	d9001b17 	ldw	r4,108(sp)
   81600:	d9401c17 	ldw	r5,112(sp)
   81604:	180f883a 	mov	r7,r3
   81608:	100d883a 	mov	r6,r2
   8160c:	0082b700 	call	82b70 <__muldf3>
   81610:	d9c02917 	ldw	r7,164(sp)
   81614:	d9802817 	ldw	r6,160(sp)
   81618:	880b883a 	mov	r5,r17
   8161c:	8009883a 	mov	r4,r16
   81620:	1823883a 	mov	r17,r3
   81624:	1021883a 	mov	r16,r2
   81628:	0082b700 	call	82b70 <__muldf3>
   8162c:	180f883a 	mov	r7,r3
   81630:	880b883a 	mov	r5,r17
   81634:	8009883a 	mov	r4,r16
   81638:	100d883a 	mov	r6,r2
   8163c:	0082afc0 	call	82afc <__adddf3>
   81640:	d9401c17 	ldw	r5,112(sp)
   81644:	d9001b17 	ldw	r4,108(sp)
   81648:	a00d883a 	mov	r6,r20
   8164c:	980f883a 	mov	r7,r19
   81650:	1029883a 	mov	r20,r2
   81654:	182b883a 	mov	r21,r3
   81658:	0082b700 	call	82b70 <__muldf3>
   8165c:	1025883a 	mov	r18,r2
   81660:	1827883a 	mov	r19,r3
   81664:	a009883a 	mov	r4,r20
   81668:	a80b883a 	mov	r5,r21
   8166c:	900d883a 	mov	r6,r18
   81670:	980f883a 	mov	r7,r19
   81674:	dd001d15 	stw	r20,116(sp)
   81678:	dc801f15 	stw	r18,124(sp)
   8167c:	dd401e15 	stw	r21,120(sp)
   81680:	dcc02015 	stw	r19,128(sp)
   81684:	0082afc0 	call	82afc <__adddf3>
   81688:	1823883a 	mov	r17,r3
   8168c:	01102434 	movhi	r4,16528
   81690:	213fffc4 	addi	r4,r4,-1
   81694:	1021883a 	mov	r16,r2
   81698:	182f883a 	mov	r23,r3
   8169c:	dc401815 	stw	r17,96(sp)
   816a0:	100b883a 	mov	r5,r2
   816a4:	20c02c0e 	bge	r4,r3,81758 <__ieee754_pow+0xb44>
   816a8:	00afdc34 	movhi	r2,49008
   816ac:	1885883a 	add	r2,r3,r2
   816b0:	2884b03a 	or	r2,r5,r2
   816b4:	1001a626 	beq	r2,zero,81d50 <__ieee754_pow+0x113c>
   816b8:	04220034 	movhi	r16,34816
   816bc:	841d6704 	addi	r16,r16,30108
   816c0:	045f8e34 	movhi	r17,32312
   816c4:	8c790f04 	addi	r17,r17,-7108
   816c8:	d9401a17 	ldw	r5,104(sp)
   816cc:	d9001917 	ldw	r4,100(sp)
   816d0:	800d883a 	mov	r6,r16
   816d4:	880f883a 	mov	r7,r17
   816d8:	0082b700 	call	82b70 <__muldf3>
   816dc:	180b883a 	mov	r5,r3
   816e0:	800d883a 	mov	r6,r16
   816e4:	880f883a 	mov	r7,r17
   816e8:	1009883a 	mov	r4,r2
   816ec:	0082b700 	call	82b70 <__muldf3>
   816f0:	003dc306 	br	80e00 <__ieee754_pow+0x1ec>
   816f4:	00b00434 	movhi	r2,49168
   816f8:	9085883a 	add	r2,r18,r2
   816fc:	e084b03a 	or	r2,fp,r2
   81700:	1000af1e 	bne	r2,zero,819c0 <__ieee754_pow+0xdac>
   81704:	480f883a 	mov	r7,r9
   81708:	4009883a 	mov	r4,r8
   8170c:	480b883a 	mov	r5,r9
   81710:	400d883a 	mov	r6,r8
   81714:	003db406 	br	80de8 <__ieee754_pow+0x1d4>
   81718:	00bffc34 	movhi	r2,65520
   8171c:	18ff0084 	addi	r3,r3,-1022
   81720:	a0a9883a 	add	r20,r20,r2
   81724:	d8c00015 	stw	r3,0(sp)
   81728:	0009883a 	mov	r4,zero
   8172c:	04000234 	movhi	r16,8
   81730:	003e1406 	br	80f84 <__ieee754_pow+0x370>
   81734:	a80f883a 	mov	r7,r21
   81738:	a009883a 	mov	r4,r20
   8173c:	a80b883a 	mov	r5,r21
   81740:	a00d883a 	mov	r6,r20
   81744:	0082b700 	call	82b70 <__muldf3>
   81748:	180b883a 	mov	r5,r3
   8174c:	d8802815 	stw	r2,160(sp)
   81750:	d9402915 	stw	r5,164(sp)
   81754:	003d5606 	br	80cb0 <__ieee754_pow+0x9c>
   81758:	d9001817 	ldw	r4,96(sp)
   8175c:	00a00034 	movhi	r2,32768
   81760:	10bfffc4 	addi	r2,r2,-1
   81764:	00d02474 	movhi	r3,16529
   81768:	18f2ffc4 	addi	r3,r3,-13313
   8176c:	20b8703a 	and	fp,r4,r2
   81770:	1f009d0e 	bge	r3,fp,819e8 <__ieee754_pow+0xdd4>
   81774:	008fdbf4 	movhi	r2,16239
   81778:	108d0004 	addi	r2,r2,13312
   8177c:	2085883a 	add	r2,r4,r2
   81780:	1144b03a 	or	r2,r2,r5
   81784:	1001c626 	beq	r2,zero,81ea0 <__ieee754_pow+0x128c>
   81788:	0430be74 	movhi	r16,49913
   8178c:	843cd644 	addi	r16,r16,-3239
   81790:	04406974 	movhi	r17,421
   81794:	8c5b87c4 	addi	r17,r17,28191
   81798:	003fcb06 	br	816c8 <__ieee754_pow+0xab4>
   8179c:	0005883a 	mov	r2,zero
   817a0:	00cffc34 	movhi	r3,16368
   817a4:	d8801915 	stw	r2,100(sp)
   817a8:	d8c01a15 	stw	r3,104(sp)
   817ac:	003f8c06 	br	815e0 <__ieee754_pow+0x9cc>
   817b0:	0005883a 	mov	r2,zero
   817b4:	00cffc34 	movhi	r3,16368
   817b8:	180b883a 	mov	r5,r3
   817bc:	580f883a 	mov	r7,r11
   817c0:	1009883a 	mov	r4,r2
   817c4:	500d883a 	mov	r6,r10
   817c8:	0082f340 	call	82f34 <__divdf3>
   817cc:	1011883a 	mov	r8,r2
   817d0:	1813883a 	mov	r9,r3
   817d4:	003d9506 	br	80e2c <__ieee754_pow+0x218>
   817d8:	008ffc34 	movhi	r2,16368
   817dc:	10bfff84 	addi	r2,r2,-2
   817e0:	14bdbb0e 	bge	r2,r18,80ed0 <__ieee754_pow+0x2bc>
   817e4:	008ffc34 	movhi	r2,16368
   817e8:	14bdae16 	blt	r2,r18,80ea4 <__ieee754_pow+0x290>
   817ec:	580b883a 	mov	r5,r11
   817f0:	5009883a 	mov	r4,r10
   817f4:	000d883a 	mov	r6,zero
   817f8:	100f883a 	mov	r7,r2
   817fc:	0082a7c0 	call	82a7c <__subdf3>
   81800:	1021883a 	mov	r16,r2
   81804:	1823883a 	mov	r17,r3
   81808:	00980034 	movhi	r2,24576
   8180c:	00cffdf4 	movhi	r3,16375
   81810:	18c551c4 	addi	r3,r3,5447
   81814:	8009883a 	mov	r4,r16
   81818:	880b883a 	mov	r5,r17
   8181c:	180f883a 	mov	r7,r3
   81820:	100d883a 	mov	r6,r2
   81824:	0082b700 	call	82b70 <__muldf3>
   81828:	023e17b4 	movhi	r8,63582
   8182c:	4237d104 	addi	r8,r8,-8380
   81830:	024f9574 	movhi	r9,15957
   81834:	4a6b82c4 	addi	r9,r9,-20981
   81838:	480f883a 	mov	r7,r9
   8183c:	400d883a 	mov	r6,r8
   81840:	8009883a 	mov	r4,r16
   81844:	880b883a 	mov	r5,r17
   81848:	102d883a 	mov	r22,r2
   8184c:	182f883a 	mov	r23,r3
   81850:	0082b700 	call	82b70 <__muldf3>
   81854:	8009883a 	mov	r4,r16
   81858:	880b883a 	mov	r5,r17
   8185c:	800d883a 	mov	r6,r16
   81860:	880f883a 	mov	r7,r17
   81864:	d8802a15 	stw	r2,168(sp)
   81868:	d8c02b15 	stw	r3,172(sp)
   8186c:	0082b700 	call	82b70 <__muldf3>
   81870:	0011883a 	mov	r8,zero
   81874:	026ff434 	movhi	r9,49104
   81878:	480f883a 	mov	r7,r9
   8187c:	8009883a 	mov	r4,r16
   81880:	880b883a 	mov	r5,r17
   81884:	400d883a 	mov	r6,r8
   81888:	1029883a 	mov	r20,r2
   8188c:	182b883a 	mov	r21,r3
   81890:	0082b700 	call	82b70 <__muldf3>
   81894:	02155574 	movhi	r8,21845
   81898:	42155544 	addi	r8,r8,21845
   8189c:	024ff574 	movhi	r9,16341
   818a0:	4a555544 	addi	r9,r9,21845
   818a4:	480f883a 	mov	r7,r9
   818a8:	400d883a 	mov	r6,r8
   818ac:	180b883a 	mov	r5,r3
   818b0:	1009883a 	mov	r4,r2
   818b4:	0082afc0 	call	82afc <__adddf3>
   818b8:	180f883a 	mov	r7,r3
   818bc:	8009883a 	mov	r4,r16
   818c0:	880b883a 	mov	r5,r17
   818c4:	100d883a 	mov	r6,r2
   818c8:	0082b700 	call	82b70 <__muldf3>
   818cc:	0011883a 	mov	r8,zero
   818d0:	024ff834 	movhi	r9,16352
   818d4:	480b883a 	mov	r5,r9
   818d8:	4009883a 	mov	r4,r8
   818dc:	180f883a 	mov	r7,r3
   818e0:	100d883a 	mov	r6,r2
   818e4:	0082a7c0 	call	82a7c <__subdf3>
   818e8:	180f883a 	mov	r7,r3
   818ec:	a80b883a 	mov	r5,r21
   818f0:	a009883a 	mov	r4,r20
   818f4:	100d883a 	mov	r6,r2
   818f8:	0082b700 	call	82b70 <__muldf3>
   818fc:	02194b34 	movhi	r8,25900
   81900:	4220bf84 	addi	r8,r8,-32002
   81904:	026ffdf4 	movhi	r9,49143
   81908:	4a4551c4 	addi	r9,r9,5447
   8190c:	480f883a 	mov	r7,r9
   81910:	400d883a 	mov	r6,r8
   81914:	180b883a 	mov	r5,r3
   81918:	1009883a 	mov	r4,r2
   8191c:	0082b700 	call	82b70 <__muldf3>
   81920:	d9402b17 	ldw	r5,172(sp)
   81924:	d9002a17 	ldw	r4,168(sp)
   81928:	180f883a 	mov	r7,r3
   8192c:	100d883a 	mov	r6,r2
   81930:	0082afc0 	call	82afc <__adddf3>
   81934:	100d883a 	mov	r6,r2
   81938:	b009883a 	mov	r4,r22
   8193c:	b80b883a 	mov	r5,r23
   81940:	180f883a 	mov	r7,r3
   81944:	1021883a 	mov	r16,r2
   81948:	1823883a 	mov	r17,r3
   8194c:	0082afc0 	call	82afc <__adddf3>
   81950:	180b883a 	mov	r5,r3
   81954:	0009883a 	mov	r4,zero
   81958:	b00d883a 	mov	r6,r22
   8195c:	b80f883a 	mov	r7,r23
   81960:	d9001b15 	stw	r4,108(sp)
   81964:	d8c01c15 	stw	r3,112(sp)
   81968:	0082a7c0 	call	82a7c <__subdf3>
   8196c:	1011883a 	mov	r8,r2
   81970:	1813883a 	mov	r9,r3
   81974:	8009883a 	mov	r4,r16
   81978:	880b883a 	mov	r5,r17
   8197c:	003f0b06 	br	815ac <__ieee754_pow+0x998>
   81980:	0005883a 	mov	r2,zero
   81984:	00d0d034 	movhi	r3,17216
   81988:	580b883a 	mov	r5,r11
   8198c:	5009883a 	mov	r4,r10
   81990:	180f883a 	mov	r7,r3
   81994:	100d883a 	mov	r6,r2
   81998:	0082b700 	call	82b70 <__muldf3>
   8199c:	1015883a 	mov	r10,r2
   819a0:	1825883a 	mov	r18,r3
   819a4:	017ff2c4 	movi	r5,-53
   819a8:	003d6606 	br	80f44 <__ieee754_pow+0x330>
   819ac:	b03d300e 	bge	r22,zero,80e70 <__ieee754_pow+0x25c>
   819b0:	d9402917 	ldw	r5,164(sp)
   819b4:	28e0003c 	xorhi	r3,r5,32768
   819b8:	d8c02915 	stw	r3,164(sp)
   819bc:	003cbc06 	br	80cb0 <__ieee754_pow+0x9c>
   819c0:	00800044 	movi	r2,1
   819c4:	e0bd1a1e 	bne	fp,r2,80e30 <__ieee754_pow+0x21c>
   819c8:	48e0003c 	xorhi	r3,r9,32768
   819cc:	da002815 	stw	r8,160(sp)
   819d0:	d8c02915 	stw	r3,164(sp)
   819d4:	003cb606 	br	80cb0 <__ieee754_pow+0x9c>
   819d8:	d9001817 	ldw	r4,96(sp)
   819dc:	00a00034 	movhi	r2,32768
   819e0:	10bfffc4 	addi	r2,r2,-1
   819e4:	20b8703a 	and	fp,r4,r2
   819e8:	008ff834 	movhi	r2,16352
   819ec:	1700fc16 	blt	r2,fp,81de0 <__ieee754_pow+0x11cc>
   819f0:	0039883a 	mov	fp,zero
   819f4:	d8001315 	stw	zero,76(sp)
   819f8:	0025883a 	mov	r18,zero
   819fc:	0005883a 	mov	r2,zero
   81a00:	00cff9b4 	movhi	r3,16358
   81a04:	18cb90c4 	addi	r3,r3,11843
   81a08:	9009883a 	mov	r4,r18
   81a0c:	b80b883a 	mov	r5,r23
   81a10:	180f883a 	mov	r7,r3
   81a14:	100d883a 	mov	r6,r2
   81a18:	0082b700 	call	82b70 <__muldf3>
   81a1c:	d9c02017 	ldw	r7,128(sp)
   81a20:	d9801f17 	ldw	r6,124(sp)
   81a24:	9009883a 	mov	r4,r18
   81a28:	b80b883a 	mov	r5,r23
   81a2c:	b823883a 	mov	r17,r23
   81a30:	102d883a 	mov	r22,r2
   81a34:	182f883a 	mov	r23,r3
   81a38:	0082a7c0 	call	82a7c <__subdf3>
   81a3c:	d9401e17 	ldw	r5,120(sp)
   81a40:	d9001d17 	ldw	r4,116(sp)
   81a44:	180f883a 	mov	r7,r3
   81a48:	100d883a 	mov	r6,r2
   81a4c:	0082a7c0 	call	82a7c <__subdf3>
   81a50:	023fbeb4 	movhi	r8,65274
   81a54:	420e7bc4 	addi	r8,r8,14831
   81a58:	024ff9b4 	movhi	r9,16358
   81a5c:	4a4b9084 	addi	r9,r9,11842
   81a60:	480f883a 	mov	r7,r9
   81a64:	400d883a 	mov	r6,r8
   81a68:	180b883a 	mov	r5,r3
   81a6c:	1009883a 	mov	r4,r2
   81a70:	0082b700 	call	82b70 <__muldf3>
   81a74:	02032a34 	movhi	r8,3240
   81a78:	421b0e44 	addi	r8,r8,27705
   81a7c:	026f8834 	movhi	r9,48672
   81a80:	4a571844 	addi	r9,r9,23649
   81a84:	480f883a 	mov	r7,r9
   81a88:	400d883a 	mov	r6,r8
   81a8c:	9009883a 	mov	r4,r18
   81a90:	880b883a 	mov	r5,r17
   81a94:	1021883a 	mov	r16,r2
   81a98:	1823883a 	mov	r17,r3
   81a9c:	0082b700 	call	82b70 <__muldf3>
   81aa0:	180f883a 	mov	r7,r3
   81aa4:	880b883a 	mov	r5,r17
   81aa8:	8009883a 	mov	r4,r16
   81aac:	100d883a 	mov	r6,r2
   81ab0:	0082afc0 	call	82afc <__adddf3>
   81ab4:	100d883a 	mov	r6,r2
   81ab8:	b009883a 	mov	r4,r22
   81abc:	b80b883a 	mov	r5,r23
   81ac0:	180f883a 	mov	r7,r3
   81ac4:	1021883a 	mov	r16,r2
   81ac8:	1823883a 	mov	r17,r3
   81acc:	0082afc0 	call	82afc <__adddf3>
   81ad0:	1009883a 	mov	r4,r2
   81ad4:	180b883a 	mov	r5,r3
   81ad8:	b00d883a 	mov	r6,r22
   81adc:	b80f883a 	mov	r7,r23
   81ae0:	d8803915 	stw	r2,228(sp)
   81ae4:	d8c03a15 	stw	r3,232(sp)
   81ae8:	d8801115 	stw	r2,68(sp)
   81aec:	d8c01215 	stw	r3,72(sp)
   81af0:	0082a7c0 	call	82a7c <__subdf3>
   81af4:	180f883a 	mov	r7,r3
   81af8:	8009883a 	mov	r4,r16
   81afc:	880b883a 	mov	r5,r17
   81b00:	100d883a 	mov	r6,r2
   81b04:	0082a7c0 	call	82a7c <__subdf3>
   81b08:	d9001117 	ldw	r4,68(sp)
   81b0c:	d9403a17 	ldw	r5,232(sp)
   81b10:	1029883a 	mov	r20,r2
   81b14:	200d883a 	mov	r6,r4
   81b18:	280f883a 	mov	r7,r5
   81b1c:	182b883a 	mov	r21,r3
   81b20:	0082b700 	call	82b70 <__muldf3>
   81b24:	1021883a 	mov	r16,r2
   81b28:	1823883a 	mov	r17,r3
   81b2c:	009caff4 	movhi	r2,29375
   81b30:	10a93404 	addi	r2,r2,-23344
   81b34:	00cf99b4 	movhi	r3,15974
   81b38:	18cdda44 	addi	r3,r3,14185
   81b3c:	8009883a 	mov	r4,r16
   81b40:	880b883a 	mov	r5,r17
   81b44:	180f883a 	mov	r7,r3
   81b48:	100d883a 	mov	r6,r2
   81b4c:	0082b700 	call	82b70 <__muldf3>
   81b50:	023174b4 	movhi	r8,50642
   81b54:	421afc44 	addi	r8,r8,27633
   81b58:	024faf34 	movhi	r9,16060
   81b5c:	4a6f5044 	addi	r9,r9,-17087
   81b60:	480f883a 	mov	r7,r9
   81b64:	400d883a 	mov	r6,r8
   81b68:	180b883a 	mov	r5,r3
   81b6c:	1009883a 	mov	r4,r2
   81b70:	0082a7c0 	call	82a7c <__subdf3>
   81b74:	180f883a 	mov	r7,r3
   81b78:	8009883a 	mov	r4,r16
   81b7c:	880b883a 	mov	r5,r17
   81b80:	100d883a 	mov	r6,r2
   81b84:	0082b700 	call	82b70 <__muldf3>
   81b88:	022bc9b4 	movhi	r8,44838
   81b8c:	42378b04 	addi	r8,r8,-8660
   81b90:	024fc474 	movhi	r9,16145
   81b94:	4a559a84 	addi	r9,r9,22122
   81b98:	480f883a 	mov	r7,r9
   81b9c:	400d883a 	mov	r6,r8
   81ba0:	180b883a 	mov	r5,r3
   81ba4:	1009883a 	mov	r4,r2
   81ba8:	0082afc0 	call	82afc <__adddf3>
   81bac:	180f883a 	mov	r7,r3
   81bb0:	8009883a 	mov	r4,r16
   81bb4:	880b883a 	mov	r5,r17
   81bb8:	100d883a 	mov	r6,r2
   81bbc:	0082b700 	call	82b70 <__muldf3>
   81bc0:	0205aff4 	movhi	r8,5823
   81bc4:	422f64c4 	addi	r8,r8,-17005
   81bc8:	024fd9f4 	movhi	r9,16231
   81bcc:	4a705b04 	addi	r9,r9,-16020
   81bd0:	480f883a 	mov	r7,r9
   81bd4:	400d883a 	mov	r6,r8
   81bd8:	180b883a 	mov	r5,r3
   81bdc:	1009883a 	mov	r4,r2
   81be0:	0082a7c0 	call	82a7c <__subdf3>
   81be4:	180f883a 	mov	r7,r3
   81be8:	8009883a 	mov	r4,r16
   81bec:	880b883a 	mov	r5,r17
   81bf0:	100d883a 	mov	r6,r2
   81bf4:	0082b700 	call	82b70 <__muldf3>
   81bf8:	02155574 	movhi	r8,21845
   81bfc:	42154f84 	addi	r8,r8,21822
   81c00:	024ff174 	movhi	r9,16325
   81c04:	4a555544 	addi	r9,r9,21845
   81c08:	480f883a 	mov	r7,r9
   81c0c:	400d883a 	mov	r6,r8
   81c10:	180b883a 	mov	r5,r3
   81c14:	1009883a 	mov	r4,r2
   81c18:	0082afc0 	call	82afc <__adddf3>
   81c1c:	180f883a 	mov	r7,r3
   81c20:	8009883a 	mov	r4,r16
   81c24:	880b883a 	mov	r5,r17
   81c28:	100d883a 	mov	r6,r2
   81c2c:	0082b700 	call	82b70 <__muldf3>
   81c30:	d9001117 	ldw	r4,68(sp)
   81c34:	d9403a17 	ldw	r5,232(sp)
   81c38:	180f883a 	mov	r7,r3
   81c3c:	100d883a 	mov	r6,r2
   81c40:	0082a7c0 	call	82a7c <__subdf3>
   81c44:	d9001117 	ldw	r4,68(sp)
   81c48:	d9403a17 	ldw	r5,232(sp)
   81c4c:	100d883a 	mov	r6,r2
   81c50:	180f883a 	mov	r7,r3
   81c54:	1021883a 	mov	r16,r2
   81c58:	1823883a 	mov	r17,r3
   81c5c:	0082b700 	call	82b70 <__muldf3>
   81c60:	0011883a 	mov	r8,zero
   81c64:	02500034 	movhi	r9,16384
   81c68:	480f883a 	mov	r7,r9
   81c6c:	400d883a 	mov	r6,r8
   81c70:	8009883a 	mov	r4,r16
   81c74:	880b883a 	mov	r5,r17
   81c78:	1021883a 	mov	r16,r2
   81c7c:	1823883a 	mov	r17,r3
   81c80:	0082a7c0 	call	82a7c <__subdf3>
   81c84:	180f883a 	mov	r7,r3
   81c88:	880b883a 	mov	r5,r17
   81c8c:	8009883a 	mov	r4,r16
   81c90:	100d883a 	mov	r6,r2
   81c94:	0082f340 	call	82f34 <__divdf3>
   81c98:	d9001117 	ldw	r4,68(sp)
   81c9c:	d9403a17 	ldw	r5,232(sp)
   81ca0:	a00d883a 	mov	r6,r20
   81ca4:	a80f883a 	mov	r7,r21
   81ca8:	1025883a 	mov	r18,r2
   81cac:	1827883a 	mov	r19,r3
   81cb0:	0082b700 	call	82b70 <__muldf3>
   81cb4:	180f883a 	mov	r7,r3
   81cb8:	a009883a 	mov	r4,r20
   81cbc:	a80b883a 	mov	r5,r21
   81cc0:	100d883a 	mov	r6,r2
   81cc4:	0082afc0 	call	82afc <__adddf3>
   81cc8:	180f883a 	mov	r7,r3
   81ccc:	980b883a 	mov	r5,r19
   81cd0:	9009883a 	mov	r4,r18
   81cd4:	100d883a 	mov	r6,r2
   81cd8:	0082a7c0 	call	82a7c <__subdf3>
   81cdc:	d9801117 	ldw	r6,68(sp)
   81ce0:	d9c03a17 	ldw	r7,232(sp)
   81ce4:	180b883a 	mov	r5,r3
   81ce8:	1009883a 	mov	r4,r2
   81cec:	0082a7c0 	call	82a7c <__subdf3>
   81cf0:	0011883a 	mov	r8,zero
   81cf4:	024ffc34 	movhi	r9,16368
   81cf8:	480b883a 	mov	r5,r9
   81cfc:	180f883a 	mov	r7,r3
   81d00:	4009883a 	mov	r4,r8
   81d04:	100d883a 	mov	r6,r2
   81d08:	0082a7c0 	call	82a7c <__subdf3>
   81d0c:	100b883a 	mov	r5,r2
   81d10:	d8801317 	ldw	r2,76(sp)
   81d14:	10d5883a 	add	r10,r2,r3
   81d18:	5005d53a 	srai	r2,r10,20
   81d1c:	0080720e 	bge	zero,r2,81ee8 <__ieee754_pow+0x12d4>
   81d20:	2811883a 	mov	r8,r5
   81d24:	5013883a 	mov	r9,r10
   81d28:	d9c01a17 	ldw	r7,104(sp)
   81d2c:	d9801917 	ldw	r6,100(sp)
   81d30:	480b883a 	mov	r5,r9
   81d34:	4009883a 	mov	r4,r8
   81d38:	003e8206 	br	81744 <__ieee754_pow+0xb30>
   81d3c:	0009883a 	mov	r4,zero
   81d40:	800b883a 	mov	r5,r16
   81d44:	a80f883a 	mov	r7,r21
   81d48:	a00d883a 	mov	r6,r20
   81d4c:	003c2b06 	br	80dfc <__ieee754_pow+0x1e8>
   81d50:	d9001d17 	ldw	r4,116(sp)
   81d54:	00994b34 	movhi	r2,25900
   81d58:	10a0bf84 	addi	r2,r2,-32002
   81d5c:	00cf25f4 	movhi	r3,15511
   81d60:	18c551c4 	addi	r3,r3,5447
   81d64:	a80b883a 	mov	r5,r21
   81d68:	180f883a 	mov	r7,r3
   81d6c:	100d883a 	mov	r6,r2
   81d70:	0082afc0 	call	82afc <__adddf3>
   81d74:	d9801f17 	ldw	r6,124(sp)
   81d78:	880b883a 	mov	r5,r17
   81d7c:	8009883a 	mov	r4,r16
   81d80:	980f883a 	mov	r7,r19
   81d84:	1021883a 	mov	r16,r2
   81d88:	1823883a 	mov	r17,r3
   81d8c:	0082a7c0 	call	82a7c <__subdf3>
   81d90:	180f883a 	mov	r7,r3
   81d94:	880b883a 	mov	r5,r17
   81d98:	8009883a 	mov	r4,r16
   81d9c:	100d883a 	mov	r6,r2
   81da0:	008329c0 	call	8329c <__gtdf2>
   81da4:	00bf0c0e 	bge	zero,r2,819d8 <__ieee754_pow+0xdc4>
   81da8:	04220034 	movhi	r16,34816
   81dac:	841d6704 	addi	r16,r16,30108
   81db0:	045f8e34 	movhi	r17,32312
   81db4:	8c790f04 	addi	r17,r17,-7108
   81db8:	d9401a17 	ldw	r5,104(sp)
   81dbc:	d9001917 	ldw	r4,100(sp)
   81dc0:	800d883a 	mov	r6,r16
   81dc4:	880f883a 	mov	r7,r17
   81dc8:	0082b700 	call	82b70 <__muldf3>
   81dcc:	180b883a 	mov	r5,r3
   81dd0:	800d883a 	mov	r6,r16
   81dd4:	880f883a 	mov	r7,r17
   81dd8:	1009883a 	mov	r4,r2
   81ddc:	003e5906 	br	81744 <__ieee754_pow+0xb30>
   81de0:	e005d53a 	srai	r2,fp,20
   81de4:	01800434 	movhi	r6,16
   81de8:	d9401817 	ldw	r5,96(sp)
   81dec:	10bf0084 	addi	r2,r2,-1022
   81df0:	308dd83a 	sra	r6,r6,r2
   81df4:	02000434 	movhi	r8,16
   81df8:	423fffc4 	addi	r8,r8,-1
   81dfc:	0005883a 	mov	r2,zero
   81e00:	298d883a 	add	r6,r5,r6
   81e04:	318b883a 	add	r5,r6,r6
   81e08:	320e703a 	and	r7,r6,r8
   81e0c:	1013883a 	mov	r9,r2
   81e10:	280ad57a 	srli	r5,r5,21
   81e14:	d8801817 	ldw	r2,96(sp)
   81e18:	01000504 	movi	r4,20
   81e1c:	297f0044 	addi	r5,r5,-1023
   81e20:	4151d83a 	sra	r8,r8,r5
   81e24:	39c00434 	orhi	r7,r7,16
   81e28:	2149c83a 	sub	r4,r4,r5
   81e2c:	0210303a 	nor	r8,zero,r8
   81e30:	3939d83a 	sra	fp,r7,r4
   81e34:	320e703a 	and	r7,r6,r8
   81e38:	10002916 	blt	r2,zero,81ee0 <__ieee754_pow+0x12cc>
   81e3c:	d9402017 	ldw	r5,128(sp)
   81e40:	d9001f17 	ldw	r4,124(sp)
   81e44:	480d883a 	mov	r6,r9
   81e48:	0082a7c0 	call	82a7c <__subdf3>
   81e4c:	180b883a 	mov	r5,r3
   81e50:	d9402015 	stw	r5,128(sp)
   81e54:	280f883a 	mov	r7,r5
   81e58:	d9001d17 	ldw	r4,116(sp)
   81e5c:	d9401e17 	ldw	r5,120(sp)
   81e60:	1007883a 	mov	r3,r2
   81e64:	180d883a 	mov	r6,r3
   81e68:	d8801f15 	stw	r2,124(sp)
   81e6c:	0082afc0 	call	82afc <__adddf3>
   81e70:	180b883a 	mov	r5,r3
   81e74:	e006953a 	slli	r3,fp,20
   81e78:	282f883a 	mov	r23,r5
   81e7c:	d8c01315 	stw	r3,76(sp)
   81e80:	003edd06 	br	819f8 <__ieee754_pow+0xde4>
   81e84:	383bc81e 	bne	r7,zero,80da8 <__ieee754_pow+0x194>
   81e88:	28c5c83a 	sub	r2,r5,r3
   81e8c:	8087d83a 	sra	r3,r16,r2
   81e90:	1884983a 	sll	r2,r3,r2
   81e94:	80801b26 	beq	r16,r2,81f04 <__ieee754_pow+0x12f0>
   81e98:	0039883a 	mov	fp,zero
   81e9c:	003b9d06 	br	80d14 <__ieee754_pow+0x100>
   81ea0:	d9801f17 	ldw	r6,124(sp)
   81ea4:	8009883a 	mov	r4,r16
   81ea8:	880b883a 	mov	r5,r17
   81eac:	980f883a 	mov	r7,r19
   81eb0:	0082a7c0 	call	82a7c <__subdf3>
   81eb4:	d9001d17 	ldw	r4,116(sp)
   81eb8:	a80b883a 	mov	r5,r21
   81ebc:	180f883a 	mov	r7,r3
   81ec0:	100d883a 	mov	r6,r2
   81ec4:	00833ac0 	call	833ac <__ledf2>
   81ec8:	00bfc516 	blt	zero,r2,81de0 <__ieee754_pow+0x11cc>
   81ecc:	0430be74 	movhi	r16,49913
   81ed0:	843cd644 	addi	r16,r16,-3239
   81ed4:	04406974 	movhi	r17,421
   81ed8:	8c5b87c4 	addi	r17,r17,28191
   81edc:	003fb606 	br	81db8 <__ieee754_pow+0x11a4>
   81ee0:	0739c83a 	sub	fp,zero,fp
   81ee4:	003fd506 	br	81e3c <__ieee754_pow+0x1228>
   81ee8:	2809883a 	mov	r4,r5
   81eec:	e00d883a 	mov	r6,fp
   81ef0:	180b883a 	mov	r5,r3
   81ef4:	00824680 	call	82468 <scalbn>
   81ef8:	1011883a 	mov	r8,r2
   81efc:	1813883a 	mov	r9,r3
   81f00:	003f8906 	br	81d28 <__ieee754_pow+0x1114>
   81f04:	18c0004c 	andi	r3,r3,1
   81f08:	00800084 	movi	r2,2
   81f0c:	10f9c83a 	sub	fp,r2,r3
   81f10:	003b8006 	br	80d14 <__ieee754_pow+0x100>

00081f14 <__ieee754_sqrt>:
   81f14:	defffd04 	addi	sp,sp,-12
   81f18:	dc000015 	stw	r16,0(sp)
   81f1c:	009ffc34 	movhi	r2,32752
   81f20:	2021883a 	mov	r16,r4
   81f24:	291ffc2c 	andhi	r4,r5,32752
   81f28:	dc400115 	stw	r17,4(sp)
   81f2c:	dfc00215 	stw	ra,8(sp)
   81f30:	2823883a 	mov	r17,r5
   81f34:	280f883a 	mov	r7,r5
   81f38:	2807883a 	mov	r3,r5
   81f3c:	8011883a 	mov	r8,r16
   81f40:	20807d26 	beq	r4,r2,82138 <__ieee754_sqrt+0x224>
   81f44:	01408d0e 	bge	zero,r5,8217c <__ieee754_sqrt+0x268>
   81f48:	380dd53a 	srai	r6,r7,20
   81f4c:	3000131e 	bne	r6,zero,81f9c <__ieee754_sqrt+0x88>
   81f50:	1800041e 	bne	r3,zero,81f64 <__ieee754_sqrt+0x50>
   81f54:	400ed2fa 	srli	r7,r8,11
   81f58:	31bffac4 	addi	r6,r6,-21
   81f5c:	4010957a 	slli	r8,r8,21
   81f60:	383ffc26 	beq	r7,zero,81f54 <__ieee754_sqrt+0x40>
   81f64:	3880042c 	andhi	r2,r7,16
   81f68:	1000991e 	bne	r2,zero,821d0 <__ieee754_sqrt+0x2bc>
   81f6c:	0009883a 	mov	r4,zero
   81f70:	39cf883a 	add	r7,r7,r7
   81f74:	3880042c 	andhi	r2,r7,16
   81f78:	21000044 	addi	r4,r4,1
   81f7c:	103ffc26 	beq	r2,zero,81f70 <__ieee754_sqrt+0x5c>
   81f80:	00800804 	movi	r2,32
   81f84:	1105c83a 	sub	r2,r2,r4
   81f88:	4086d83a 	srl	r3,r8,r2
   81f8c:	4110983a 	sll	r8,r8,r4
   81f90:	3105c83a 	sub	r2,r6,r4
   81f94:	38ceb03a 	or	r7,r7,r3
   81f98:	11800044 	addi	r6,r2,1
   81f9c:	31bf0044 	addi	r6,r6,-1023
   81fa0:	30c0004c 	andi	r3,r6,1
   81fa4:	00800434 	movhi	r2,16
   81fa8:	10bfffc4 	addi	r2,r2,-1
   81fac:	3884703a 	and	r2,r7,r2
   81fb0:	1807003a 	cmpeq	r3,r3,zero
   81fb4:	11000434 	orhi	r4,r2,16
   81fb8:	18005426 	beq	r3,zero,8210c <__ieee754_sqrt+0x1f8>
   81fbc:	4004d7fa 	srli	r2,r8,31
   81fc0:	4207883a 	add	r3,r8,r8
   81fc4:	02800834 	movhi	r10,32
   81fc8:	1105883a 	add	r2,r2,r4
   81fcc:	2089883a 	add	r4,r4,r2
   81fd0:	0011883a 	mov	r8,zero
   81fd4:	000b883a 	mov	r5,zero
   81fd8:	0013883a 	mov	r9,zero
   81fdc:	02c00584 	movi	r11,22
   81fe0:	520f883a 	add	r7,r10,r8
   81fe4:	1804d7fa 	srli	r2,r3,31
   81fe8:	4a400044 	addi	r9,r9,1
   81fec:	18c7883a 	add	r3,r3,r3
   81ff0:	21c00316 	blt	r4,r7,82000 <__ieee754_sqrt+0xec>
   81ff4:	21c9c83a 	sub	r4,r4,r7
   81ff8:	2a8b883a 	add	r5,r5,r10
   81ffc:	51d1883a 	add	r8,r10,r7
   82000:	1105883a 	add	r2,r2,r4
   82004:	5014d07a 	srli	r10,r10,1
   82008:	2089883a 	add	r4,r4,r2
   8200c:	4afff41e 	bne	r9,r11,81fe0 <__ieee754_sqrt+0xcc>
   82010:	02600034 	movhi	r9,32768
   82014:	0017883a 	mov	r11,zero
   82018:	0019883a 	mov	r12,zero
   8201c:	0015883a 	mov	r10,zero
   82020:	4821883a 	mov	r16,r9
   82024:	03c00804 	movi	r15,32
   82028:	00000806 	br	8204c <__ieee754_sqrt+0x138>
   8202c:	22003426 	beq	r4,r8,82100 <__ieee754_sqrt+0x1ec>
   82030:	1804d7fa 	srli	r2,r3,31
   82034:	52800044 	addi	r10,r10,1
   82038:	18c7883a 	add	r3,r3,r3
   8203c:	1105883a 	add	r2,r2,r4
   82040:	2089883a 	add	r4,r4,r2
   82044:	4812d07a 	srli	r9,r9,1
   82048:	53c01326 	beq	r10,r15,82098 <__ieee754_sqrt+0x184>
   8204c:	4acf883a 	add	r7,r9,r11
   82050:	413ff60e 	bge	r8,r4,8202c <__ieee754_sqrt+0x118>
   82054:	38a0002c 	andhi	r2,r7,32768
   82058:	3a57883a 	add	r11,r7,r9
   8205c:	14002426 	beq	r2,r16,820f0 <__ieee754_sqrt+0x1dc>
   82060:	4005883a 	mov	r2,r8
   82064:	2209c83a 	sub	r4,r4,r8
   82068:	19c0012e 	bgeu	r3,r7,82070 <__ieee754_sqrt+0x15c>
   8206c:	213fffc4 	addi	r4,r4,-1
   82070:	19c7c83a 	sub	r3,r3,r7
   82074:	1011883a 	mov	r8,r2
   82078:	1804d7fa 	srli	r2,r3,31
   8207c:	52800044 	addi	r10,r10,1
   82080:	6259883a 	add	r12,r12,r9
   82084:	1105883a 	add	r2,r2,r4
   82088:	18c7883a 	add	r3,r3,r3
   8208c:	2089883a 	add	r4,r4,r2
   82090:	4812d07a 	srli	r9,r9,1
   82094:	53ffed1e 	bne	r10,r15,8204c <__ieee754_sqrt+0x138>
   82098:	20c4b03a 	or	r2,r4,r3
   8209c:	1000201e 	bne	r2,zero,82120 <__ieee754_sqrt+0x20c>
   820a0:	600ed07a 	srli	r7,r12,1
   820a4:	2880004c 	andi	r2,r5,1
   820a8:	1005003a 	cmpeq	r2,r2,zero
   820ac:	1000011e 	bne	r2,zero,820b4 <__ieee754_sqrt+0x1a0>
   820b0:	39e00034 	orhi	r7,r7,32768
   820b4:	300dd07a 	srai	r6,r6,1
   820b8:	280bd07a 	srai	r5,r5,1
   820bc:	010ff834 	movhi	r4,16352
   820c0:	300c953a 	slli	r6,r6,20
   820c4:	290b883a 	add	r5,r5,r4
   820c8:	3821883a 	mov	r16,r7
   820cc:	299d883a 	add	r14,r5,r6
   820d0:	7023883a 	mov	r17,r14
   820d4:	8005883a 	mov	r2,r16
   820d8:	8807883a 	mov	r3,r17
   820dc:	dfc00217 	ldw	ra,8(sp)
   820e0:	dc400117 	ldw	r17,4(sp)
   820e4:	dc000017 	ldw	r16,0(sp)
   820e8:	dec00304 	addi	sp,sp,12
   820ec:	f800283a 	ret
   820f0:	5884703a 	and	r2,r11,r2
   820f4:	103fda1e 	bne	r2,zero,82060 <__ieee754_sqrt+0x14c>
   820f8:	40800044 	addi	r2,r8,1
   820fc:	003fd906 	br	82064 <__ieee754_sqrt+0x150>
   82100:	19ffd42e 	bgeu	r3,r7,82054 <__ieee754_sqrt+0x140>
   82104:	2011883a 	mov	r8,r4
   82108:	003fc906 	br	82030 <__ieee754_sqrt+0x11c>
   8210c:	4004d7fa 	srli	r2,r8,31
   82110:	4211883a 	add	r8,r8,r8
   82114:	1105883a 	add	r2,r2,r4
   82118:	2089883a 	add	r4,r4,r2
   8211c:	003fa706 	br	81fbc <__ieee754_sqrt+0xa8>
   82120:	00bfffc4 	movi	r2,-1
   82124:	60802726 	beq	r12,r2,821c4 <__ieee754_sqrt+0x2b0>
   82128:	6080004c 	andi	r2,r12,1
   8212c:	6085883a 	add	r2,r12,r2
   82130:	100ed07a 	srli	r7,r2,1
   82134:	003fdb06 	br	820a4 <__ieee754_sqrt+0x190>
   82138:	8009883a 	mov	r4,r16
   8213c:	800d883a 	mov	r6,r16
   82140:	0082b700 	call	82b70 <__muldf3>
   82144:	180f883a 	mov	r7,r3
   82148:	880b883a 	mov	r5,r17
   8214c:	8009883a 	mov	r4,r16
   82150:	100d883a 	mov	r6,r2
   82154:	0082afc0 	call	82afc <__adddf3>
   82158:	1021883a 	mov	r16,r2
   8215c:	1823883a 	mov	r17,r3
   82160:	8005883a 	mov	r2,r16
   82164:	8807883a 	mov	r3,r17
   82168:	dfc00217 	ldw	ra,8(sp)
   8216c:	dc400117 	ldw	r17,4(sp)
   82170:	dc000017 	ldw	r16,0(sp)
   82174:	dec00304 	addi	sp,sp,12
   82178:	f800283a 	ret
   8217c:	00a00034 	movhi	r2,32768
   82180:	10bfffc4 	addi	r2,r2,-1
   82184:	2884703a 	and	r2,r5,r2
   82188:	8084b03a 	or	r2,r16,r2
   8218c:	103fd126 	beq	r2,zero,820d4 <__ieee754_sqrt+0x1c0>
   82190:	283f6d26 	beq	r5,zero,81f48 <__ieee754_sqrt+0x34>
   82194:	280f883a 	mov	r7,r5
   82198:	8009883a 	mov	r4,r16
   8219c:	800d883a 	mov	r6,r16
   821a0:	0082a7c0 	call	82a7c <__subdf3>
   821a4:	1009883a 	mov	r4,r2
   821a8:	180b883a 	mov	r5,r3
   821ac:	100d883a 	mov	r6,r2
   821b0:	180f883a 	mov	r7,r3
   821b4:	0082f340 	call	82f34 <__divdf3>
   821b8:	1021883a 	mov	r16,r2
   821bc:	1823883a 	mov	r17,r3
   821c0:	003fc406 	br	820d4 <__ieee754_sqrt+0x1c0>
   821c4:	29400044 	addi	r5,r5,1
   821c8:	000f883a 	mov	r7,zero
   821cc:	003fb506 	br	820a4 <__ieee754_sqrt+0x190>
   821d0:	0009883a 	mov	r4,zero
   821d4:	00800804 	movi	r2,32
   821d8:	003f6b06 	br	81f88 <__ieee754_sqrt+0x74>

000821dc <fabs>:
   821dc:	01e00034 	movhi	r7,32768
   821e0:	39ffffc4 	addi	r7,r7,-1
   821e4:	394e703a 	and	r7,r7,r5
   821e8:	2005883a 	mov	r2,r4
   821ec:	3807883a 	mov	r3,r7
   821f0:	f800283a 	ret

000821f4 <finite>:
   821f4:	00a00034 	movhi	r2,32768
   821f8:	10bfffc4 	addi	r2,r2,-1
   821fc:	2884703a 	and	r2,r5,r2
   82200:	01600434 	movhi	r5,32784
   82204:	1145883a 	add	r2,r2,r5
   82208:	1004d7fa 	srli	r2,r2,31
   8220c:	f800283a 	ret

00082210 <__isnand>:
   82210:	200d883a 	mov	r6,r4
   82214:	0109c83a 	sub	r4,zero,r4
   82218:	2188b03a 	or	r4,r4,r6
   8221c:	2008d7fa 	srli	r4,r4,31
   82220:	00a00034 	movhi	r2,32768
   82224:	10bfffc4 	addi	r2,r2,-1
   82228:	1144703a 	and	r2,r2,r5
   8222c:	2088b03a 	or	r4,r4,r2
   82230:	009ffc34 	movhi	r2,32752
   82234:	1105c83a 	sub	r2,r2,r4
   82238:	1004d7fa 	srli	r2,r2,31
   8223c:	f800283a 	ret

00082240 <matherr>:
   82240:	0005883a 	mov	r2,zero
   82244:	f800283a 	ret

00082248 <nan>:
   82248:	015ffe34 	movhi	r5,32760
   8224c:	0005883a 	mov	r2,zero
   82250:	2807883a 	mov	r3,r5
   82254:	f800283a 	ret

00082258 <rint>:
   82258:	2015883a 	mov	r10,r4
   8225c:	2809d53a 	srai	r4,r5,20
   82260:	defff904 	addi	sp,sp,-28
   82264:	034004c4 	movi	r13,19
   82268:	2101ffcc 	andi	r4,r4,2047
   8226c:	227f0044 	addi	r9,r4,-1023
   82270:	dc800415 	stw	r18,16(sp)
   82274:	dfc00615 	stw	ra,24(sp)
   82278:	dcc00515 	stw	r19,20(sp)
   8227c:	dc400315 	stw	r17,12(sp)
   82280:	dc000215 	stw	r16,8(sp)
   82284:	2817883a 	mov	r11,r5
   82288:	500d883a 	mov	r6,r10
   8228c:	2824d7fa 	srli	r18,r5,31
   82290:	6a403016 	blt	r13,r9,82354 <rint+0xfc>
   82294:	48004916 	blt	r9,zero,823bc <rint+0x164>
   82298:	00800434 	movhi	r2,16
   8229c:	10bfffc4 	addi	r2,r2,-1
   822a0:	1247d83a 	sra	r3,r2,r9
   822a4:	2809883a 	mov	r4,r5
   822a8:	1944703a 	and	r2,r3,r5
   822ac:	5084b03a 	or	r2,r10,r2
   822b0:	10001f26 	beq	r2,zero,82330 <rint+0xd8>
   822b4:	180ad07a 	srli	r5,r3,1
   822b8:	5944703a 	and	r2,r11,r5
   822bc:	5084b03a 	or	r2,r10,r2
   822c0:	10000626 	beq	r2,zero,822dc <rint+0x84>
   822c4:	4b406626 	beq	r9,r13,82460 <rint+0x208>
   822c8:	00c000b4 	movhi	r3,2
   822cc:	1a47d83a 	sra	r3,r3,r9
   822d0:	0144303a 	nor	r2,zero,r5
   822d4:	5884703a 	and	r2,r11,r2
   822d8:	10c8b03a 	or	r4,r2,r3
   822dc:	900690fa 	slli	r3,r18,3
   822e0:	00800274 	movhi	r2,9
   822e4:	10bc3404 	addi	r2,r2,-3888
   822e8:	200f883a 	mov	r7,r4
   822ec:	1887883a 	add	r3,r3,r2
   822f0:	1c000017 	ldw	r16,0(r3)
   822f4:	1c400117 	ldw	r17,4(r3)
   822f8:	8009883a 	mov	r4,r16
   822fc:	880b883a 	mov	r5,r17
   82300:	0082afc0 	call	82afc <__adddf3>
   82304:	d8800015 	stw	r2,0(sp)
   82308:	d8c00115 	stw	r3,4(sp)
   8230c:	d8800017 	ldw	r2,0(sp)
   82310:	d8c00117 	ldw	r3,4(sp)
   82314:	880f883a 	mov	r7,r17
   82318:	800d883a 	mov	r6,r16
   8231c:	180b883a 	mov	r5,r3
   82320:	1009883a 	mov	r4,r2
   82324:	0082a7c0 	call	82a7c <__subdf3>
   82328:	1015883a 	mov	r10,r2
   8232c:	1817883a 	mov	r11,r3
   82330:	5005883a 	mov	r2,r10
   82334:	5807883a 	mov	r3,r11
   82338:	dfc00617 	ldw	ra,24(sp)
   8233c:	dcc00517 	ldw	r19,20(sp)
   82340:	dc800417 	ldw	r18,16(sp)
   82344:	dc400317 	ldw	r17,12(sp)
   82348:	dc000217 	ldw	r16,8(sp)
   8234c:	dec00704 	addi	sp,sp,28
   82350:	f800283a 	ret
   82354:	00800cc4 	movi	r2,51
   82358:	12400f16 	blt	r2,r9,82398 <rint+0x140>
   8235c:	213efb44 	addi	r4,r4,-1043
   82360:	00bfffc4 	movi	r2,-1
   82364:	1104d83a 	srl	r2,r2,r4
   82368:	5086703a 	and	r3,r10,r2
   8236c:	183ff026 	beq	r3,zero,82330 <rint+0xd8>
   82370:	100ad07a 	srli	r5,r2,1
   82374:	5144703a 	and	r2,r10,r5
   82378:	10000526 	beq	r2,zero,82390 <rint+0x138>
   8237c:	00d00034 	movhi	r3,16384
   82380:	1907d83a 	sra	r3,r3,r4
   82384:	0144303a 	nor	r2,zero,r5
   82388:	5084703a 	and	r2,r10,r2
   8238c:	10ccb03a 	or	r6,r2,r3
   82390:	5809883a 	mov	r4,r11
   82394:	003fd106 	br	822dc <rint+0x84>
   82398:	00810004 	movi	r2,1024
   8239c:	48bfe41e 	bne	r9,r2,82330 <rint+0xd8>
   823a0:	5009883a 	mov	r4,r10
   823a4:	500d883a 	mov	r6,r10
   823a8:	280f883a 	mov	r7,r5
   823ac:	0082afc0 	call	82afc <__adddf3>
   823b0:	1015883a 	mov	r10,r2
   823b4:	1817883a 	mov	r11,r3
   823b8:	003fdd06 	br	82330 <rint+0xd8>
   823bc:	04e00034 	movhi	r19,32768
   823c0:	9cffffc4 	addi	r19,r19,-1
   823c4:	2cc4703a 	and	r2,r5,r19
   823c8:	5084b03a 	or	r2,r10,r2
   823cc:	103fd826 	beq	r2,zero,82330 <rint+0xd8>
   823d0:	00c00434 	movhi	r3,16
   823d4:	18ffffc4 	addi	r3,r3,-1
   823d8:	28c6703a 	and	r3,r5,r3
   823dc:	50c6b03a 	or	r3,r10,r3
   823e0:	00cdc83a 	sub	r6,zero,r3
   823e4:	900a90fa 	slli	r5,r18,3
   823e8:	1986b03a 	or	r3,r3,r6
   823ec:	01000274 	movhi	r4,9
   823f0:	213c3404 	addi	r4,r4,-3888
   823f4:	1806d33a 	srli	r3,r3,12
   823f8:	290b883a 	add	r5,r5,r4
   823fc:	2c000017 	ldw	r16,0(r5)
   82400:	2c400117 	ldw	r17,4(r5)
   82404:	593fffac 	andhi	r4,r11,65534
   82408:	18c0022c 	andhi	r3,r3,8
   8240c:	1906b03a 	or	r3,r3,r4
   82410:	500d883a 	mov	r6,r10
   82414:	180f883a 	mov	r7,r3
   82418:	8009883a 	mov	r4,r16
   8241c:	880b883a 	mov	r5,r17
   82420:	0082afc0 	call	82afc <__adddf3>
   82424:	d8800015 	stw	r2,0(sp)
   82428:	d8c00115 	stw	r3,4(sp)
   8242c:	d8800017 	ldw	r2,0(sp)
   82430:	d8c00117 	ldw	r3,4(sp)
   82434:	880f883a 	mov	r7,r17
   82438:	800d883a 	mov	r6,r16
   8243c:	180b883a 	mov	r5,r3
   82440:	1009883a 	mov	r4,r2
   82444:	0082a7c0 	call	82a7c <__subdf3>
   82448:	901297fa 	slli	r9,r18,31
   8244c:	98d0703a 	and	r8,r19,r3
   82450:	1015883a 	mov	r10,r2
   82454:	4250b03a 	or	r8,r8,r9
   82458:	4017883a 	mov	r11,r8
   8245c:	003fb406 	br	82330 <rint+0xd8>
   82460:	01900034 	movhi	r6,16384
   82464:	003f9d06 	br	822dc <rint+0x84>

00082468 <scalbn>:
   82468:	2011883a 	mov	r8,r4
   8246c:	291ffc2c 	andhi	r4,r5,32752
   82470:	2009d53a 	srai	r4,r4,20
   82474:	defffd04 	addi	sp,sp,-12
   82478:	dc000015 	stw	r16,0(sp)
   8247c:	dfc00215 	stw	ra,8(sp)
   82480:	dc400115 	stw	r17,4(sp)
   82484:	2813883a 	mov	r9,r5
   82488:	2815883a 	mov	r10,r5
   8248c:	3021883a 	mov	r16,r6
   82490:	2000281e 	bne	r4,zero,82534 <scalbn+0xcc>
   82494:	00a00034 	movhi	r2,32768
   82498:	10bfffc4 	addi	r2,r2,-1
   8249c:	2884703a 	and	r2,r5,r2
   824a0:	4084b03a 	or	r2,r8,r2
   824a4:	10001826 	beq	r2,zero,82508 <scalbn+0xa0>
   824a8:	0005883a 	mov	r2,zero
   824ac:	00d0d434 	movhi	r3,17232
   824b0:	4009883a 	mov	r4,r8
   824b4:	100d883a 	mov	r6,r2
   824b8:	180f883a 	mov	r7,r3
   824bc:	0082b700 	call	82b70 <__muldf3>
   824c0:	100b883a 	mov	r5,r2
   824c4:	1011883a 	mov	r8,r2
   824c8:	00bffff4 	movhi	r2,65535
   824cc:	108f2c04 	addi	r2,r2,15536
   824d0:	180d883a 	mov	r6,r3
   824d4:	1813883a 	mov	r9,r3
   824d8:	8080120e 	bge	r16,r2,82524 <scalbn+0xbc>
   824dc:	00b0be74 	movhi	r2,49913
   824e0:	10bcd644 	addi	r2,r2,-3239
   824e4:	00c06974 	movhi	r3,421
   824e8:	18db87c4 	addi	r3,r3,28191
   824ec:	2809883a 	mov	r4,r5
   824f0:	180f883a 	mov	r7,r3
   824f4:	300b883a 	mov	r5,r6
   824f8:	100d883a 	mov	r6,r2
   824fc:	0082b700 	call	82b70 <__muldf3>
   82500:	1011883a 	mov	r8,r2
   82504:	1813883a 	mov	r9,r3
   82508:	4005883a 	mov	r2,r8
   8250c:	4807883a 	mov	r3,r9
   82510:	dfc00217 	ldw	ra,8(sp)
   82514:	dc400117 	ldw	r17,4(sp)
   82518:	dc000017 	ldw	r16,0(sp)
   8251c:	dec00304 	addi	sp,sp,12
   82520:	f800283a 	ret
   82524:	189ffc2c 	andhi	r2,r3,32752
   82528:	1005d53a 	srai	r2,r2,20
   8252c:	1815883a 	mov	r10,r3
   82530:	113ff284 	addi	r4,r2,-54
   82534:	0081ffc4 	movi	r2,2047
   82538:	20801126 	beq	r4,r2,82580 <scalbn+0x118>
   8253c:	2409883a 	add	r4,r4,r16
   82540:	0081ff84 	movi	r2,2046
   82544:	11001c16 	blt	r2,r4,825b8 <scalbn+0x150>
   82548:	0100290e 	bge	zero,r4,825f0 <scalbn+0x188>
   8254c:	200a953a 	slli	r5,r4,20
   82550:	01200434 	movhi	r4,32784
   82554:	213fffc4 	addi	r4,r4,-1
   82558:	5108703a 	and	r4,r10,r4
   8255c:	2148b03a 	or	r4,r4,r5
   82560:	2013883a 	mov	r9,r4
   82564:	4005883a 	mov	r2,r8
   82568:	4807883a 	mov	r3,r9
   8256c:	dfc00217 	ldw	ra,8(sp)
   82570:	dc400117 	ldw	r17,4(sp)
   82574:	dc000017 	ldw	r16,0(sp)
   82578:	dec00304 	addi	sp,sp,12
   8257c:	f800283a 	ret
   82580:	480f883a 	mov	r7,r9
   82584:	4009883a 	mov	r4,r8
   82588:	480b883a 	mov	r5,r9
   8258c:	400d883a 	mov	r6,r8
   82590:	0082afc0 	call	82afc <__adddf3>
   82594:	1011883a 	mov	r8,r2
   82598:	1813883a 	mov	r9,r3
   8259c:	4005883a 	mov	r2,r8
   825a0:	4807883a 	mov	r3,r9
   825a4:	dfc00217 	ldw	ra,8(sp)
   825a8:	dc400117 	ldw	r17,4(sp)
   825ac:	dc000017 	ldw	r16,0(sp)
   825b0:	dec00304 	addi	sp,sp,12
   825b4:	f800283a 	ret
   825b8:	04220034 	movhi	r16,34816
   825bc:	841d6704 	addi	r16,r16,30108
   825c0:	045f8e34 	movhi	r17,32312
   825c4:	8c790f04 	addi	r17,r17,-7108
   825c8:	480f883a 	mov	r7,r9
   825cc:	400d883a 	mov	r6,r8
   825d0:	8009883a 	mov	r4,r16
   825d4:	880b883a 	mov	r5,r17
   825d8:	00826480 	call	82648 <copysign>
   825dc:	180b883a 	mov	r5,r3
   825e0:	800d883a 	mov	r6,r16
   825e4:	880f883a 	mov	r7,r17
   825e8:	1009883a 	mov	r4,r2
   825ec:	003fc306 	br	824fc <scalbn+0x94>
   825f0:	00bff284 	movi	r2,-54
   825f4:	11000716 	blt	r2,r4,82614 <scalbn+0x1ac>
   825f8:	00b0d414 	movui	r2,50000
   825fc:	143fee16 	blt	r2,r16,825b8 <scalbn+0x150>
   82600:	0430be74 	movhi	r16,49913
   82604:	843cd644 	addi	r16,r16,-3239
   82608:	04406974 	movhi	r17,421
   8260c:	8c5b87c4 	addi	r17,r17,28191
   82610:	003fed06 	br	825c8 <scalbn+0x160>
   82614:	21000d84 	addi	r4,r4,54
   82618:	2008953a 	slli	r4,r4,20
   8261c:	01e00434 	movhi	r7,32784
   82620:	39ffffc4 	addi	r7,r7,-1
   82624:	51ce703a 	and	r7,r10,r7
   82628:	390eb03a 	or	r7,r7,r4
   8262c:	024f2434 	movhi	r9,15504
   82630:	4009883a 	mov	r4,r8
   82634:	0011883a 	mov	r8,zero
   82638:	380b883a 	mov	r5,r7
   8263c:	400d883a 	mov	r6,r8
   82640:	480f883a 	mov	r7,r9
   82644:	003fad06 	br	824fc <scalbn+0x94>

00082648 <copysign>:
   82648:	3813883a 	mov	r9,r7
   8264c:	01e00034 	movhi	r7,32768
   82650:	39ffffc4 	addi	r7,r7,-1
   82654:	394e703a 	and	r7,r7,r5
   82658:	4aa0002c 	andhi	r10,r9,32768
   8265c:	3a8eb03a 	or	r7,r7,r10
   82660:	2005883a 	mov	r2,r4
   82664:	3807883a 	mov	r3,r7
   82668:	f800283a 	ret

0008266c <_fpadd_parts>:
   8266c:	defff804 	addi	sp,sp,-32
   82670:	dcc00315 	stw	r19,12(sp)
   82674:	2027883a 	mov	r19,r4
   82678:	21000017 	ldw	r4,0(r4)
   8267c:	00c00044 	movi	r3,1
   82680:	dd400515 	stw	r21,20(sp)
   82684:	dd000415 	stw	r20,16(sp)
   82688:	ddc00715 	stw	r23,28(sp)
   8268c:	dd800615 	stw	r22,24(sp)
   82690:	dc800215 	stw	r18,8(sp)
   82694:	dc400115 	stw	r17,4(sp)
   82698:	dc000015 	stw	r16,0(sp)
   8269c:	282b883a 	mov	r21,r5
   826a0:	3029883a 	mov	r20,r6
   826a4:	1900632e 	bgeu	r3,r4,82834 <_fpadd_parts+0x1c8>
   826a8:	28800017 	ldw	r2,0(r5)
   826ac:	1880812e 	bgeu	r3,r2,828b4 <_fpadd_parts+0x248>
   826b0:	00c00104 	movi	r3,4
   826b4:	20c0dc26 	beq	r4,r3,82a28 <_fpadd_parts+0x3bc>
   826b8:	10c07e26 	beq	r2,r3,828b4 <_fpadd_parts+0x248>
   826bc:	00c00084 	movi	r3,2
   826c0:	10c06726 	beq	r2,r3,82860 <_fpadd_parts+0x1f4>
   826c4:	20c07b26 	beq	r4,r3,828b4 <_fpadd_parts+0x248>
   826c8:	9dc00217 	ldw	r23,8(r19)
   826cc:	28c00217 	ldw	r3,8(r5)
   826d0:	9c400317 	ldw	r17,12(r19)
   826d4:	2bc00317 	ldw	r15,12(r5)
   826d8:	b8cdc83a 	sub	r6,r23,r3
   826dc:	9c800417 	ldw	r18,16(r19)
   826e0:	2c000417 	ldw	r16,16(r5)
   826e4:	3009883a 	mov	r4,r6
   826e8:	30009716 	blt	r6,zero,82948 <_fpadd_parts+0x2dc>
   826ec:	00800fc4 	movi	r2,63
   826f0:	11806b16 	blt	r2,r6,828a0 <_fpadd_parts+0x234>
   826f4:	0100a40e 	bge	zero,r4,82988 <_fpadd_parts+0x31c>
   826f8:	35bff804 	addi	r22,r6,-32
   826fc:	b000bc16 	blt	r22,zero,829f0 <_fpadd_parts+0x384>
   82700:	8596d83a 	srl	r11,r16,r22
   82704:	0019883a 	mov	r12,zero
   82708:	0013883a 	mov	r9,zero
   8270c:	01000044 	movi	r4,1
   82710:	0015883a 	mov	r10,zero
   82714:	b000be16 	blt	r22,zero,82a10 <_fpadd_parts+0x3a4>
   82718:	2590983a 	sll	r8,r4,r22
   8271c:	000f883a 	mov	r7,zero
   82720:	00bfffc4 	movi	r2,-1
   82724:	3889883a 	add	r4,r7,r2
   82728:	408b883a 	add	r5,r8,r2
   8272c:	21cd803a 	cmpltu	r6,r4,r7
   82730:	314b883a 	add	r5,r6,r5
   82734:	7904703a 	and	r2,r15,r4
   82738:	8146703a 	and	r3,r16,r5
   8273c:	10c4b03a 	or	r2,r2,r3
   82740:	10000226 	beq	r2,zero,8274c <_fpadd_parts+0xe0>
   82744:	02400044 	movi	r9,1
   82748:	0015883a 	mov	r10,zero
   8274c:	5a5eb03a 	or	r15,r11,r9
   82750:	62a0b03a 	or	r16,r12,r10
   82754:	99400117 	ldw	r5,4(r19)
   82758:	a8800117 	ldw	r2,4(r21)
   8275c:	28806e26 	beq	r5,r2,82918 <_fpadd_parts+0x2ac>
   82760:	28006626 	beq	r5,zero,828fc <_fpadd_parts+0x290>
   82764:	7c45c83a 	sub	r2,r15,r17
   82768:	7889803a 	cmpltu	r4,r15,r2
   8276c:	8487c83a 	sub	r3,r16,r18
   82770:	1909c83a 	sub	r4,r3,r4
   82774:	100d883a 	mov	r6,r2
   82778:	200f883a 	mov	r7,r4
   8277c:	38007716 	blt	r7,zero,8295c <_fpadd_parts+0x2f0>
   82780:	a5c00215 	stw	r23,8(r20)
   82784:	a1c00415 	stw	r7,16(r20)
   82788:	a0000115 	stw	zero,4(r20)
   8278c:	a1800315 	stw	r6,12(r20)
   82790:	a2000317 	ldw	r8,12(r20)
   82794:	a2400417 	ldw	r9,16(r20)
   82798:	00bfffc4 	movi	r2,-1
   8279c:	408b883a 	add	r5,r8,r2
   827a0:	2a09803a 	cmpltu	r4,r5,r8
   827a4:	488d883a 	add	r6,r9,r2
   827a8:	01c40034 	movhi	r7,4096
   827ac:	39ffffc4 	addi	r7,r7,-1
   827b0:	218d883a 	add	r6,r4,r6
   827b4:	39801736 	bltu	r7,r6,82814 <_fpadd_parts+0x1a8>
   827b8:	31c06526 	beq	r6,r7,82950 <_fpadd_parts+0x2e4>
   827bc:	a3000217 	ldw	r12,8(r20)
   827c0:	4209883a 	add	r4,r8,r8
   827c4:	00bfffc4 	movi	r2,-1
   827c8:	220f803a 	cmpltu	r7,r4,r8
   827cc:	4a4b883a 	add	r5,r9,r9
   827d0:	394f883a 	add	r7,r7,r5
   827d4:	2095883a 	add	r10,r4,r2
   827d8:	3897883a 	add	r11,r7,r2
   827dc:	510d803a 	cmpltu	r6,r10,r4
   827e0:	6099883a 	add	r12,r12,r2
   827e4:	32d7883a 	add	r11,r6,r11
   827e8:	00840034 	movhi	r2,4096
   827ec:	10bfffc4 	addi	r2,r2,-1
   827f0:	2011883a 	mov	r8,r4
   827f4:	3813883a 	mov	r9,r7
   827f8:	a1000315 	stw	r4,12(r20)
   827fc:	a1c00415 	stw	r7,16(r20)
   82800:	a3000215 	stw	r12,8(r20)
   82804:	12c00336 	bltu	r2,r11,82814 <_fpadd_parts+0x1a8>
   82808:	58bfed1e 	bne	r11,r2,827c0 <_fpadd_parts+0x154>
   8280c:	00bfff84 	movi	r2,-2
   82810:	12bfeb2e 	bgeu	r2,r10,827c0 <_fpadd_parts+0x154>
   82814:	a2800417 	ldw	r10,16(r20)
   82818:	008000c4 	movi	r2,3
   8281c:	00c80034 	movhi	r3,8192
   82820:	18ffffc4 	addi	r3,r3,-1
   82824:	a2400317 	ldw	r9,12(r20)
   82828:	a0800015 	stw	r2,0(r20)
   8282c:	1a802336 	bltu	r3,r10,828bc <_fpadd_parts+0x250>
   82830:	a027883a 	mov	r19,r20
   82834:	9805883a 	mov	r2,r19
   82838:	ddc00717 	ldw	r23,28(sp)
   8283c:	dd800617 	ldw	r22,24(sp)
   82840:	dd400517 	ldw	r21,20(sp)
   82844:	dd000417 	ldw	r20,16(sp)
   82848:	dcc00317 	ldw	r19,12(sp)
   8284c:	dc800217 	ldw	r18,8(sp)
   82850:	dc400117 	ldw	r17,4(sp)
   82854:	dc000017 	ldw	r16,0(sp)
   82858:	dec00804 	addi	sp,sp,32
   8285c:	f800283a 	ret
   82860:	20fff41e 	bne	r4,r3,82834 <_fpadd_parts+0x1c8>
   82864:	31000015 	stw	r4,0(r6)
   82868:	98800117 	ldw	r2,4(r19)
   8286c:	30800115 	stw	r2,4(r6)
   82870:	98c00217 	ldw	r3,8(r19)
   82874:	30c00215 	stw	r3,8(r6)
   82878:	98800317 	ldw	r2,12(r19)
   8287c:	30800315 	stw	r2,12(r6)
   82880:	98c00417 	ldw	r3,16(r19)
   82884:	30c00415 	stw	r3,16(r6)
   82888:	98800117 	ldw	r2,4(r19)
   8288c:	28c00117 	ldw	r3,4(r5)
   82890:	3027883a 	mov	r19,r6
   82894:	10c4703a 	and	r2,r2,r3
   82898:	30800115 	stw	r2,4(r6)
   8289c:	003fe506 	br	82834 <_fpadd_parts+0x1c8>
   828a0:	1dc02616 	blt	r3,r23,8293c <_fpadd_parts+0x2d0>
   828a4:	0023883a 	mov	r17,zero
   828a8:	182f883a 	mov	r23,r3
   828ac:	0025883a 	mov	r18,zero
   828b0:	003fa806 	br	82754 <_fpadd_parts+0xe8>
   828b4:	a827883a 	mov	r19,r21
   828b8:	003fde06 	br	82834 <_fpadd_parts+0x1c8>
   828bc:	01800044 	movi	r6,1
   828c0:	500497fa 	slli	r2,r10,31
   828c4:	4808d07a 	srli	r4,r9,1
   828c8:	518ad83a 	srl	r5,r10,r6
   828cc:	a2000217 	ldw	r8,8(r20)
   828d0:	1108b03a 	or	r4,r2,r4
   828d4:	0007883a 	mov	r3,zero
   828d8:	4984703a 	and	r2,r9,r6
   828dc:	208cb03a 	or	r6,r4,r2
   828e0:	28ceb03a 	or	r7,r5,r3
   828e4:	42000044 	addi	r8,r8,1
   828e8:	a027883a 	mov	r19,r20
   828ec:	a1c00415 	stw	r7,16(r20)
   828f0:	a2000215 	stw	r8,8(r20)
   828f4:	a1800315 	stw	r6,12(r20)
   828f8:	003fce06 	br	82834 <_fpadd_parts+0x1c8>
   828fc:	8bc5c83a 	sub	r2,r17,r15
   82900:	8889803a 	cmpltu	r4,r17,r2
   82904:	9407c83a 	sub	r3,r18,r16
   82908:	1909c83a 	sub	r4,r3,r4
   8290c:	100d883a 	mov	r6,r2
   82910:	200f883a 	mov	r7,r4
   82914:	003f9906 	br	8277c <_fpadd_parts+0x110>
   82918:	7c45883a 	add	r2,r15,r17
   8291c:	13c9803a 	cmpltu	r4,r2,r15
   82920:	8487883a 	add	r3,r16,r18
   82924:	20c9883a 	add	r4,r4,r3
   82928:	a1400115 	stw	r5,4(r20)
   8292c:	a5c00215 	stw	r23,8(r20)
   82930:	a0800315 	stw	r2,12(r20)
   82934:	a1000415 	stw	r4,16(r20)
   82938:	003fb606 	br	82814 <_fpadd_parts+0x1a8>
   8293c:	001f883a 	mov	r15,zero
   82940:	0021883a 	mov	r16,zero
   82944:	003f8306 	br	82754 <_fpadd_parts+0xe8>
   82948:	018dc83a 	sub	r6,zero,r6
   8294c:	003f6706 	br	826ec <_fpadd_parts+0x80>
   82950:	00bfff84 	movi	r2,-2
   82954:	117faf36 	bltu	r2,r5,82814 <_fpadd_parts+0x1a8>
   82958:	003f9806 	br	827bc <_fpadd_parts+0x150>
   8295c:	0005883a 	mov	r2,zero
   82960:	1189c83a 	sub	r4,r2,r6
   82964:	1105803a 	cmpltu	r2,r2,r4
   82968:	01cbc83a 	sub	r5,zero,r7
   8296c:	2885c83a 	sub	r2,r5,r2
   82970:	01800044 	movi	r6,1
   82974:	a1800115 	stw	r6,4(r20)
   82978:	a5c00215 	stw	r23,8(r20)
   8297c:	a1000315 	stw	r4,12(r20)
   82980:	a0800415 	stw	r2,16(r20)
   82984:	003f8206 	br	82790 <_fpadd_parts+0x124>
   82988:	203f7226 	beq	r4,zero,82754 <_fpadd_parts+0xe8>
   8298c:	35bff804 	addi	r22,r6,-32
   82990:	b9af883a 	add	r23,r23,r6
   82994:	b0003116 	blt	r22,zero,82a5c <_fpadd_parts+0x3f0>
   82998:	959ad83a 	srl	r13,r18,r22
   8299c:	001d883a 	mov	r14,zero
   829a0:	000f883a 	mov	r7,zero
   829a4:	01000044 	movi	r4,1
   829a8:	0011883a 	mov	r8,zero
   829ac:	b0002516 	blt	r22,zero,82a44 <_fpadd_parts+0x3d8>
   829b0:	2594983a 	sll	r10,r4,r22
   829b4:	0013883a 	mov	r9,zero
   829b8:	00bfffc4 	movi	r2,-1
   829bc:	4889883a 	add	r4,r9,r2
   829c0:	508b883a 	add	r5,r10,r2
   829c4:	224d803a 	cmpltu	r6,r4,r9
   829c8:	314b883a 	add	r5,r6,r5
   829cc:	8904703a 	and	r2,r17,r4
   829d0:	9146703a 	and	r3,r18,r5
   829d4:	10c4b03a 	or	r2,r2,r3
   829d8:	10000226 	beq	r2,zero,829e4 <_fpadd_parts+0x378>
   829dc:	01c00044 	movi	r7,1
   829e0:	0011883a 	mov	r8,zero
   829e4:	69e2b03a 	or	r17,r13,r7
   829e8:	7224b03a 	or	r18,r14,r8
   829ec:	003f5906 	br	82754 <_fpadd_parts+0xe8>
   829f0:	8407883a 	add	r3,r16,r16
   829f4:	008007c4 	movi	r2,31
   829f8:	1185c83a 	sub	r2,r2,r6
   829fc:	1886983a 	sll	r3,r3,r2
   82a00:	7996d83a 	srl	r11,r15,r6
   82a04:	8198d83a 	srl	r12,r16,r6
   82a08:	1ad6b03a 	or	r11,r3,r11
   82a0c:	003f3e06 	br	82708 <_fpadd_parts+0x9c>
   82a10:	2006d07a 	srli	r3,r4,1
   82a14:	008007c4 	movi	r2,31
   82a18:	1185c83a 	sub	r2,r2,r6
   82a1c:	1890d83a 	srl	r8,r3,r2
   82a20:	218e983a 	sll	r7,r4,r6
   82a24:	003f3e06 	br	82720 <_fpadd_parts+0xb4>
   82a28:	113f821e 	bne	r2,r4,82834 <_fpadd_parts+0x1c8>
   82a2c:	28c00117 	ldw	r3,4(r5)
   82a30:	98800117 	ldw	r2,4(r19)
   82a34:	10ff7f26 	beq	r2,r3,82834 <_fpadd_parts+0x1c8>
   82a38:	04c00274 	movhi	r19,9
   82a3c:	9cfc3804 	addi	r19,r19,-3872
   82a40:	003f7c06 	br	82834 <_fpadd_parts+0x1c8>
   82a44:	2006d07a 	srli	r3,r4,1
   82a48:	008007c4 	movi	r2,31
   82a4c:	1185c83a 	sub	r2,r2,r6
   82a50:	1894d83a 	srl	r10,r3,r2
   82a54:	2192983a 	sll	r9,r4,r6
   82a58:	003fd706 	br	829b8 <_fpadd_parts+0x34c>
   82a5c:	9487883a 	add	r3,r18,r18
   82a60:	008007c4 	movi	r2,31
   82a64:	1185c83a 	sub	r2,r2,r6
   82a68:	1886983a 	sll	r3,r3,r2
   82a6c:	899ad83a 	srl	r13,r17,r6
   82a70:	919cd83a 	srl	r14,r18,r6
   82a74:	1b5ab03a 	or	r13,r3,r13
   82a78:	003fc906 	br	829a0 <_fpadd_parts+0x334>

00082a7c <__subdf3>:
   82a7c:	deffea04 	addi	sp,sp,-88
   82a80:	dcc01415 	stw	r19,80(sp)
   82a84:	dcc00404 	addi	r19,sp,16
   82a88:	2011883a 	mov	r8,r4
   82a8c:	2813883a 	mov	r9,r5
   82a90:	dc401315 	stw	r17,76(sp)
   82a94:	d809883a 	mov	r4,sp
   82a98:	980b883a 	mov	r5,r19
   82a9c:	dc400904 	addi	r17,sp,36
   82aa0:	dfc01515 	stw	ra,84(sp)
   82aa4:	da400115 	stw	r9,4(sp)
   82aa8:	d9c00315 	stw	r7,12(sp)
   82aac:	da000015 	stw	r8,0(sp)
   82ab0:	d9800215 	stw	r6,8(sp)
   82ab4:	0083c400 	call	83c40 <__unpack_d>
   82ab8:	d9000204 	addi	r4,sp,8
   82abc:	880b883a 	mov	r5,r17
   82ac0:	0083c400 	call	83c40 <__unpack_d>
   82ac4:	d8800a17 	ldw	r2,40(sp)
   82ac8:	880b883a 	mov	r5,r17
   82acc:	9809883a 	mov	r4,r19
   82ad0:	d9800e04 	addi	r6,sp,56
   82ad4:	1080005c 	xori	r2,r2,1
   82ad8:	d8800a15 	stw	r2,40(sp)
   82adc:	008266c0 	call	8266c <_fpadd_parts>
   82ae0:	1009883a 	mov	r4,r2
   82ae4:	008392c0 	call	8392c <__pack_d>
   82ae8:	dfc01517 	ldw	ra,84(sp)
   82aec:	dcc01417 	ldw	r19,80(sp)
   82af0:	dc401317 	ldw	r17,76(sp)
   82af4:	dec01604 	addi	sp,sp,88
   82af8:	f800283a 	ret

00082afc <__adddf3>:
   82afc:	deffea04 	addi	sp,sp,-88
   82b00:	dcc01415 	stw	r19,80(sp)
   82b04:	dcc00404 	addi	r19,sp,16
   82b08:	2011883a 	mov	r8,r4
   82b0c:	2813883a 	mov	r9,r5
   82b10:	dc401315 	stw	r17,76(sp)
   82b14:	d809883a 	mov	r4,sp
   82b18:	980b883a 	mov	r5,r19
   82b1c:	dc400904 	addi	r17,sp,36
   82b20:	dfc01515 	stw	ra,84(sp)
   82b24:	da400115 	stw	r9,4(sp)
   82b28:	d9c00315 	stw	r7,12(sp)
   82b2c:	da000015 	stw	r8,0(sp)
   82b30:	d9800215 	stw	r6,8(sp)
   82b34:	0083c400 	call	83c40 <__unpack_d>
   82b38:	d9000204 	addi	r4,sp,8
   82b3c:	880b883a 	mov	r5,r17
   82b40:	0083c400 	call	83c40 <__unpack_d>
   82b44:	d9800e04 	addi	r6,sp,56
   82b48:	9809883a 	mov	r4,r19
   82b4c:	880b883a 	mov	r5,r17
   82b50:	008266c0 	call	8266c <_fpadd_parts>
   82b54:	1009883a 	mov	r4,r2
   82b58:	008392c0 	call	8392c <__pack_d>
   82b5c:	dfc01517 	ldw	ra,84(sp)
   82b60:	dcc01417 	ldw	r19,80(sp)
   82b64:	dc401317 	ldw	r17,76(sp)
   82b68:	dec01604 	addi	sp,sp,88
   82b6c:	f800283a 	ret

00082b70 <__muldf3>:
   82b70:	deffe004 	addi	sp,sp,-128
   82b74:	dc401815 	stw	r17,96(sp)
   82b78:	dc400404 	addi	r17,sp,16
   82b7c:	2011883a 	mov	r8,r4
   82b80:	2813883a 	mov	r9,r5
   82b84:	dc001715 	stw	r16,92(sp)
   82b88:	d809883a 	mov	r4,sp
   82b8c:	880b883a 	mov	r5,r17
   82b90:	dc000904 	addi	r16,sp,36
   82b94:	dfc01f15 	stw	ra,124(sp)
   82b98:	da400115 	stw	r9,4(sp)
   82b9c:	d9c00315 	stw	r7,12(sp)
   82ba0:	da000015 	stw	r8,0(sp)
   82ba4:	d9800215 	stw	r6,8(sp)
   82ba8:	ddc01e15 	stw	r23,120(sp)
   82bac:	dd801d15 	stw	r22,116(sp)
   82bb0:	dd401c15 	stw	r21,112(sp)
   82bb4:	dd001b15 	stw	r20,108(sp)
   82bb8:	dcc01a15 	stw	r19,104(sp)
   82bbc:	dc801915 	stw	r18,100(sp)
   82bc0:	0083c400 	call	83c40 <__unpack_d>
   82bc4:	d9000204 	addi	r4,sp,8
   82bc8:	800b883a 	mov	r5,r16
   82bcc:	0083c400 	call	83c40 <__unpack_d>
   82bd0:	d9000417 	ldw	r4,16(sp)
   82bd4:	00800044 	movi	r2,1
   82bd8:	1100102e 	bgeu	r2,r4,82c1c <__muldf3+0xac>
   82bdc:	d8c00917 	ldw	r3,36(sp)
   82be0:	10c0062e 	bgeu	r2,r3,82bfc <__muldf3+0x8c>
   82be4:	00800104 	movi	r2,4
   82be8:	20800a26 	beq	r4,r2,82c14 <__muldf3+0xa4>
   82bec:	1880cc26 	beq	r3,r2,82f20 <__muldf3+0x3b0>
   82bf0:	00800084 	movi	r2,2
   82bf4:	20800926 	beq	r4,r2,82c1c <__muldf3+0xac>
   82bf8:	1880191e 	bne	r3,r2,82c60 <__muldf3+0xf0>
   82bfc:	d8c00a17 	ldw	r3,40(sp)
   82c00:	d8800517 	ldw	r2,20(sp)
   82c04:	8009883a 	mov	r4,r16
   82c08:	10c4c03a 	cmpne	r2,r2,r3
   82c0c:	d8800a15 	stw	r2,40(sp)
   82c10:	00000706 	br	82c30 <__muldf3+0xc0>
   82c14:	00800084 	movi	r2,2
   82c18:	1880c326 	beq	r3,r2,82f28 <__muldf3+0x3b8>
   82c1c:	d8800517 	ldw	r2,20(sp)
   82c20:	d8c00a17 	ldw	r3,40(sp)
   82c24:	8809883a 	mov	r4,r17
   82c28:	10c4c03a 	cmpne	r2,r2,r3
   82c2c:	d8800515 	stw	r2,20(sp)
   82c30:	008392c0 	call	8392c <__pack_d>
   82c34:	dfc01f17 	ldw	ra,124(sp)
   82c38:	ddc01e17 	ldw	r23,120(sp)
   82c3c:	dd801d17 	ldw	r22,116(sp)
   82c40:	dd401c17 	ldw	r21,112(sp)
   82c44:	dd001b17 	ldw	r20,108(sp)
   82c48:	dcc01a17 	ldw	r19,104(sp)
   82c4c:	dc801917 	ldw	r18,100(sp)
   82c50:	dc401817 	ldw	r17,96(sp)
   82c54:	dc001717 	ldw	r16,92(sp)
   82c58:	dec02004 	addi	sp,sp,128
   82c5c:	f800283a 	ret
   82c60:	dd800717 	ldw	r22,28(sp)
   82c64:	dc800c17 	ldw	r18,48(sp)
   82c68:	002b883a 	mov	r21,zero
   82c6c:	0023883a 	mov	r17,zero
   82c70:	a80b883a 	mov	r5,r21
   82c74:	b00d883a 	mov	r6,r22
   82c78:	880f883a 	mov	r7,r17
   82c7c:	ddc00817 	ldw	r23,32(sp)
   82c80:	dcc00d17 	ldw	r19,52(sp)
   82c84:	9009883a 	mov	r4,r18
   82c88:	00837880 	call	83788 <__muldi3>
   82c8c:	001b883a 	mov	r13,zero
   82c90:	680f883a 	mov	r7,r13
   82c94:	b009883a 	mov	r4,r22
   82c98:	000b883a 	mov	r5,zero
   82c9c:	980d883a 	mov	r6,r19
   82ca0:	b82d883a 	mov	r22,r23
   82ca4:	002f883a 	mov	r23,zero
   82ca8:	db401615 	stw	r13,88(sp)
   82cac:	d8801315 	stw	r2,76(sp)
   82cb0:	d8c01415 	stw	r3,80(sp)
   82cb4:	dcc01515 	stw	r19,84(sp)
   82cb8:	00837880 	call	83788 <__muldi3>
   82cbc:	b00d883a 	mov	r6,r22
   82cc0:	000b883a 	mov	r5,zero
   82cc4:	9009883a 	mov	r4,r18
   82cc8:	b80f883a 	mov	r7,r23
   82ccc:	1021883a 	mov	r16,r2
   82cd0:	1823883a 	mov	r17,r3
   82cd4:	00837880 	call	83788 <__muldi3>
   82cd8:	8085883a 	add	r2,r16,r2
   82cdc:	140d803a 	cmpltu	r6,r2,r16
   82ce0:	88c7883a 	add	r3,r17,r3
   82ce4:	30cd883a 	add	r6,r6,r3
   82ce8:	1029883a 	mov	r20,r2
   82cec:	302b883a 	mov	r21,r6
   82cf0:	da801317 	ldw	r10,76(sp)
   82cf4:	dac01417 	ldw	r11,80(sp)
   82cf8:	db001517 	ldw	r12,84(sp)
   82cfc:	db401617 	ldw	r13,88(sp)
   82d00:	3440612e 	bgeu	r6,r17,82e88 <__muldf3+0x318>
   82d04:	0009883a 	mov	r4,zero
   82d08:	5105883a 	add	r2,r10,r4
   82d0c:	128d803a 	cmpltu	r6,r2,r10
   82d10:	5d07883a 	add	r3,r11,r20
   82d14:	30cd883a 	add	r6,r6,r3
   82d18:	0021883a 	mov	r16,zero
   82d1c:	04400044 	movi	r17,1
   82d20:	1025883a 	mov	r18,r2
   82d24:	3027883a 	mov	r19,r6
   82d28:	32c06236 	bltu	r6,r11,82eb4 <__muldf3+0x344>
   82d2c:	59807a26 	beq	r11,r6,82f18 <__muldf3+0x3a8>
   82d30:	680b883a 	mov	r5,r13
   82d34:	b80f883a 	mov	r7,r23
   82d38:	6009883a 	mov	r4,r12
   82d3c:	b00d883a 	mov	r6,r22
   82d40:	00837880 	call	83788 <__muldi3>
   82d44:	1009883a 	mov	r4,r2
   82d48:	000f883a 	mov	r7,zero
   82d4c:	1545883a 	add	r2,r2,r21
   82d50:	1111803a 	cmpltu	r8,r2,r4
   82d54:	19c7883a 	add	r3,r3,r7
   82d58:	40c7883a 	add	r3,r8,r3
   82d5c:	88cb883a 	add	r5,r17,r3
   82d60:	d8c00617 	ldw	r3,24(sp)
   82d64:	8089883a 	add	r4,r16,r2
   82d68:	d8800b17 	ldw	r2,44(sp)
   82d6c:	18c00104 	addi	r3,r3,4
   82d70:	240d803a 	cmpltu	r6,r4,r16
   82d74:	10c7883a 	add	r3,r2,r3
   82d78:	2013883a 	mov	r9,r4
   82d7c:	d8800a17 	ldw	r2,40(sp)
   82d80:	d9000517 	ldw	r4,20(sp)
   82d84:	314d883a 	add	r6,r6,r5
   82d88:	3015883a 	mov	r10,r6
   82d8c:	2088c03a 	cmpne	r4,r4,r2
   82d90:	00880034 	movhi	r2,8192
   82d94:	10bfffc4 	addi	r2,r2,-1
   82d98:	d9000f15 	stw	r4,60(sp)
   82d9c:	d8c01015 	stw	r3,64(sp)
   82da0:	1180162e 	bgeu	r2,r6,82dfc <__muldf3+0x28c>
   82da4:	1811883a 	mov	r8,r3
   82da8:	101f883a 	mov	r15,r2
   82dac:	980497fa 	slli	r2,r19,31
   82db0:	9016d07a 	srli	r11,r18,1
   82db4:	500697fa 	slli	r3,r10,31
   82db8:	480cd07a 	srli	r6,r9,1
   82dbc:	500ed07a 	srli	r7,r10,1
   82dc0:	12d6b03a 	or	r11,r2,r11
   82dc4:	00800044 	movi	r2,1
   82dc8:	198cb03a 	or	r6,r3,r6
   82dcc:	4888703a 	and	r4,r9,r2
   82dd0:	9818d07a 	srli	r12,r19,1
   82dd4:	001b883a 	mov	r13,zero
   82dd8:	03a00034 	movhi	r14,32768
   82ddc:	3013883a 	mov	r9,r6
   82de0:	3815883a 	mov	r10,r7
   82de4:	4091883a 	add	r8,r8,r2
   82de8:	20000226 	beq	r4,zero,82df4 <__muldf3+0x284>
   82dec:	5b64b03a 	or	r18,r11,r13
   82df0:	63a6b03a 	or	r19,r12,r14
   82df4:	7abfed36 	bltu	r15,r10,82dac <__muldf3+0x23c>
   82df8:	da001015 	stw	r8,64(sp)
   82dfc:	00840034 	movhi	r2,4096
   82e00:	10bfffc4 	addi	r2,r2,-1
   82e04:	12801436 	bltu	r2,r10,82e58 <__muldf3+0x2e8>
   82e08:	da001017 	ldw	r8,64(sp)
   82e0c:	101f883a 	mov	r15,r2
   82e10:	4a45883a 	add	r2,r9,r9
   82e14:	124d803a 	cmpltu	r6,r2,r9
   82e18:	5287883a 	add	r3,r10,r10
   82e1c:	9497883a 	add	r11,r18,r18
   82e20:	5c8f803a 	cmpltu	r7,r11,r18
   82e24:	9cd9883a 	add	r12,r19,r19
   82e28:	01000044 	movi	r4,1
   82e2c:	30cd883a 	add	r6,r6,r3
   82e30:	3b0f883a 	add	r7,r7,r12
   82e34:	423fffc4 	addi	r8,r8,-1
   82e38:	1013883a 	mov	r9,r2
   82e3c:	3015883a 	mov	r10,r6
   82e40:	111ab03a 	or	r13,r2,r4
   82e44:	98003016 	blt	r19,zero,82f08 <__muldf3+0x398>
   82e48:	5825883a 	mov	r18,r11
   82e4c:	3827883a 	mov	r19,r7
   82e50:	7abfef2e 	bgeu	r15,r10,82e10 <__muldf3+0x2a0>
   82e54:	da001015 	stw	r8,64(sp)
   82e58:	00803fc4 	movi	r2,255
   82e5c:	488e703a 	and	r7,r9,r2
   82e60:	00802004 	movi	r2,128
   82e64:	0007883a 	mov	r3,zero
   82e68:	0011883a 	mov	r8,zero
   82e6c:	38801826 	beq	r7,r2,82ed0 <__muldf3+0x360>
   82e70:	008000c4 	movi	r2,3
   82e74:	d9000e04 	addi	r4,sp,56
   82e78:	da801215 	stw	r10,72(sp)
   82e7c:	d8800e15 	stw	r2,56(sp)
   82e80:	da401115 	stw	r9,68(sp)
   82e84:	003f6a06 	br	82c30 <__muldf3+0xc0>
   82e88:	89802126 	beq	r17,r6,82f10 <__muldf3+0x3a0>
   82e8c:	0009883a 	mov	r4,zero
   82e90:	5105883a 	add	r2,r10,r4
   82e94:	128d803a 	cmpltu	r6,r2,r10
   82e98:	5d07883a 	add	r3,r11,r20
   82e9c:	30cd883a 	add	r6,r6,r3
   82ea0:	0021883a 	mov	r16,zero
   82ea4:	0023883a 	mov	r17,zero
   82ea8:	1025883a 	mov	r18,r2
   82eac:	3027883a 	mov	r19,r6
   82eb0:	32ff9e2e 	bgeu	r6,r11,82d2c <__muldf3+0x1bc>
   82eb4:	00800044 	movi	r2,1
   82eb8:	8089883a 	add	r4,r16,r2
   82ebc:	240d803a 	cmpltu	r6,r4,r16
   82ec0:	344d883a 	add	r6,r6,r17
   82ec4:	2021883a 	mov	r16,r4
   82ec8:	3023883a 	mov	r17,r6
   82ecc:	003f9806 	br	82d30 <__muldf3+0x1c0>
   82ed0:	403fe71e 	bne	r8,zero,82e70 <__muldf3+0x300>
   82ed4:	01004004 	movi	r4,256
   82ed8:	4904703a 	and	r2,r9,r4
   82edc:	10c4b03a 	or	r2,r2,r3
   82ee0:	103fe31e 	bne	r2,zero,82e70 <__muldf3+0x300>
   82ee4:	94c4b03a 	or	r2,r18,r19
   82ee8:	103fe126 	beq	r2,zero,82e70 <__muldf3+0x300>
   82eec:	49c5883a 	add	r2,r9,r7
   82ef0:	1251803a 	cmpltu	r8,r2,r9
   82ef4:	4291883a 	add	r8,r8,r10
   82ef8:	013fc004 	movi	r4,-256
   82efc:	1112703a 	and	r9,r2,r4
   82f00:	4015883a 	mov	r10,r8
   82f04:	003fda06 	br	82e70 <__muldf3+0x300>
   82f08:	6813883a 	mov	r9,r13
   82f0c:	003fce06 	br	82e48 <__muldf3+0x2d8>
   82f10:	143f7c36 	bltu	r2,r16,82d04 <__muldf3+0x194>
   82f14:	003fdd06 	br	82e8c <__muldf3+0x31c>
   82f18:	12bf852e 	bgeu	r2,r10,82d30 <__muldf3+0x1c0>
   82f1c:	003fe506 	br	82eb4 <__muldf3+0x344>
   82f20:	00800084 	movi	r2,2
   82f24:	20bf351e 	bne	r4,r2,82bfc <__muldf3+0x8c>
   82f28:	01000274 	movhi	r4,9
   82f2c:	213c3804 	addi	r4,r4,-3872
   82f30:	003f3f06 	br	82c30 <__muldf3+0xc0>

00082f34 <__divdf3>:
   82f34:	deffed04 	addi	sp,sp,-76
   82f38:	dcc01115 	stw	r19,68(sp)
   82f3c:	dcc00404 	addi	r19,sp,16
   82f40:	2011883a 	mov	r8,r4
   82f44:	2813883a 	mov	r9,r5
   82f48:	dc000e15 	stw	r16,56(sp)
   82f4c:	d809883a 	mov	r4,sp
   82f50:	980b883a 	mov	r5,r19
   82f54:	dc000904 	addi	r16,sp,36
   82f58:	dfc01215 	stw	ra,72(sp)
   82f5c:	da400115 	stw	r9,4(sp)
   82f60:	d9c00315 	stw	r7,12(sp)
   82f64:	da000015 	stw	r8,0(sp)
   82f68:	d9800215 	stw	r6,8(sp)
   82f6c:	dc801015 	stw	r18,64(sp)
   82f70:	dc400f15 	stw	r17,60(sp)
   82f74:	0083c400 	call	83c40 <__unpack_d>
   82f78:	d9000204 	addi	r4,sp,8
   82f7c:	800b883a 	mov	r5,r16
   82f80:	0083c400 	call	83c40 <__unpack_d>
   82f84:	d9000417 	ldw	r4,16(sp)
   82f88:	00800044 	movi	r2,1
   82f8c:	11000b2e 	bgeu	r2,r4,82fbc <__divdf3+0x88>
   82f90:	d9400917 	ldw	r5,36(sp)
   82f94:	1140762e 	bgeu	r2,r5,83170 <__divdf3+0x23c>
   82f98:	d8800517 	ldw	r2,20(sp)
   82f9c:	d8c00a17 	ldw	r3,40(sp)
   82fa0:	01800104 	movi	r6,4
   82fa4:	10c4f03a 	xor	r2,r2,r3
   82fa8:	d8800515 	stw	r2,20(sp)
   82fac:	21800226 	beq	r4,r6,82fb8 <__divdf3+0x84>
   82fb0:	00800084 	movi	r2,2
   82fb4:	2080141e 	bne	r4,r2,83008 <__divdf3+0xd4>
   82fb8:	29000926 	beq	r5,r4,82fe0 <__divdf3+0xac>
   82fbc:	9809883a 	mov	r4,r19
   82fc0:	008392c0 	call	8392c <__pack_d>
   82fc4:	dfc01217 	ldw	ra,72(sp)
   82fc8:	dcc01117 	ldw	r19,68(sp)
   82fcc:	dc801017 	ldw	r18,64(sp)
   82fd0:	dc400f17 	ldw	r17,60(sp)
   82fd4:	dc000e17 	ldw	r16,56(sp)
   82fd8:	dec01304 	addi	sp,sp,76
   82fdc:	f800283a 	ret
   82fe0:	01000274 	movhi	r4,9
   82fe4:	213c3804 	addi	r4,r4,-3872
   82fe8:	008392c0 	call	8392c <__pack_d>
   82fec:	dfc01217 	ldw	ra,72(sp)
   82ff0:	dcc01117 	ldw	r19,68(sp)
   82ff4:	dc801017 	ldw	r18,64(sp)
   82ff8:	dc400f17 	ldw	r17,60(sp)
   82ffc:	dc000e17 	ldw	r16,56(sp)
   83000:	dec01304 	addi	sp,sp,76
   83004:	f800283a 	ret
   83008:	29805b26 	beq	r5,r6,83178 <__divdf3+0x244>
   8300c:	28802d26 	beq	r5,r2,830c4 <__divdf3+0x190>
   83010:	d8c00617 	ldw	r3,24(sp)
   83014:	d8800b17 	ldw	r2,44(sp)
   83018:	d9c00817 	ldw	r7,32(sp)
   8301c:	dc400d17 	ldw	r17,52(sp)
   83020:	188bc83a 	sub	r5,r3,r2
   83024:	d9800717 	ldw	r6,28(sp)
   83028:	dc000c17 	ldw	r16,48(sp)
   8302c:	d9400615 	stw	r5,24(sp)
   83030:	3c403836 	bltu	r7,r17,83114 <__divdf3+0x1e0>
   83034:	89c03626 	beq	r17,r7,83110 <__divdf3+0x1dc>
   83038:	0015883a 	mov	r10,zero
   8303c:	001d883a 	mov	r14,zero
   83040:	02c40034 	movhi	r11,4096
   83044:	001f883a 	mov	r15,zero
   83048:	003f883a 	mov	ra,zero
   8304c:	04800f44 	movi	r18,61
   83050:	00000f06 	br	83090 <__divdf3+0x15c>
   83054:	601d883a 	mov	r14,r12
   83058:	681f883a 	mov	r15,r13
   8305c:	400d883a 	mov	r6,r8
   83060:	100f883a 	mov	r7,r2
   83064:	3191883a 	add	r8,r6,r6
   83068:	5808d07a 	srli	r4,r11,1
   8306c:	4185803a 	cmpltu	r2,r8,r6
   83070:	39d3883a 	add	r9,r7,r7
   83074:	28c6b03a 	or	r3,r5,r3
   83078:	1245883a 	add	r2,r2,r9
   8307c:	1815883a 	mov	r10,r3
   83080:	2017883a 	mov	r11,r4
   83084:	400d883a 	mov	r6,r8
   83088:	100f883a 	mov	r7,r2
   8308c:	fc801726 	beq	ra,r18,830ec <__divdf3+0x1b8>
   83090:	580a97fa 	slli	r5,r11,31
   83094:	5006d07a 	srli	r3,r10,1
   83098:	ffc00044 	addi	ra,ra,1
   8309c:	3c7ff136 	bltu	r7,r17,83064 <__divdf3+0x130>
   830a0:	3411c83a 	sub	r8,r6,r16
   830a4:	3205803a 	cmpltu	r2,r6,r8
   830a8:	3c53c83a 	sub	r9,r7,r17
   830ac:	7298b03a 	or	r12,r14,r10
   830b0:	7adab03a 	or	r13,r15,r11
   830b4:	4885c83a 	sub	r2,r9,r2
   830b8:	89ffe61e 	bne	r17,r7,83054 <__divdf3+0x120>
   830bc:	343fe936 	bltu	r6,r16,83064 <__divdf3+0x130>
   830c0:	003fe406 	br	83054 <__divdf3+0x120>
   830c4:	9809883a 	mov	r4,r19
   830c8:	d9800415 	stw	r6,16(sp)
   830cc:	008392c0 	call	8392c <__pack_d>
   830d0:	dfc01217 	ldw	ra,72(sp)
   830d4:	dcc01117 	ldw	r19,68(sp)
   830d8:	dc801017 	ldw	r18,64(sp)
   830dc:	dc400f17 	ldw	r17,60(sp)
   830e0:	dc000e17 	ldw	r16,56(sp)
   830e4:	dec01304 	addi	sp,sp,76
   830e8:	f800283a 	ret
   830ec:	00803fc4 	movi	r2,255
   830f0:	7090703a 	and	r8,r14,r2
   830f4:	00802004 	movi	r2,128
   830f8:	0007883a 	mov	r3,zero
   830fc:	0013883a 	mov	r9,zero
   83100:	40800d26 	beq	r8,r2,83138 <__divdf3+0x204>
   83104:	dbc00815 	stw	r15,32(sp)
   83108:	db800715 	stw	r14,28(sp)
   8310c:	003fab06 	br	82fbc <__divdf3+0x88>
   83110:	343fc92e 	bgeu	r6,r16,83038 <__divdf3+0x104>
   83114:	3185883a 	add	r2,r6,r6
   83118:	1189803a 	cmpltu	r4,r2,r6
   8311c:	39c7883a 	add	r3,r7,r7
   83120:	20c9883a 	add	r4,r4,r3
   83124:	297fffc4 	addi	r5,r5,-1
   83128:	100d883a 	mov	r6,r2
   8312c:	200f883a 	mov	r7,r4
   83130:	d9400615 	stw	r5,24(sp)
   83134:	003fc006 	br	83038 <__divdf3+0x104>
   83138:	483ff21e 	bne	r9,zero,83104 <__divdf3+0x1d0>
   8313c:	01004004 	movi	r4,256
   83140:	7104703a 	and	r2,r14,r4
   83144:	10c4b03a 	or	r2,r2,r3
   83148:	103fee1e 	bne	r2,zero,83104 <__divdf3+0x1d0>
   8314c:	31c4b03a 	or	r2,r6,r7
   83150:	103fec26 	beq	r2,zero,83104 <__divdf3+0x1d0>
   83154:	7205883a 	add	r2,r14,r8
   83158:	1391803a 	cmpltu	r8,r2,r14
   8315c:	43d1883a 	add	r8,r8,r15
   83160:	013fc004 	movi	r4,-256
   83164:	111c703a 	and	r14,r2,r4
   83168:	401f883a 	mov	r15,r8
   8316c:	003fe506 	br	83104 <__divdf3+0x1d0>
   83170:	8009883a 	mov	r4,r16
   83174:	003f9206 	br	82fc0 <__divdf3+0x8c>
   83178:	9809883a 	mov	r4,r19
   8317c:	d8000715 	stw	zero,28(sp)
   83180:	d8000815 	stw	zero,32(sp)
   83184:	d8000615 	stw	zero,24(sp)
   83188:	003f8d06 	br	82fc0 <__divdf3+0x8c>

0008318c <__eqdf2>:
   8318c:	deffef04 	addi	sp,sp,-68
   83190:	dc400f15 	stw	r17,60(sp)
   83194:	dc400404 	addi	r17,sp,16
   83198:	2005883a 	mov	r2,r4
   8319c:	2807883a 	mov	r3,r5
   831a0:	dc000e15 	stw	r16,56(sp)
   831a4:	d809883a 	mov	r4,sp
   831a8:	880b883a 	mov	r5,r17
   831ac:	dc000904 	addi	r16,sp,36
   831b0:	d8c00115 	stw	r3,4(sp)
   831b4:	d8800015 	stw	r2,0(sp)
   831b8:	d9800215 	stw	r6,8(sp)
   831bc:	dfc01015 	stw	ra,64(sp)
   831c0:	d9c00315 	stw	r7,12(sp)
   831c4:	0083c400 	call	83c40 <__unpack_d>
   831c8:	d9000204 	addi	r4,sp,8
   831cc:	800b883a 	mov	r5,r16
   831d0:	0083c400 	call	83c40 <__unpack_d>
   831d4:	d8800417 	ldw	r2,16(sp)
   831d8:	00c00044 	movi	r3,1
   831dc:	180d883a 	mov	r6,r3
   831e0:	1880062e 	bgeu	r3,r2,831fc <__eqdf2+0x70>
   831e4:	d8800917 	ldw	r2,36(sp)
   831e8:	8809883a 	mov	r4,r17
   831ec:	800b883a 	mov	r5,r16
   831f0:	1880022e 	bgeu	r3,r2,831fc <__eqdf2+0x70>
   831f4:	0083d780 	call	83d78 <__fpcmp_parts_d>
   831f8:	100d883a 	mov	r6,r2
   831fc:	3005883a 	mov	r2,r6
   83200:	dfc01017 	ldw	ra,64(sp)
   83204:	dc400f17 	ldw	r17,60(sp)
   83208:	dc000e17 	ldw	r16,56(sp)
   8320c:	dec01104 	addi	sp,sp,68
   83210:	f800283a 	ret

00083214 <__nedf2>:
   83214:	deffef04 	addi	sp,sp,-68
   83218:	dc400f15 	stw	r17,60(sp)
   8321c:	dc400404 	addi	r17,sp,16
   83220:	2005883a 	mov	r2,r4
   83224:	2807883a 	mov	r3,r5
   83228:	dc000e15 	stw	r16,56(sp)
   8322c:	d809883a 	mov	r4,sp
   83230:	880b883a 	mov	r5,r17
   83234:	dc000904 	addi	r16,sp,36
   83238:	d8c00115 	stw	r3,4(sp)
   8323c:	d8800015 	stw	r2,0(sp)
   83240:	d9800215 	stw	r6,8(sp)
   83244:	dfc01015 	stw	ra,64(sp)
   83248:	d9c00315 	stw	r7,12(sp)
   8324c:	0083c400 	call	83c40 <__unpack_d>
   83250:	d9000204 	addi	r4,sp,8
   83254:	800b883a 	mov	r5,r16
   83258:	0083c400 	call	83c40 <__unpack_d>
   8325c:	d8800417 	ldw	r2,16(sp)
   83260:	00c00044 	movi	r3,1
   83264:	180d883a 	mov	r6,r3
   83268:	1880062e 	bgeu	r3,r2,83284 <__nedf2+0x70>
   8326c:	d8800917 	ldw	r2,36(sp)
   83270:	8809883a 	mov	r4,r17
   83274:	800b883a 	mov	r5,r16
   83278:	1880022e 	bgeu	r3,r2,83284 <__nedf2+0x70>
   8327c:	0083d780 	call	83d78 <__fpcmp_parts_d>
   83280:	100d883a 	mov	r6,r2
   83284:	3005883a 	mov	r2,r6
   83288:	dfc01017 	ldw	ra,64(sp)
   8328c:	dc400f17 	ldw	r17,60(sp)
   83290:	dc000e17 	ldw	r16,56(sp)
   83294:	dec01104 	addi	sp,sp,68
   83298:	f800283a 	ret

0008329c <__gtdf2>:
   8329c:	deffef04 	addi	sp,sp,-68
   832a0:	dc400f15 	stw	r17,60(sp)
   832a4:	dc400404 	addi	r17,sp,16
   832a8:	2005883a 	mov	r2,r4
   832ac:	2807883a 	mov	r3,r5
   832b0:	dc000e15 	stw	r16,56(sp)
   832b4:	d809883a 	mov	r4,sp
   832b8:	880b883a 	mov	r5,r17
   832bc:	dc000904 	addi	r16,sp,36
   832c0:	d8c00115 	stw	r3,4(sp)
   832c4:	d8800015 	stw	r2,0(sp)
   832c8:	d9800215 	stw	r6,8(sp)
   832cc:	dfc01015 	stw	ra,64(sp)
   832d0:	d9c00315 	stw	r7,12(sp)
   832d4:	0083c400 	call	83c40 <__unpack_d>
   832d8:	d9000204 	addi	r4,sp,8
   832dc:	800b883a 	mov	r5,r16
   832e0:	0083c400 	call	83c40 <__unpack_d>
   832e4:	d8800417 	ldw	r2,16(sp)
   832e8:	00c00044 	movi	r3,1
   832ec:	01bfffc4 	movi	r6,-1
   832f0:	1880062e 	bgeu	r3,r2,8330c <__gtdf2+0x70>
   832f4:	d8800917 	ldw	r2,36(sp)
   832f8:	8809883a 	mov	r4,r17
   832fc:	800b883a 	mov	r5,r16
   83300:	1880022e 	bgeu	r3,r2,8330c <__gtdf2+0x70>
   83304:	0083d780 	call	83d78 <__fpcmp_parts_d>
   83308:	100d883a 	mov	r6,r2
   8330c:	3005883a 	mov	r2,r6
   83310:	dfc01017 	ldw	ra,64(sp)
   83314:	dc400f17 	ldw	r17,60(sp)
   83318:	dc000e17 	ldw	r16,56(sp)
   8331c:	dec01104 	addi	sp,sp,68
   83320:	f800283a 	ret

00083324 <__ltdf2>:
   83324:	deffef04 	addi	sp,sp,-68
   83328:	dc400f15 	stw	r17,60(sp)
   8332c:	dc400404 	addi	r17,sp,16
   83330:	2005883a 	mov	r2,r4
   83334:	2807883a 	mov	r3,r5
   83338:	dc000e15 	stw	r16,56(sp)
   8333c:	d809883a 	mov	r4,sp
   83340:	880b883a 	mov	r5,r17
   83344:	dc000904 	addi	r16,sp,36
   83348:	d8c00115 	stw	r3,4(sp)
   8334c:	d8800015 	stw	r2,0(sp)
   83350:	d9800215 	stw	r6,8(sp)
   83354:	dfc01015 	stw	ra,64(sp)
   83358:	d9c00315 	stw	r7,12(sp)
   8335c:	0083c400 	call	83c40 <__unpack_d>
   83360:	d9000204 	addi	r4,sp,8
   83364:	800b883a 	mov	r5,r16
   83368:	0083c400 	call	83c40 <__unpack_d>
   8336c:	d8800417 	ldw	r2,16(sp)
   83370:	00c00044 	movi	r3,1
   83374:	180d883a 	mov	r6,r3
   83378:	1880062e 	bgeu	r3,r2,83394 <__ltdf2+0x70>
   8337c:	d8800917 	ldw	r2,36(sp)
   83380:	8809883a 	mov	r4,r17
   83384:	800b883a 	mov	r5,r16
   83388:	1880022e 	bgeu	r3,r2,83394 <__ltdf2+0x70>
   8338c:	0083d780 	call	83d78 <__fpcmp_parts_d>
   83390:	100d883a 	mov	r6,r2
   83394:	3005883a 	mov	r2,r6
   83398:	dfc01017 	ldw	ra,64(sp)
   8339c:	dc400f17 	ldw	r17,60(sp)
   833a0:	dc000e17 	ldw	r16,56(sp)
   833a4:	dec01104 	addi	sp,sp,68
   833a8:	f800283a 	ret

000833ac <__ledf2>:
   833ac:	deffef04 	addi	sp,sp,-68
   833b0:	dc400f15 	stw	r17,60(sp)
   833b4:	dc400404 	addi	r17,sp,16
   833b8:	2005883a 	mov	r2,r4
   833bc:	2807883a 	mov	r3,r5
   833c0:	dc000e15 	stw	r16,56(sp)
   833c4:	d809883a 	mov	r4,sp
   833c8:	880b883a 	mov	r5,r17
   833cc:	dc000904 	addi	r16,sp,36
   833d0:	d8c00115 	stw	r3,4(sp)
   833d4:	d8800015 	stw	r2,0(sp)
   833d8:	d9800215 	stw	r6,8(sp)
   833dc:	dfc01015 	stw	ra,64(sp)
   833e0:	d9c00315 	stw	r7,12(sp)
   833e4:	0083c400 	call	83c40 <__unpack_d>
   833e8:	d9000204 	addi	r4,sp,8
   833ec:	800b883a 	mov	r5,r16
   833f0:	0083c400 	call	83c40 <__unpack_d>
   833f4:	d8800417 	ldw	r2,16(sp)
   833f8:	00c00044 	movi	r3,1
   833fc:	180d883a 	mov	r6,r3
   83400:	1880062e 	bgeu	r3,r2,8341c <__ledf2+0x70>
   83404:	d8800917 	ldw	r2,36(sp)
   83408:	8809883a 	mov	r4,r17
   8340c:	800b883a 	mov	r5,r16
   83410:	1880022e 	bgeu	r3,r2,8341c <__ledf2+0x70>
   83414:	0083d780 	call	83d78 <__fpcmp_parts_d>
   83418:	100d883a 	mov	r6,r2
   8341c:	3005883a 	mov	r2,r6
   83420:	dfc01017 	ldw	ra,64(sp)
   83424:	dc400f17 	ldw	r17,60(sp)
   83428:	dc000e17 	ldw	r16,56(sp)
   8342c:	dec01104 	addi	sp,sp,68
   83430:	f800283a 	ret

00083434 <__floatsidf>:
   83434:	2006d7fa 	srli	r3,r4,31
   83438:	defff604 	addi	sp,sp,-40
   8343c:	008000c4 	movi	r2,3
   83440:	dfc00915 	stw	ra,36(sp)
   83444:	dcc00815 	stw	r19,32(sp)
   83448:	dc800715 	stw	r18,28(sp)
   8344c:	dc400615 	stw	r17,24(sp)
   83450:	dc000515 	stw	r16,20(sp)
   83454:	d8800015 	stw	r2,0(sp)
   83458:	d8c00115 	stw	r3,4(sp)
   8345c:	20000f1e 	bne	r4,zero,8349c <__floatsidf+0x68>
   83460:	00800084 	movi	r2,2
   83464:	d8800015 	stw	r2,0(sp)
   83468:	d809883a 	mov	r4,sp
   8346c:	008392c0 	call	8392c <__pack_d>
   83470:	1009883a 	mov	r4,r2
   83474:	180b883a 	mov	r5,r3
   83478:	2005883a 	mov	r2,r4
   8347c:	2807883a 	mov	r3,r5
   83480:	dfc00917 	ldw	ra,36(sp)
   83484:	dcc00817 	ldw	r19,32(sp)
   83488:	dc800717 	ldw	r18,28(sp)
   8348c:	dc400617 	ldw	r17,24(sp)
   83490:	dc000517 	ldw	r16,20(sp)
   83494:	dec00a04 	addi	sp,sp,40
   83498:	f800283a 	ret
   8349c:	00800f04 	movi	r2,60
   834a0:	1807003a 	cmpeq	r3,r3,zero
   834a4:	d8800215 	stw	r2,8(sp)
   834a8:	18001126 	beq	r3,zero,834f0 <__floatsidf+0xbc>
   834ac:	0027883a 	mov	r19,zero
   834b0:	2025883a 	mov	r18,r4
   834b4:	d9000315 	stw	r4,12(sp)
   834b8:	dcc00415 	stw	r19,16(sp)
   834bc:	00838ac0 	call	838ac <__clzsi2>
   834c0:	11000744 	addi	r4,r2,29
   834c4:	013fe80e 	bge	zero,r4,83468 <__floatsidf+0x34>
   834c8:	10bfff44 	addi	r2,r2,-3
   834cc:	10000c16 	blt	r2,zero,83500 <__floatsidf+0xcc>
   834d0:	90a2983a 	sll	r17,r18,r2
   834d4:	0021883a 	mov	r16,zero
   834d8:	d8800217 	ldw	r2,8(sp)
   834dc:	dc400415 	stw	r17,16(sp)
   834e0:	dc000315 	stw	r16,12(sp)
   834e4:	1105c83a 	sub	r2,r2,r4
   834e8:	d8800215 	stw	r2,8(sp)
   834ec:	003fde06 	br	83468 <__floatsidf+0x34>
   834f0:	00a00034 	movhi	r2,32768
   834f4:	20800a26 	beq	r4,r2,83520 <__floatsidf+0xec>
   834f8:	0109c83a 	sub	r4,zero,r4
   834fc:	003feb06 	br	834ac <__floatsidf+0x78>
   83500:	9006d07a 	srli	r3,r18,1
   83504:	008007c4 	movi	r2,31
   83508:	1105c83a 	sub	r2,r2,r4
   8350c:	1886d83a 	srl	r3,r3,r2
   83510:	9922983a 	sll	r17,r19,r4
   83514:	9120983a 	sll	r16,r18,r4
   83518:	1c62b03a 	or	r17,r3,r17
   8351c:	003fee06 	br	834d8 <__floatsidf+0xa4>
   83520:	0009883a 	mov	r4,zero
   83524:	01707834 	movhi	r5,49632
   83528:	003fd306 	br	83478 <__floatsidf+0x44>

0008352c <__fixdfsi>:
   8352c:	defff804 	addi	sp,sp,-32
   83530:	2005883a 	mov	r2,r4
   83534:	2807883a 	mov	r3,r5
   83538:	d809883a 	mov	r4,sp
   8353c:	d9400204 	addi	r5,sp,8
   83540:	d8c00115 	stw	r3,4(sp)
   83544:	d8800015 	stw	r2,0(sp)
   83548:	dfc00715 	stw	ra,28(sp)
   8354c:	0083c400 	call	83c40 <__unpack_d>
   83550:	d8c00217 	ldw	r3,8(sp)
   83554:	00800084 	movi	r2,2
   83558:	1880051e 	bne	r3,r2,83570 <__fixdfsi+0x44>
   8355c:	0007883a 	mov	r3,zero
   83560:	1805883a 	mov	r2,r3
   83564:	dfc00717 	ldw	ra,28(sp)
   83568:	dec00804 	addi	sp,sp,32
   8356c:	f800283a 	ret
   83570:	00800044 	movi	r2,1
   83574:	10fff92e 	bgeu	r2,r3,8355c <__fixdfsi+0x30>
   83578:	00800104 	movi	r2,4
   8357c:	18800426 	beq	r3,r2,83590 <__fixdfsi+0x64>
   83580:	d8c00417 	ldw	r3,16(sp)
   83584:	183ff516 	blt	r3,zero,8355c <__fixdfsi+0x30>
   83588:	00800784 	movi	r2,30
   8358c:	10c0080e 	bge	r2,r3,835b0 <__fixdfsi+0x84>
   83590:	d8800317 	ldw	r2,12(sp)
   83594:	1000121e 	bne	r2,zero,835e0 <__fixdfsi+0xb4>
   83598:	00e00034 	movhi	r3,32768
   8359c:	18ffffc4 	addi	r3,r3,-1
   835a0:	1805883a 	mov	r2,r3
   835a4:	dfc00717 	ldw	ra,28(sp)
   835a8:	dec00804 	addi	sp,sp,32
   835ac:	f800283a 	ret
   835b0:	00800f04 	movi	r2,60
   835b4:	10d1c83a 	sub	r8,r2,r3
   835b8:	40bff804 	addi	r2,r8,-32
   835bc:	d9800517 	ldw	r6,20(sp)
   835c0:	d9c00617 	ldw	r7,24(sp)
   835c4:	10000816 	blt	r2,zero,835e8 <__fixdfsi+0xbc>
   835c8:	3888d83a 	srl	r4,r7,r2
   835cc:	d8800317 	ldw	r2,12(sp)
   835d0:	2007883a 	mov	r3,r4
   835d4:	103fe226 	beq	r2,zero,83560 <__fixdfsi+0x34>
   835d8:	0107c83a 	sub	r3,zero,r4
   835dc:	003fe006 	br	83560 <__fixdfsi+0x34>
   835e0:	00e00034 	movhi	r3,32768
   835e4:	003fde06 	br	83560 <__fixdfsi+0x34>
   835e8:	39c7883a 	add	r3,r7,r7
   835ec:	008007c4 	movi	r2,31
   835f0:	1205c83a 	sub	r2,r2,r8
   835f4:	1886983a 	sll	r3,r3,r2
   835f8:	3208d83a 	srl	r4,r6,r8
   835fc:	1908b03a 	or	r4,r3,r4
   83600:	003ff206 	br	835cc <__fixdfsi+0xa0>

00083604 <udivmodsi4>:
   83604:	29001b2e 	bgeu	r5,r4,83674 <udivmodsi4+0x70>
   83608:	28001a16 	blt	r5,zero,83674 <udivmodsi4+0x70>
   8360c:	00800044 	movi	r2,1
   83610:	0007883a 	mov	r3,zero
   83614:	01c007c4 	movi	r7,31
   83618:	00000306 	br	83628 <udivmodsi4+0x24>
   8361c:	19c01326 	beq	r3,r7,8366c <udivmodsi4+0x68>
   83620:	18c00044 	addi	r3,r3,1
   83624:	28000416 	blt	r5,zero,83638 <udivmodsi4+0x34>
   83628:	294b883a 	add	r5,r5,r5
   8362c:	1085883a 	add	r2,r2,r2
   83630:	293ffa36 	bltu	r5,r4,8361c <udivmodsi4+0x18>
   83634:	10000d26 	beq	r2,zero,8366c <udivmodsi4+0x68>
   83638:	0007883a 	mov	r3,zero
   8363c:	21400236 	bltu	r4,r5,83648 <udivmodsi4+0x44>
   83640:	2149c83a 	sub	r4,r4,r5
   83644:	1886b03a 	or	r3,r3,r2
   83648:	1004d07a 	srli	r2,r2,1
   8364c:	280ad07a 	srli	r5,r5,1
   83650:	103ffa1e 	bne	r2,zero,8363c <udivmodsi4+0x38>
   83654:	30000226 	beq	r6,zero,83660 <udivmodsi4+0x5c>
   83658:	2005883a 	mov	r2,r4
   8365c:	f800283a 	ret
   83660:	1809883a 	mov	r4,r3
   83664:	2005883a 	mov	r2,r4
   83668:	f800283a 	ret
   8366c:	0007883a 	mov	r3,zero
   83670:	003ff806 	br	83654 <udivmodsi4+0x50>
   83674:	00800044 	movi	r2,1
   83678:	0007883a 	mov	r3,zero
   8367c:	003fef06 	br	8363c <udivmodsi4+0x38>

00083680 <__divsi3>:
   83680:	defffe04 	addi	sp,sp,-8
   83684:	dc000015 	stw	r16,0(sp)
   83688:	dfc00115 	stw	ra,4(sp)
   8368c:	0021883a 	mov	r16,zero
   83690:	20000c16 	blt	r4,zero,836c4 <__divsi3+0x44>
   83694:	000d883a 	mov	r6,zero
   83698:	28000e16 	blt	r5,zero,836d4 <__divsi3+0x54>
   8369c:	00836040 	call	83604 <udivmodsi4>
   836a0:	1007883a 	mov	r3,r2
   836a4:	8005003a 	cmpeq	r2,r16,zero
   836a8:	1000011e 	bne	r2,zero,836b0 <__divsi3+0x30>
   836ac:	00c7c83a 	sub	r3,zero,r3
   836b0:	1805883a 	mov	r2,r3
   836b4:	dfc00117 	ldw	ra,4(sp)
   836b8:	dc000017 	ldw	r16,0(sp)
   836bc:	dec00204 	addi	sp,sp,8
   836c0:	f800283a 	ret
   836c4:	0109c83a 	sub	r4,zero,r4
   836c8:	04000044 	movi	r16,1
   836cc:	000d883a 	mov	r6,zero
   836d0:	283ff20e 	bge	r5,zero,8369c <__divsi3+0x1c>
   836d4:	014bc83a 	sub	r5,zero,r5
   836d8:	8021003a 	cmpeq	r16,r16,zero
   836dc:	003fef06 	br	8369c <__divsi3+0x1c>

000836e0 <__modsi3>:
   836e0:	deffff04 	addi	sp,sp,-4
   836e4:	dfc00015 	stw	ra,0(sp)
   836e8:	01800044 	movi	r6,1
   836ec:	2807883a 	mov	r3,r5
   836f0:	20000416 	blt	r4,zero,83704 <__modsi3+0x24>
   836f4:	28000c16 	blt	r5,zero,83728 <__modsi3+0x48>
   836f8:	dfc00017 	ldw	ra,0(sp)
   836fc:	dec00104 	addi	sp,sp,4
   83700:	00836041 	jmpi	83604 <udivmodsi4>
   83704:	0109c83a 	sub	r4,zero,r4
   83708:	28000b16 	blt	r5,zero,83738 <__modsi3+0x58>
   8370c:	180b883a 	mov	r5,r3
   83710:	01800044 	movi	r6,1
   83714:	00836040 	call	83604 <udivmodsi4>
   83718:	0085c83a 	sub	r2,zero,r2
   8371c:	dfc00017 	ldw	ra,0(sp)
   83720:	dec00104 	addi	sp,sp,4
   83724:	f800283a 	ret
   83728:	014bc83a 	sub	r5,zero,r5
   8372c:	dfc00017 	ldw	ra,0(sp)
   83730:	dec00104 	addi	sp,sp,4
   83734:	00836041 	jmpi	83604 <udivmodsi4>
   83738:	0147c83a 	sub	r3,zero,r5
   8373c:	003ff306 	br	8370c <__modsi3+0x2c>

00083740 <__udivsi3>:
   83740:	000d883a 	mov	r6,zero
   83744:	00836041 	jmpi	83604 <udivmodsi4>

00083748 <__umodsi3>:
   83748:	01800044 	movi	r6,1
   8374c:	00836041 	jmpi	83604 <udivmodsi4>

00083750 <__mulsi3>:
   83750:	20000a26 	beq	r4,zero,8377c <__mulsi3+0x2c>
   83754:	0007883a 	mov	r3,zero
   83758:	2080004c 	andi	r2,r4,1
   8375c:	1005003a 	cmpeq	r2,r2,zero
   83760:	2008d07a 	srli	r4,r4,1
   83764:	1000011e 	bne	r2,zero,8376c <__mulsi3+0x1c>
   83768:	1947883a 	add	r3,r3,r5
   8376c:	294b883a 	add	r5,r5,r5
   83770:	203ff91e 	bne	r4,zero,83758 <__mulsi3+0x8>
   83774:	1805883a 	mov	r2,r3
   83778:	f800283a 	ret
   8377c:	0007883a 	mov	r3,zero
   83780:	1805883a 	mov	r2,r3
   83784:	f800283a 	ret

00083788 <__muldi3>:
   83788:	defff204 	addi	sp,sp,-56
   8378c:	df000c15 	stw	fp,48(sp)
   83790:	3038d43a 	srli	fp,r6,16
   83794:	dd000815 	stw	r20,32(sp)
   83798:	dc400515 	stw	r17,20(sp)
   8379c:	2028d43a 	srli	r20,r4,16
   837a0:	247fffcc 	andi	r17,r4,65535
   837a4:	dc000415 	stw	r16,16(sp)
   837a8:	343fffcc 	andi	r16,r6,65535
   837ac:	dcc00715 	stw	r19,28(sp)
   837b0:	d9000015 	stw	r4,0(sp)
   837b4:	2827883a 	mov	r19,r5
   837b8:	8809883a 	mov	r4,r17
   837bc:	d9400115 	stw	r5,4(sp)
   837c0:	800b883a 	mov	r5,r16
   837c4:	d9800215 	stw	r6,8(sp)
   837c8:	dfc00d15 	stw	ra,52(sp)
   837cc:	d9c00315 	stw	r7,12(sp)
   837d0:	dd800a15 	stw	r22,40(sp)
   837d4:	dd400915 	stw	r21,36(sp)
   837d8:	302d883a 	mov	r22,r6
   837dc:	ddc00b15 	stw	r23,44(sp)
   837e0:	dc800615 	stw	r18,24(sp)
   837e4:	00837500 	call	83750 <__mulsi3>
   837e8:	8809883a 	mov	r4,r17
   837ec:	e00b883a 	mov	r5,fp
   837f0:	102b883a 	mov	r21,r2
   837f4:	00837500 	call	83750 <__mulsi3>
   837f8:	800b883a 	mov	r5,r16
   837fc:	a009883a 	mov	r4,r20
   83800:	1023883a 	mov	r17,r2
   83804:	00837500 	call	83750 <__mulsi3>
   83808:	a009883a 	mov	r4,r20
   8380c:	e00b883a 	mov	r5,fp
   83810:	1021883a 	mov	r16,r2
   83814:	00837500 	call	83750 <__mulsi3>
   83818:	a8ffffcc 	andi	r3,r21,65535
   8381c:	a82ad43a 	srli	r21,r21,16
   83820:	8c23883a 	add	r17,r17,r16
   83824:	1011883a 	mov	r8,r2
   83828:	ac6b883a 	add	r21,r21,r17
   8382c:	a804943a 	slli	r2,r21,16
   83830:	b009883a 	mov	r4,r22
   83834:	980b883a 	mov	r5,r19
   83838:	10c7883a 	add	r3,r2,r3
   8383c:	a812d43a 	srli	r9,r21,16
   83840:	180d883a 	mov	r6,r3
   83844:	ac00022e 	bgeu	r21,r16,83850 <__muldi3+0xc8>
   83848:	00800074 	movhi	r2,1
   8384c:	4091883a 	add	r8,r8,r2
   83850:	4267883a 	add	r19,r8,r9
   83854:	302d883a 	mov	r22,r6
   83858:	00837500 	call	83750 <__mulsi3>
   8385c:	d9400317 	ldw	r5,12(sp)
   83860:	d9000017 	ldw	r4,0(sp)
   83864:	1023883a 	mov	r17,r2
   83868:	00837500 	call	83750 <__mulsi3>
   8386c:	14cb883a 	add	r5,r2,r19
   83870:	894b883a 	add	r5,r17,r5
   83874:	b005883a 	mov	r2,r22
   83878:	2807883a 	mov	r3,r5
   8387c:	dfc00d17 	ldw	ra,52(sp)
   83880:	df000c17 	ldw	fp,48(sp)
   83884:	ddc00b17 	ldw	r23,44(sp)
   83888:	dd800a17 	ldw	r22,40(sp)
   8388c:	dd400917 	ldw	r21,36(sp)
   83890:	dd000817 	ldw	r20,32(sp)
   83894:	dcc00717 	ldw	r19,28(sp)
   83898:	dc800617 	ldw	r18,24(sp)
   8389c:	dc400517 	ldw	r17,20(sp)
   838a0:	dc000417 	ldw	r16,16(sp)
   838a4:	dec00e04 	addi	sp,sp,56
   838a8:	f800283a 	ret

000838ac <__clzsi2>:
   838ac:	00bfffd4 	movui	r2,65535
   838b0:	11000e36 	bltu	r2,r4,838ec <__clzsi2+0x40>
   838b4:	00803fc4 	movi	r2,255
   838b8:	01400204 	movi	r5,8
   838bc:	0007883a 	mov	r3,zero
   838c0:	11001036 	bltu	r2,r4,83904 <__clzsi2+0x58>
   838c4:	000b883a 	mov	r5,zero
   838c8:	20c6d83a 	srl	r3,r4,r3
   838cc:	00800274 	movhi	r2,9
   838d0:	10bc3d04 	addi	r2,r2,-3852
   838d4:	1887883a 	add	r3,r3,r2
   838d8:	18800003 	ldbu	r2,0(r3)
   838dc:	00c00804 	movi	r3,32
   838e0:	2885883a 	add	r2,r5,r2
   838e4:	1885c83a 	sub	r2,r3,r2
   838e8:	f800283a 	ret
   838ec:	01400404 	movi	r5,16
   838f0:	00804034 	movhi	r2,256
   838f4:	10bfffc4 	addi	r2,r2,-1
   838f8:	2807883a 	mov	r3,r5
   838fc:	113ff22e 	bgeu	r2,r4,838c8 <__clzsi2+0x1c>
   83900:	01400604 	movi	r5,24
   83904:	2807883a 	mov	r3,r5
   83908:	20c6d83a 	srl	r3,r4,r3
   8390c:	00800274 	movhi	r2,9
   83910:	10bc3d04 	addi	r2,r2,-3852
   83914:	1887883a 	add	r3,r3,r2
   83918:	18800003 	ldbu	r2,0(r3)
   8391c:	00c00804 	movi	r3,32
   83920:	2885883a 	add	r2,r5,r2
   83924:	1885c83a 	sub	r2,r3,r2
   83928:	f800283a 	ret

0008392c <__pack_d>:
   8392c:	20c00017 	ldw	r3,0(r4)
   83930:	defffd04 	addi	sp,sp,-12
   83934:	dc000015 	stw	r16,0(sp)
   83938:	dc800215 	stw	r18,8(sp)
   8393c:	dc400115 	stw	r17,4(sp)
   83940:	00800044 	movi	r2,1
   83944:	22000317 	ldw	r8,12(r4)
   83948:	001f883a 	mov	r15,zero
   8394c:	22400417 	ldw	r9,16(r4)
   83950:	24000117 	ldw	r16,4(r4)
   83954:	10c0552e 	bgeu	r2,r3,83aac <__pack_d+0x180>
   83958:	00800104 	movi	r2,4
   8395c:	18804f26 	beq	r3,r2,83a9c <__pack_d+0x170>
   83960:	00800084 	movi	r2,2
   83964:	18800226 	beq	r3,r2,83970 <__pack_d+0x44>
   83968:	4244b03a 	or	r2,r8,r9
   8396c:	10001a1e 	bne	r2,zero,839d8 <__pack_d+0xac>
   83970:	000d883a 	mov	r6,zero
   83974:	000f883a 	mov	r7,zero
   83978:	0011883a 	mov	r8,zero
   8397c:	00800434 	movhi	r2,16
   83980:	10bfffc4 	addi	r2,r2,-1
   83984:	301d883a 	mov	r14,r6
   83988:	3884703a 	and	r2,r7,r2
   8398c:	400a953a 	slli	r5,r8,20
   83990:	79bffc2c 	andhi	r6,r15,65520
   83994:	308cb03a 	or	r6,r6,r2
   83998:	00e00434 	movhi	r3,32784
   8399c:	18ffffc4 	addi	r3,r3,-1
   839a0:	800497fa 	slli	r2,r16,31
   839a4:	30c6703a 	and	r3,r6,r3
   839a8:	1946b03a 	or	r3,r3,r5
   839ac:	01600034 	movhi	r5,32768
   839b0:	297fffc4 	addi	r5,r5,-1
   839b4:	194a703a 	and	r5,r3,r5
   839b8:	288ab03a 	or	r5,r5,r2
   839bc:	2807883a 	mov	r3,r5
   839c0:	7005883a 	mov	r2,r14
   839c4:	dc800217 	ldw	r18,8(sp)
   839c8:	dc400117 	ldw	r17,4(sp)
   839cc:	dc000017 	ldw	r16,0(sp)
   839d0:	dec00304 	addi	sp,sp,12
   839d4:	f800283a 	ret
   839d8:	21000217 	ldw	r4,8(r4)
   839dc:	00bf0084 	movi	r2,-1022
   839e0:	20803f16 	blt	r4,r2,83ae0 <__pack_d+0x1b4>
   839e4:	0080ffc4 	movi	r2,1023
   839e8:	11002c16 	blt	r2,r4,83a9c <__pack_d+0x170>
   839ec:	00803fc4 	movi	r2,255
   839f0:	408c703a 	and	r6,r8,r2
   839f4:	00802004 	movi	r2,128
   839f8:	0007883a 	mov	r3,zero
   839fc:	000f883a 	mov	r7,zero
   83a00:	2280ffc4 	addi	r10,r4,1023
   83a04:	30801e26 	beq	r6,r2,83a80 <__pack_d+0x154>
   83a08:	00801fc4 	movi	r2,127
   83a0c:	4089883a 	add	r4,r8,r2
   83a10:	220d803a 	cmpltu	r6,r4,r8
   83a14:	324d883a 	add	r6,r6,r9
   83a18:	2011883a 	mov	r8,r4
   83a1c:	3013883a 	mov	r9,r6
   83a20:	00880034 	movhi	r2,8192
   83a24:	10bfffc4 	addi	r2,r2,-1
   83a28:	12400d36 	bltu	r2,r9,83a60 <__pack_d+0x134>
   83a2c:	4804963a 	slli	r2,r9,24
   83a30:	400cd23a 	srli	r6,r8,8
   83a34:	480ed23a 	srli	r7,r9,8
   83a38:	013fffc4 	movi	r4,-1
   83a3c:	118cb03a 	or	r6,r2,r6
   83a40:	01400434 	movhi	r5,16
   83a44:	297fffc4 	addi	r5,r5,-1
   83a48:	3104703a 	and	r2,r6,r4
   83a4c:	3946703a 	and	r3,r7,r5
   83a50:	5201ffcc 	andi	r8,r10,2047
   83a54:	100d883a 	mov	r6,r2
   83a58:	180f883a 	mov	r7,r3
   83a5c:	003fc706 	br	8397c <__pack_d+0x50>
   83a60:	480897fa 	slli	r4,r9,31
   83a64:	4004d07a 	srli	r2,r8,1
   83a68:	4806d07a 	srli	r3,r9,1
   83a6c:	52800044 	addi	r10,r10,1
   83a70:	2084b03a 	or	r2,r4,r2
   83a74:	1011883a 	mov	r8,r2
   83a78:	1813883a 	mov	r9,r3
   83a7c:	003feb06 	br	83a2c <__pack_d+0x100>
   83a80:	383fe11e 	bne	r7,zero,83a08 <__pack_d+0xdc>
   83a84:	01004004 	movi	r4,256
   83a88:	4104703a 	and	r2,r8,r4
   83a8c:	10c4b03a 	or	r2,r2,r3
   83a90:	103fe326 	beq	r2,zero,83a20 <__pack_d+0xf4>
   83a94:	3005883a 	mov	r2,r6
   83a98:	003fdc06 	br	83a0c <__pack_d+0xe0>
   83a9c:	000d883a 	mov	r6,zero
   83aa0:	000f883a 	mov	r7,zero
   83aa4:	0201ffc4 	movi	r8,2047
   83aa8:	003fb406 	br	8397c <__pack_d+0x50>
   83aac:	0005883a 	mov	r2,zero
   83ab0:	00c00234 	movhi	r3,8
   83ab4:	408cb03a 	or	r6,r8,r2
   83ab8:	48ceb03a 	or	r7,r9,r3
   83abc:	013fffc4 	movi	r4,-1
   83ac0:	01400434 	movhi	r5,16
   83ac4:	297fffc4 	addi	r5,r5,-1
   83ac8:	3104703a 	and	r2,r6,r4
   83acc:	3946703a 	and	r3,r7,r5
   83ad0:	100d883a 	mov	r6,r2
   83ad4:	180f883a 	mov	r7,r3
   83ad8:	0201ffc4 	movi	r8,2047
   83adc:	003fa706 	br	8397c <__pack_d+0x50>
   83ae0:	1109c83a 	sub	r4,r2,r4
   83ae4:	00800e04 	movi	r2,56
   83ae8:	11004316 	blt	r2,r4,83bf8 <__pack_d+0x2cc>
   83aec:	21fff804 	addi	r7,r4,-32
   83af0:	38004516 	blt	r7,zero,83c08 <__pack_d+0x2dc>
   83af4:	49d8d83a 	srl	r12,r9,r7
   83af8:	001b883a 	mov	r13,zero
   83afc:	0023883a 	mov	r17,zero
   83b00:	01400044 	movi	r5,1
   83b04:	0025883a 	mov	r18,zero
   83b08:	38004716 	blt	r7,zero,83c28 <__pack_d+0x2fc>
   83b0c:	29d6983a 	sll	r11,r5,r7
   83b10:	0015883a 	mov	r10,zero
   83b14:	00bfffc4 	movi	r2,-1
   83b18:	5089883a 	add	r4,r10,r2
   83b1c:	588b883a 	add	r5,r11,r2
   83b20:	228d803a 	cmpltu	r6,r4,r10
   83b24:	314b883a 	add	r5,r6,r5
   83b28:	4104703a 	and	r2,r8,r4
   83b2c:	4946703a 	and	r3,r9,r5
   83b30:	10c4b03a 	or	r2,r2,r3
   83b34:	10000226 	beq	r2,zero,83b40 <__pack_d+0x214>
   83b38:	04400044 	movi	r17,1
   83b3c:	0025883a 	mov	r18,zero
   83b40:	00803fc4 	movi	r2,255
   83b44:	644eb03a 	or	r7,r12,r17
   83b48:	3892703a 	and	r9,r7,r2
   83b4c:	00802004 	movi	r2,128
   83b50:	6c90b03a 	or	r8,r13,r18
   83b54:	0015883a 	mov	r10,zero
   83b58:	48801626 	beq	r9,r2,83bb4 <__pack_d+0x288>
   83b5c:	01001fc4 	movi	r4,127
   83b60:	3905883a 	add	r2,r7,r4
   83b64:	11cd803a 	cmpltu	r6,r2,r7
   83b68:	320d883a 	add	r6,r6,r8
   83b6c:	100f883a 	mov	r7,r2
   83b70:	00840034 	movhi	r2,4096
   83b74:	10bfffc4 	addi	r2,r2,-1
   83b78:	3011883a 	mov	r8,r6
   83b7c:	0007883a 	mov	r3,zero
   83b80:	11801b36 	bltu	r2,r6,83bf0 <__pack_d+0x2c4>
   83b84:	4004963a 	slli	r2,r8,24
   83b88:	3808d23a 	srli	r4,r7,8
   83b8c:	400ad23a 	srli	r5,r8,8
   83b90:	1813883a 	mov	r9,r3
   83b94:	1108b03a 	or	r4,r2,r4
   83b98:	00bfffc4 	movi	r2,-1
   83b9c:	00c00434 	movhi	r3,16
   83ba0:	18ffffc4 	addi	r3,r3,-1
   83ba4:	208c703a 	and	r6,r4,r2
   83ba8:	28ce703a 	and	r7,r5,r3
   83bac:	4a01ffcc 	andi	r8,r9,2047
   83bb0:	003f7206 	br	8397c <__pack_d+0x50>
   83bb4:	503fe91e 	bne	r10,zero,83b5c <__pack_d+0x230>
   83bb8:	01004004 	movi	r4,256
   83bbc:	3904703a 	and	r2,r7,r4
   83bc0:	0007883a 	mov	r3,zero
   83bc4:	10c4b03a 	or	r2,r2,r3
   83bc8:	10000626 	beq	r2,zero,83be4 <__pack_d+0x2b8>
   83bcc:	3a45883a 	add	r2,r7,r9
   83bd0:	11cd803a 	cmpltu	r6,r2,r7
   83bd4:	320d883a 	add	r6,r6,r8
   83bd8:	100f883a 	mov	r7,r2
   83bdc:	3011883a 	mov	r8,r6
   83be0:	0007883a 	mov	r3,zero
   83be4:	00840034 	movhi	r2,4096
   83be8:	10bfffc4 	addi	r2,r2,-1
   83bec:	123fe52e 	bgeu	r2,r8,83b84 <__pack_d+0x258>
   83bf0:	00c00044 	movi	r3,1
   83bf4:	003fe306 	br	83b84 <__pack_d+0x258>
   83bf8:	0009883a 	mov	r4,zero
   83bfc:	0013883a 	mov	r9,zero
   83c00:	000b883a 	mov	r5,zero
   83c04:	003fe406 	br	83b98 <__pack_d+0x26c>
   83c08:	4a47883a 	add	r3,r9,r9
   83c0c:	008007c4 	movi	r2,31
   83c10:	1105c83a 	sub	r2,r2,r4
   83c14:	1886983a 	sll	r3,r3,r2
   83c18:	4118d83a 	srl	r12,r8,r4
   83c1c:	491ad83a 	srl	r13,r9,r4
   83c20:	1b18b03a 	or	r12,r3,r12
   83c24:	003fb506 	br	83afc <__pack_d+0x1d0>
   83c28:	2806d07a 	srli	r3,r5,1
   83c2c:	008007c4 	movi	r2,31
   83c30:	1105c83a 	sub	r2,r2,r4
   83c34:	1896d83a 	srl	r11,r3,r2
   83c38:	2914983a 	sll	r10,r5,r4
   83c3c:	003fb506 	br	83b14 <__pack_d+0x1e8>

00083c40 <__unpack_d>:
   83c40:	20c00117 	ldw	r3,4(r4)
   83c44:	22400017 	ldw	r9,0(r4)
   83c48:	00800434 	movhi	r2,16
   83c4c:	10bfffc4 	addi	r2,r2,-1
   83c50:	1808d53a 	srli	r4,r3,20
   83c54:	180cd7fa 	srli	r6,r3,31
   83c58:	1894703a 	and	r10,r3,r2
   83c5c:	2201ffcc 	andi	r8,r4,2047
   83c60:	281b883a 	mov	r13,r5
   83c64:	4817883a 	mov	r11,r9
   83c68:	29800115 	stw	r6,4(r5)
   83c6c:	5019883a 	mov	r12,r10
   83c70:	40001e1e 	bne	r8,zero,83cec <__unpack_d+0xac>
   83c74:	4a84b03a 	or	r2,r9,r10
   83c78:	10001926 	beq	r2,zero,83ce0 <__unpack_d+0xa0>
   83c7c:	4804d63a 	srli	r2,r9,24
   83c80:	500c923a 	slli	r6,r10,8
   83c84:	013f0084 	movi	r4,-1022
   83c88:	00c40034 	movhi	r3,4096
   83c8c:	18ffffc4 	addi	r3,r3,-1
   83c90:	118cb03a 	or	r6,r2,r6
   83c94:	008000c4 	movi	r2,3
   83c98:	480a923a 	slli	r5,r9,8
   83c9c:	68800015 	stw	r2,0(r13)
   83ca0:	69000215 	stw	r4,8(r13)
   83ca4:	19800b36 	bltu	r3,r6,83cd4 <__unpack_d+0x94>
   83ca8:	200f883a 	mov	r7,r4
   83cac:	1811883a 	mov	r8,r3
   83cb0:	2945883a 	add	r2,r5,r5
   83cb4:	1149803a 	cmpltu	r4,r2,r5
   83cb8:	3187883a 	add	r3,r6,r6
   83cbc:	20c9883a 	add	r4,r4,r3
   83cc0:	100b883a 	mov	r5,r2
   83cc4:	200d883a 	mov	r6,r4
   83cc8:	39ffffc4 	addi	r7,r7,-1
   83ccc:	413ff82e 	bgeu	r8,r4,83cb0 <__unpack_d+0x70>
   83cd0:	69c00215 	stw	r7,8(r13)
   83cd4:	69800415 	stw	r6,16(r13)
   83cd8:	69400315 	stw	r5,12(r13)
   83cdc:	f800283a 	ret
   83ce0:	00800084 	movi	r2,2
   83ce4:	28800015 	stw	r2,0(r5)
   83ce8:	f800283a 	ret
   83cec:	0081ffc4 	movi	r2,2047
   83cf0:	40800f26 	beq	r8,r2,83d30 <__unpack_d+0xf0>
   83cf4:	480cd63a 	srli	r6,r9,24
   83cf8:	5006923a 	slli	r3,r10,8
   83cfc:	4804923a 	slli	r2,r9,8
   83d00:	0009883a 	mov	r4,zero
   83d04:	30c6b03a 	or	r3,r6,r3
   83d08:	01440034 	movhi	r5,4096
   83d0c:	110cb03a 	or	r6,r2,r4
   83d10:	423f0044 	addi	r8,r8,-1023
   83d14:	194eb03a 	or	r7,r3,r5
   83d18:	008000c4 	movi	r2,3
   83d1c:	69c00415 	stw	r7,16(r13)
   83d20:	6a000215 	stw	r8,8(r13)
   83d24:	68800015 	stw	r2,0(r13)
   83d28:	69800315 	stw	r6,12(r13)
   83d2c:	f800283a 	ret
   83d30:	4a84b03a 	or	r2,r9,r10
   83d34:	1000031e 	bne	r2,zero,83d44 <__unpack_d+0x104>
   83d38:	00800104 	movi	r2,4
   83d3c:	28800015 	stw	r2,0(r5)
   83d40:	f800283a 	ret
   83d44:	0009883a 	mov	r4,zero
   83d48:	01400234 	movhi	r5,8
   83d4c:	4904703a 	and	r2,r9,r4
   83d50:	5146703a 	and	r3,r10,r5
   83d54:	10c4b03a 	or	r2,r2,r3
   83d58:	10000526 	beq	r2,zero,83d70 <__unpack_d+0x130>
   83d5c:	00800044 	movi	r2,1
   83d60:	68800015 	stw	r2,0(r13)
   83d64:	6b000415 	stw	r12,16(r13)
   83d68:	6ac00315 	stw	r11,12(r13)
   83d6c:	f800283a 	ret
   83d70:	68000015 	stw	zero,0(r13)
   83d74:	003ffb06 	br	83d64 <__unpack_d+0x124>

00083d78 <__fpcmp_parts_d>:
   83d78:	21800017 	ldw	r6,0(r4)
   83d7c:	00c00044 	movi	r3,1
   83d80:	19800a2e 	bgeu	r3,r6,83dac <__fpcmp_parts_d+0x34>
   83d84:	28800017 	ldw	r2,0(r5)
   83d88:	1880082e 	bgeu	r3,r2,83dac <__fpcmp_parts_d+0x34>
   83d8c:	00c00104 	movi	r3,4
   83d90:	30c02626 	beq	r6,r3,83e2c <__fpcmp_parts_d+0xb4>
   83d94:	10c02226 	beq	r2,r3,83e20 <__fpcmp_parts_d+0xa8>
   83d98:	00c00084 	movi	r3,2
   83d9c:	30c00526 	beq	r6,r3,83db4 <__fpcmp_parts_d+0x3c>
   83da0:	10c0071e 	bne	r2,r3,83dc0 <__fpcmp_parts_d+0x48>
   83da4:	20800117 	ldw	r2,4(r4)
   83da8:	1000091e 	bne	r2,zero,83dd0 <__fpcmp_parts_d+0x58>
   83dac:	00800044 	movi	r2,1
   83db0:	f800283a 	ret
   83db4:	10c01a1e 	bne	r2,r3,83e20 <__fpcmp_parts_d+0xa8>
   83db8:	0005883a 	mov	r2,zero
   83dbc:	f800283a 	ret
   83dc0:	22000117 	ldw	r8,4(r4)
   83dc4:	28800117 	ldw	r2,4(r5)
   83dc8:	40800326 	beq	r8,r2,83dd8 <__fpcmp_parts_d+0x60>
   83dcc:	403ff726 	beq	r8,zero,83dac <__fpcmp_parts_d+0x34>
   83dd0:	00bfffc4 	movi	r2,-1
   83dd4:	f800283a 	ret
   83dd8:	20c00217 	ldw	r3,8(r4)
   83ddc:	28800217 	ldw	r2,8(r5)
   83de0:	10fffa16 	blt	r2,r3,83dcc <__fpcmp_parts_d+0x54>
   83de4:	18800916 	blt	r3,r2,83e0c <__fpcmp_parts_d+0x94>
   83de8:	21c00417 	ldw	r7,16(r4)
   83dec:	28c00417 	ldw	r3,16(r5)
   83df0:	21800317 	ldw	r6,12(r4)
   83df4:	28800317 	ldw	r2,12(r5)
   83df8:	19fff436 	bltu	r3,r7,83dcc <__fpcmp_parts_d+0x54>
   83dfc:	38c00526 	beq	r7,r3,83e14 <__fpcmp_parts_d+0x9c>
   83e00:	38c00236 	bltu	r7,r3,83e0c <__fpcmp_parts_d+0x94>
   83e04:	19ffec1e 	bne	r3,r7,83db8 <__fpcmp_parts_d+0x40>
   83e08:	30bfeb2e 	bgeu	r6,r2,83db8 <__fpcmp_parts_d+0x40>
   83e0c:	403fe71e 	bne	r8,zero,83dac <__fpcmp_parts_d+0x34>
   83e10:	003fef06 	br	83dd0 <__fpcmp_parts_d+0x58>
   83e14:	11bffa2e 	bgeu	r2,r6,83e00 <__fpcmp_parts_d+0x88>
   83e18:	403fe426 	beq	r8,zero,83dac <__fpcmp_parts_d+0x34>
   83e1c:	003fec06 	br	83dd0 <__fpcmp_parts_d+0x58>
   83e20:	28800117 	ldw	r2,4(r5)
   83e24:	103fe11e 	bne	r2,zero,83dac <__fpcmp_parts_d+0x34>
   83e28:	003fe906 	br	83dd0 <__fpcmp_parts_d+0x58>
   83e2c:	11bfdd1e 	bne	r2,r6,83da4 <__fpcmp_parts_d+0x2c>
   83e30:	28c00117 	ldw	r3,4(r5)
   83e34:	20800117 	ldw	r2,4(r4)
   83e38:	1885c83a 	sub	r2,r3,r2
   83e3c:	f800283a 	ret

00083e40 <__errno>:
   83e40:	00c00274 	movhi	r3,9
   83e44:	18c26e04 	addi	r3,r3,2488
   83e48:	18800017 	ldw	r2,0(r3)
   83e4c:	f800283a 	ret

00083e50 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   83e50:	defffe04 	addi	sp,sp,-8
   83e54:	dfc00115 	stw	ra,4(sp)
   83e58:	df000015 	stw	fp,0(sp)
   83e5c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   83e60:	01000274 	movhi	r4,9
   83e64:	21029804 	addi	r4,r4,2656
   83e68:	01400274 	movhi	r5,9
   83e6c:	297cdc04 	addi	r5,r5,-3216
   83e70:	01800274 	movhi	r6,9
   83e74:	31829804 	addi	r6,r6,2656
   83e78:	0083ed00 	call	83ed0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   83e7c:	01000234 	movhi	r4,8
   83e80:	21000004 	addi	r4,r4,0
   83e84:	01400434 	movhi	r5,16
   83e88:	29500804 	addi	r5,r5,16416
   83e8c:	01800434 	movhi	r6,16
   83e90:	31906f04 	addi	r6,r6,16828
   83e94:	0083ed00 	call	83ed0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   83e98:	01000274 	movhi	r4,9
   83e9c:	213c2604 	addi	r4,r4,-3944
   83ea0:	01400274 	movhi	r5,9
   83ea4:	297c2604 	addi	r5,r5,-3944
   83ea8:	01800274 	movhi	r6,9
   83eac:	31bcdc04 	addi	r6,r6,-3216
   83eb0:	0083ed00 	call	83ed0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   83eb4:	008d7b40 	call	8d7b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   83eb8:	008d9d80 	call	8d9d8 <alt_icache_flush_all>
}
   83ebc:	e037883a 	mov	sp,fp
   83ec0:	dfc00117 	ldw	ra,4(sp)
   83ec4:	df000017 	ldw	fp,0(sp)
   83ec8:	dec00204 	addi	sp,sp,8
   83ecc:	f800283a 	ret

00083ed0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   83ed0:	defffc04 	addi	sp,sp,-16
   83ed4:	df000315 	stw	fp,12(sp)
   83ed8:	df000304 	addi	fp,sp,12
   83edc:	e13ffd15 	stw	r4,-12(fp)
   83ee0:	e17ffe15 	stw	r5,-8(fp)
   83ee4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   83ee8:	e0fffe17 	ldw	r3,-8(fp)
   83eec:	e0bffd17 	ldw	r2,-12(fp)
   83ef0:	18800e26 	beq	r3,r2,83f2c <alt_load_section+0x5c>
  {
    while( to != end )
   83ef4:	00000a06 	br	83f20 <alt_load_section+0x50>
    {
      *to++ = *from++;
   83ef8:	e0bffd17 	ldw	r2,-12(fp)
   83efc:	10c00017 	ldw	r3,0(r2)
   83f00:	e0bffe17 	ldw	r2,-8(fp)
   83f04:	10c00015 	stw	r3,0(r2)
   83f08:	e0bffe17 	ldw	r2,-8(fp)
   83f0c:	10800104 	addi	r2,r2,4
   83f10:	e0bffe15 	stw	r2,-8(fp)
   83f14:	e0bffd17 	ldw	r2,-12(fp)
   83f18:	10800104 	addi	r2,r2,4
   83f1c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   83f20:	e0fffe17 	ldw	r3,-8(fp)
   83f24:	e0bfff17 	ldw	r2,-4(fp)
   83f28:	18bff31e 	bne	r3,r2,83ef8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   83f2c:	e037883a 	mov	sp,fp
   83f30:	df000017 	ldw	fp,0(sp)
   83f34:	dec00104 	addi	sp,sp,4
   83f38:	f800283a 	ret

00083f3c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   83f3c:	defffb04 	addi	sp,sp,-20
   83f40:	dfc00415 	stw	ra,16(sp)
   83f44:	df000315 	stw	fp,12(sp)
   83f48:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   83f4c:	0009883a 	mov	r4,zero
   83f50:	008c5d00 	call	8c5d0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   83f54:	0084c0c0 	call	84c0c <OSInit>
   83f58:	01000044 	movi	r4,1
   83f5c:	0089ad40 	call	89ad4 <OSSemCreate>
   83f60:	1007883a 	mov	r3,r2
   83f64:	00800274 	movhi	r2,9
   83f68:	10885804 	addi	r2,r2,8544
   83f6c:	10c00015 	stw	r3,0(r2)
   83f70:	01000044 	movi	r4,1
   83f74:	0089ad40 	call	89ad4 <OSSemCreate>
   83f78:	1007883a 	mov	r3,r2
   83f7c:	00800274 	movhi	r2,9
   83f80:	10885a04 	addi	r2,r2,8552
   83f84:	10c00015 	stw	r3,0(r2)
   83f88:	00800274 	movhi	r2,9
   83f8c:	10886f04 	addi	r2,r2,8636
   83f90:	e0bffd15 	stw	r2,-12(fp)
   83f94:	00800044 	movi	r2,1
   83f98:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   83f9c:	e13ffe0b 	ldhu	r4,-8(fp)
   83fa0:	0089ad40 	call	89ad4 <OSSemCreate>
   83fa4:	1007883a 	mov	r3,r2
   83fa8:	e0bffd17 	ldw	r2,-12(fp)
   83fac:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   83fb0:	008c6040 	call	8c604 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   83fb4:	01000274 	movhi	r4,9
   83fb8:	213c7e04 	addi	r4,r4,-3592
   83fbc:	01400274 	movhi	r5,9
   83fc0:	297c7e04 	addi	r5,r5,-3592
   83fc4:	01800274 	movhi	r6,9
   83fc8:	31bc7e04 	addi	r6,r6,-3592
   83fcc:	008dd980 	call	8dd98 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   83fd0:	008d9100 	call	8d910 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   83fd4:	01000274 	movhi	r4,9
   83fd8:	21365d04 	addi	r4,r4,-9868
   83fdc:	008ead40 	call	8ead4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   83fe0:	d125e717 	ldw	r4,-26724(gp)
   83fe4:	d165e817 	ldw	r5,-26720(gp)
   83fe8:	d1a5e917 	ldw	r6,-26716(gp)
   83fec:	00807700 	call	80770 <main>
   83ff0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   83ff4:	01000044 	movi	r4,1
   83ff8:	008d6540 	call	8d654 <close>
  exit (result);
   83ffc:	e13fff17 	ldw	r4,-4(fp)
   84000:	008eae80 	call	8eae8 <exit>

00084004 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   84004:	deffdf04 	addi	sp,sp,-132
   84008:	dfc02015 	stw	ra,128(sp)
   8400c:	df001f15 	stw	fp,124(sp)
   84010:	df001f04 	addi	fp,sp,124
   84014:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   84018:	e17fe204 	addi	r5,fp,-120
   8401c:	01003fc4 	movi	r4,255
   84020:	008be5c0 	call	8be5c <OSTaskQuery>
   84024:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   84028:	e0bffe83 	ldbu	r2,-6(fp)
   8402c:	10803fcc 	andi	r2,r2,255
   84030:	1004c03a 	cmpne	r2,r2,zero
   84034:	1000191e 	bne	r2,zero,8409c <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
   84038:	e0bfee83 	ldbu	r2,-70(fp)
   8403c:	10803fcc 	andi	r2,r2,255
   84040:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   84044:	d125eb17 	ldw	r4,-26708(gp)
   84048:	e17ffd04 	addi	r5,fp,-12
   8404c:	008a3a80 	call	8a3a8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   84050:	e0bffe43 	ldbu	r2,-7(fp)
   84054:	10803fcc 	andi	r2,r2,255
   84058:	1005003a 	cmpeq	r2,r2,zero
   8405c:	1000071e 	bne	r2,zero,8407c <__env_lock+0x78>
   84060:	d0e00317 	ldw	r3,-32756(gp)
   84064:	e0bfe117 	ldw	r2,-124(fp)
   84068:	10c0041e 	bne	r2,r3,8407c <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
   8406c:	d0a5ea17 	ldw	r2,-26712(gp)
   84070:	10800044 	addi	r2,r2,1
   84074:	d0a5ea15 	stw	r2,-26712(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
   84078:	00000806 	br	8409c <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   8407c:	d125eb17 	ldw	r4,-26708(gp)
   84080:	e1bffe84 	addi	r6,fp,-6
   84084:	000b883a 	mov	r5,zero
   84088:	0089e880 	call	89e88 <OSSemPend>
    locks  = 1;
   8408c:	00800044 	movi	r2,1
   84090:	d0a5ea15 	stw	r2,-26712(gp)
    lockid = id;
   84094:	e0bfe117 	ldw	r2,-124(fp)
   84098:	d0a00315 	stw	r2,-32756(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   8409c:	e037883a 	mov	sp,fp
   840a0:	dfc00117 	ldw	ra,4(sp)
   840a4:	df000017 	ldw	fp,0(sp)
   840a8:	dec00204 	addi	sp,sp,8
   840ac:	f800283a 	ret

000840b0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   840b0:	defffd04 	addi	sp,sp,-12
   840b4:	dfc00215 	stw	ra,8(sp)
   840b8:	df000115 	stw	fp,4(sp)
   840bc:	df000104 	addi	fp,sp,4
   840c0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   840c4:	d0a5ea17 	ldw	r2,-26712(gp)
   840c8:	1005003a 	cmpeq	r2,r2,zero
   840cc:	10000a1e 	bne	r2,zero,840f8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   840d0:	d0a5ea17 	ldw	r2,-26712(gp)
   840d4:	10bfffc4 	addi	r2,r2,-1
   840d8:	d0a5ea15 	stw	r2,-26712(gp)
   840dc:	d0a5ea17 	ldw	r2,-26712(gp)
   840e0:	1004c03a 	cmpne	r2,r2,zero
   840e4:	1000041e 	bne	r2,zero,840f8 <__env_unlock+0x48>
  {
    lockid = -1;
   840e8:	00bfffc4 	movi	r2,-1
   840ec:	d0a00315 	stw	r2,-32756(gp)
    OSSemPost( alt_envsem );
   840f0:	d125eb17 	ldw	r4,-26708(gp)
   840f4:	008a2800 	call	8a280 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   840f8:	e037883a 	mov	sp,fp
   840fc:	dfc00117 	ldw	ra,4(sp)
   84100:	df000017 	ldw	fp,0(sp)
   84104:	dec00204 	addi	sp,sp,8
   84108:	f800283a 	ret

0008410c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   8410c:	deffdb04 	addi	sp,sp,-148
   84110:	dfc02415 	stw	ra,144(sp)
   84114:	df002315 	stw	fp,140(sp)
   84118:	df002304 	addi	fp,sp,140
   8411c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   84120:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   84124:	00800274 	movhi	r2,9
   84128:	10885b44 	addi	r2,r2,8557
   8412c:	10800003 	ldbu	r2,0(r2)
   84130:	10803fcc 	andi	r2,r2,255
   84134:	10800058 	cmpnei	r2,r2,1
   84138:	1000311e 	bne	r2,zero,84200 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   8413c:	e17fe204 	addi	r5,fp,-120
   84140:	01003fc4 	movi	r4,255
   84144:	008be5c0 	call	8be5c <OSTaskQuery>
   84148:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   8414c:	e0bffe83 	ldbu	r2,-6(fp)
   84150:	10803fcc 	andi	r2,r2,255
   84154:	1004c03a 	cmpne	r2,r2,zero
   84158:	1000291e 	bne	r2,zero,84200 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
   8415c:	e0bfee83 	ldbu	r2,-70(fp)
   84160:	10803fcc 	andi	r2,r2,255
   84164:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   84168:	d125ed17 	ldw	r4,-26700(gp)
   8416c:	e17ffd04 	addi	r5,fp,-12
   84170:	008a3a80 	call	8a3a8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84174:	0005303a 	rdctl	r2,status
   84178:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8417c:	e0ffdf17 	ldw	r3,-132(fp)
   84180:	00bfff84 	movi	r2,-2
   84184:	1884703a 	and	r2,r3,r2
   84188:	1001703a 	wrctl	status,r2
  
  return context;
   8418c:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   84190:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
   84194:	e0bffd0b 	ldhu	r2,-12(fp)
   84198:	10bfffcc 	andi	r2,r2,65535
   8419c:	1004c03a 	cmpne	r2,r2,zero
   841a0:	10000b1e 	bne	r2,zero,841d0 <__malloc_lock+0xc4>
   841a4:	d0e00417 	ldw	r3,-32752(gp)
   841a8:	e0bfe117 	ldw	r2,-124(fp)
   841ac:	10c0081e 	bne	r2,r3,841d0 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
   841b0:	d0a5ec17 	ldw	r2,-26704(gp)
   841b4:	10800044 	addi	r2,r2,1
   841b8:	d0a5ec15 	stw	r2,-26704(gp)
   841bc:	e0bfe017 	ldw	r2,-128(fp)
   841c0:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   841c4:	e0bfde17 	ldw	r2,-136(fp)
   841c8:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
   841cc:	00000c06 	br	84200 <__malloc_lock+0xf4>
   841d0:	e0bfe017 	ldw	r2,-128(fp)
   841d4:	e0bfdd15 	stw	r2,-140(fp)
   841d8:	e0bfdd17 	ldw	r2,-140(fp)
   841dc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   841e0:	d125ed17 	ldw	r4,-26700(gp)
   841e4:	e1bffe84 	addi	r6,fp,-6
   841e8:	000b883a 	mov	r5,zero
   841ec:	0089e880 	call	89e88 <OSSemPend>
    locks  = 1;
   841f0:	00800044 	movi	r2,1
   841f4:	d0a5ec15 	stw	r2,-26704(gp)
    lockid = id;
   841f8:	e0bfe117 	ldw	r2,-124(fp)
   841fc:	d0a00415 	stw	r2,-32752(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   84200:	e037883a 	mov	sp,fp
   84204:	dfc00117 	ldw	ra,4(sp)
   84208:	df000017 	ldw	fp,0(sp)
   8420c:	dec00204 	addi	sp,sp,8
   84210:	f800283a 	ret

00084214 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   84214:	defff804 	addi	sp,sp,-32
   84218:	dfc00715 	stw	ra,28(sp)
   8421c:	df000615 	stw	fp,24(sp)
   84220:	df000604 	addi	fp,sp,24
   84224:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   84228:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
   8422c:	00800274 	movhi	r2,9
   84230:	10885b44 	addi	r2,r2,8557
   84234:	10800003 	ldbu	r2,0(r2)
   84238:	10803fcc 	andi	r2,r2,255
   8423c:	10800058 	cmpnei	r2,r2,1
   84240:	1000231e 	bne	r2,zero,842d0 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84244:	0005303a 	rdctl	r2,status
   84248:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8424c:	e0fffd17 	ldw	r3,-12(fp)
   84250:	00bfff84 	movi	r2,-2
   84254:	1884703a 	and	r2,r3,r2
   84258:	1001703a 	wrctl	status,r2
  
  return context;
   8425c:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
   84260:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
   84264:	d0a5ec17 	ldw	r2,-26704(gp)
   84268:	1004c03a 	cmpne	r2,r2,zero
   8426c:	1000051e 	bne	r2,zero,84284 <__malloc_unlock+0x70>
   84270:	e0bffe17 	ldw	r2,-8(fp)
   84274:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84278:	e0bffc17 	ldw	r2,-16(fp)
   8427c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   84280:	00001306 	br	842d0 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   84284:	d0a5ec17 	ldw	r2,-26704(gp)
   84288:	10bfffc4 	addi	r2,r2,-1
   8428c:	d0a5ec15 	stw	r2,-26704(gp)
   84290:	d0a5ec17 	ldw	r2,-26704(gp)
   84294:	1004c03a 	cmpne	r2,r2,zero
   84298:	1000091e 	bne	r2,zero,842c0 <__malloc_unlock+0xac>
  {
    lockid = -1;
   8429c:	00bfffc4 	movi	r2,-1
   842a0:	d0a00415 	stw	r2,-32752(gp)
   842a4:	e0bffe17 	ldw	r2,-8(fp)
   842a8:	e0bffb15 	stw	r2,-20(fp)
   842ac:	e0bffb17 	ldw	r2,-20(fp)
   842b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   842b4:	d125ed17 	ldw	r4,-26700(gp)
   842b8:	008a2800 	call	8a280 <OSSemPost>
   842bc:	00000406 	br	842d0 <__malloc_unlock+0xbc>
   842c0:	e0bffe17 	ldw	r2,-8(fp)
   842c4:	e0bffa15 	stw	r2,-24(fp)
   842c8:	e0bffa17 	ldw	r2,-24(fp)
   842cc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   842d0:	e037883a 	mov	sp,fp
   842d4:	dfc00117 	ldw	ra,4(sp)
   842d8:	df000017 	ldw	fp,0(sp)
   842dc:	dec00204 	addi	sp,sp,8
   842e0:	f800283a 	ret

000842e4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   842e4:	defff604 	addi	sp,sp,-40
   842e8:	dfc00915 	stw	ra,36(sp)
   842ec:	df000815 	stw	fp,32(sp)
   842f0:	df000804 	addi	fp,sp,32
   842f4:	e13ffc15 	stw	r4,-16(fp)
   842f8:	e17ffd15 	stw	r5,-12(fp)
   842fc:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   84300:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   84304:	e0bffe17 	ldw	r2,-8(fp)
   84308:	1004c03a 	cmpne	r2,r2,zero
   8430c:	1000021e 	bne	r2,zero,84318 <OSEventNameGet+0x34>
        return (0);
   84310:	e03fff15 	stw	zero,-4(fp)
   84314:	00003906 	br	843fc <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   84318:	e0bffc17 	ldw	r2,-16(fp)
   8431c:	1004c03a 	cmpne	r2,r2,zero
   84320:	1000051e 	bne	r2,zero,84338 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   84324:	e0fffe17 	ldw	r3,-8(fp)
   84328:	00800104 	movi	r2,4
   8432c:	18800005 	stb	r2,0(r3)
        return (0);
   84330:	e03fff15 	stw	zero,-4(fp)
   84334:	00003106 	br	843fc <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   84338:	e0bffd17 	ldw	r2,-12(fp)
   8433c:	1004c03a 	cmpne	r2,r2,zero
   84340:	1000051e 	bne	r2,zero,84358 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   84344:	e0fffe17 	ldw	r3,-8(fp)
   84348:	00800304 	movi	r2,12
   8434c:	18800005 	stb	r2,0(r3)
        return (0);
   84350:	e03fff15 	stw	zero,-4(fp)
   84354:	00002906 	br	843fc <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   84358:	d0a5fc03 	ldbu	r2,-26640(gp)
   8435c:	10803fcc 	andi	r2,r2,255
   84360:	1005003a 	cmpeq	r2,r2,zero
   84364:	1000051e 	bne	r2,zero,8437c <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
   84368:	e0fffe17 	ldw	r3,-8(fp)
   8436c:	00800444 	movi	r2,17
   84370:	18800005 	stb	r2,0(r3)
        return (0);
   84374:	e03fff15 	stw	zero,-4(fp)
   84378:	00002006 	br	843fc <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
   8437c:	e0bffc17 	ldw	r2,-16(fp)
   84380:	10800003 	ldbu	r2,0(r2)
   84384:	10803fcc 	andi	r2,r2,255
   84388:	10bfffc4 	addi	r2,r2,-1
   8438c:	10800128 	cmpgeui	r2,r2,4
   84390:	1000161e 	bne	r2,zero,843ec <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84394:	0005303a 	rdctl	r2,status
   84398:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8439c:	e0fff917 	ldw	r3,-28(fp)
   843a0:	00bfff84 	movi	r2,-2
   843a4:	1884703a 	and	r2,r3,r2
   843a8:	1001703a 	wrctl	status,r2
  
  return context;
   843ac:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   843b0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   843b4:	e0bffc17 	ldw	r2,-16(fp)
   843b8:	11400384 	addi	r5,r2,14
   843bc:	e13ffd17 	ldw	r4,-12(fp)
   843c0:	0085e680 	call	85e68 <OS_StrCopy>
   843c4:	e0bffb05 	stb	r2,-20(fp)
   843c8:	e0bffa17 	ldw	r2,-24(fp)
   843cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   843d0:	e0bff817 	ldw	r2,-32(fp)
   843d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   843d8:	e0bffe17 	ldw	r2,-8(fp)
   843dc:	10000005 	stb	zero,0(r2)
    return (len);
   843e0:	e0bffb03 	ldbu	r2,-20(fp)
   843e4:	e0bfff15 	stw	r2,-4(fp)
   843e8:	00000406 	br	843fc <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   843ec:	e0fffe17 	ldw	r3,-8(fp)
   843f0:	00800044 	movi	r2,1
   843f4:	18800005 	stb	r2,0(r3)
             return (0);
   843f8:	e03fff15 	stw	zero,-4(fp)
   843fc:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
   84400:	e037883a 	mov	sp,fp
   84404:	dfc00117 	ldw	ra,4(sp)
   84408:	df000017 	ldw	fp,0(sp)
   8440c:	dec00204 	addi	sp,sp,8
   84410:	f800283a 	ret

00084414 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   84414:	defff604 	addi	sp,sp,-40
   84418:	dfc00915 	stw	ra,36(sp)
   8441c:	df000815 	stw	fp,32(sp)
   84420:	df000804 	addi	fp,sp,32
   84424:	e13ffd15 	stw	r4,-12(fp)
   84428:	e17ffe15 	stw	r5,-8(fp)
   8442c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   84430:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   84434:	e0bfff17 	ldw	r2,-4(fp)
   84438:	1005003a 	cmpeq	r2,r2,zero
   8443c:	1000411e 	bne	r2,zero,84544 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   84440:	e0bffd17 	ldw	r2,-12(fp)
   84444:	1004c03a 	cmpne	r2,r2,zero
   84448:	1000041e 	bne	r2,zero,8445c <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   8444c:	e0ffff17 	ldw	r3,-4(fp)
   84450:	00800104 	movi	r2,4
   84454:	18800005 	stb	r2,0(r3)
        return;
   84458:	00003a06 	br	84544 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8445c:	e0bffe17 	ldw	r2,-8(fp)
   84460:	1004c03a 	cmpne	r2,r2,zero
   84464:	1000041e 	bne	r2,zero,84478 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   84468:	e0ffff17 	ldw	r3,-4(fp)
   8446c:	00800304 	movi	r2,12
   84470:	18800005 	stb	r2,0(r3)
        return;
   84474:	00003306 	br	84544 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   84478:	d0a5fc03 	ldbu	r2,-26640(gp)
   8447c:	10803fcc 	andi	r2,r2,255
   84480:	1005003a 	cmpeq	r2,r2,zero
   84484:	1000041e 	bne	r2,zero,84498 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
   84488:	e0ffff17 	ldw	r3,-4(fp)
   8448c:	00800484 	movi	r2,18
   84490:	18800005 	stb	r2,0(r3)
        return;
   84494:	00002b06 	br	84544 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
   84498:	e0bffd17 	ldw	r2,-12(fp)
   8449c:	10800003 	ldbu	r2,0(r2)
   844a0:	10803fcc 	andi	r2,r2,255
   844a4:	10bfffc4 	addi	r2,r2,-1
   844a8:	10800128 	cmpgeui	r2,r2,4
   844ac:	10000f1e 	bne	r2,zero,844ec <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   844b0:	0005303a 	rdctl	r2,status
   844b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   844b8:	e0fffa17 	ldw	r3,-24(fp)
   844bc:	00bfff84 	movi	r2,-2
   844c0:	1884703a 	and	r2,r3,r2
   844c4:	1001703a 	wrctl	status,r2
  
  return context;
   844c8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   844cc:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   844d0:	e13ffe17 	ldw	r4,-8(fp)
   844d4:	0085ee80 	call	85ee8 <OS_StrLen>
   844d8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   844dc:	e0bffc03 	ldbu	r2,-16(fp)
   844e0:	10800828 	cmpgeui	r2,r2,32
   844e4:	1000051e 	bne	r2,zero,844fc <OSEventNameSet+0xe8>
   844e8:	00000c06 	br	8451c <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   844ec:	e0ffff17 	ldw	r3,-4(fp)
   844f0:	00800044 	movi	r2,1
   844f4:	18800005 	stb	r2,0(r3)
             return;
   844f8:	00001206 	br	84544 <OSEventNameSet+0x130>
   844fc:	e0bffb17 	ldw	r2,-20(fp)
   84500:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84504:	e0bff917 	ldw	r2,-28(fp)
   84508:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   8450c:	e0ffff17 	ldw	r3,-4(fp)
   84510:	008002c4 	movi	r2,11
   84514:	18800005 	stb	r2,0(r3)
        return;
   84518:	00000a06 	br	84544 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   8451c:	e0bffd17 	ldw	r2,-12(fp)
   84520:	11000384 	addi	r4,r2,14
   84524:	e17ffe17 	ldw	r5,-8(fp)
   84528:	0085e680 	call	85e68 <OS_StrCopy>
   8452c:	e0bffb17 	ldw	r2,-20(fp)
   84530:	e0bff815 	stw	r2,-32(fp)
   84534:	e0bff817 	ldw	r2,-32(fp)
   84538:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8453c:	e0bfff17 	ldw	r2,-4(fp)
   84540:	10000005 	stb	zero,0(r2)
}
   84544:	e037883a 	mov	sp,fp
   84548:	dfc00117 	ldw	ra,4(sp)
   8454c:	df000017 	ldw	fp,0(sp)
   84550:	dec00204 	addi	sp,sp,8
   84554:	f800283a 	ret

00084558 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   84558:	deffe704 	addi	sp,sp,-100
   8455c:	dfc01815 	stw	ra,96(sp)
   84560:	df001715 	stw	fp,92(sp)
   84564:	df001704 	addi	fp,sp,92
   84568:	e13ff615 	stw	r4,-40(fp)
   8456c:	e17ff715 	stw	r5,-36(fp)
   84570:	e1bff815 	stw	r6,-32(fp)
   84574:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   84578:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   8457c:	e0800217 	ldw	r2,8(fp)
   84580:	1004c03a 	cmpne	r2,r2,zero
   84584:	1000021e 	bne	r2,zero,84590 <OSEventPendMulti+0x38>
        return (0);
   84588:	e03fff15 	stw	zero,-4(fp)
   8458c:	00019906 	br	84bf4 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   84590:	e0bff617 	ldw	r2,-40(fp)
   84594:	1004c03a 	cmpne	r2,r2,zero
   84598:	1000051e 	bne	r2,zero,845b0 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
   8459c:	e0c00217 	ldw	r3,8(fp)
   845a0:	00800104 	movi	r2,4
   845a4:	18800005 	stb	r2,0(r3)
        return (0);
   845a8:	e03fff15 	stw	zero,-4(fp)
   845ac:	00019106 	br	84bf4 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   845b0:	e0bff717 	ldw	r2,-36(fp)
   845b4:	1004c03a 	cmpne	r2,r2,zero
   845b8:	1000051e 	bne	r2,zero,845d0 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
   845bc:	e0c00217 	ldw	r3,8(fp)
   845c0:	00800104 	movi	r2,4
   845c4:	18800005 	stb	r2,0(r3)
        return (0);
   845c8:	e03fff15 	stw	zero,-4(fp)
   845cc:	00018906 	br	84bf4 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   845d0:	e0bff817 	ldw	r2,-32(fp)
   845d4:	1004c03a 	cmpne	r2,r2,zero
   845d8:	1000051e 	bne	r2,zero,845f0 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
   845dc:	e0c00217 	ldw	r3,8(fp)
   845e0:	00800104 	movi	r2,4
   845e4:	18800005 	stb	r2,0(r3)
        return (0);
   845e8:	e03fff15 	stw	zero,-4(fp)
   845ec:	00018106 	br	84bf4 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   845f0:	e0bff717 	ldw	r2,-36(fp)
   845f4:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   845f8:	e0bff617 	ldw	r2,-40(fp)
   845fc:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
   84600:	e0bff517 	ldw	r2,-44(fp)
   84604:	10800017 	ldw	r2,0(r2)
   84608:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
   8460c:	00001806 	br	84670 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   84610:	e0bff417 	ldw	r2,-48(fp)
   84614:	10800003 	ldbu	r2,0(r2)
   84618:	10803fcc 	andi	r2,r2,255
   8461c:	e0bffe15 	stw	r2,-8(fp)
   84620:	e0fffe17 	ldw	r3,-8(fp)
   84624:	188000a0 	cmpeqi	r2,r3,2
   84628:	10000b1e 	bne	r2,zero,84658 <OSEventPendMulti+0x100>
   8462c:	e0fffe17 	ldw	r3,-8(fp)
   84630:	188000e0 	cmpeqi	r2,r3,3
   84634:	1000081e 	bne	r2,zero,84658 <OSEventPendMulti+0x100>
   84638:	e0fffe17 	ldw	r3,-8(fp)
   8463c:	18800060 	cmpeqi	r2,r3,1
   84640:	1000051e 	bne	r2,zero,84658 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   84644:	e0c00217 	ldw	r3,8(fp)
   84648:	00800044 	movi	r2,1
   8464c:	18800005 	stb	r2,0(r3)
                 return (0);
   84650:	e03fff15 	stw	zero,-4(fp)
   84654:	00016706 	br	84bf4 <OSEventPendMulti+0x69c>
        }
        pevents++;
   84658:	e0bff517 	ldw	r2,-44(fp)
   8465c:	10800104 	addi	r2,r2,4
   84660:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
   84664:	e0bff517 	ldw	r2,-44(fp)
   84668:	10800017 	ldw	r2,0(r2)
   8466c:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   84670:	e0bff417 	ldw	r2,-48(fp)
   84674:	1004c03a 	cmpne	r2,r2,zero
   84678:	103fe51e 	bne	r2,zero,84610 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   8467c:	d0a5fc03 	ldbu	r2,-26640(gp)
   84680:	10803fcc 	andi	r2,r2,255
   84684:	1005003a 	cmpeq	r2,r2,zero
   84688:	1000051e 	bne	r2,zero,846a0 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   8468c:	e0c00217 	ldw	r3,8(fp)
   84690:	00800084 	movi	r2,2
   84694:	18800005 	stb	r2,0(r3)
        return (0);
   84698:	e03fff15 	stw	zero,-4(fp)
   8469c:	00015506 	br	84bf4 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   846a0:	d0a5ee03 	ldbu	r2,-26696(gp)
   846a4:	10803fcc 	andi	r2,r2,255
   846a8:	1005003a 	cmpeq	r2,r2,zero
   846ac:	1000051e 	bne	r2,zero,846c4 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   846b0:	e0c00217 	ldw	r3,8(fp)
   846b4:	00800344 	movi	r2,13
   846b8:	18800005 	stb	r2,0(r3)
        return (0);
   846bc:	e03fff15 	stw	zero,-4(fp)
   846c0:	00014c06 	br	84bf4 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   846c4:	0005303a 	rdctl	r2,status
   846c8:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   846cc:	e0ffef17 	ldw	r3,-68(fp)
   846d0:	00bfff84 	movi	r2,-2
   846d4:	1884703a 	and	r2,r3,r2
   846d8:	1001703a 	wrctl	status,r2
  
  return context;
   846dc:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   846e0:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
   846e4:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
   846e8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   846ec:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
   846f0:	e0bff617 	ldw	r2,-40(fp)
   846f4:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
   846f8:	e0bff517 	ldw	r2,-44(fp)
   846fc:	10800017 	ldw	r2,0(r2)
   84700:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   84704:	00008f06 	br	84944 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
   84708:	e0bff417 	ldw	r2,-48(fp)
   8470c:	10800003 	ldbu	r2,0(r2)
   84710:	10803fcc 	andi	r2,r2,255
   84714:	e0bffd15 	stw	r2,-12(fp)
   84718:	e0fffd17 	ldw	r3,-12(fp)
   8471c:	188000a0 	cmpeqi	r2,r3,2
   84720:	1000441e 	bne	r2,zero,84834 <OSEventPendMulti+0x2dc>
   84724:	e0fffd17 	ldw	r3,-12(fp)
   84728:	188000e0 	cmpeqi	r2,r3,3
   8472c:	1000041e 	bne	r2,zero,84740 <OSEventPendMulti+0x1e8>
   84730:	e0fffd17 	ldw	r3,-12(fp)
   84734:	18800060 	cmpeqi	r2,r3,1
   84738:	1000211e 	bne	r2,zero,847c0 <OSEventPendMulti+0x268>
   8473c:	00006f06 	br	848fc <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   84740:	e0bff417 	ldw	r2,-48(fp)
   84744:	1080020b 	ldhu	r2,8(r2)
   84748:	10bfffcc 	andi	r2,r2,65535
   8474c:	1005003a 	cmpeq	r2,r2,zero
   84750:	1000171e 	bne	r2,zero,847b0 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   84754:	e0bff417 	ldw	r2,-48(fp)
   84758:	1080020b 	ldhu	r2,8(r2)
   8475c:	10bfffc4 	addi	r2,r2,-1
   84760:	1007883a 	mov	r3,r2
   84764:	e0bff417 	ldw	r2,-48(fp)
   84768:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   8476c:	e0fff717 	ldw	r3,-36(fp)
   84770:	e0bff417 	ldw	r2,-48(fp)
   84774:	18800015 	stw	r2,0(r3)
   84778:	e0bff717 	ldw	r2,-36(fp)
   8477c:	10800104 	addi	r2,r2,4
   84780:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
   84784:	00800044 	movi	r2,1
   84788:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   8478c:	e0bff817 	ldw	r2,-32(fp)
   84790:	10000015 	stw	zero,0(r2)
   84794:	e0bff817 	ldw	r2,-32(fp)
   84798:	10800104 	addi	r2,r2,4
   8479c:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
   847a0:	e0bff18b 	ldhu	r2,-58(fp)
   847a4:	10800044 	addi	r2,r2,1
   847a8:	e0bff18d 	sth	r2,-58(fp)
   847ac:	00005f06 	br	8492c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   847b0:	e0bff103 	ldbu	r2,-60(fp)
   847b4:	10800054 	ori	r2,r2,1
   847b8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   847bc:	00005b06 	br	8492c <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   847c0:	e0bff417 	ldw	r2,-48(fp)
   847c4:	10800117 	ldw	r2,4(r2)
   847c8:	1005003a 	cmpeq	r2,r2,zero
   847cc:	1000151e 	bne	r2,zero,84824 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   847d0:	e0bff417 	ldw	r2,-48(fp)
   847d4:	10c00117 	ldw	r3,4(r2)
   847d8:	e0bff817 	ldw	r2,-32(fp)
   847dc:	10c00015 	stw	r3,0(r2)
   847e0:	e0bff817 	ldw	r2,-32(fp)
   847e4:	10800104 	addi	r2,r2,4
   847e8:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
   847ec:	e0bff417 	ldw	r2,-48(fp)
   847f0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   847f4:	e0fff717 	ldw	r3,-36(fp)
   847f8:	e0bff417 	ldw	r2,-48(fp)
   847fc:	18800015 	stw	r2,0(r3)
   84800:	e0bff717 	ldw	r2,-36(fp)
   84804:	10800104 	addi	r2,r2,4
   84808:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
   8480c:	00800044 	movi	r2,1
   84810:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
   84814:	e0bff18b 	ldhu	r2,-58(fp)
   84818:	10800044 	addi	r2,r2,1
   8481c:	e0bff18d 	sth	r2,-58(fp)
   84820:	00004206 	br	8492c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   84824:	e0bff103 	ldbu	r2,-60(fp)
   84828:	10800094 	ori	r2,r2,2
   8482c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   84830:	00003e06 	br	8492c <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   84834:	e0bff417 	ldw	r2,-48(fp)
   84838:	10800117 	ldw	r2,4(r2)
   8483c:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   84840:	e0bff317 	ldw	r2,-52(fp)
   84844:	1080058b 	ldhu	r2,22(r2)
   84848:	10bfffcc 	andi	r2,r2,65535
   8484c:	1005003a 	cmpeq	r2,r2,zero
   84850:	1000261e 	bne	r2,zero,848ec <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   84854:	e0bff317 	ldw	r2,-52(fp)
   84858:	11000417 	ldw	r4,16(r2)
   8485c:	20c00017 	ldw	r3,0(r4)
   84860:	e0bff817 	ldw	r2,-32(fp)
   84864:	10c00015 	stw	r3,0(r2)
   84868:	e0bff817 	ldw	r2,-32(fp)
   8486c:	10800104 	addi	r2,r2,4
   84870:	e0bff815 	stw	r2,-32(fp)
   84874:	20c00104 	addi	r3,r4,4
   84878:	e0bff317 	ldw	r2,-52(fp)
   8487c:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   84880:	e0bff317 	ldw	r2,-52(fp)
   84884:	10c00417 	ldw	r3,16(r2)
   84888:	e0bff317 	ldw	r2,-52(fp)
   8488c:	10800217 	ldw	r2,8(r2)
   84890:	1880041e 	bne	r3,r2,848a4 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   84894:	e0bff317 	ldw	r2,-52(fp)
   84898:	10c00117 	ldw	r3,4(r2)
   8489c:	e0bff317 	ldw	r2,-52(fp)
   848a0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   848a4:	e0bff317 	ldw	r2,-52(fp)
   848a8:	1080058b 	ldhu	r2,22(r2)
   848ac:	10bfffc4 	addi	r2,r2,-1
   848b0:	1007883a 	mov	r3,r2
   848b4:	e0bff317 	ldw	r2,-52(fp)
   848b8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   848bc:	e0fff717 	ldw	r3,-36(fp)
   848c0:	e0bff417 	ldw	r2,-48(fp)
   848c4:	18800015 	stw	r2,0(r3)
   848c8:	e0bff717 	ldw	r2,-36(fp)
   848cc:	10800104 	addi	r2,r2,4
   848d0:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
   848d4:	00800044 	movi	r2,1
   848d8:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
   848dc:	e0bff18b 	ldhu	r2,-58(fp)
   848e0:	10800044 	addi	r2,r2,1
   848e4:	e0bff18d 	sth	r2,-58(fp)
   848e8:	00001006 	br	8492c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   848ec:	e0bff103 	ldbu	r2,-60(fp)
   848f0:	10800114 	ori	r2,r2,4
   848f4:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   848f8:	00000c06 	br	8492c <OSEventPendMulti+0x3d4>
   848fc:	e0bff017 	ldw	r2,-64(fp)
   84900:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84904:	e0bfee17 	ldw	r2,-72(fp)
   84908:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   8490c:	e0bff717 	ldw	r2,-36(fp)
   84910:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   84914:	e0c00217 	ldw	r3,8(fp)
   84918:	00800044 	movi	r2,1
   8491c:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
   84920:	e0bff18b 	ldhu	r2,-58(fp)
   84924:	e0bfff15 	stw	r2,-4(fp)
   84928:	0000b206 	br	84bf4 <OSEventPendMulti+0x69c>
        }
        pevents++;
   8492c:	e0bff517 	ldw	r2,-44(fp)
   84930:	10800104 	addi	r2,r2,4
   84934:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
   84938:	e0bff517 	ldw	r2,-44(fp)
   8493c:	10800017 	ldw	r2,0(r2)
   84940:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   84944:	e0bff417 	ldw	r2,-48(fp)
   84948:	1004c03a 	cmpne	r2,r2,zero
   8494c:	103f6e1e 	bne	r2,zero,84708 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   84950:	e0bff203 	ldbu	r2,-56(fp)
   84954:	10800058 	cmpnei	r2,r2,1
   84958:	10000b1e 	bne	r2,zero,84988 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   8495c:	e0bff717 	ldw	r2,-36(fp)
   84960:	10000015 	stw	zero,0(r2)
   84964:	e0bff017 	ldw	r2,-64(fp)
   84968:	e0bfed15 	stw	r2,-76(fp)
   8496c:	e0bfed17 	ldw	r2,-76(fp)
   84970:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   84974:	e0800217 	ldw	r2,8(fp)
   84978:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   8497c:	e0fff18b 	ldhu	r3,-58(fp)
   84980:	e0ffff15 	stw	r3,-4(fp)
   84984:	00009b06 	br	84bf4 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   84988:	d125fd17 	ldw	r4,-26636(gp)
   8498c:	d0a5fd17 	ldw	r2,-26636(gp)
   84990:	10c00c03 	ldbu	r3,48(r2)
   84994:	e0bff103 	ldbu	r2,-60(fp)
   84998:	1884b03a 	or	r2,r3,r2
   8499c:	1007883a 	mov	r3,r2
   849a0:	00bfe004 	movi	r2,-128
   849a4:	1884b03a 	or	r2,r3,r2
   849a8:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   849ac:	d0a5fd17 	ldw	r2,-26636(gp)
   849b0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   849b4:	d0e5fd17 	ldw	r3,-26636(gp)
   849b8:	e0bff90b 	ldhu	r2,-28(fp)
   849bc:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   849c0:	e13ff617 	ldw	r4,-40(fp)
   849c4:	00855880 	call	85588 <OS_EventTaskWaitMulti>
   849c8:	e0bff017 	ldw	r2,-64(fp)
   849cc:	e0bfec15 	stw	r2,-80(fp)
   849d0:	e0bfec17 	ldw	r2,-80(fp)
   849d4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   849d8:	0085d240 	call	85d24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   849dc:	0005303a 	rdctl	r2,status
   849e0:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   849e4:	e0ffeb17 	ldw	r3,-84(fp)
   849e8:	00bfff84 	movi	r2,-2
   849ec:	1884703a 	and	r2,r3,r2
   849f0:	1001703a 	wrctl	status,r2
  
  return context;
   849f4:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
   849f8:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   849fc:	d0a5fd17 	ldw	r2,-26636(gp)
   84a00:	10800c43 	ldbu	r2,49(r2)
   84a04:	10803fcc 	andi	r2,r2,255
   84a08:	e0bffc15 	stw	r2,-16(fp)
   84a0c:	e0fffc17 	ldw	r3,-16(fp)
   84a10:	1805003a 	cmpeq	r2,r3,zero
   84a14:	1000041e 	bne	r2,zero,84a28 <OSEventPendMulti+0x4d0>
   84a18:	e0fffc17 	ldw	r3,-16(fp)
   84a1c:	188000a0 	cmpeqi	r2,r3,2
   84a20:	1000011e 	bne	r2,zero,84a28 <OSEventPendMulti+0x4d0>
   84a24:	00001906 	br	84a8c <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   84a28:	d0a5fd17 	ldw	r2,-26636(gp)
   84a2c:	10800717 	ldw	r2,28(r2)
   84a30:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   84a34:	e0bff417 	ldw	r2,-48(fp)
   84a38:	1005003a 	cmpeq	r2,r2,zero
   84a3c:	10000c1e 	bne	r2,zero,84a70 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   84a40:	e0fff717 	ldw	r3,-36(fp)
   84a44:	e0bff417 	ldw	r2,-48(fp)
   84a48:	18800015 	stw	r2,0(r3)
   84a4c:	e0bff717 	ldw	r2,-36(fp)
   84a50:	10800104 	addi	r2,r2,4
   84a54:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   84a58:	e0bff717 	ldw	r2,-36(fp)
   84a5c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   84a60:	e0bff18b 	ldhu	r2,-58(fp)
   84a64:	10800044 	addi	r2,r2,1
   84a68:	e0bff18d 	sth	r2,-58(fp)
   84a6c:	00000a06 	br	84a98 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   84a70:	d0a5fd17 	ldw	r2,-26636(gp)
   84a74:	00c00044 	movi	r3,1
   84a78:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   84a7c:	d125fd17 	ldw	r4,-26636(gp)
   84a80:	e17ff617 	ldw	r5,-40(fp)
   84a84:	00857940 	call	85794 <OS_EventTaskRemoveMulti>
             }
			 break;
   84a88:	00000306 	br	84a98 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   84a8c:	d125fd17 	ldw	r4,-26636(gp)
   84a90:	e17ff617 	ldw	r5,-40(fp)
   84a94:	00857940 	call	85794 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
   84a98:	d0a5fd17 	ldw	r2,-26636(gp)
   84a9c:	10800c43 	ldbu	r2,49(r2)
   84aa0:	10803fcc 	andi	r2,r2,255
   84aa4:	e0bffb15 	stw	r2,-20(fp)
   84aa8:	e0fffb17 	ldw	r3,-20(fp)
   84aac:	1805003a 	cmpeq	r2,r3,zero
   84ab0:	1000041e 	bne	r2,zero,84ac4 <OSEventPendMulti+0x56c>
   84ab4:	e0fffb17 	ldw	r3,-20(fp)
   84ab8:	188000a0 	cmpeqi	r2,r3,2
   84abc:	10002c1e 	bne	r2,zero,84b70 <OSEventPendMulti+0x618>
   84ac0:	00003406 	br	84b94 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   84ac4:	e0bff417 	ldw	r2,-48(fp)
   84ac8:	10800003 	ldbu	r2,0(r2)
   84acc:	10803fcc 	andi	r2,r2,255
   84ad0:	e0bffa15 	stw	r2,-24(fp)
   84ad4:	e0fffa17 	ldw	r3,-24(fp)
   84ad8:	18800050 	cmplti	r2,r3,1
   84adc:	1000151e 	bne	r2,zero,84b34 <OSEventPendMulti+0x5dc>
   84ae0:	e0fffa17 	ldw	r3,-24(fp)
   84ae4:	188000d0 	cmplti	r2,r3,3
   84ae8:	10000a1e 	bne	r2,zero,84b14 <OSEventPendMulti+0x5bc>
   84aec:	e0fffa17 	ldw	r3,-24(fp)
   84af0:	188000e0 	cmpeqi	r2,r3,3
   84af4:	1000011e 	bne	r2,zero,84afc <OSEventPendMulti+0x5a4>
   84af8:	00000e06 	br	84b34 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   84afc:	e0bff817 	ldw	r2,-32(fp)
   84b00:	10000015 	stw	zero,0(r2)
   84b04:	e0bff817 	ldw	r2,-32(fp)
   84b08:	10800104 	addi	r2,r2,4
   84b0c:	e0bff815 	stw	r2,-32(fp)
                      break;
   84b10:	00001406 	br	84b64 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   84b14:	d0a5fd17 	ldw	r2,-26636(gp)
   84b18:	10c00917 	ldw	r3,36(r2)
   84b1c:	e0bff817 	ldw	r2,-32(fp)
   84b20:	10c00015 	stw	r3,0(r2)
   84b24:	e0bff817 	ldw	r2,-32(fp)
   84b28:	10800104 	addi	r2,r2,4
   84b2c:	e0bff815 	stw	r2,-32(fp)
                      break;
   84b30:	00000c06 	br	84b64 <OSEventPendMulti+0x60c>
   84b34:	e0bff017 	ldw	r2,-64(fp)
   84b38:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84b3c:	e0bfea17 	ldw	r2,-88(fp)
   84b40:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   84b44:	e0bff717 	ldw	r2,-36(fp)
   84b48:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   84b4c:	e0c00217 	ldw	r3,8(fp)
   84b50:	00800044 	movi	r2,1
   84b54:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
   84b58:	e0bff18b 	ldhu	r2,-58(fp)
   84b5c:	e0bfff15 	stw	r2,-4(fp)
   84b60:	00002406 	br	84bf4 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
   84b64:	e0800217 	ldw	r2,8(fp)
   84b68:	10000005 	stb	zero,0(r2)
             break;
   84b6c:	00001106 	br	84bb4 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   84b70:	e0bff817 	ldw	r2,-32(fp)
   84b74:	10000015 	stw	zero,0(r2)
   84b78:	e0bff817 	ldw	r2,-32(fp)
   84b7c:	10800104 	addi	r2,r2,4
   84b80:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   84b84:	e0c00217 	ldw	r3,8(fp)
   84b88:	00800384 	movi	r2,14
   84b8c:	18800005 	stb	r2,0(r3)
             break;
   84b90:	00000806 	br	84bb4 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   84b94:	e0bff817 	ldw	r2,-32(fp)
   84b98:	10000015 	stw	zero,0(r2)
   84b9c:	e0bff817 	ldw	r2,-32(fp)
   84ba0:	10800104 	addi	r2,r2,4
   84ba4:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   84ba8:	e0c00217 	ldw	r3,8(fp)
   84bac:	00800284 	movi	r2,10
   84bb0:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   84bb4:	d0a5fd17 	ldw	r2,-26636(gp)
   84bb8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   84bbc:	d0a5fd17 	ldw	r2,-26636(gp)
   84bc0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   84bc4:	d0a5fd17 	ldw	r2,-26636(gp)
   84bc8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   84bcc:	d0a5fd17 	ldw	r2,-26636(gp)
   84bd0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   84bd4:	d0a5fd17 	ldw	r2,-26636(gp)
   84bd8:	10000915 	stw	zero,36(r2)
   84bdc:	e0bff017 	ldw	r2,-64(fp)
   84be0:	e0bfe915 	stw	r2,-92(fp)
   84be4:	e0bfe917 	ldw	r2,-92(fp)
   84be8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   84bec:	e0fff18b 	ldhu	r3,-58(fp)
   84bf0:	e0ffff15 	stw	r3,-4(fp)
   84bf4:	e0bfff17 	ldw	r2,-4(fp)
}
   84bf8:	e037883a 	mov	sp,fp
   84bfc:	dfc00117 	ldw	ra,4(sp)
   84c00:	df000017 	ldw	fp,0(sp)
   84c04:	dec00204 	addi	sp,sp,8
   84c08:	f800283a 	ret

00084c0c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   84c0c:	defffe04 	addi	sp,sp,-8
   84c10:	dfc00115 	stw	ra,4(sp)
   84c14:	df000015 	stw	fp,0(sp)
   84c18:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   84c1c:	008e7a80 	call	8e7a8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   84c20:	00859dc0 	call	859dc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   84c24:	0085a200 	call	85a20 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   84c28:	0085b840 	call	85b84 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   84c2c:	00859000 	call	85900 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   84c30:	0087c340 	call	87c34 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   84c34:	008860c0 	call	8860c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   84c38:	00899680 	call	89968 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   84c3c:	0085a8c0 	call	85a8c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   84c40:	0085b080 	call	85b08 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   84c44:	008e7c40 	call	8e7c4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   84c48:	008640c0 	call	8640c <OSDebugInit>
#endif
}
   84c4c:	e037883a 	mov	sp,fp
   84c50:	dfc00117 	ldw	ra,4(sp)
   84c54:	df000017 	ldw	fp,0(sp)
   84c58:	dec00204 	addi	sp,sp,8
   84c5c:	f800283a 	ret

00084c60 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   84c60:	defffc04 	addi	sp,sp,-16
   84c64:	df000315 	stw	fp,12(sp)
   84c68:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   84c6c:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
   84c70:	d0a5ee43 	ldbu	r2,-26695(gp)
   84c74:	10803fcc 	andi	r2,r2,255
   84c78:	10800058 	cmpnei	r2,r2,1
   84c7c:	1000131e 	bne	r2,zero,84ccc <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84c80:	0005303a 	rdctl	r2,status
   84c84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84c88:	e0fffe17 	ldw	r3,-8(fp)
   84c8c:	00bfff84 	movi	r2,-2
   84c90:	1884703a 	and	r2,r3,r2
   84c94:	1001703a 	wrctl	status,r2
  
  return context;
   84c98:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   84c9c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
   84ca0:	d0a5fc03 	ldbu	r2,-26640(gp)
   84ca4:	10803fcc 	andi	r2,r2,255
   84ca8:	10803fe0 	cmpeqi	r2,r2,255
   84cac:	1000031e 	bne	r2,zero,84cbc <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   84cb0:	d0a5fc03 	ldbu	r2,-26640(gp)
   84cb4:	10800044 	addi	r2,r2,1
   84cb8:	d0a5fc05 	stb	r2,-26640(gp)
   84cbc:	e0bfff17 	ldw	r2,-4(fp)
   84cc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84cc4:	e0bffd17 	ldw	r2,-12(fp)
   84cc8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   84ccc:	e037883a 	mov	sp,fp
   84cd0:	df000017 	ldw	fp,0(sp)
   84cd4:	dec00104 	addi	sp,sp,4
   84cd8:	f800283a 	ret

00084cdc <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   84cdc:	defffb04 	addi	sp,sp,-20
   84ce0:	dfc00415 	stw	ra,16(sp)
   84ce4:	df000315 	stw	fp,12(sp)
   84ce8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   84cec:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
   84cf0:	d0a5ee43 	ldbu	r2,-26695(gp)
   84cf4:	10803fcc 	andi	r2,r2,255
   84cf8:	10800058 	cmpnei	r2,r2,1
   84cfc:	1000321e 	bne	r2,zero,84dc8 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84d00:	0005303a 	rdctl	r2,status
   84d04:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84d08:	e0fffe17 	ldw	r3,-8(fp)
   84d0c:	00bfff84 	movi	r2,-2
   84d10:	1884703a 	and	r2,r3,r2
   84d14:	1001703a 	wrctl	status,r2
  
  return context;
   84d18:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   84d1c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   84d20:	d0a5fc03 	ldbu	r2,-26640(gp)
   84d24:	10803fcc 	andi	r2,r2,255
   84d28:	1005003a 	cmpeq	r2,r2,zero
   84d2c:	1000031e 	bne	r2,zero,84d3c <OSIntExit+0x60>
            OSIntNesting--;
   84d30:	d0a5fc03 	ldbu	r2,-26640(gp)
   84d34:	10bfffc4 	addi	r2,r2,-1
   84d38:	d0a5fc05 	stb	r2,-26640(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   84d3c:	d0a5fc03 	ldbu	r2,-26640(gp)
   84d40:	10803fcc 	andi	r2,r2,255
   84d44:	1004c03a 	cmpne	r2,r2,zero
   84d48:	10001b1e 	bne	r2,zero,84db8 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   84d4c:	d0a5ee03 	ldbu	r2,-26696(gp)
   84d50:	10803fcc 	andi	r2,r2,255
   84d54:	1004c03a 	cmpne	r2,r2,zero
   84d58:	1000171e 	bne	r2,zero,84db8 <OSIntExit+0xdc>
                OS_SchedNew();
   84d5c:	0085df80 	call	85df8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   84d60:	d0a5f003 	ldbu	r2,-26688(gp)
   84d64:	d0e5f043 	ldbu	r3,-26687(gp)
   84d68:	11003fcc 	andi	r4,r2,255
   84d6c:	18803fcc 	andi	r2,r3,255
   84d70:	20801126 	beq	r4,r2,84db8 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   84d74:	d0a5f003 	ldbu	r2,-26688(gp)
   84d78:	10803fcc 	andi	r2,r2,255
   84d7c:	00c002b4 	movhi	r3,10
   84d80:	18e50004 	addi	r3,r3,-27648
   84d84:	1085883a 	add	r2,r2,r2
   84d88:	1085883a 	add	r2,r2,r2
   84d8c:	10c5883a 	add	r2,r2,r3
   84d90:	10800017 	ldw	r2,0(r2)
   84d94:	d0a5f815 	stw	r2,-26656(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   84d98:	d0e5f817 	ldw	r3,-26656(gp)
   84d9c:	18800e17 	ldw	r2,56(r3)
   84da0:	10800044 	addi	r2,r2,1
   84da4:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   84da8:	d0a5f317 	ldw	r2,-26676(gp)
   84dac:	10800044 	addi	r2,r2,1
   84db0:	d0a5f315 	stw	r2,-26676(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   84db4:	008e3340 	call	8e334 <OSCtxSw>
   84db8:	e0bfff17 	ldw	r2,-4(fp)
   84dbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84dc0:	e0bffd17 	ldw	r2,-12(fp)
   84dc4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   84dc8:	e037883a 	mov	sp,fp
   84dcc:	dfc00117 	ldw	ra,4(sp)
   84dd0:	df000017 	ldw	fp,0(sp)
   84dd4:	dec00204 	addi	sp,sp,8
   84dd8:	f800283a 	ret

00084ddc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   84ddc:	defffc04 	addi	sp,sp,-16
   84de0:	df000315 	stw	fp,12(sp)
   84de4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   84de8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   84dec:	d0a5ee43 	ldbu	r2,-26695(gp)
   84df0:	10803fcc 	andi	r2,r2,255
   84df4:	10800058 	cmpnei	r2,r2,1
   84df8:	1000171e 	bne	r2,zero,84e58 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84dfc:	0005303a 	rdctl	r2,status
   84e00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84e04:	e0fffe17 	ldw	r3,-8(fp)
   84e08:	00bfff84 	movi	r2,-2
   84e0c:	1884703a 	and	r2,r3,r2
   84e10:	1001703a 	wrctl	status,r2
  
  return context;
   84e14:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   84e18:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   84e1c:	d0a5fc03 	ldbu	r2,-26640(gp)
   84e20:	10803fcc 	andi	r2,r2,255
   84e24:	1004c03a 	cmpne	r2,r2,zero
   84e28:	1000071e 	bne	r2,zero,84e48 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   84e2c:	d0a5ee03 	ldbu	r2,-26696(gp)
   84e30:	10803fcc 	andi	r2,r2,255
   84e34:	10803fe0 	cmpeqi	r2,r2,255
   84e38:	1000031e 	bne	r2,zero,84e48 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   84e3c:	d0a5ee03 	ldbu	r2,-26696(gp)
   84e40:	10800044 	addi	r2,r2,1
   84e44:	d0a5ee05 	stb	r2,-26696(gp)
   84e48:	e0bfff17 	ldw	r2,-4(fp)
   84e4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84e50:	e0bffd17 	ldw	r2,-12(fp)
   84e54:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   84e58:	e037883a 	mov	sp,fp
   84e5c:	df000017 	ldw	fp,0(sp)
   84e60:	dec00104 	addi	sp,sp,4
   84e64:	f800283a 	ret

00084e68 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   84e68:	defff804 	addi	sp,sp,-32
   84e6c:	dfc00715 	stw	ra,28(sp)
   84e70:	df000615 	stw	fp,24(sp)
   84e74:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   84e78:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   84e7c:	d0a5ee43 	ldbu	r2,-26695(gp)
   84e80:	10803fcc 	andi	r2,r2,255
   84e84:	10800058 	cmpnei	r2,r2,1
   84e88:	10002b1e 	bne	r2,zero,84f38 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84e8c:	0005303a 	rdctl	r2,status
   84e90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84e94:	e0fffe17 	ldw	r3,-8(fp)
   84e98:	00bfff84 	movi	r2,-2
   84e9c:	1884703a 	and	r2,r3,r2
   84ea0:	1001703a 	wrctl	status,r2
  
  return context;
   84ea4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   84ea8:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   84eac:	d0a5ee03 	ldbu	r2,-26696(gp)
   84eb0:	10803fcc 	andi	r2,r2,255
   84eb4:	1005003a 	cmpeq	r2,r2,zero
   84eb8:	10001b1e 	bne	r2,zero,84f28 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   84ebc:	d0a5ee03 	ldbu	r2,-26696(gp)
   84ec0:	10bfffc4 	addi	r2,r2,-1
   84ec4:	d0a5ee05 	stb	r2,-26696(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   84ec8:	d0a5ee03 	ldbu	r2,-26696(gp)
   84ecc:	10803fcc 	andi	r2,r2,255
   84ed0:	1004c03a 	cmpne	r2,r2,zero
   84ed4:	10000f1e 	bne	r2,zero,84f14 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   84ed8:	d0a5fc03 	ldbu	r2,-26640(gp)
   84edc:	10803fcc 	andi	r2,r2,255
   84ee0:	1004c03a 	cmpne	r2,r2,zero
   84ee4:	1000061e 	bne	r2,zero,84f00 <OSSchedUnlock+0x98>
   84ee8:	e0bfff17 	ldw	r2,-4(fp)
   84eec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84ef0:	e0bffd17 	ldw	r2,-12(fp)
   84ef4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   84ef8:	0085d240 	call	85d24 <OS_Sched>
   84efc:	00000e06 	br	84f38 <OSSchedUnlock+0xd0>
   84f00:	e0bfff17 	ldw	r2,-4(fp)
   84f04:	e0bffc15 	stw	r2,-16(fp)
   84f08:	e0bffc17 	ldw	r2,-16(fp)
   84f0c:	1001703a 	wrctl	status,r2
   84f10:	00000906 	br	84f38 <OSSchedUnlock+0xd0>
   84f14:	e0bfff17 	ldw	r2,-4(fp)
   84f18:	e0bffb15 	stw	r2,-20(fp)
   84f1c:	e0bffb17 	ldw	r2,-20(fp)
   84f20:	1001703a 	wrctl	status,r2
   84f24:	00000406 	br	84f38 <OSSchedUnlock+0xd0>
   84f28:	e0bfff17 	ldw	r2,-4(fp)
   84f2c:	e0bffa15 	stw	r2,-24(fp)
   84f30:	e0bffa17 	ldw	r2,-24(fp)
   84f34:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   84f38:	e037883a 	mov	sp,fp
   84f3c:	dfc00117 	ldw	ra,4(sp)
   84f40:	df000017 	ldw	fp,0(sp)
   84f44:	dec00204 	addi	sp,sp,8
   84f48:	f800283a 	ret

00084f4c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   84f4c:	defffe04 	addi	sp,sp,-8
   84f50:	dfc00115 	stw	ra,4(sp)
   84f54:	df000015 	stw	fp,0(sp)
   84f58:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   84f5c:	d0a5ee43 	ldbu	r2,-26695(gp)
   84f60:	10803fcc 	andi	r2,r2,255
   84f64:	1004c03a 	cmpne	r2,r2,zero
   84f68:	10000f1e 	bne	r2,zero,84fa8 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   84f6c:	0085df80 	call	85df8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   84f70:	d0a5f003 	ldbu	r2,-26688(gp)
   84f74:	d0a5f045 	stb	r2,-26687(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   84f78:	d0a5f003 	ldbu	r2,-26688(gp)
   84f7c:	10803fcc 	andi	r2,r2,255
   84f80:	00c002b4 	movhi	r3,10
   84f84:	18e50004 	addi	r3,r3,-27648
   84f88:	1085883a 	add	r2,r2,r2
   84f8c:	1085883a 	add	r2,r2,r2
   84f90:	10c5883a 	add	r2,r2,r3
   84f94:	10800017 	ldw	r2,0(r2)
   84f98:	d0a5f815 	stw	r2,-26656(gp)
        OSTCBCur      = OSTCBHighRdy;
   84f9c:	d0a5f817 	ldw	r2,-26656(gp)
   84fa0:	d0a5fd15 	stw	r2,-26636(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   84fa4:	008e3c00 	call	8e3c0 <OSStartHighRdy>
    }
}
   84fa8:	e037883a 	mov	sp,fp
   84fac:	dfc00117 	ldw	ra,4(sp)
   84fb0:	df000017 	ldw	fp,0(sp)
   84fb4:	dec00204 	addi	sp,sp,8
   84fb8:	f800283a 	ret

00084fbc <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   84fbc:	defff904 	addi	sp,sp,-28
   84fc0:	dfc00615 	stw	ra,24(sp)
   84fc4:	df000515 	stw	fp,20(sp)
   84fc8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   84fcc:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   84fd0:	01000084 	movi	r4,2
   84fd4:	008c01c0 	call	8c01c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84fd8:	0005303a 	rdctl	r2,status
   84fdc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84fe0:	e0fffe17 	ldw	r3,-8(fp)
   84fe4:	00bfff84 	movi	r2,-2
   84fe8:	1884703a 	and	r2,r3,r2
   84fec:	1001703a 	wrctl	status,r2
  
  return context;
   84ff0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   84ff4:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   84ff8:	d025ef15 	stw	zero,-26692(gp)
   84ffc:	e0bfff17 	ldw	r2,-4(fp)
   85000:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85004:	e0bffd17 	ldw	r2,-12(fp)
   85008:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   8500c:	01001904 	movi	r4,100
   85010:	008c01c0 	call	8c01c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85014:	0005303a 	rdctl	r2,status
   85018:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8501c:	e0fffc17 	ldw	r3,-16(fp)
   85020:	00bfff84 	movi	r2,-2
   85024:	1884703a 	and	r2,r3,r2
   85028:	1001703a 	wrctl	status,r2
  
  return context;
   8502c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   85030:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   85034:	d0a5ef17 	ldw	r2,-26692(gp)
   85038:	d0a5f415 	stw	r2,-26672(gp)
    OSStatRdy    = OS_TRUE;
   8503c:	00800044 	movi	r2,1
   85040:	d0a60005 	stb	r2,-26624(gp)
   85044:	e0bfff17 	ldw	r2,-4(fp)
   85048:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8504c:	e0bffb17 	ldw	r2,-20(fp)
   85050:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   85054:	e037883a 	mov	sp,fp
   85058:	dfc00117 	ldw	ra,4(sp)
   8505c:	df000017 	ldw	fp,0(sp)
   85060:	dec00204 	addi	sp,sp,8
   85064:	f800283a 	ret

00085068 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   85068:	defff604 	addi	sp,sp,-40
   8506c:	dfc00915 	stw	ra,36(sp)
   85070:	df000815 	stw	fp,32(sp)
   85074:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   85078:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   8507c:	008e78c0 	call	8e78c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85080:	0005303a 	rdctl	r2,status
   85084:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85088:	e0fffb17 	ldw	r3,-20(fp)
   8508c:	00bfff84 	movi	r2,-2
   85090:	1884703a 	and	r2,r3,r2
   85094:	1001703a 	wrctl	status,r2
  
  return context;
   85098:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   8509c:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
   850a0:	d0a5fe17 	ldw	r2,-26632(gp)
   850a4:	10800044 	addi	r2,r2,1
   850a8:	d0a5fe15 	stw	r2,-26632(gp)
   850ac:	e0bffc17 	ldw	r2,-16(fp)
   850b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   850b4:	e0bffa17 	ldw	r2,-24(fp)
   850b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   850bc:	d0a5ee43 	ldbu	r2,-26695(gp)
   850c0:	10803fcc 	andi	r2,r2,255
   850c4:	10800058 	cmpnei	r2,r2,1
   850c8:	1000721e 	bne	r2,zero,85294 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   850cc:	d0a5f203 	ldbu	r2,-26680(gp)
   850d0:	10803fcc 	andi	r2,r2,255
   850d4:	e0bfff15 	stw	r2,-4(fp)
   850d8:	e0ffff17 	ldw	r3,-4(fp)
   850dc:	18800060 	cmpeqi	r2,r3,1
   850e0:	10000a1e 	bne	r2,zero,8510c <OSTimeTick+0xa4>
   850e4:	e0ffff17 	ldw	r3,-4(fp)
   850e8:	188000a0 	cmpeqi	r2,r3,2
   850ec:	1000091e 	bne	r2,zero,85114 <OSTimeTick+0xac>
   850f0:	e0ffff17 	ldw	r3,-4(fp)
   850f4:	1805003a 	cmpeq	r2,r3,zero
   850f8:	1000011e 	bne	r2,zero,85100 <OSTimeTick+0x98>
   850fc:	00000a06 	br	85128 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   85100:	00800044 	movi	r2,1
   85104:	e0bffd05 	stb	r2,-12(fp)
                 break;
   85108:	00000a06 	br	85134 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   8510c:	e03ffd05 	stb	zero,-12(fp)
                 break;
   85110:	00000806 	br	85134 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   85114:	00800044 	movi	r2,1
   85118:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   8511c:	00800044 	movi	r2,1
   85120:	d0a5f205 	stb	r2,-26680(gp)
                 break;
   85124:	00000306 	br	85134 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   85128:	00800044 	movi	r2,1
   8512c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   85130:	d025f205 	stb	zero,-26680(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   85134:	e0bffd03 	ldbu	r2,-12(fp)
   85138:	1005003a 	cmpeq	r2,r2,zero
   8513c:	1000551e 	bne	r2,zero,85294 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   85140:	d0a5f117 	ldw	r2,-26684(gp)
   85144:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   85148:	00004d06 	br	85280 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8514c:	0005303a 	rdctl	r2,status
   85150:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85154:	e0fff917 	ldw	r3,-28(fp)
   85158:	00bfff84 	movi	r2,-2
   8515c:	1884703a 	and	r2,r3,r2
   85160:	1001703a 	wrctl	status,r2
  
  return context;
   85164:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
   85168:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   8516c:	e0bffe17 	ldw	r2,-8(fp)
   85170:	10800b8b 	ldhu	r2,46(r2)
   85174:	10bfffcc 	andi	r2,r2,65535
   85178:	1005003a 	cmpeq	r2,r2,zero
   8517c:	1000391e 	bne	r2,zero,85264 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   85180:	e0bffe17 	ldw	r2,-8(fp)
   85184:	10800b8b 	ldhu	r2,46(r2)
   85188:	10bfffc4 	addi	r2,r2,-1
   8518c:	1007883a 	mov	r3,r2
   85190:	e0bffe17 	ldw	r2,-8(fp)
   85194:	10c00b8d 	sth	r3,46(r2)
   85198:	e0bffe17 	ldw	r2,-8(fp)
   8519c:	10800b8b 	ldhu	r2,46(r2)
   851a0:	10bfffcc 	andi	r2,r2,65535
   851a4:	1004c03a 	cmpne	r2,r2,zero
   851a8:	10002e1e 	bne	r2,zero,85264 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   851ac:	e0bffe17 	ldw	r2,-8(fp)
   851b0:	10800c03 	ldbu	r2,48(r2)
   851b4:	10803fcc 	andi	r2,r2,255
   851b8:	10800dcc 	andi	r2,r2,55
   851bc:	1005003a 	cmpeq	r2,r2,zero
   851c0:	10000b1e 	bne	r2,zero,851f0 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   851c4:	e0bffe17 	ldw	r2,-8(fp)
   851c8:	10c00c03 	ldbu	r3,48(r2)
   851cc:	00bff204 	movi	r2,-56
   851d0:	1884703a 	and	r2,r3,r2
   851d4:	1007883a 	mov	r3,r2
   851d8:	e0bffe17 	ldw	r2,-8(fp)
   851dc:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   851e0:	e0fffe17 	ldw	r3,-8(fp)
   851e4:	00800044 	movi	r2,1
   851e8:	18800c45 	stb	r2,49(r3)
   851ec:	00000206 	br	851f8 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   851f0:	e0bffe17 	ldw	r2,-8(fp)
   851f4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   851f8:	e0bffe17 	ldw	r2,-8(fp)
   851fc:	10800c03 	ldbu	r2,48(r2)
   85200:	10803fcc 	andi	r2,r2,255
   85204:	1080020c 	andi	r2,r2,8
   85208:	1004c03a 	cmpne	r2,r2,zero
   8520c:	1000151e 	bne	r2,zero,85264 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   85210:	e0bffe17 	ldw	r2,-8(fp)
   85214:	10c00d83 	ldbu	r3,54(r2)
   85218:	d0a5fa03 	ldbu	r2,-26648(gp)
   8521c:	1884b03a 	or	r2,r3,r2
   85220:	d0a5fa05 	stb	r2,-26648(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   85224:	e0bffe17 	ldw	r2,-8(fp)
   85228:	10800d03 	ldbu	r2,52(r2)
   8522c:	11003fcc 	andi	r4,r2,255
   85230:	e0bffe17 	ldw	r2,-8(fp)
   85234:	10800d03 	ldbu	r2,52(r2)
   85238:	10c03fcc 	andi	r3,r2,255
   8523c:	d0a5fa44 	addi	r2,gp,-26647
   85240:	1885883a 	add	r2,r3,r2
   85244:	10c00003 	ldbu	r3,0(r2)
   85248:	e0bffe17 	ldw	r2,-8(fp)
   8524c:	10800d43 	ldbu	r2,53(r2)
   85250:	1884b03a 	or	r2,r3,r2
   85254:	1007883a 	mov	r3,r2
   85258:	d0a5fa44 	addi	r2,gp,-26647
   8525c:	2085883a 	add	r2,r4,r2
   85260:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   85264:	e0bffe17 	ldw	r2,-8(fp)
   85268:	10800517 	ldw	r2,20(r2)
   8526c:	e0bffe15 	stw	r2,-8(fp)
   85270:	e0bffc17 	ldw	r2,-16(fp)
   85274:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85278:	e0bff817 	ldw	r2,-32(fp)
   8527c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   85280:	e0bffe17 	ldw	r2,-8(fp)
   85284:	10800c83 	ldbu	r2,50(r2)
   85288:	10803fcc 	andi	r2,r2,255
   8528c:	10800518 	cmpnei	r2,r2,20
   85290:	103fae1e 	bne	r2,zero,8514c <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   85294:	e037883a 	mov	sp,fp
   85298:	dfc00117 	ldw	ra,4(sp)
   8529c:	df000017 	ldw	fp,0(sp)
   852a0:	dec00204 	addi	sp,sp,8
   852a4:	f800283a 	ret

000852a8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   852a8:	deffff04 	addi	sp,sp,-4
   852ac:	df000015 	stw	fp,0(sp)
   852b0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   852b4:	00804784 	movi	r2,286
}
   852b8:	e037883a 	mov	sp,fp
   852bc:	df000017 	ldw	fp,0(sp)
   852c0:	dec00104 	addi	sp,sp,4
   852c4:	f800283a 	ret

000852c8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   852c8:	deffff04 	addi	sp,sp,-4
   852cc:	df000015 	stw	fp,0(sp)
   852d0:	d839883a 	mov	fp,sp
}
   852d4:	e037883a 	mov	sp,fp
   852d8:	df000017 	ldw	fp,0(sp)
   852dc:	dec00104 	addi	sp,sp,4
   852e0:	f800283a 	ret

000852e4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   852e4:	defff804 	addi	sp,sp,-32
   852e8:	dfc00715 	stw	ra,28(sp)
   852ec:	df000615 	stw	fp,24(sp)
   852f0:	df000604 	addi	fp,sp,24
   852f4:	e13ffc15 	stw	r4,-16(fp)
   852f8:	e17ffd15 	stw	r5,-12(fp)
   852fc:	e1bffe05 	stb	r6,-8(fp)
   85300:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   85304:	e0bffc17 	ldw	r2,-16(fp)
   85308:	10800283 	ldbu	r2,10(r2)
   8530c:	10c03fcc 	andi	r3,r2,255
   85310:	00800274 	movhi	r2,9
   85314:	10bc8304 	addi	r2,r2,-3572
   85318:	10c5883a 	add	r2,r2,r3
   8531c:	10800003 	ldbu	r2,0(r2)
   85320:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   85324:	e0fffa83 	ldbu	r3,-22(fp)
   85328:	e0bffc17 	ldw	r2,-16(fp)
   8532c:	1885883a 	add	r2,r3,r2
   85330:	10800204 	addi	r2,r2,8
   85334:	108000c3 	ldbu	r2,3(r2)
   85338:	10c03fcc 	andi	r3,r2,255
   8533c:	00800274 	movhi	r2,9
   85340:	10bc8304 	addi	r2,r2,-3572
   85344:	10c5883a 	add	r2,r2,r3
   85348:	10800003 	ldbu	r2,0(r2)
   8534c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   85350:	e0bffa83 	ldbu	r2,-22(fp)
   85354:	100490fa 	slli	r2,r2,3
   85358:	1007883a 	mov	r3,r2
   8535c:	e0bffa43 	ldbu	r2,-23(fp)
   85360:	1885883a 	add	r2,r3,r2
   85364:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   85368:	e0bffa03 	ldbu	r2,-24(fp)
   8536c:	00c002b4 	movhi	r3,10
   85370:	18e50004 	addi	r3,r3,-27648
   85374:	1085883a 	add	r2,r2,r2
   85378:	1085883a 	add	r2,r2,r2
   8537c:	10c5883a 	add	r2,r2,r3
   85380:	10800017 	ldw	r2,0(r2)
   85384:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   85388:	e0bffb17 	ldw	r2,-20(fp)
   8538c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   85390:	e0fffb17 	ldw	r3,-20(fp)
   85394:	e0bffd17 	ldw	r2,-12(fp)
   85398:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   8539c:	e0bffb17 	ldw	r2,-20(fp)
   853a0:	10800c03 	ldbu	r2,48(r2)
   853a4:	1007883a 	mov	r3,r2
   853a8:	e0bffe03 	ldbu	r2,-8(fp)
   853ac:	0084303a 	nor	r2,zero,r2
   853b0:	1884703a 	and	r2,r3,r2
   853b4:	1007883a 	mov	r3,r2
   853b8:	e0bffb17 	ldw	r2,-20(fp)
   853bc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   853c0:	e0fffb17 	ldw	r3,-20(fp)
   853c4:	e0bfff03 	ldbu	r2,-4(fp)
   853c8:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   853cc:	e0bffb17 	ldw	r2,-20(fp)
   853d0:	10800c03 	ldbu	r2,48(r2)
   853d4:	10803fcc 	andi	r2,r2,255
   853d8:	1080020c 	andi	r2,r2,8
   853dc:	1004c03a 	cmpne	r2,r2,zero
   853e0:	1000111e 	bne	r2,zero,85428 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   853e4:	e0bffb17 	ldw	r2,-20(fp)
   853e8:	10c00d83 	ldbu	r3,54(r2)
   853ec:	d0a5fa03 	ldbu	r2,-26648(gp)
   853f0:	1884b03a 	or	r2,r3,r2
   853f4:	d0a5fa05 	stb	r2,-26648(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   853f8:	e13ffa83 	ldbu	r4,-22(fp)
   853fc:	e0fffa83 	ldbu	r3,-22(fp)
   85400:	d0a5fa44 	addi	r2,gp,-26647
   85404:	1885883a 	add	r2,r3,r2
   85408:	10c00003 	ldbu	r3,0(r2)
   8540c:	e0bffb17 	ldw	r2,-20(fp)
   85410:	10800d43 	ldbu	r2,53(r2)
   85414:	1884b03a 	or	r2,r3,r2
   85418:	1007883a 	mov	r3,r2
   8541c:	d0a5fa44 	addi	r2,gp,-26647
   85420:	2085883a 	add	r2,r4,r2
   85424:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   85428:	e13ffb17 	ldw	r4,-20(fp)
   8542c:	e17ffc17 	ldw	r5,-16(fp)
   85430:	00856dc0 	call	856dc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   85434:	e0bffb17 	ldw	r2,-20(fp)
   85438:	10800817 	ldw	r2,32(r2)
   8543c:	1005003a 	cmpeq	r2,r2,zero
   85440:	1000071e 	bne	r2,zero,85460 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   85444:	e0bffb17 	ldw	r2,-20(fp)
   85448:	11400817 	ldw	r5,32(r2)
   8544c:	e13ffb17 	ldw	r4,-20(fp)
   85450:	00857940 	call	85794 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   85454:	e0fffb17 	ldw	r3,-20(fp)
   85458:	e0bffc17 	ldw	r2,-16(fp)
   8545c:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
   85460:	e0bffa03 	ldbu	r2,-24(fp)
}
   85464:	e037883a 	mov	sp,fp
   85468:	dfc00117 	ldw	ra,4(sp)
   8546c:	df000017 	ldw	fp,0(sp)
   85470:	dec00204 	addi	sp,sp,8
   85474:	f800283a 	ret

00085478 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   85478:	defffd04 	addi	sp,sp,-12
   8547c:	df000215 	stw	fp,8(sp)
   85480:	df000204 	addi	fp,sp,8
   85484:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   85488:	d0e5fd17 	ldw	r3,-26636(gp)
   8548c:	e0bfff17 	ldw	r2,-4(fp)
   85490:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   85494:	d0a5fd17 	ldw	r2,-26636(gp)
   85498:	10800d03 	ldbu	r2,52(r2)
   8549c:	11003fcc 	andi	r4,r2,255
   854a0:	d0a5fd17 	ldw	r2,-26636(gp)
   854a4:	10800d03 	ldbu	r2,52(r2)
   854a8:	10c03fcc 	andi	r3,r2,255
   854ac:	e0bfff17 	ldw	r2,-4(fp)
   854b0:	1885883a 	add	r2,r3,r2
   854b4:	10800204 	addi	r2,r2,8
   854b8:	10c000c3 	ldbu	r3,3(r2)
   854bc:	d0a5fd17 	ldw	r2,-26636(gp)
   854c0:	10800d43 	ldbu	r2,53(r2)
   854c4:	1884b03a 	or	r2,r3,r2
   854c8:	1007883a 	mov	r3,r2
   854cc:	e0bfff17 	ldw	r2,-4(fp)
   854d0:	2085883a 	add	r2,r4,r2
   854d4:	10800204 	addi	r2,r2,8
   854d8:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   854dc:	e0bfff17 	ldw	r2,-4(fp)
   854e0:	10c00283 	ldbu	r3,10(r2)
   854e4:	d0a5fd17 	ldw	r2,-26636(gp)
   854e8:	10800d83 	ldbu	r2,54(r2)
   854ec:	1884b03a 	or	r2,r3,r2
   854f0:	1007883a 	mov	r3,r2
   854f4:	e0bfff17 	ldw	r2,-4(fp)
   854f8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   854fc:	d0a5fd17 	ldw	r2,-26636(gp)
   85500:	10800d03 	ldbu	r2,52(r2)
   85504:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   85508:	e13ffe03 	ldbu	r4,-8(fp)
   8550c:	e0fffe03 	ldbu	r3,-8(fp)
   85510:	d0a5fa44 	addi	r2,gp,-26647
   85514:	1885883a 	add	r2,r3,r2
   85518:	10800003 	ldbu	r2,0(r2)
   8551c:	1007883a 	mov	r3,r2
   85520:	d0a5fd17 	ldw	r2,-26636(gp)
   85524:	10800d43 	ldbu	r2,53(r2)
   85528:	0084303a 	nor	r2,zero,r2
   8552c:	1884703a 	and	r2,r3,r2
   85530:	1007883a 	mov	r3,r2
   85534:	d0a5fa44 	addi	r2,gp,-26647
   85538:	2085883a 	add	r2,r4,r2
   8553c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   85540:	e0fffe03 	ldbu	r3,-8(fp)
   85544:	d0a5fa44 	addi	r2,gp,-26647
   85548:	1885883a 	add	r2,r3,r2
   8554c:	10800003 	ldbu	r2,0(r2)
   85550:	10803fcc 	andi	r2,r2,255
   85554:	1004c03a 	cmpne	r2,r2,zero
   85558:	1000071e 	bne	r2,zero,85578 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   8555c:	d0a5fd17 	ldw	r2,-26636(gp)
   85560:	10800d83 	ldbu	r2,54(r2)
   85564:	0084303a 	nor	r2,zero,r2
   85568:	1007883a 	mov	r3,r2
   8556c:	d0a5fa03 	ldbu	r2,-26648(gp)
   85570:	1884703a 	and	r2,r3,r2
   85574:	d0a5fa05 	stb	r2,-26648(gp)
    }
}
   85578:	e037883a 	mov	sp,fp
   8557c:	df000017 	ldw	fp,0(sp)
   85580:	dec00104 	addi	sp,sp,4
   85584:	f800283a 	ret

00085588 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   85588:	defffb04 	addi	sp,sp,-20
   8558c:	df000415 	stw	fp,16(sp)
   85590:	df000404 	addi	fp,sp,16
   85594:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   85598:	d0a5fd17 	ldw	r2,-26636(gp)
   8559c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   855a0:	d0e5fd17 	ldw	r3,-26636(gp)
   855a4:	e0bfff17 	ldw	r2,-4(fp)
   855a8:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
   855ac:	e0bfff17 	ldw	r2,-4(fp)
   855b0:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
   855b4:	e0bffe17 	ldw	r2,-8(fp)
   855b8:	10800017 	ldw	r2,0(r2)
   855bc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   855c0:	00002006 	br	85644 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   855c4:	d0a5fd17 	ldw	r2,-26636(gp)
   855c8:	10800d03 	ldbu	r2,52(r2)
   855cc:	11003fcc 	andi	r4,r2,255
   855d0:	d0a5fd17 	ldw	r2,-26636(gp)
   855d4:	10800d03 	ldbu	r2,52(r2)
   855d8:	10c03fcc 	andi	r3,r2,255
   855dc:	e0bffd17 	ldw	r2,-12(fp)
   855e0:	1885883a 	add	r2,r3,r2
   855e4:	10800204 	addi	r2,r2,8
   855e8:	10c000c3 	ldbu	r3,3(r2)
   855ec:	d0a5fd17 	ldw	r2,-26636(gp)
   855f0:	10800d43 	ldbu	r2,53(r2)
   855f4:	1884b03a 	or	r2,r3,r2
   855f8:	1007883a 	mov	r3,r2
   855fc:	e0bffd17 	ldw	r2,-12(fp)
   85600:	2085883a 	add	r2,r4,r2
   85604:	10800204 	addi	r2,r2,8
   85608:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   8560c:	e0bffd17 	ldw	r2,-12(fp)
   85610:	10c00283 	ldbu	r3,10(r2)
   85614:	d0a5fd17 	ldw	r2,-26636(gp)
   85618:	10800d83 	ldbu	r2,54(r2)
   8561c:	1884b03a 	or	r2,r3,r2
   85620:	1007883a 	mov	r3,r2
   85624:	e0bffd17 	ldw	r2,-12(fp)
   85628:	10c00285 	stb	r3,10(r2)
        pevents++;
   8562c:	e0bffe17 	ldw	r2,-8(fp)
   85630:	10800104 	addi	r2,r2,4
   85634:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
   85638:	e0bffe17 	ldw	r2,-8(fp)
   8563c:	10800017 	ldw	r2,0(r2)
   85640:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   85644:	e0bffd17 	ldw	r2,-12(fp)
   85648:	1004c03a 	cmpne	r2,r2,zero
   8564c:	103fdd1e 	bne	r2,zero,855c4 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   85650:	d0a5fd17 	ldw	r2,-26636(gp)
   85654:	10800d03 	ldbu	r2,52(r2)
   85658:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   8565c:	e13ffc03 	ldbu	r4,-16(fp)
   85660:	e0fffc03 	ldbu	r3,-16(fp)
   85664:	d0a5fa44 	addi	r2,gp,-26647
   85668:	1885883a 	add	r2,r3,r2
   8566c:	10800003 	ldbu	r2,0(r2)
   85670:	1007883a 	mov	r3,r2
   85674:	d0a5fd17 	ldw	r2,-26636(gp)
   85678:	10800d43 	ldbu	r2,53(r2)
   8567c:	0084303a 	nor	r2,zero,r2
   85680:	1884703a 	and	r2,r3,r2
   85684:	1007883a 	mov	r3,r2
   85688:	d0a5fa44 	addi	r2,gp,-26647
   8568c:	2085883a 	add	r2,r4,r2
   85690:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   85694:	e0fffc03 	ldbu	r3,-16(fp)
   85698:	d0a5fa44 	addi	r2,gp,-26647
   8569c:	1885883a 	add	r2,r3,r2
   856a0:	10800003 	ldbu	r2,0(r2)
   856a4:	10803fcc 	andi	r2,r2,255
   856a8:	1004c03a 	cmpne	r2,r2,zero
   856ac:	1000071e 	bne	r2,zero,856cc <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   856b0:	d0a5fd17 	ldw	r2,-26636(gp)
   856b4:	10800d83 	ldbu	r2,54(r2)
   856b8:	0084303a 	nor	r2,zero,r2
   856bc:	1007883a 	mov	r3,r2
   856c0:	d0a5fa03 	ldbu	r2,-26648(gp)
   856c4:	1884703a 	and	r2,r3,r2
   856c8:	d0a5fa05 	stb	r2,-26648(gp)
    }
}
   856cc:	e037883a 	mov	sp,fp
   856d0:	df000017 	ldw	fp,0(sp)
   856d4:	dec00104 	addi	sp,sp,4
   856d8:	f800283a 	ret

000856dc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   856dc:	defffc04 	addi	sp,sp,-16
   856e0:	df000315 	stw	fp,12(sp)
   856e4:	df000304 	addi	fp,sp,12
   856e8:	e13ffe15 	stw	r4,-8(fp)
   856ec:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   856f0:	e0bffe17 	ldw	r2,-8(fp)
   856f4:	10800d03 	ldbu	r2,52(r2)
   856f8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   856fc:	e13ffd03 	ldbu	r4,-12(fp)
   85700:	e0fffd03 	ldbu	r3,-12(fp)
   85704:	e0bfff17 	ldw	r2,-4(fp)
   85708:	1885883a 	add	r2,r3,r2
   8570c:	10800204 	addi	r2,r2,8
   85710:	108000c3 	ldbu	r2,3(r2)
   85714:	1007883a 	mov	r3,r2
   85718:	e0bffe17 	ldw	r2,-8(fp)
   8571c:	10800d43 	ldbu	r2,53(r2)
   85720:	0084303a 	nor	r2,zero,r2
   85724:	1884703a 	and	r2,r3,r2
   85728:	1007883a 	mov	r3,r2
   8572c:	e0bfff17 	ldw	r2,-4(fp)
   85730:	2085883a 	add	r2,r4,r2
   85734:	10800204 	addi	r2,r2,8
   85738:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   8573c:	e0fffd03 	ldbu	r3,-12(fp)
   85740:	e0bfff17 	ldw	r2,-4(fp)
   85744:	1885883a 	add	r2,r3,r2
   85748:	10800204 	addi	r2,r2,8
   8574c:	108000c3 	ldbu	r2,3(r2)
   85750:	10803fcc 	andi	r2,r2,255
   85754:	1004c03a 	cmpne	r2,r2,zero
   85758:	10000a1e 	bne	r2,zero,85784 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   8575c:	e0bfff17 	ldw	r2,-4(fp)
   85760:	10800283 	ldbu	r2,10(r2)
   85764:	1007883a 	mov	r3,r2
   85768:	e0bffe17 	ldw	r2,-8(fp)
   8576c:	10800d83 	ldbu	r2,54(r2)
   85770:	0084303a 	nor	r2,zero,r2
   85774:	1884703a 	and	r2,r3,r2
   85778:	1007883a 	mov	r3,r2
   8577c:	e0bfff17 	ldw	r2,-4(fp)
   85780:	10c00285 	stb	r3,10(r2)
    }
}
   85784:	e037883a 	mov	sp,fp
   85788:	df000017 	ldw	fp,0(sp)
   8578c:	dec00104 	addi	sp,sp,4
   85790:	f800283a 	ret

00085794 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   85794:	defffa04 	addi	sp,sp,-24
   85798:	df000515 	stw	fp,20(sp)
   8579c:	df000504 	addi	fp,sp,20
   857a0:	e13ffe15 	stw	r4,-8(fp)
   857a4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   857a8:	e0bffe17 	ldw	r2,-8(fp)
   857ac:	10800d03 	ldbu	r2,52(r2)
   857b0:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
   857b4:	e0bffe17 	ldw	r2,-8(fp)
   857b8:	10800d83 	ldbu	r2,54(r2)
   857bc:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
   857c0:	e0bffe17 	ldw	r2,-8(fp)
   857c4:	10800d43 	ldbu	r2,53(r2)
   857c8:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
   857cc:	e0bfff17 	ldw	r2,-4(fp)
   857d0:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
   857d4:	e0bffd17 	ldw	r2,-12(fp)
   857d8:	10800017 	ldw	r2,0(r2)
   857dc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   857e0:	00002606 	br	8587c <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
   857e4:	e13ffb83 	ldbu	r4,-18(fp)
   857e8:	e0fffb83 	ldbu	r3,-18(fp)
   857ec:	e0bffc17 	ldw	r2,-16(fp)
   857f0:	1885883a 	add	r2,r3,r2
   857f4:	10800204 	addi	r2,r2,8
   857f8:	108000c3 	ldbu	r2,3(r2)
   857fc:	1007883a 	mov	r3,r2
   85800:	e0bffb03 	ldbu	r2,-20(fp)
   85804:	0084303a 	nor	r2,zero,r2
   85808:	1884703a 	and	r2,r3,r2
   8580c:	1007883a 	mov	r3,r2
   85810:	e0bffc17 	ldw	r2,-16(fp)
   85814:	2085883a 	add	r2,r4,r2
   85818:	10800204 	addi	r2,r2,8
   8581c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   85820:	e0fffb83 	ldbu	r3,-18(fp)
   85824:	e0bffc17 	ldw	r2,-16(fp)
   85828:	1885883a 	add	r2,r3,r2
   8582c:	10800204 	addi	r2,r2,8
   85830:	108000c3 	ldbu	r2,3(r2)
   85834:	10803fcc 	andi	r2,r2,255
   85838:	1004c03a 	cmpne	r2,r2,zero
   8583c:	1000091e 	bne	r2,zero,85864 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
   85840:	e0bffc17 	ldw	r2,-16(fp)
   85844:	10800283 	ldbu	r2,10(r2)
   85848:	1007883a 	mov	r3,r2
   8584c:	e0bffb43 	ldbu	r2,-19(fp)
   85850:	0084303a 	nor	r2,zero,r2
   85854:	1884703a 	and	r2,r3,r2
   85858:	1007883a 	mov	r3,r2
   8585c:	e0bffc17 	ldw	r2,-16(fp)
   85860:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   85864:	e0bffd17 	ldw	r2,-12(fp)
   85868:	10800104 	addi	r2,r2,4
   8586c:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
   85870:	e0bffd17 	ldw	r2,-12(fp)
   85874:	10800017 	ldw	r2,0(r2)
   85878:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   8587c:	e0bffc17 	ldw	r2,-16(fp)
   85880:	1004c03a 	cmpne	r2,r2,zero
   85884:	103fd71e 	bne	r2,zero,857e4 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   85888:	e037883a 	mov	sp,fp
   8588c:	df000017 	ldw	fp,0(sp)
   85890:	dec00104 	addi	sp,sp,4
   85894:	f800283a 	ret

00085898 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   85898:	defffc04 	addi	sp,sp,-16
   8589c:	df000315 	stw	fp,12(sp)
   858a0:	df000304 	addi	fp,sp,12
   858a4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   858a8:	e0bfff17 	ldw	r2,-4(fp)
   858ac:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   858b0:	e0bfff17 	ldw	r2,-4(fp)
   858b4:	108002c4 	addi	r2,r2,11
   858b8:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   858bc:	e03ffd05 	stb	zero,-12(fp)
   858c0:	00000806 	br	858e4 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
   858c4:	e0bffe17 	ldw	r2,-8(fp)
   858c8:	10000005 	stb	zero,0(r2)
   858cc:	e0bffe17 	ldw	r2,-8(fp)
   858d0:	10800044 	addi	r2,r2,1
   858d4:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   858d8:	e0bffd03 	ldbu	r2,-12(fp)
   858dc:	10800044 	addi	r2,r2,1
   858e0:	e0bffd05 	stb	r2,-12(fp)
   858e4:	e0bffd03 	ldbu	r2,-12(fp)
   858e8:	108000f0 	cmpltui	r2,r2,3
   858ec:	103ff51e 	bne	r2,zero,858c4 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
   858f0:	e037883a 	mov	sp,fp
   858f4:	df000017 	ldw	fp,0(sp)
   858f8:	dec00104 	addi	sp,sp,4
   858fc:	f800283a 	ret

00085900 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   85900:	defffb04 	addi	sp,sp,-20
   85904:	dfc00415 	stw	ra,16(sp)
   85908:	df000315 	stw	fp,12(sp)
   8590c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   85910:	010002b4 	movhi	r4,10
   85914:	2120ec04 	addi	r4,r4,-31824
   85918:	0142d004 	movi	r5,2880
   8591c:	0085c640 	call	85c64 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   85920:	008002b4 	movhi	r2,10
   85924:	10a0ec04 	addi	r2,r2,-31824
   85928:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   8592c:	008002b4 	movhi	r2,10
   85930:	10a0f804 	addi	r2,r2,-31776
   85934:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   85938:	e03fff0d 	sth	zero,-4(fp)
   8593c:	00001306 	br	8598c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   85940:	e0bffe17 	ldw	r2,-8(fp)
   85944:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   85948:	e0fffe17 	ldw	r3,-8(fp)
   8594c:	e0bffd17 	ldw	r2,-12(fp)
   85950:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   85954:	e0fffe17 	ldw	r3,-8(fp)
   85958:	00800fc4 	movi	r2,63
   8595c:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   85960:	e0bffe17 	ldw	r2,-8(fp)
   85964:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   85968:	e0bffe17 	ldw	r2,-8(fp)
   8596c:	10800c04 	addi	r2,r2,48
   85970:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   85974:	e0bffd17 	ldw	r2,-12(fp)
   85978:	10800c04 	addi	r2,r2,48
   8597c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   85980:	e0bfff0b 	ldhu	r2,-4(fp)
   85984:	10800044 	addi	r2,r2,1
   85988:	e0bfff0d 	sth	r2,-4(fp)
   8598c:	e0bfff0b 	ldhu	r2,-4(fp)
   85990:	10800ef0 	cmpltui	r2,r2,59
   85994:	103fea1e 	bne	r2,zero,85940 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   85998:	e0bffe17 	ldw	r2,-8(fp)
   8599c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   859a0:	e0bffe17 	ldw	r2,-8(fp)
   859a4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   859a8:	e0fffe17 	ldw	r3,-8(fp)
   859ac:	00800fc4 	movi	r2,63
   859b0:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   859b4:	e0bffe17 	ldw	r2,-8(fp)
   859b8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   859bc:	008002b4 	movhi	r2,10
   859c0:	10a0ec04 	addi	r2,r2,-31824
   859c4:	d0a5fb15 	stw	r2,-26644(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   859c8:	e037883a 	mov	sp,fp
   859cc:	dfc00117 	ldw	ra,4(sp)
   859d0:	df000017 	ldw	fp,0(sp)
   859d4:	dec00204 	addi	sp,sp,8
   859d8:	f800283a 	ret

000859dc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   859dc:	deffff04 	addi	sp,sp,-4
   859e0:	df000015 	stw	fp,0(sp)
   859e4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   859e8:	d025fe15 	stw	zero,-26632(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   859ec:	d025fc05 	stb	zero,-26640(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   859f0:	d025ee05 	stb	zero,-26696(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   859f4:	d025f645 	stb	zero,-26663(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   859f8:	d025ee45 	stb	zero,-26695(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   859fc:	d025f315 	stw	zero,-26676(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   85a00:	d025ef15 	stw	zero,-26692(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   85a04:	d0260115 	stw	zero,-26620(gp)
    OSIdleCtrMax  = 0L;
   85a08:	d025f415 	stw	zero,-26672(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   85a0c:	d0260005 	stb	zero,-26624(gp)
#endif
}
   85a10:	e037883a 	mov	sp,fp
   85a14:	df000017 	ldw	fp,0(sp)
   85a18:	dec00104 	addi	sp,sp,4
   85a1c:	f800283a 	ret

00085a20 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   85a20:	defffd04 	addi	sp,sp,-12
   85a24:	df000215 	stw	fp,8(sp)
   85a28:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   85a2c:	d025fa05 	stb	zero,-26648(gp)
    prdytbl       = &OSRdyTbl[0];
   85a30:	d0a5fa44 	addi	r2,gp,-26647
   85a34:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   85a38:	e03fff05 	stb	zero,-4(fp)
   85a3c:	00000806 	br	85a60 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
   85a40:	e0bffe17 	ldw	r2,-8(fp)
   85a44:	10000005 	stb	zero,0(r2)
   85a48:	e0bffe17 	ldw	r2,-8(fp)
   85a4c:	10800044 	addi	r2,r2,1
   85a50:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   85a54:	e0bfff03 	ldbu	r2,-4(fp)
   85a58:	10800044 	addi	r2,r2,1
   85a5c:	e0bfff05 	stb	r2,-4(fp)
   85a60:	e0bfff03 	ldbu	r2,-4(fp)
   85a64:	108000f0 	cmpltui	r2,r2,3
   85a68:	103ff51e 	bne	r2,zero,85a40 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   85a6c:	d025f045 	stb	zero,-26687(gp)
    OSPrioHighRdy = 0;
   85a70:	d025f005 	stb	zero,-26688(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   85a74:	d025f815 	stw	zero,-26656(gp)
    OSTCBCur      = (OS_TCB *)0;
   85a78:	d025fd15 	stw	zero,-26636(gp)
}
   85a7c:	e037883a 	mov	sp,fp
   85a80:	df000017 	ldw	fp,0(sp)
   85a84:	dec00104 	addi	sp,sp,4
   85a88:	f800283a 	ret

00085a8c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   85a8c:	defff804 	addi	sp,sp,-32
   85a90:	dfc00715 	stw	ra,28(sp)
   85a94:	df000615 	stw	fp,24(sp)
   85a98:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   85a9c:	018002b4 	movhi	r6,10
   85aa0:	31a0eb04 	addi	r6,r6,-31828
   85aa4:	00bfffd4 	movui	r2,65535
   85aa8:	d8800015 	stw	r2,0(sp)
   85aac:	00800274 	movhi	r2,9
   85ab0:	109eec04 	addi	r2,r2,31664
   85ab4:	d8800115 	stw	r2,4(sp)
   85ab8:	00808004 	movi	r2,512
   85abc:	d8800215 	stw	r2,8(sp)
   85ac0:	d8000315 	stw	zero,12(sp)
   85ac4:	008000c4 	movi	r2,3
   85ac8:	d8800415 	stw	r2,16(sp)
   85acc:	01000234 	movhi	r4,8
   85ad0:	2117d004 	addi	r4,r4,24384
   85ad4:	000b883a 	mov	r5,zero
   85ad8:	01c00504 	movi	r7,20
   85adc:	008ad240 	call	8ad24 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   85ae0:	01400274 	movhi	r5,9
   85ae4:	297cc304 	addi	r5,r5,-3316
   85ae8:	01000504 	movi	r4,20
   85aec:	e1bfff04 	addi	r6,fp,-4
   85af0:	008b6580 	call	8b658 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   85af4:	e037883a 	mov	sp,fp
   85af8:	dfc00117 	ldw	ra,4(sp)
   85afc:	df000017 	ldw	fp,0(sp)
   85b00:	dec00204 	addi	sp,sp,8
   85b04:	f800283a 	ret

00085b08 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   85b08:	defff804 	addi	sp,sp,-32
   85b0c:	dfc00715 	stw	ra,28(sp)
   85b10:	df000615 	stw	fp,24(sp)
   85b14:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   85b18:	01800274 	movhi	r6,9
   85b1c:	319e7304 	addi	r6,r6,31180
   85b20:	00bfff94 	movui	r2,65534
   85b24:	d8800015 	stw	r2,0(sp)
   85b28:	00800274 	movhi	r2,9
   85b2c:	109c7404 	addi	r2,r2,29136
   85b30:	d8800115 	stw	r2,4(sp)
   85b34:	00808004 	movi	r2,512
   85b38:	d8800215 	stw	r2,8(sp)
   85b3c:	d8000315 	stw	zero,12(sp)
   85b40:	008000c4 	movi	r2,3
   85b44:	d8800415 	stw	r2,16(sp)
   85b48:	01000234 	movhi	r4,8
   85b4c:	2117e704 	addi	r4,r4,24476
   85b50:	000b883a 	mov	r5,zero
   85b54:	01c004c4 	movi	r7,19
   85b58:	008ad240 	call	8ad24 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   85b5c:	01400274 	movhi	r5,9
   85b60:	297cc704 	addi	r5,r5,-3300
   85b64:	010004c4 	movi	r4,19
   85b68:	e1bfff04 	addi	r6,fp,-4
   85b6c:	008b6580 	call	8b658 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   85b70:	e037883a 	mov	sp,fp
   85b74:	dfc00117 	ldw	ra,4(sp)
   85b78:	df000017 	ldw	fp,0(sp)
   85b7c:	dec00204 	addi	sp,sp,8
   85b80:	f800283a 	ret

00085b84 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   85b84:	defffb04 	addi	sp,sp,-20
   85b88:	dfc00415 	stw	ra,16(sp)
   85b8c:	df000315 	stw	fp,12(sp)
   85b90:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   85b94:	010002b4 	movhi	r4,10
   85b98:	2123bc04 	addi	r4,r4,-28944
   85b9c:	01414404 	movi	r5,1296
   85ba0:	0085c640 	call	85c64 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   85ba4:	010002b4 	movhi	r4,10
   85ba8:	21250004 	addi	r4,r4,-27648
   85bac:	01401504 	movi	r5,84
   85bb0:	0085c640 	call	85c64 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   85bb4:	008002b4 	movhi	r2,10
   85bb8:	10a3bc04 	addi	r2,r2,-28944
   85bbc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   85bc0:	008002b4 	movhi	r2,10
   85bc4:	10a3d704 	addi	r2,r2,-28836
   85bc8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   85bcc:	e03fff05 	stb	zero,-4(fp)
   85bd0:	00001106 	br	85c18 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   85bd4:	e0fffe17 	ldw	r3,-8(fp)
   85bd8:	e0bffd17 	ldw	r2,-12(fp)
   85bdc:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   85be0:	e0fffe17 	ldw	r3,-8(fp)
   85be4:	00800fc4 	movi	r2,63
   85be8:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   85bec:	e0bffe17 	ldw	r2,-8(fp)
   85bf0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   85bf4:	e0bffe17 	ldw	r2,-8(fp)
   85bf8:	10801b04 	addi	r2,r2,108
   85bfc:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   85c00:	e0bffd17 	ldw	r2,-12(fp)
   85c04:	10801b04 	addi	r2,r2,108
   85c08:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   85c0c:	e0bfff03 	ldbu	r2,-4(fp)
   85c10:	10800044 	addi	r2,r2,1
   85c14:	e0bfff05 	stb	r2,-4(fp)
   85c18:	e0bfff03 	ldbu	r2,-4(fp)
   85c1c:	108002f0 	cmpltui	r2,r2,11
   85c20:	103fec1e 	bne	r2,zero,85bd4 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   85c24:	e0bffe17 	ldw	r2,-8(fp)
   85c28:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   85c2c:	e0fffe17 	ldw	r3,-8(fp)
   85c30:	00800fc4 	movi	r2,63
   85c34:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   85c38:	e0bffe17 	ldw	r2,-8(fp)
   85c3c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   85c40:	d025f115 	stw	zero,-26684(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   85c44:	008002b4 	movhi	r2,10
   85c48:	10a3bc04 	addi	r2,r2,-28944
   85c4c:	d0a5f515 	stw	r2,-26668(gp)
}
   85c50:	e037883a 	mov	sp,fp
   85c54:	dfc00117 	ldw	ra,4(sp)
   85c58:	df000017 	ldw	fp,0(sp)
   85c5c:	dec00204 	addi	sp,sp,8
   85c60:	f800283a 	ret

00085c64 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   85c64:	defffd04 	addi	sp,sp,-12
   85c68:	df000215 	stw	fp,8(sp)
   85c6c:	df000204 	addi	fp,sp,8
   85c70:	e13ffe15 	stw	r4,-8(fp)
   85c74:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
   85c78:	00000806 	br	85c9c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   85c7c:	e0bffe17 	ldw	r2,-8(fp)
   85c80:	10000005 	stb	zero,0(r2)
   85c84:	e0bffe17 	ldw	r2,-8(fp)
   85c88:	10800044 	addi	r2,r2,1
   85c8c:	e0bffe15 	stw	r2,-8(fp)
        size--;
   85c90:	e0bfff0b 	ldhu	r2,-4(fp)
   85c94:	10bfffc4 	addi	r2,r2,-1
   85c98:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   85c9c:	e0bfff0b 	ldhu	r2,-4(fp)
   85ca0:	1004c03a 	cmpne	r2,r2,zero
   85ca4:	103ff51e 	bne	r2,zero,85c7c <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   85ca8:	e037883a 	mov	sp,fp
   85cac:	df000017 	ldw	fp,0(sp)
   85cb0:	dec00104 	addi	sp,sp,4
   85cb4:	f800283a 	ret

00085cb8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   85cb8:	defffc04 	addi	sp,sp,-16
   85cbc:	df000315 	stw	fp,12(sp)
   85cc0:	df000304 	addi	fp,sp,12
   85cc4:	e13ffd15 	stw	r4,-12(fp)
   85cc8:	e17ffe15 	stw	r5,-8(fp)
   85ccc:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
   85cd0:	00000d06 	br	85d08 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
   85cd4:	e0bffe17 	ldw	r2,-8(fp)
   85cd8:	10c00003 	ldbu	r3,0(r2)
   85cdc:	e0bffd17 	ldw	r2,-12(fp)
   85ce0:	10c00005 	stb	r3,0(r2)
   85ce4:	e0bffd17 	ldw	r2,-12(fp)
   85ce8:	10800044 	addi	r2,r2,1
   85cec:	e0bffd15 	stw	r2,-12(fp)
   85cf0:	e0bffe17 	ldw	r2,-8(fp)
   85cf4:	10800044 	addi	r2,r2,1
   85cf8:	e0bffe15 	stw	r2,-8(fp)
        size--;
   85cfc:	e0bfff0b 	ldhu	r2,-4(fp)
   85d00:	10bfffc4 	addi	r2,r2,-1
   85d04:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   85d08:	e0bfff0b 	ldhu	r2,-4(fp)
   85d0c:	1004c03a 	cmpne	r2,r2,zero
   85d10:	103ff01e 	bne	r2,zero,85cd4 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
   85d14:	e037883a 	mov	sp,fp
   85d18:	df000017 	ldw	fp,0(sp)
   85d1c:	dec00104 	addi	sp,sp,4
   85d20:	f800283a 	ret

00085d24 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   85d24:	defffb04 	addi	sp,sp,-20
   85d28:	dfc00415 	stw	ra,16(sp)
   85d2c:	df000315 	stw	fp,12(sp)
   85d30:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   85d34:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85d38:	0005303a 	rdctl	r2,status
   85d3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85d40:	e0fffe17 	ldw	r3,-8(fp)
   85d44:	00bfff84 	movi	r2,-2
   85d48:	1884703a 	and	r2,r3,r2
   85d4c:	1001703a 	wrctl	status,r2
  
  return context;
   85d50:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   85d54:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   85d58:	d0a5fc03 	ldbu	r2,-26640(gp)
   85d5c:	10803fcc 	andi	r2,r2,255
   85d60:	1004c03a 	cmpne	r2,r2,zero
   85d64:	10001b1e 	bne	r2,zero,85dd4 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   85d68:	d0a5ee03 	ldbu	r2,-26696(gp)
   85d6c:	10803fcc 	andi	r2,r2,255
   85d70:	1004c03a 	cmpne	r2,r2,zero
   85d74:	1000171e 	bne	r2,zero,85dd4 <OS_Sched+0xb0>
            OS_SchedNew();
   85d78:	0085df80 	call	85df8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   85d7c:	d0a5f003 	ldbu	r2,-26688(gp)
   85d80:	d0e5f043 	ldbu	r3,-26687(gp)
   85d84:	11003fcc 	andi	r4,r2,255
   85d88:	18803fcc 	andi	r2,r3,255
   85d8c:	20801126 	beq	r4,r2,85dd4 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   85d90:	d0a5f003 	ldbu	r2,-26688(gp)
   85d94:	10803fcc 	andi	r2,r2,255
   85d98:	00c002b4 	movhi	r3,10
   85d9c:	18e50004 	addi	r3,r3,-27648
   85da0:	1085883a 	add	r2,r2,r2
   85da4:	1085883a 	add	r2,r2,r2
   85da8:	10c5883a 	add	r2,r2,r3
   85dac:	10800017 	ldw	r2,0(r2)
   85db0:	d0a5f815 	stw	r2,-26656(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   85db4:	d0e5f817 	ldw	r3,-26656(gp)
   85db8:	18800e17 	ldw	r2,56(r3)
   85dbc:	10800044 	addi	r2,r2,1
   85dc0:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   85dc4:	d0a5f317 	ldw	r2,-26676(gp)
   85dc8:	10800044 	addi	r2,r2,1
   85dcc:	d0a5f315 	stw	r2,-26676(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   85dd0:	008e3340 	call	8e334 <OSCtxSw>
   85dd4:	e0bfff17 	ldw	r2,-4(fp)
   85dd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85ddc:	e0bffd17 	ldw	r2,-12(fp)
   85de0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   85de4:	e037883a 	mov	sp,fp
   85de8:	dfc00117 	ldw	ra,4(sp)
   85dec:	df000017 	ldw	fp,0(sp)
   85df0:	dec00204 	addi	sp,sp,8
   85df4:	f800283a 	ret

00085df8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   85df8:	defffe04 	addi	sp,sp,-8
   85dfc:	df000115 	stw	fp,4(sp)
   85e00:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   85e04:	d0a5fa03 	ldbu	r2,-26648(gp)
   85e08:	10c03fcc 	andi	r3,r2,255
   85e0c:	00800274 	movhi	r2,9
   85e10:	10bc8304 	addi	r2,r2,-3572
   85e14:	10c5883a 	add	r2,r2,r3
   85e18:	10800003 	ldbu	r2,0(r2)
   85e1c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   85e20:	e0bfff03 	ldbu	r2,-4(fp)
   85e24:	100490fa 	slli	r2,r2,3
   85e28:	1009883a 	mov	r4,r2
   85e2c:	e0ffff03 	ldbu	r3,-4(fp)
   85e30:	d0a5fa44 	addi	r2,gp,-26647
   85e34:	1885883a 	add	r2,r3,r2
   85e38:	10800003 	ldbu	r2,0(r2)
   85e3c:	10c03fcc 	andi	r3,r2,255
   85e40:	00800274 	movhi	r2,9
   85e44:	10bc8304 	addi	r2,r2,-3572
   85e48:	10c5883a 	add	r2,r2,r3
   85e4c:	10800003 	ldbu	r2,0(r2)
   85e50:	2085883a 	add	r2,r4,r2
   85e54:	d0a5f005 	stb	r2,-26688(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   85e58:	e037883a 	mov	sp,fp
   85e5c:	df000017 	ldw	fp,0(sp)
   85e60:	dec00104 	addi	sp,sp,4
   85e64:	f800283a 	ret

00085e68 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   85e68:	defffc04 	addi	sp,sp,-16
   85e6c:	df000315 	stw	fp,12(sp)
   85e70:	df000304 	addi	fp,sp,12
   85e74:	e13ffe15 	stw	r4,-8(fp)
   85e78:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   85e7c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   85e80:	00000d06 	br	85eb8 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
   85e84:	e0bfff17 	ldw	r2,-4(fp)
   85e88:	10c00003 	ldbu	r3,0(r2)
   85e8c:	e0bffe17 	ldw	r2,-8(fp)
   85e90:	10c00005 	stb	r3,0(r2)
   85e94:	e0bffe17 	ldw	r2,-8(fp)
   85e98:	10800044 	addi	r2,r2,1
   85e9c:	e0bffe15 	stw	r2,-8(fp)
   85ea0:	e0bfff17 	ldw	r2,-4(fp)
   85ea4:	10800044 	addi	r2,r2,1
   85ea8:	e0bfff15 	stw	r2,-4(fp)
        len++;
   85eac:	e0bffd03 	ldbu	r2,-12(fp)
   85eb0:	10800044 	addi	r2,r2,1
   85eb4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   85eb8:	e0bfff17 	ldw	r2,-4(fp)
   85ebc:	10800003 	ldbu	r2,0(r2)
   85ec0:	10803fcc 	andi	r2,r2,255
   85ec4:	1004c03a 	cmpne	r2,r2,zero
   85ec8:	103fee1e 	bne	r2,zero,85e84 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   85ecc:	e0bffe17 	ldw	r2,-8(fp)
   85ed0:	10000005 	stb	zero,0(r2)
    return (len);
   85ed4:	e0bffd03 	ldbu	r2,-12(fp)
}
   85ed8:	e037883a 	mov	sp,fp
   85edc:	df000017 	ldw	fp,0(sp)
   85ee0:	dec00104 	addi	sp,sp,4
   85ee4:	f800283a 	ret

00085ee8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   85ee8:	defffd04 	addi	sp,sp,-12
   85eec:	df000215 	stw	fp,8(sp)
   85ef0:	df000204 	addi	fp,sp,8
   85ef4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   85ef8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   85efc:	00000606 	br	85f18 <OS_StrLen+0x30>
        psrc++;
   85f00:	e0bfff17 	ldw	r2,-4(fp)
   85f04:	10800044 	addi	r2,r2,1
   85f08:	e0bfff15 	stw	r2,-4(fp)
        len++;
   85f0c:	e0bffe03 	ldbu	r2,-8(fp)
   85f10:	10800044 	addi	r2,r2,1
   85f14:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   85f18:	e0bfff17 	ldw	r2,-4(fp)
   85f1c:	10800003 	ldbu	r2,0(r2)
   85f20:	10803fcc 	andi	r2,r2,255
   85f24:	1004c03a 	cmpne	r2,r2,zero
   85f28:	103ff51e 	bne	r2,zero,85f00 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   85f2c:	e0bffe03 	ldbu	r2,-8(fp)
}
   85f30:	e037883a 	mov	sp,fp
   85f34:	df000017 	ldw	fp,0(sp)
   85f38:	dec00104 	addi	sp,sp,4
   85f3c:	f800283a 	ret

00085f40 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   85f40:	defffa04 	addi	sp,sp,-24
   85f44:	dfc00515 	stw	ra,20(sp)
   85f48:	df000415 	stw	fp,16(sp)
   85f4c:	df000404 	addi	fp,sp,16
   85f50:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   85f54:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85f58:	0005303a 	rdctl	r2,status
   85f5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85f60:	e0fffd17 	ldw	r3,-12(fp)
   85f64:	00bfff84 	movi	r2,-2
   85f68:	1884703a 	and	r2,r3,r2
   85f6c:	1001703a 	wrctl	status,r2
  
  return context;
   85f70:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   85f74:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
   85f78:	d0a5ef17 	ldw	r2,-26692(gp)
   85f7c:	10800044 	addi	r2,r2,1
   85f80:	d0a5ef15 	stw	r2,-26692(gp)
   85f84:	e0bffe17 	ldw	r2,-8(fp)
   85f88:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85f8c:	e0bffc17 	ldw	r2,-16(fp)
   85f90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   85f94:	008e7e00 	call	8e7e0 <OSTaskIdleHook>
    }
   85f98:	003fef06 	br	85f58 <OS_TaskIdle+0x18>

00085f9c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   85f9c:	defffa04 	addi	sp,sp,-24
   85fa0:	dfc00515 	stw	ra,20(sp)
   85fa4:	df000415 	stw	fp,16(sp)
   85fa8:	df000404 	addi	fp,sp,16
   85fac:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   85fb0:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   85fb4:	00000206 	br	85fc0 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   85fb8:	01003204 	movi	r4,200
   85fbc:	008c01c0 	call	8c01c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   85fc0:	d0a60003 	ldbu	r2,-26624(gp)
   85fc4:	10803fcc 	andi	r2,r2,255
   85fc8:	1005003a 	cmpeq	r2,r2,zero
   85fcc:	103ffa1e 	bne	r2,zero,85fb8 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   85fd0:	d125f417 	ldw	r4,-26672(gp)
   85fd4:	01401904 	movi	r5,100
   85fd8:	00837400 	call	83740 <__udivsi3>
   85fdc:	d0a5f415 	stw	r2,-26672(gp)
    if (OSIdleCtrMax == 0L) {
   85fe0:	d0a5f417 	ldw	r2,-26672(gp)
   85fe4:	1004c03a 	cmpne	r2,r2,zero
   85fe8:	1000031e 	bne	r2,zero,85ff8 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
   85fec:	d025f605 	stb	zero,-26664(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   85ff0:	01003fc4 	movi	r4,255
   85ff4:	008bc300 	call	8bc30 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85ff8:	0005303a 	rdctl	r2,status
   85ffc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   86000:	e0fffd17 	ldw	r3,-12(fp)
   86004:	00bfff84 	movi	r2,-2
   86008:	1884703a 	and	r2,r3,r2
   8600c:	1001703a 	wrctl	status,r2
  
  return context;
   86010:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   86014:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   86018:	d0a5ef17 	ldw	r2,-26692(gp)
   8601c:	d0a60115 	stw	r2,-26620(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   86020:	d025ef15 	stw	zero,-26692(gp)
   86024:	e0bffe17 	ldw	r2,-8(fp)
   86028:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8602c:	e0bffc17 	ldw	r2,-16(fp)
   86030:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   86034:	d1260117 	ldw	r4,-26620(gp)
   86038:	d165f417 	ldw	r5,-26672(gp)
   8603c:	00837400 	call	83740 <__udivsi3>
   86040:	1007883a 	mov	r3,r2
   86044:	00801904 	movi	r2,100
   86048:	10c5c83a 	sub	r2,r2,r3
   8604c:	d0a5f605 	stb	r2,-26664(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   86050:	008e7700 	call	8e770 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   86054:	00860640 	call	86064 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   86058:	01001904 	movi	r4,100
   8605c:	008c01c0 	call	8c01c <OSTimeDly>
    }
   86060:	003fe506 	br	85ff8 <OS_TaskStat+0x5c>

00086064 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   86064:	defffa04 	addi	sp,sp,-24
   86068:	dfc00515 	stw	ra,20(sp)
   8606c:	df000415 	stw	fp,16(sp)
   86070:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   86074:	e03ffc05 	stb	zero,-16(fp)
   86078:	00002406 	br	8610c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   8607c:	e13ffc03 	ldbu	r4,-16(fp)
   86080:	e17ffe04 	addi	r5,fp,-8
   86084:	008ba340 	call	8ba34 <OSTaskStkChk>
   86088:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   8608c:	e0bffc43 	ldbu	r2,-15(fp)
   86090:	1004c03a 	cmpne	r2,r2,zero
   86094:	10001a1e 	bne	r2,zero,86100 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   86098:	e0bffc03 	ldbu	r2,-16(fp)
   8609c:	00c002b4 	movhi	r3,10
   860a0:	18e50004 	addi	r3,r3,-27648
   860a4:	1085883a 	add	r2,r2,r2
   860a8:	1085883a 	add	r2,r2,r2
   860ac:	10c5883a 	add	r2,r2,r3
   860b0:	10800017 	ldw	r2,0(r2)
   860b4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   860b8:	e0bffd17 	ldw	r2,-12(fp)
   860bc:	1005003a 	cmpeq	r2,r2,zero
   860c0:	10000f1e 	bne	r2,zero,86100 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   860c4:	e0bffd17 	ldw	r2,-12(fp)
   860c8:	10800060 	cmpeqi	r2,r2,1
   860cc:	10000c1e 	bne	r2,zero,86100 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   860d0:	e0bffd17 	ldw	r2,-12(fp)
   860d4:	10c00217 	ldw	r3,8(r2)
   860d8:	e0bffd17 	ldw	r2,-12(fp)
   860dc:	10800317 	ldw	r2,12(r2)
   860e0:	1085883a 	add	r2,r2,r2
   860e4:	1085883a 	add	r2,r2,r2
   860e8:	1887883a 	add	r3,r3,r2
   860ec:	e0bffd17 	ldw	r2,-12(fp)
   860f0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   860f4:	e0ffff17 	ldw	r3,-4(fp)
   860f8:	e0bffd17 	ldw	r2,-12(fp)
   860fc:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   86100:	e0bffc03 	ldbu	r2,-16(fp)
   86104:	10800044 	addi	r2,r2,1
   86108:	e0bffc05 	stb	r2,-16(fp)
   8610c:	e0bffc03 	ldbu	r2,-16(fp)
   86110:	10800570 	cmpltui	r2,r2,21
   86114:	103fd91e 	bne	r2,zero,8607c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   86118:	e037883a 	mov	sp,fp
   8611c:	dfc00117 	ldw	ra,4(sp)
   86120:	df000017 	ldw	fp,0(sp)
   86124:	dec00204 	addi	sp,sp,8
   86128:	f800283a 	ret

0008612c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   8612c:	defff104 	addi	sp,sp,-60
   86130:	dfc00e15 	stw	ra,56(sp)
   86134:	df000d15 	stw	fp,52(sp)
   86138:	df000d04 	addi	fp,sp,52
   8613c:	e17ffb15 	stw	r5,-20(fp)
   86140:	e1bffc15 	stw	r6,-16(fp)
   86144:	e0800417 	ldw	r2,16(fp)
   86148:	e13ffa05 	stb	r4,-24(fp)
   8614c:	e1fffd0d 	sth	r7,-12(fp)
   86150:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   86154:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   86158:	0005303a 	rdctl	r2,status
   8615c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   86160:	e0fff717 	ldw	r3,-36(fp)
   86164:	00bfff84 	movi	r2,-2
   86168:	1884703a 	and	r2,r3,r2
   8616c:	1001703a 	wrctl	status,r2
  
  return context;
   86170:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
   86174:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   86178:	d0a5f517 	ldw	r2,-26668(gp)
   8617c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
   86180:	e0bff917 	ldw	r2,-28(fp)
   86184:	1005003a 	cmpeq	r2,r2,zero
   86188:	1000941e 	bne	r2,zero,863dc <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   8618c:	e0bff917 	ldw	r2,-28(fp)
   86190:	10800517 	ldw	r2,20(r2)
   86194:	d0a5f515 	stw	r2,-26668(gp)
   86198:	e0bff817 	ldw	r2,-32(fp)
   8619c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   861a0:	e0bff617 	ldw	r2,-40(fp)
   861a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   861a8:	e0fff917 	ldw	r3,-28(fp)
   861ac:	e0bffb17 	ldw	r2,-20(fp)
   861b0:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   861b4:	e0fff917 	ldw	r3,-28(fp)
   861b8:	e0bffa03 	ldbu	r2,-24(fp)
   861bc:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   861c0:	e0bff917 	ldw	r2,-28(fp)
   861c4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   861c8:	e0bff917 	ldw	r2,-28(fp)
   861cc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   861d0:	e0bff917 	ldw	r2,-28(fp)
   861d4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   861d8:	e0fff917 	ldw	r3,-28(fp)
   861dc:	e0800317 	ldw	r2,12(fp)
   861e0:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   861e4:	e0fff917 	ldw	r3,-28(fp)
   861e8:	e0800217 	ldw	r2,8(fp)
   861ec:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   861f0:	e0fff917 	ldw	r3,-28(fp)
   861f4:	e0bffc17 	ldw	r2,-16(fp)
   861f8:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   861fc:	e0fff917 	ldw	r3,-28(fp)
   86200:	e0bffe0b 	ldhu	r2,-8(fp)
   86204:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   86208:	e0fff917 	ldw	r3,-28(fp)
   8620c:	e0bffd0b 	ldhu	r2,-12(fp)
   86210:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   86214:	e0bff917 	ldw	r2,-28(fp)
   86218:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   8621c:	e0bffa03 	ldbu	r2,-24(fp)
   86220:	1004d0fa 	srli	r2,r2,3
   86224:	1007883a 	mov	r3,r2
   86228:	e0bff917 	ldw	r2,-28(fp)
   8622c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   86230:	e0bffa03 	ldbu	r2,-24(fp)
   86234:	108001cc 	andi	r2,r2,7
   86238:	1007883a 	mov	r3,r2
   8623c:	e0bff917 	ldw	r2,-28(fp)
   86240:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   86244:	e0bff917 	ldw	r2,-28(fp)
   86248:	10800d03 	ldbu	r2,52(r2)
   8624c:	10c03fcc 	andi	r3,r2,255
   86250:	00800044 	movi	r2,1
   86254:	10c4983a 	sll	r2,r2,r3
   86258:	1007883a 	mov	r3,r2
   8625c:	e0bff917 	ldw	r2,-28(fp)
   86260:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   86264:	e0bff917 	ldw	r2,-28(fp)
   86268:	10800cc3 	ldbu	r2,51(r2)
   8626c:	10c03fcc 	andi	r3,r2,255
   86270:	00800044 	movi	r2,1
   86274:	10c4983a 	sll	r2,r2,r3
   86278:	1007883a 	mov	r3,r2
   8627c:	e0bff917 	ldw	r2,-28(fp)
   86280:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   86284:	e0bff917 	ldw	r2,-28(fp)
   86288:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   8628c:	e0bff917 	ldw	r2,-28(fp)
   86290:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   86294:	e0bff917 	ldw	r2,-28(fp)
   86298:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   8629c:	e0bff917 	ldw	r2,-28(fp)
   862a0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   862a4:	e0bff917 	ldw	r2,-28(fp)
   862a8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   862ac:	e0bff917 	ldw	r2,-28(fp)
   862b0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   862b4:	e0bff917 	ldw	r2,-28(fp)
   862b8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   862bc:	e0bff917 	ldw	r2,-28(fp)
   862c0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   862c4:	e0bff917 	ldw	r2,-28(fp)
   862c8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   862cc:	e0fff917 	ldw	r3,-28(fp)
   862d0:	00800fc4 	movi	r2,63
   862d4:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   862d8:	e0bff917 	ldw	r2,-28(fp)
   862dc:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   862e0:	e13ff917 	ldw	r4,-28(fp)
   862e4:	008e7fc0 	call	8e7fc <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   862e8:	e13ff917 	ldw	r4,-28(fp)
   862ec:	008e7140 	call	8e714 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   862f0:	0005303a 	rdctl	r2,status
   862f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   862f8:	e0fff517 	ldw	r3,-44(fp)
   862fc:	00bfff84 	movi	r2,-2
   86300:	1884703a 	and	r2,r3,r2
   86304:	1001703a 	wrctl	status,r2
  
  return context;
   86308:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   8630c:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
   86310:	e0bffa03 	ldbu	r2,-24(fp)
   86314:	00c002b4 	movhi	r3,10
   86318:	18e50004 	addi	r3,r3,-27648
   8631c:	1085883a 	add	r2,r2,r2
   86320:	1085883a 	add	r2,r2,r2
   86324:	10c7883a 	add	r3,r2,r3
   86328:	e0bff917 	ldw	r2,-28(fp)
   8632c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   86330:	d0e5f117 	ldw	r3,-26684(gp)
   86334:	e0bff917 	ldw	r2,-28(fp)
   86338:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   8633c:	e0bff917 	ldw	r2,-28(fp)
   86340:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   86344:	d0a5f117 	ldw	r2,-26684(gp)
   86348:	1005003a 	cmpeq	r2,r2,zero
   8634c:	1000031e 	bne	r2,zero,8635c <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
   86350:	d0e5f117 	ldw	r3,-26684(gp)
   86354:	e0bff917 	ldw	r2,-28(fp)
   86358:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
   8635c:	e0bff917 	ldw	r2,-28(fp)
   86360:	d0a5f115 	stw	r2,-26684(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   86364:	e0bff917 	ldw	r2,-28(fp)
   86368:	10c00d83 	ldbu	r3,54(r2)
   8636c:	d0a5fa03 	ldbu	r2,-26648(gp)
   86370:	1884b03a 	or	r2,r3,r2
   86374:	d0a5fa05 	stb	r2,-26648(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   86378:	e0bff917 	ldw	r2,-28(fp)
   8637c:	10800d03 	ldbu	r2,52(r2)
   86380:	11003fcc 	andi	r4,r2,255
   86384:	e0bff917 	ldw	r2,-28(fp)
   86388:	10800d03 	ldbu	r2,52(r2)
   8638c:	10c03fcc 	andi	r3,r2,255
   86390:	d0a5fa44 	addi	r2,gp,-26647
   86394:	1885883a 	add	r2,r3,r2
   86398:	10c00003 	ldbu	r3,0(r2)
   8639c:	e0bff917 	ldw	r2,-28(fp)
   863a0:	10800d43 	ldbu	r2,53(r2)
   863a4:	1884b03a 	or	r2,r3,r2
   863a8:	1007883a 	mov	r3,r2
   863ac:	d0a5fa44 	addi	r2,gp,-26647
   863b0:	2085883a 	add	r2,r4,r2
   863b4:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   863b8:	d0a5f643 	ldbu	r2,-26663(gp)
   863bc:	10800044 	addi	r2,r2,1
   863c0:	d0a5f645 	stb	r2,-26663(gp)
   863c4:	e0bff817 	ldw	r2,-32(fp)
   863c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   863cc:	e0bff417 	ldw	r2,-48(fp)
   863d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   863d4:	e03fff15 	stw	zero,-4(fp)
   863d8:	00000606 	br	863f4 <OS_TCBInit+0x2c8>
   863dc:	e0bff817 	ldw	r2,-32(fp)
   863e0:	e0bff315 	stw	r2,-52(fp)
   863e4:	e0bff317 	ldw	r2,-52(fp)
   863e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   863ec:	00801084 	movi	r2,66
   863f0:	e0bfff15 	stw	r2,-4(fp)
   863f4:	e0bfff17 	ldw	r2,-4(fp)
}
   863f8:	e037883a 	mov	sp,fp
   863fc:	dfc00117 	ldw	ra,4(sp)
   86400:	df000017 	ldw	fp,0(sp)
   86404:	dec00204 	addi	sp,sp,8
   86408:	f800283a 	ret

0008640c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   8640c:	defffe04 	addi	sp,sp,-8
   86410:	df000115 	stw	fp,4(sp)
   86414:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   86418:	d0a00504 	addi	r2,gp,-32748
   8641c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   86420:	d0a00604 	addi	r2,gp,-32744
   86424:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   86428:	d0a00784 	addi	r2,gp,-32738
   8642c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   86430:	d0a00804 	addi	r2,gp,-32736
   86434:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   86438:	d0a00704 	addi	r2,gp,-32740
   8643c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   86440:	d0a00884 	addi	r2,gp,-32734
   86444:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   86448:	d0a00904 	addi	r2,gp,-32732
   8644c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   86450:	d0a00984 	addi	r2,gp,-32730
   86454:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   86458:	d0a00a04 	addi	r2,gp,-32728
   8645c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   86460:	d0a00a84 	addi	r2,gp,-32726
   86464:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   86468:	d0a00b04 	addi	r2,gp,-32724
   8646c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   86470:	d0a00b84 	addi	r2,gp,-32722
   86474:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   86478:	d0a00c04 	addi	r2,gp,-32720
   8647c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   86480:	d0a00c84 	addi	r2,gp,-32718
   86484:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   86488:	d0a00d04 	addi	r2,gp,-32716
   8648c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   86490:	d0a00d84 	addi	r2,gp,-32714
   86494:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   86498:	d0a00e04 	addi	r2,gp,-32712
   8649c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   864a0:	d0a00e84 	addi	r2,gp,-32710
   864a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   864a8:	d0a00f04 	addi	r2,gp,-32708
   864ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   864b0:	d0a00f84 	addi	r2,gp,-32706
   864b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   864b8:	d0a01004 	addi	r2,gp,-32704
   864bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   864c0:	d0a01084 	addi	r2,gp,-32702
   864c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   864c8:	d0a01104 	addi	r2,gp,-32700
   864cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   864d0:	d0a01184 	addi	r2,gp,-32698
   864d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   864d8:	d0a01204 	addi	r2,gp,-32696
   864dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   864e0:	d0a01284 	addi	r2,gp,-32694
   864e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   864e8:	d0a01304 	addi	r2,gp,-32692
   864ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   864f0:	d0a01384 	addi	r2,gp,-32690
   864f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   864f8:	d0a01404 	addi	r2,gp,-32688
   864fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   86500:	d0a01484 	addi	r2,gp,-32686
   86504:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   86508:	d0a01504 	addi	r2,gp,-32684
   8650c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   86510:	d0a01584 	addi	r2,gp,-32682
   86514:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   86518:	d0a01604 	addi	r2,gp,-32680
   8651c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   86520:	d0a01684 	addi	r2,gp,-32678
   86524:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   86528:	d0a01704 	addi	r2,gp,-32676
   8652c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   86530:	d0a01784 	addi	r2,gp,-32674
   86534:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   86538:	d0a01804 	addi	r2,gp,-32672
   8653c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   86540:	d0a01884 	addi	r2,gp,-32670
   86544:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   86548:	d0a01904 	addi	r2,gp,-32668
   8654c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   86550:	d0a01984 	addi	r2,gp,-32666
   86554:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   86558:	d0a01a04 	addi	r2,gp,-32664
   8655c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   86560:	d0a01a84 	addi	r2,gp,-32662
   86564:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   86568:	d0a01b04 	addi	r2,gp,-32660
   8656c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   86570:	d0a01b84 	addi	r2,gp,-32658
   86574:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   86578:	d0a01c04 	addi	r2,gp,-32656
   8657c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   86580:	d0a02104 	addi	r2,gp,-32636
   86584:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   86588:	e037883a 	mov	sp,fp
   8658c:	df000017 	ldw	fp,0(sp)
   86590:	dec00104 	addi	sp,sp,4
   86594:	f800283a 	ret

00086598 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   86598:	defff104 	addi	sp,sp,-60
   8659c:	df000e15 	stw	fp,56(sp)
   865a0:	df000e04 	addi	fp,sp,56
   865a4:	e13ffa15 	stw	r4,-24(fp)
   865a8:	e1fffd15 	stw	r7,-12(fp)
   865ac:	e17ffb0d 	sth	r5,-20(fp)
   865b0:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   865b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   865b8:	e0bffd17 	ldw	r2,-12(fp)
   865bc:	1004c03a 	cmpne	r2,r2,zero
   865c0:	1000021e 	bne	r2,zero,865cc <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
   865c4:	e03fff15 	stw	zero,-4(fp)
   865c8:	0000bb06 	br	868b8 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   865cc:	e0bffa17 	ldw	r2,-24(fp)
   865d0:	1004c03a 	cmpne	r2,r2,zero
   865d4:	1000051e 	bne	r2,zero,865ec <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   865d8:	e0fffd17 	ldw	r3,-12(fp)
   865dc:	00801b84 	movi	r2,110
   865e0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   865e4:	e03fff15 	stw	zero,-4(fp)
   865e8:	0000b306 	br	868b8 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   865ec:	e0bffa17 	ldw	r2,-24(fp)
   865f0:	10800003 	ldbu	r2,0(r2)
   865f4:	10803fcc 	andi	r2,r2,255
   865f8:	10800160 	cmpeqi	r2,r2,5
   865fc:	1000051e 	bne	r2,zero,86614 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   86600:	e0fffd17 	ldw	r3,-12(fp)
   86604:	00800044 	movi	r2,1
   86608:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8660c:	e03fff15 	stw	zero,-4(fp)
   86610:	0000a906 	br	868b8 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   86614:	e0fffc03 	ldbu	r3,-16(fp)
   86618:	00bfe004 	movi	r2,-128
   8661c:	1884703a 	and	r2,r3,r2
   86620:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   86624:	e0bff943 	ldbu	r2,-27(fp)
   86628:	1005003a 	cmpeq	r2,r2,zero
   8662c:	1000061e 	bne	r2,zero,86648 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
   86630:	e0bffc03 	ldbu	r2,-16(fp)
   86634:	10801fcc 	andi	r2,r2,127
   86638:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
   8663c:	00800044 	movi	r2,1
   86640:	e0bff905 	stb	r2,-28(fp)
   86644:	00000106 	br	8664c <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
   86648:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   8664c:	e0bffd17 	ldw	r2,-12(fp)
   86650:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   86654:	0005303a 	rdctl	r2,status
   86658:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8665c:	e0fff717 	ldw	r3,-36(fp)
   86660:	00bfff84 	movi	r2,-2
   86664:	1884703a 	and	r2,r3,r2
   86668:	1001703a 	wrctl	status,r2
  
  return context;
   8666c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   86670:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
   86674:	e0bffc03 	ldbu	r2,-16(fp)
   86678:	e0bffe15 	stw	r2,-8(fp)
   8667c:	e0fffe17 	ldw	r3,-8(fp)
   86680:	18800060 	cmpeqi	r2,r3,1
   86684:	1000651e 	bne	r2,zero,8681c <OSFlagAccept+0x284>
   86688:	e0fffe17 	ldw	r3,-8(fp)
   8668c:	18800088 	cmpgei	r2,r3,2
   86690:	1000041e 	bne	r2,zero,866a4 <OSFlagAccept+0x10c>
   86694:	e0fffe17 	ldw	r3,-8(fp)
   86698:	1805003a 	cmpeq	r2,r3,zero
   8669c:	1000421e 	bne	r2,zero,867a8 <OSFlagAccept+0x210>
   866a0:	00007b06 	br	86890 <OSFlagAccept+0x2f8>
   866a4:	e0fffe17 	ldw	r3,-8(fp)
   866a8:	188000a0 	cmpeqi	r2,r3,2
   866ac:	1000041e 	bne	r2,zero,866c0 <OSFlagAccept+0x128>
   866b0:	e0fffe17 	ldw	r3,-8(fp)
   866b4:	188000e0 	cmpeqi	r2,r3,3
   866b8:	10001e1e 	bne	r2,zero,86734 <OSFlagAccept+0x19c>
   866bc:	00007406 	br	86890 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   866c0:	e0bffa17 	ldw	r2,-24(fp)
   866c4:	10c0020b 	ldhu	r3,8(r2)
   866c8:	e0bffb0b 	ldhu	r2,-20(fp)
   866cc:	1884703a 	and	r2,r3,r2
   866d0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   866d4:	e0fff98b 	ldhu	r3,-26(fp)
   866d8:	e0bffb0b 	ldhu	r2,-20(fp)
   866dc:	18800d1e 	bne	r3,r2,86714 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   866e0:	e0bff903 	ldbu	r2,-28(fp)
   866e4:	10800058 	cmpnei	r2,r2,1
   866e8:	10000d1e 	bne	r2,zero,86720 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   866ec:	e0bffa17 	ldw	r2,-24(fp)
   866f0:	1080020b 	ldhu	r2,8(r2)
   866f4:	1007883a 	mov	r3,r2
   866f8:	e0bff98b 	ldhu	r2,-26(fp)
   866fc:	0084303a 	nor	r2,zero,r2
   86700:	1884703a 	and	r2,r3,r2
   86704:	1007883a 	mov	r3,r2
   86708:	e0bffa17 	ldw	r2,-24(fp)
   8670c:	10c0020d 	sth	r3,8(r2)
   86710:	00000306 	br	86720 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   86714:	e0fffd17 	ldw	r3,-12(fp)
   86718:	00801c04 	movi	r2,112
   8671c:	18800005 	stb	r2,0(r3)
   86720:	e0bff817 	ldw	r2,-32(fp)
   86724:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   86728:	e0bff617 	ldw	r2,-40(fp)
   8672c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   86730:	00005f06 	br	868b0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   86734:	e0bffa17 	ldw	r2,-24(fp)
   86738:	10c0020b 	ldhu	r3,8(r2)
   8673c:	e0bffb0b 	ldhu	r2,-20(fp)
   86740:	1884703a 	and	r2,r3,r2
   86744:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   86748:	e0bff98b 	ldhu	r2,-26(fp)
   8674c:	1005003a 	cmpeq	r2,r2,zero
   86750:	10000d1e 	bne	r2,zero,86788 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   86754:	e0bff903 	ldbu	r2,-28(fp)
   86758:	10800058 	cmpnei	r2,r2,1
   8675c:	10000d1e 	bne	r2,zero,86794 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   86760:	e0bffa17 	ldw	r2,-24(fp)
   86764:	1080020b 	ldhu	r2,8(r2)
   86768:	1007883a 	mov	r3,r2
   8676c:	e0bff98b 	ldhu	r2,-26(fp)
   86770:	0084303a 	nor	r2,zero,r2
   86774:	1884703a 	and	r2,r3,r2
   86778:	1007883a 	mov	r3,r2
   8677c:	e0bffa17 	ldw	r2,-24(fp)
   86780:	10c0020d 	sth	r3,8(r2)
   86784:	00000306 	br	86794 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   86788:	e0fffd17 	ldw	r3,-12(fp)
   8678c:	00801c04 	movi	r2,112
   86790:	18800005 	stb	r2,0(r3)
   86794:	e0bff817 	ldw	r2,-32(fp)
   86798:	e0bff515 	stw	r2,-44(fp)
   8679c:	e0bff517 	ldw	r2,-44(fp)
   867a0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   867a4:	00004206 	br	868b0 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   867a8:	e0bffa17 	ldw	r2,-24(fp)
   867ac:	1080020b 	ldhu	r2,8(r2)
   867b0:	0084303a 	nor	r2,zero,r2
   867b4:	1007883a 	mov	r3,r2
   867b8:	e0bffb0b 	ldhu	r2,-20(fp)
   867bc:	1884703a 	and	r2,r3,r2
   867c0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   867c4:	e0fff98b 	ldhu	r3,-26(fp)
   867c8:	e0bffb0b 	ldhu	r2,-20(fp)
   867cc:	18800b1e 	bne	r3,r2,867fc <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   867d0:	e0bff903 	ldbu	r2,-28(fp)
   867d4:	10800058 	cmpnei	r2,r2,1
   867d8:	10000b1e 	bne	r2,zero,86808 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   867dc:	e0bffa17 	ldw	r2,-24(fp)
   867e0:	10c0020b 	ldhu	r3,8(r2)
   867e4:	e0bff98b 	ldhu	r2,-26(fp)
   867e8:	1884b03a 	or	r2,r3,r2
   867ec:	1007883a 	mov	r3,r2
   867f0:	e0bffa17 	ldw	r2,-24(fp)
   867f4:	10c0020d 	sth	r3,8(r2)
   867f8:	00000306 	br	86808 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   867fc:	e0fffd17 	ldw	r3,-12(fp)
   86800:	00801c04 	movi	r2,112
   86804:	18800005 	stb	r2,0(r3)
   86808:	e0bff817 	ldw	r2,-32(fp)
   8680c:	e0bff415 	stw	r2,-48(fp)
   86810:	e0bff417 	ldw	r2,-48(fp)
   86814:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   86818:	00002506 	br	868b0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   8681c:	e0bffa17 	ldw	r2,-24(fp)
   86820:	1080020b 	ldhu	r2,8(r2)
   86824:	0084303a 	nor	r2,zero,r2
   86828:	1007883a 	mov	r3,r2
   8682c:	e0bffb0b 	ldhu	r2,-20(fp)
   86830:	1884703a 	and	r2,r3,r2
   86834:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   86838:	e0bff98b 	ldhu	r2,-26(fp)
   8683c:	1005003a 	cmpeq	r2,r2,zero
   86840:	10000b1e 	bne	r2,zero,86870 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   86844:	e0bff903 	ldbu	r2,-28(fp)
   86848:	10800058 	cmpnei	r2,r2,1
   8684c:	10000b1e 	bne	r2,zero,8687c <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   86850:	e0bffa17 	ldw	r2,-24(fp)
   86854:	10c0020b 	ldhu	r3,8(r2)
   86858:	e0bff98b 	ldhu	r2,-26(fp)
   8685c:	1884b03a 	or	r2,r3,r2
   86860:	1007883a 	mov	r3,r2
   86864:	e0bffa17 	ldw	r2,-24(fp)
   86868:	10c0020d 	sth	r3,8(r2)
   8686c:	00000306 	br	8687c <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   86870:	e0fffd17 	ldw	r3,-12(fp)
   86874:	00801c04 	movi	r2,112
   86878:	18800005 	stb	r2,0(r3)
   8687c:	e0bff817 	ldw	r2,-32(fp)
   86880:	e0bff315 	stw	r2,-52(fp)
   86884:	e0bff317 	ldw	r2,-52(fp)
   86888:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   8688c:	00000806 	br	868b0 <OSFlagAccept+0x318>
   86890:	e0bff817 	ldw	r2,-32(fp)
   86894:	e0bff215 	stw	r2,-56(fp)
   86898:	e0bff217 	ldw	r2,-56(fp)
   8689c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   868a0:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   868a4:	e0fffd17 	ldw	r3,-12(fp)
   868a8:	00801bc4 	movi	r2,111
   868ac:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
   868b0:	e0bff98b 	ldhu	r2,-26(fp)
   868b4:	e0bfff15 	stw	r2,-4(fp)
   868b8:	e0bfff17 	ldw	r2,-4(fp)
}
   868bc:	e037883a 	mov	sp,fp
   868c0:	df000017 	ldw	fp,0(sp)
   868c4:	dec00104 	addi	sp,sp,4
   868c8:	f800283a 	ret

000868cc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   868cc:	defff704 	addi	sp,sp,-36
   868d0:	df000815 	stw	fp,32(sp)
   868d4:	df000804 	addi	fp,sp,32
   868d8:	e17ffe15 	stw	r5,-8(fp)
   868dc:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   868e0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   868e4:	e0bffe17 	ldw	r2,-8(fp)
   868e8:	1004c03a 	cmpne	r2,r2,zero
   868ec:	1000021e 	bne	r2,zero,868f8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   868f0:	e03fff15 	stw	zero,-4(fp)
   868f4:	00003f06 	br	869f4 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   868f8:	00800274 	movhi	r2,9
   868fc:	10886904 	addi	r2,r2,8612
   86900:	10800003 	ldbu	r2,0(r2)
   86904:	10803fcc 	andi	r2,r2,255
   86908:	1005003a 	cmpeq	r2,r2,zero
   8690c:	1000051e 	bne	r2,zero,86924 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   86910:	e0fffe17 	ldw	r3,-8(fp)
   86914:	00800404 	movi	r2,16
   86918:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
   8691c:	e03fff15 	stw	zero,-4(fp)
   86920:	00003406 	br	869f4 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   86924:	0005303a 	rdctl	r2,status
   86928:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8692c:	e0fffa17 	ldw	r3,-24(fp)
   86930:	00bfff84 	movi	r2,-2
   86934:	1884703a 	and	r2,r3,r2
   86938:	1001703a 	wrctl	status,r2
  
  return context;
   8693c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   86940:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   86944:	00800274 	movhi	r2,9
   86948:	10886c04 	addi	r2,r2,8624
   8694c:	10800017 	ldw	r2,0(r2)
   86950:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   86954:	e0bffc17 	ldw	r2,-16(fp)
   86958:	1005003a 	cmpeq	r2,r2,zero
   8695c:	10001c1e 	bne	r2,zero,869d0 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   86960:	00800274 	movhi	r2,9
   86964:	10886c04 	addi	r2,r2,8624
   86968:	10800017 	ldw	r2,0(r2)
   8696c:	10800117 	ldw	r2,4(r2)
   86970:	1007883a 	mov	r3,r2
   86974:	00800274 	movhi	r2,9
   86978:	10886c04 	addi	r2,r2,8624
   8697c:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   86980:	e0fffc17 	ldw	r3,-16(fp)
   86984:	00800144 	movi	r2,5
   86988:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   8698c:	e0fffc17 	ldw	r3,-16(fp)
   86990:	e0bffd0b 	ldhu	r2,-12(fp)
   86994:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   86998:	e0bffc17 	ldw	r2,-16(fp)
   8699c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   869a0:	e0fffc17 	ldw	r3,-16(fp)
   869a4:	00800fc4 	movi	r2,63
   869a8:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   869ac:	e0bffc17 	ldw	r2,-16(fp)
   869b0:	100002c5 	stb	zero,11(r2)
   869b4:	e0bffb17 	ldw	r2,-20(fp)
   869b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   869bc:	e0bff917 	ldw	r2,-28(fp)
   869c0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   869c4:	e0bffe17 	ldw	r2,-8(fp)
   869c8:	10000005 	stb	zero,0(r2)
   869cc:	00000706 	br	869ec <OSFlagCreate+0x120>
   869d0:	e0bffb17 	ldw	r2,-20(fp)
   869d4:	e0bff815 	stw	r2,-32(fp)
   869d8:	e0bff817 	ldw	r2,-32(fp)
   869dc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   869e0:	e0fffe17 	ldw	r3,-8(fp)
   869e4:	00801c84 	movi	r2,114
   869e8:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   869ec:	e0bffc17 	ldw	r2,-16(fp)
   869f0:	e0bfff15 	stw	r2,-4(fp)
   869f4:	e0bfff17 	ldw	r2,-4(fp)
}
   869f8:	e037883a 	mov	sp,fp
   869fc:	df000017 	ldw	fp,0(sp)
   86a00:	dec00104 	addi	sp,sp,4
   86a04:	f800283a 	ret

00086a08 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   86a08:	defff004 	addi	sp,sp,-64
   86a0c:	dfc00f15 	stw	ra,60(sp)
   86a10:	df000e15 	stw	fp,56(sp)
   86a14:	df000e04 	addi	fp,sp,56
   86a18:	e13ffb15 	stw	r4,-20(fp)
   86a1c:	e1bffd15 	stw	r6,-12(fp)
   86a20:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   86a24:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   86a28:	e0bffd17 	ldw	r2,-12(fp)
   86a2c:	1004c03a 	cmpne	r2,r2,zero
   86a30:	1000031e 	bne	r2,zero,86a40 <OSFlagDel+0x38>
        return (pgrp);
   86a34:	e0bffb17 	ldw	r2,-20(fp)
   86a38:	e0bfff15 	stw	r2,-4(fp)
   86a3c:	00009606 	br	86c98 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   86a40:	e0bffb17 	ldw	r2,-20(fp)
   86a44:	1004c03a 	cmpne	r2,r2,zero
   86a48:	1000061e 	bne	r2,zero,86a64 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   86a4c:	e0fffd17 	ldw	r3,-12(fp)
   86a50:	00801b84 	movi	r2,110
   86a54:	18800005 	stb	r2,0(r3)
        return (pgrp);
   86a58:	e0fffb17 	ldw	r3,-20(fp)
   86a5c:	e0ffff15 	stw	r3,-4(fp)
   86a60:	00008d06 	br	86c98 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   86a64:	00800274 	movhi	r2,9
   86a68:	10886904 	addi	r2,r2,8612
   86a6c:	10800003 	ldbu	r2,0(r2)
   86a70:	10803fcc 	andi	r2,r2,255
   86a74:	1005003a 	cmpeq	r2,r2,zero
   86a78:	1000061e 	bne	r2,zero,86a94 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   86a7c:	e0fffd17 	ldw	r3,-12(fp)
   86a80:	008003c4 	movi	r2,15
   86a84:	18800005 	stb	r2,0(r3)
        return (pgrp);
   86a88:	e0bffb17 	ldw	r2,-20(fp)
   86a8c:	e0bfff15 	stw	r2,-4(fp)
   86a90:	00008106 	br	86c98 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   86a94:	e0bffb17 	ldw	r2,-20(fp)
   86a98:	10800003 	ldbu	r2,0(r2)
   86a9c:	10803fcc 	andi	r2,r2,255
   86aa0:	10800160 	cmpeqi	r2,r2,5
   86aa4:	1000061e 	bne	r2,zero,86ac0 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
   86aa8:	e0fffd17 	ldw	r3,-12(fp)
   86aac:	00800044 	movi	r2,1
   86ab0:	18800005 	stb	r2,0(r3)
        return (pgrp);
   86ab4:	e0fffb17 	ldw	r3,-20(fp)
   86ab8:	e0ffff15 	stw	r3,-4(fp)
   86abc:	00007606 	br	86c98 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   86ac0:	0005303a 	rdctl	r2,status
   86ac4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   86ac8:	e0fff617 	ldw	r3,-40(fp)
   86acc:	00bfff84 	movi	r2,-2
   86ad0:	1884703a 	and	r2,r3,r2
   86ad4:	1001703a 	wrctl	status,r2
  
  return context;
   86ad8:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
   86adc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   86ae0:	e0bffb17 	ldw	r2,-20(fp)
   86ae4:	10800117 	ldw	r2,4(r2)
   86ae8:	1005003a 	cmpeq	r2,r2,zero
   86aec:	1000031e 	bne	r2,zero,86afc <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   86af0:	00800044 	movi	r2,1
   86af4:	e0bffa05 	stb	r2,-24(fp)
   86af8:	00000106 	br	86b00 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   86afc:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   86b00:	e0bffc03 	ldbu	r2,-16(fp)
   86b04:	e0bffe15 	stw	r2,-8(fp)
   86b08:	e0fffe17 	ldw	r3,-8(fp)
   86b0c:	1805003a 	cmpeq	r2,r3,zero
   86b10:	1000041e 	bne	r2,zero,86b24 <OSFlagDel+0x11c>
   86b14:	e0fffe17 	ldw	r3,-8(fp)
   86b18:	18800060 	cmpeqi	r2,r3,1
   86b1c:	1000281e 	bne	r2,zero,86bc0 <OSFlagDel+0x1b8>
   86b20:	00005206 	br	86c6c <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   86b24:	e0bffa03 	ldbu	r2,-24(fp)
   86b28:	1004c03a 	cmpne	r2,r2,zero
   86b2c:	10001a1e 	bne	r2,zero,86b98 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   86b30:	e0fffb17 	ldw	r3,-20(fp)
   86b34:	00800fc4 	movi	r2,63
   86b38:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   86b3c:	e0bffb17 	ldw	r2,-20(fp)
   86b40:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   86b44:	e0bffb17 	ldw	r2,-20(fp)
   86b48:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   86b4c:	00800274 	movhi	r2,9
   86b50:	10886c04 	addi	r2,r2,8624
   86b54:	10c00017 	ldw	r3,0(r2)
   86b58:	e0bffb17 	ldw	r2,-20(fp)
   86b5c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   86b60:	e0bffb17 	ldw	r2,-20(fp)
   86b64:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   86b68:	00c00274 	movhi	r3,9
   86b6c:	18c86c04 	addi	r3,r3,8624
   86b70:	e0bffb17 	ldw	r2,-20(fp)
   86b74:	18800015 	stw	r2,0(r3)
   86b78:	e0bff717 	ldw	r2,-36(fp)
   86b7c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   86b80:	e0bff517 	ldw	r2,-44(fp)
   86b84:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   86b88:	e0bffd17 	ldw	r2,-12(fp)
   86b8c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   86b90:	e03ff815 	stw	zero,-32(fp)
   86b94:	00003e06 	br	86c90 <OSFlagDel+0x288>
   86b98:	e0bff717 	ldw	r2,-36(fp)
   86b9c:	e0bff415 	stw	r2,-48(fp)
   86ba0:	e0bff417 	ldw	r2,-48(fp)
   86ba4:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   86ba8:	e0fffd17 	ldw	r3,-12(fp)
   86bac:	00801244 	movi	r2,73
   86bb0:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
   86bb4:	e0bffb17 	ldw	r2,-20(fp)
   86bb8:	e0bff815 	stw	r2,-32(fp)
             }
             break;
   86bbc:	00003406 	br	86c90 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   86bc0:	e0bffb17 	ldw	r2,-20(fp)
   86bc4:	10800117 	ldw	r2,4(r2)
   86bc8:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   86bcc:	00000606 	br	86be8 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   86bd0:	e13ff917 	ldw	r4,-28(fp)
   86bd4:	000b883a 	mov	r5,zero
   86bd8:	0087d180 	call	87d18 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   86bdc:	e0bff917 	ldw	r2,-28(fp)
   86be0:	10800017 	ldw	r2,0(r2)
   86be4:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   86be8:	e0bff917 	ldw	r2,-28(fp)
   86bec:	1004c03a 	cmpne	r2,r2,zero
   86bf0:	103ff71e 	bne	r2,zero,86bd0 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   86bf4:	e0fffb17 	ldw	r3,-20(fp)
   86bf8:	00800fc4 	movi	r2,63
   86bfc:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   86c00:	e0bffb17 	ldw	r2,-20(fp)
   86c04:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   86c08:	e0bffb17 	ldw	r2,-20(fp)
   86c0c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   86c10:	00800274 	movhi	r2,9
   86c14:	10886c04 	addi	r2,r2,8624
   86c18:	10c00017 	ldw	r3,0(r2)
   86c1c:	e0bffb17 	ldw	r2,-20(fp)
   86c20:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   86c24:	e0bffb17 	ldw	r2,-20(fp)
   86c28:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   86c2c:	00c00274 	movhi	r3,9
   86c30:	18c86c04 	addi	r3,r3,8624
   86c34:	e0bffb17 	ldw	r2,-20(fp)
   86c38:	18800015 	stw	r2,0(r3)
   86c3c:	e0bff717 	ldw	r2,-36(fp)
   86c40:	e0bff315 	stw	r2,-52(fp)
   86c44:	e0bff317 	ldw	r2,-52(fp)
   86c48:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   86c4c:	e0bffa03 	ldbu	r2,-24(fp)
   86c50:	10800058 	cmpnei	r2,r2,1
   86c54:	1000011e 	bne	r2,zero,86c5c <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   86c58:	0085d240 	call	85d24 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   86c5c:	e0bffd17 	ldw	r2,-12(fp)
   86c60:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   86c64:	e03ff815 	stw	zero,-32(fp)
             break;
   86c68:	00000906 	br	86c90 <OSFlagDel+0x288>
   86c6c:	e0bff717 	ldw	r2,-36(fp)
   86c70:	e0bff215 	stw	r2,-56(fp)
   86c74:	e0bff217 	ldw	r2,-56(fp)
   86c78:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   86c7c:	e0fffd17 	ldw	r3,-12(fp)
   86c80:	008001c4 	movi	r2,7
   86c84:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
   86c88:	e0bffb17 	ldw	r2,-20(fp)
   86c8c:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
   86c90:	e0bff817 	ldw	r2,-32(fp)
   86c94:	e0bfff15 	stw	r2,-4(fp)
   86c98:	e0bfff17 	ldw	r2,-4(fp)
}
   86c9c:	e037883a 	mov	sp,fp
   86ca0:	dfc00117 	ldw	ra,4(sp)
   86ca4:	df000017 	ldw	fp,0(sp)
   86ca8:	dec00204 	addi	sp,sp,8
   86cac:	f800283a 	ret

00086cb0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   86cb0:	defff504 	addi	sp,sp,-44
   86cb4:	dfc00a15 	stw	ra,40(sp)
   86cb8:	df000915 	stw	fp,36(sp)
   86cbc:	df000904 	addi	fp,sp,36
   86cc0:	e13ffc15 	stw	r4,-16(fp)
   86cc4:	e17ffd15 	stw	r5,-12(fp)
   86cc8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   86ccc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   86cd0:	e0bffe17 	ldw	r2,-8(fp)
   86cd4:	1004c03a 	cmpne	r2,r2,zero
   86cd8:	1000021e 	bne	r2,zero,86ce4 <OSFlagNameGet+0x34>
        return (0);
   86cdc:	e03fff15 	stw	zero,-4(fp)
   86ce0:	00003e06 	br	86ddc <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   86ce4:	e0bffc17 	ldw	r2,-16(fp)
   86ce8:	1004c03a 	cmpne	r2,r2,zero
   86cec:	1000051e 	bne	r2,zero,86d04 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   86cf0:	e0fffe17 	ldw	r3,-8(fp)
   86cf4:	00801b84 	movi	r2,110
   86cf8:	18800005 	stb	r2,0(r3)
        return (0);
   86cfc:	e03fff15 	stw	zero,-4(fp)
   86d00:	00003606 	br	86ddc <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   86d04:	e0bffd17 	ldw	r2,-12(fp)
   86d08:	1004c03a 	cmpne	r2,r2,zero
   86d0c:	1000051e 	bne	r2,zero,86d24 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   86d10:	e0fffe17 	ldw	r3,-8(fp)
   86d14:	00800304 	movi	r2,12
   86d18:	18800005 	stb	r2,0(r3)
        return (0);
   86d1c:	e03fff15 	stw	zero,-4(fp)
   86d20:	00002e06 	br	86ddc <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   86d24:	00800274 	movhi	r2,9
   86d28:	10886904 	addi	r2,r2,8612
   86d2c:	10800003 	ldbu	r2,0(r2)
   86d30:	10803fcc 	andi	r2,r2,255
   86d34:	1005003a 	cmpeq	r2,r2,zero
   86d38:	1000051e 	bne	r2,zero,86d50 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
   86d3c:	e0fffe17 	ldw	r3,-8(fp)
   86d40:	00800444 	movi	r2,17
   86d44:	18800005 	stb	r2,0(r3)
        return (0);
   86d48:	e03fff15 	stw	zero,-4(fp)
   86d4c:	00002306 	br	86ddc <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   86d50:	0005303a 	rdctl	r2,status
   86d54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   86d58:	e0fff917 	ldw	r3,-28(fp)
   86d5c:	00bfff84 	movi	r2,-2
   86d60:	1884703a 	and	r2,r3,r2
   86d64:	1001703a 	wrctl	status,r2
  
  return context;
   86d68:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   86d6c:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   86d70:	e0bffc17 	ldw	r2,-16(fp)
   86d74:	10800003 	ldbu	r2,0(r2)
   86d78:	10803fcc 	andi	r2,r2,255
   86d7c:	10800160 	cmpeqi	r2,r2,5
   86d80:	1000091e 	bne	r2,zero,86da8 <OSFlagNameGet+0xf8>
   86d84:	e0bffa17 	ldw	r2,-24(fp)
   86d88:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   86d8c:	e0bff817 	ldw	r2,-32(fp)
   86d90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   86d94:	e0fffe17 	ldw	r3,-8(fp)
   86d98:	00800044 	movi	r2,1
   86d9c:	18800005 	stb	r2,0(r3)
        return (0);
   86da0:	e03fff15 	stw	zero,-4(fp)
   86da4:	00000d06 	br	86ddc <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   86da8:	e0bffc17 	ldw	r2,-16(fp)
   86dac:	11400284 	addi	r5,r2,10
   86db0:	e13ffd17 	ldw	r4,-12(fp)
   86db4:	0085e680 	call	85e68 <OS_StrCopy>
   86db8:	e0bffb05 	stb	r2,-20(fp)
   86dbc:	e0bffa17 	ldw	r2,-24(fp)
   86dc0:	e0bff715 	stw	r2,-36(fp)
   86dc4:	e0bff717 	ldw	r2,-36(fp)
   86dc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   86dcc:	e0bffe17 	ldw	r2,-8(fp)
   86dd0:	10000005 	stb	zero,0(r2)
    return (len);
   86dd4:	e0bffb03 	ldbu	r2,-20(fp)
   86dd8:	e0bfff15 	stw	r2,-4(fp)
   86ddc:	e0bfff17 	ldw	r2,-4(fp)
}
   86de0:	e037883a 	mov	sp,fp
   86de4:	dfc00117 	ldw	ra,4(sp)
   86de8:	df000017 	ldw	fp,0(sp)
   86dec:	dec00204 	addi	sp,sp,8
   86df0:	f800283a 	ret

00086df4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   86df4:	defff504 	addi	sp,sp,-44
   86df8:	dfc00a15 	stw	ra,40(sp)
   86dfc:	df000915 	stw	fp,36(sp)
   86e00:	df000904 	addi	fp,sp,36
   86e04:	e13ffd15 	stw	r4,-12(fp)
   86e08:	e17ffe15 	stw	r5,-8(fp)
   86e0c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   86e10:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   86e14:	e0bfff17 	ldw	r2,-4(fp)
   86e18:	1005003a 	cmpeq	r2,r2,zero
   86e1c:	1000451e 	bne	r2,zero,86f34 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   86e20:	e0bffd17 	ldw	r2,-12(fp)
   86e24:	1004c03a 	cmpne	r2,r2,zero
   86e28:	1000041e 	bne	r2,zero,86e3c <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   86e2c:	e0ffff17 	ldw	r3,-4(fp)
   86e30:	00801b84 	movi	r2,110
   86e34:	18800005 	stb	r2,0(r3)
        return;
   86e38:	00003e06 	br	86f34 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   86e3c:	e0bffe17 	ldw	r2,-8(fp)
   86e40:	1004c03a 	cmpne	r2,r2,zero
   86e44:	1000041e 	bne	r2,zero,86e58 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   86e48:	e0ffff17 	ldw	r3,-4(fp)
   86e4c:	00800304 	movi	r2,12
   86e50:	18800005 	stb	r2,0(r3)
        return;
   86e54:	00003706 	br	86f34 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   86e58:	00800274 	movhi	r2,9
   86e5c:	10886904 	addi	r2,r2,8612
   86e60:	10800003 	ldbu	r2,0(r2)
   86e64:	10803fcc 	andi	r2,r2,255
   86e68:	1005003a 	cmpeq	r2,r2,zero
   86e6c:	1000041e 	bne	r2,zero,86e80 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
   86e70:	e0ffff17 	ldw	r3,-4(fp)
   86e74:	00800484 	movi	r2,18
   86e78:	18800005 	stb	r2,0(r3)
        return;
   86e7c:	00002d06 	br	86f34 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   86e80:	0005303a 	rdctl	r2,status
   86e84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   86e88:	e0fffa17 	ldw	r3,-24(fp)
   86e8c:	00bfff84 	movi	r2,-2
   86e90:	1884703a 	and	r2,r3,r2
   86e94:	1001703a 	wrctl	status,r2
  
  return context;
   86e98:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   86e9c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   86ea0:	e0bffd17 	ldw	r2,-12(fp)
   86ea4:	10800003 	ldbu	r2,0(r2)
   86ea8:	10803fcc 	andi	r2,r2,255
   86eac:	10800160 	cmpeqi	r2,r2,5
   86eb0:	1000081e 	bne	r2,zero,86ed4 <OSFlagNameSet+0xe0>
   86eb4:	e0bffb17 	ldw	r2,-20(fp)
   86eb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   86ebc:	e0bff917 	ldw	r2,-28(fp)
   86ec0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   86ec4:	e0ffff17 	ldw	r3,-4(fp)
   86ec8:	00800044 	movi	r2,1
   86ecc:	18800005 	stb	r2,0(r3)
        return;
   86ed0:	00001806 	br	86f34 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   86ed4:	e13ffe17 	ldw	r4,-8(fp)
   86ed8:	0085ee80 	call	85ee8 <OS_StrLen>
   86edc:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   86ee0:	e0bffc03 	ldbu	r2,-16(fp)
   86ee4:	10800830 	cmpltui	r2,r2,32
   86ee8:	1000081e 	bne	r2,zero,86f0c <OSFlagNameSet+0x118>
   86eec:	e0bffb17 	ldw	r2,-20(fp)
   86ef0:	e0bff815 	stw	r2,-32(fp)
   86ef4:	e0bff817 	ldw	r2,-32(fp)
   86ef8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   86efc:	e0ffff17 	ldw	r3,-4(fp)
   86f00:	00801cc4 	movi	r2,115
   86f04:	18800005 	stb	r2,0(r3)
        return;
   86f08:	00000a06 	br	86f34 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   86f0c:	e0bffd17 	ldw	r2,-12(fp)
   86f10:	11000284 	addi	r4,r2,10
   86f14:	e17ffe17 	ldw	r5,-8(fp)
   86f18:	0085e680 	call	85e68 <OS_StrCopy>
   86f1c:	e0bffb17 	ldw	r2,-20(fp)
   86f20:	e0bff715 	stw	r2,-36(fp)
   86f24:	e0bff717 	ldw	r2,-36(fp)
   86f28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   86f2c:	e0bfff17 	ldw	r2,-4(fp)
   86f30:	10000005 	stb	zero,0(r2)
    return;
}
   86f34:	e037883a 	mov	sp,fp
   86f38:	dfc00117 	ldw	ra,4(sp)
   86f3c:	df000017 	ldw	fp,0(sp)
   86f40:	dec00204 	addi	sp,sp,8
   86f44:	f800283a 	ret

00086f48 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   86f48:	deffe004 	addi	sp,sp,-128
   86f4c:	dfc01f15 	stw	ra,124(sp)
   86f50:	df001e15 	stw	fp,120(sp)
   86f54:	df001e04 	addi	fp,sp,120
   86f58:	e13ff915 	stw	r4,-28(fp)
   86f5c:	e17ffa0d 	sth	r5,-24(fp)
   86f60:	e1bffb05 	stb	r6,-20(fp)
   86f64:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   86f68:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   86f6c:	e0800217 	ldw	r2,8(fp)
   86f70:	1004c03a 	cmpne	r2,r2,zero
   86f74:	1000021e 	bne	r2,zero,86f80 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
   86f78:	e03fff15 	stw	zero,-4(fp)
   86f7c:	00017d06 	br	87574 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   86f80:	e0bff917 	ldw	r2,-28(fp)
   86f84:	1004c03a 	cmpne	r2,r2,zero
   86f88:	1000051e 	bne	r2,zero,86fa0 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   86f8c:	e0c00217 	ldw	r3,8(fp)
   86f90:	00801b84 	movi	r2,110
   86f94:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   86f98:	e03fff15 	stw	zero,-4(fp)
   86f9c:	00017506 	br	87574 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   86fa0:	00800274 	movhi	r2,9
   86fa4:	10886904 	addi	r2,r2,8612
   86fa8:	10800003 	ldbu	r2,0(r2)
   86fac:	10803fcc 	andi	r2,r2,255
   86fb0:	1005003a 	cmpeq	r2,r2,zero
   86fb4:	1000051e 	bne	r2,zero,86fcc <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   86fb8:	e0c00217 	ldw	r3,8(fp)
   86fbc:	00800084 	movi	r2,2
   86fc0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   86fc4:	e03fff15 	stw	zero,-4(fp)
   86fc8:	00016a06 	br	87574 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   86fcc:	00800274 	movhi	r2,9
   86fd0:	10885b04 	addi	r2,r2,8556
   86fd4:	10800003 	ldbu	r2,0(r2)
   86fd8:	10803fcc 	andi	r2,r2,255
   86fdc:	1005003a 	cmpeq	r2,r2,zero
   86fe0:	1000051e 	bne	r2,zero,86ff8 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   86fe4:	e0c00217 	ldw	r3,8(fp)
   86fe8:	00800344 	movi	r2,13
   86fec:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   86ff0:	e03fff15 	stw	zero,-4(fp)
   86ff4:	00015f06 	br	87574 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   86ff8:	e0bff917 	ldw	r2,-28(fp)
   86ffc:	10800003 	ldbu	r2,0(r2)
   87000:	10803fcc 	andi	r2,r2,255
   87004:	10800160 	cmpeqi	r2,r2,5
   87008:	1000051e 	bne	r2,zero,87020 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
   8700c:	e0c00217 	ldw	r3,8(fp)
   87010:	00800044 	movi	r2,1
   87014:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   87018:	e03fff15 	stw	zero,-4(fp)
   8701c:	00015506 	br	87574 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   87020:	e0fffb03 	ldbu	r3,-20(fp)
   87024:	00bfe004 	movi	r2,-128
   87028:	1884703a 	and	r2,r3,r2
   8702c:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   87030:	e0bff283 	ldbu	r2,-54(fp)
   87034:	1005003a 	cmpeq	r2,r2,zero
   87038:	1000071e 	bne	r2,zero,87058 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   8703c:	00c01fc4 	movi	r3,127
   87040:	e0bffb03 	ldbu	r2,-20(fp)
   87044:	10c4703a 	and	r2,r2,r3
   87048:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
   8704c:	00800044 	movi	r2,1
   87050:	e0bff205 	stb	r2,-56(fp)
   87054:	00000106 	br	8705c <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
   87058:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8705c:	0005303a 	rdctl	r2,status
   87060:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   87064:	e0fff017 	ldw	r3,-64(fp)
   87068:	00bfff84 	movi	r2,-2
   8706c:	1884703a 	and	r2,r3,r2
   87070:	1001703a 	wrctl	status,r2
  
  return context;
   87074:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   87078:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
   8707c:	e0bffb03 	ldbu	r2,-20(fp)
   87080:	e0bffe15 	stw	r2,-8(fp)
   87084:	e0fffe17 	ldw	r3,-8(fp)
   87088:	18800060 	cmpeqi	r2,r3,1
   8708c:	1000981e 	bne	r2,zero,872f0 <OSFlagPend+0x3a8>
   87090:	e0fffe17 	ldw	r3,-8(fp)
   87094:	18800088 	cmpgei	r2,r3,2
   87098:	1000041e 	bne	r2,zero,870ac <OSFlagPend+0x164>
   8709c:	e0fffe17 	ldw	r3,-8(fp)
   870a0:	1805003a 	cmpeq	r2,r3,zero
   870a4:	1000641e 	bne	r2,zero,87238 <OSFlagPend+0x2f0>
   870a8:	0000bf06 	br	873a8 <OSFlagPend+0x460>
   870ac:	e0fffe17 	ldw	r3,-8(fp)
   870b0:	188000a0 	cmpeqi	r2,r3,2
   870b4:	1000041e 	bne	r2,zero,870c8 <OSFlagPend+0x180>
   870b8:	e0fffe17 	ldw	r3,-8(fp)
   870bc:	188000e0 	cmpeqi	r2,r3,3
   870c0:	10002f1e 	bne	r2,zero,87180 <OSFlagPend+0x238>
   870c4:	0000b806 	br	873a8 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   870c8:	e0bff917 	ldw	r2,-28(fp)
   870cc:	10c0020b 	ldhu	r3,8(r2)
   870d0:	e0bffa0b 	ldhu	r2,-24(fp)
   870d4:	1884703a 	and	r2,r3,r2
   870d8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   870dc:	e0fff30b 	ldhu	r3,-52(fp)
   870e0:	e0bffa0b 	ldhu	r2,-24(fp)
   870e4:	18801a1e 	bne	r3,r2,87150 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   870e8:	e0bff203 	ldbu	r2,-56(fp)
   870ec:	10800058 	cmpnei	r2,r2,1
   870f0:	1000091e 	bne	r2,zero,87118 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   870f4:	e0bff917 	ldw	r2,-28(fp)
   870f8:	1080020b 	ldhu	r2,8(r2)
   870fc:	1007883a 	mov	r3,r2
   87100:	e0bff30b 	ldhu	r2,-52(fp)
   87104:	0084303a 	nor	r2,zero,r2
   87108:	1884703a 	and	r2,r3,r2
   8710c:	1007883a 	mov	r3,r2
   87110:	e0bff917 	ldw	r2,-28(fp)
   87114:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   87118:	00800274 	movhi	r2,9
   8711c:	10886a04 	addi	r2,r2,8616
   87120:	10c00017 	ldw	r3,0(r2)
   87124:	e0bff30b 	ldhu	r2,-52(fp)
   87128:	18800b0d 	sth	r2,44(r3)
   8712c:	e0bff117 	ldw	r2,-60(fp)
   87130:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   87134:	e0bfef17 	ldw	r2,-68(fp)
   87138:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   8713c:	e0800217 	ldw	r2,8(fp)
   87140:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   87144:	e0bff30b 	ldhu	r2,-52(fp)
   87148:	e0bfff15 	stw	r2,-4(fp)
   8714c:	00010906 	br	87574 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   87150:	e1bffa0b 	ldhu	r6,-24(fp)
   87154:	e1fffb03 	ldbu	r7,-20(fp)
   87158:	e0bffc0b 	ldhu	r2,-16(fp)
   8715c:	e17ff404 	addi	r5,fp,-48
   87160:	d8800015 	stw	r2,0(sp)
   87164:	e13ff917 	ldw	r4,-28(fp)
   87168:	0087a700 	call	87a70 <OS_FlagBlock>
   8716c:	e0bff117 	ldw	r2,-60(fp)
   87170:	e0bfee15 	stw	r2,-72(fp)
   87174:	e0bfee17 	ldw	r2,-72(fp)
   87178:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   8717c:	00009506 	br	873d4 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   87180:	e0bff917 	ldw	r2,-28(fp)
   87184:	10c0020b 	ldhu	r3,8(r2)
   87188:	e0bffa0b 	ldhu	r2,-24(fp)
   8718c:	1884703a 	and	r2,r3,r2
   87190:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   87194:	e0bff30b 	ldhu	r2,-52(fp)
   87198:	1005003a 	cmpeq	r2,r2,zero
   8719c:	10001a1e 	bne	r2,zero,87208 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   871a0:	e0bff203 	ldbu	r2,-56(fp)
   871a4:	10800058 	cmpnei	r2,r2,1
   871a8:	1000091e 	bne	r2,zero,871d0 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   871ac:	e0bff917 	ldw	r2,-28(fp)
   871b0:	1080020b 	ldhu	r2,8(r2)
   871b4:	1007883a 	mov	r3,r2
   871b8:	e0bff30b 	ldhu	r2,-52(fp)
   871bc:	0084303a 	nor	r2,zero,r2
   871c0:	1884703a 	and	r2,r3,r2
   871c4:	1007883a 	mov	r3,r2
   871c8:	e0bff917 	ldw	r2,-28(fp)
   871cc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   871d0:	00800274 	movhi	r2,9
   871d4:	10886a04 	addi	r2,r2,8616
   871d8:	10c00017 	ldw	r3,0(r2)
   871dc:	e0bff30b 	ldhu	r2,-52(fp)
   871e0:	18800b0d 	sth	r2,44(r3)
   871e4:	e0bff117 	ldw	r2,-60(fp)
   871e8:	e0bfed15 	stw	r2,-76(fp)
   871ec:	e0bfed17 	ldw	r2,-76(fp)
   871f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   871f4:	e0800217 	ldw	r2,8(fp)
   871f8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   871fc:	e0fff30b 	ldhu	r3,-52(fp)
   87200:	e0ffff15 	stw	r3,-4(fp)
   87204:	0000db06 	br	87574 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   87208:	e1bffa0b 	ldhu	r6,-24(fp)
   8720c:	e1fffb03 	ldbu	r7,-20(fp)
   87210:	e0bffc0b 	ldhu	r2,-16(fp)
   87214:	e17ff404 	addi	r5,fp,-48
   87218:	d8800015 	stw	r2,0(sp)
   8721c:	e13ff917 	ldw	r4,-28(fp)
   87220:	0087a700 	call	87a70 <OS_FlagBlock>
   87224:	e0bff117 	ldw	r2,-60(fp)
   87228:	e0bfec15 	stw	r2,-80(fp)
   8722c:	e0bfec17 	ldw	r2,-80(fp)
   87230:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   87234:	00006706 	br	873d4 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   87238:	e0bff917 	ldw	r2,-28(fp)
   8723c:	1080020b 	ldhu	r2,8(r2)
   87240:	0084303a 	nor	r2,zero,r2
   87244:	1007883a 	mov	r3,r2
   87248:	e0bffa0b 	ldhu	r2,-24(fp)
   8724c:	1884703a 	and	r2,r3,r2
   87250:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   87254:	e0fff30b 	ldhu	r3,-52(fp)
   87258:	e0bffa0b 	ldhu	r2,-24(fp)
   8725c:	1880181e 	bne	r3,r2,872c0 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   87260:	e0bff203 	ldbu	r2,-56(fp)
   87264:	10800058 	cmpnei	r2,r2,1
   87268:	1000071e 	bne	r2,zero,87288 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   8726c:	e0bff917 	ldw	r2,-28(fp)
   87270:	10c0020b 	ldhu	r3,8(r2)
   87274:	e0bff30b 	ldhu	r2,-52(fp)
   87278:	1884b03a 	or	r2,r3,r2
   8727c:	1007883a 	mov	r3,r2
   87280:	e0bff917 	ldw	r2,-28(fp)
   87284:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   87288:	00800274 	movhi	r2,9
   8728c:	10886a04 	addi	r2,r2,8616
   87290:	10c00017 	ldw	r3,0(r2)
   87294:	e0bff30b 	ldhu	r2,-52(fp)
   87298:	18800b0d 	sth	r2,44(r3)
   8729c:	e0bff117 	ldw	r2,-60(fp)
   872a0:	e0bfeb15 	stw	r2,-84(fp)
   872a4:	e0bfeb17 	ldw	r2,-84(fp)
   872a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   872ac:	e0800217 	ldw	r2,8(fp)
   872b0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   872b4:	e0bff30b 	ldhu	r2,-52(fp)
   872b8:	e0bfff15 	stw	r2,-4(fp)
   872bc:	0000ad06 	br	87574 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   872c0:	e1bffa0b 	ldhu	r6,-24(fp)
   872c4:	e1fffb03 	ldbu	r7,-20(fp)
   872c8:	e0bffc0b 	ldhu	r2,-16(fp)
   872cc:	e17ff404 	addi	r5,fp,-48
   872d0:	d8800015 	stw	r2,0(sp)
   872d4:	e13ff917 	ldw	r4,-28(fp)
   872d8:	0087a700 	call	87a70 <OS_FlagBlock>
   872dc:	e0bff117 	ldw	r2,-60(fp)
   872e0:	e0bfea15 	stw	r2,-88(fp)
   872e4:	e0bfea17 	ldw	r2,-88(fp)
   872e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   872ec:	00003906 	br	873d4 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   872f0:	e0bff917 	ldw	r2,-28(fp)
   872f4:	1080020b 	ldhu	r2,8(r2)
   872f8:	0084303a 	nor	r2,zero,r2
   872fc:	1007883a 	mov	r3,r2
   87300:	e0bffa0b 	ldhu	r2,-24(fp)
   87304:	1884703a 	and	r2,r3,r2
   87308:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   8730c:	e0bff30b 	ldhu	r2,-52(fp)
   87310:	1005003a 	cmpeq	r2,r2,zero
   87314:	1000181e 	bne	r2,zero,87378 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   87318:	e0bff203 	ldbu	r2,-56(fp)
   8731c:	10800058 	cmpnei	r2,r2,1
   87320:	1000071e 	bne	r2,zero,87340 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   87324:	e0bff917 	ldw	r2,-28(fp)
   87328:	10c0020b 	ldhu	r3,8(r2)
   8732c:	e0bff30b 	ldhu	r2,-52(fp)
   87330:	1884b03a 	or	r2,r3,r2
   87334:	1007883a 	mov	r3,r2
   87338:	e0bff917 	ldw	r2,-28(fp)
   8733c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   87340:	00800274 	movhi	r2,9
   87344:	10886a04 	addi	r2,r2,8616
   87348:	10c00017 	ldw	r3,0(r2)
   8734c:	e0bff30b 	ldhu	r2,-52(fp)
   87350:	18800b0d 	sth	r2,44(r3)
   87354:	e0bff117 	ldw	r2,-60(fp)
   87358:	e0bfe915 	stw	r2,-92(fp)
   8735c:	e0bfe917 	ldw	r2,-92(fp)
   87360:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   87364:	e0800217 	ldw	r2,8(fp)
   87368:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   8736c:	e0fff30b 	ldhu	r3,-52(fp)
   87370:	e0ffff15 	stw	r3,-4(fp)
   87374:	00007f06 	br	87574 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   87378:	e1bffa0b 	ldhu	r6,-24(fp)
   8737c:	e1fffb03 	ldbu	r7,-20(fp)
   87380:	e0bffc0b 	ldhu	r2,-16(fp)
   87384:	e17ff404 	addi	r5,fp,-48
   87388:	d8800015 	stw	r2,0(sp)
   8738c:	e13ff917 	ldw	r4,-28(fp)
   87390:	0087a700 	call	87a70 <OS_FlagBlock>
   87394:	e0bff117 	ldw	r2,-60(fp)
   87398:	e0bfe815 	stw	r2,-96(fp)
   8739c:	e0bfe817 	ldw	r2,-96(fp)
   873a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   873a4:	00000b06 	br	873d4 <OSFlagPend+0x48c>
   873a8:	e0bff117 	ldw	r2,-60(fp)
   873ac:	e0bfe715 	stw	r2,-100(fp)
   873b0:	e0bfe717 	ldw	r2,-100(fp)
   873b4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   873b8:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   873bc:	e0c00217 	ldw	r3,8(fp)
   873c0:	00801bc4 	movi	r2,111
   873c4:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
   873c8:	e0bff30b 	ldhu	r2,-52(fp)
   873cc:	e0bfff15 	stw	r2,-4(fp)
   873d0:	00006806 	br	87574 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   873d4:	0085d240 	call	85d24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   873d8:	0005303a 	rdctl	r2,status
   873dc:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   873e0:	e0ffe617 	ldw	r3,-104(fp)
   873e4:	00bfff84 	movi	r2,-2
   873e8:	1884703a 	and	r2,r3,r2
   873ec:	1001703a 	wrctl	status,r2
  
  return context;
   873f0:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
   873f4:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   873f8:	00800274 	movhi	r2,9
   873fc:	10886a04 	addi	r2,r2,8616
   87400:	10800017 	ldw	r2,0(r2)
   87404:	10800c43 	ldbu	r2,49(r2)
   87408:	10803fcc 	andi	r2,r2,255
   8740c:	1005003a 	cmpeq	r2,r2,zero
   87410:	1000221e 	bne	r2,zero,8749c <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   87414:	00800274 	movhi	r2,9
   87418:	10886a04 	addi	r2,r2,8616
   8741c:	10800017 	ldw	r2,0(r2)
   87420:	10800c43 	ldbu	r2,49(r2)
   87424:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   87428:	00800274 	movhi	r2,9
   8742c:	10886a04 	addi	r2,r2,8616
   87430:	10800017 	ldw	r2,0(r2)
   87434:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   87438:	e13ff404 	addi	r4,fp,-48
   8743c:	0087e280 	call	87e28 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   87440:	00800274 	movhi	r2,9
   87444:	10886a04 	addi	r2,r2,8616
   87448:	10800017 	ldw	r2,0(r2)
   8744c:	10000c05 	stb	zero,48(r2)
   87450:	e0bff117 	ldw	r2,-60(fp)
   87454:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   87458:	e0bfe517 	ldw	r2,-108(fp)
   8745c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   87460:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
   87464:	e0bff243 	ldbu	r2,-55(fp)
   87468:	108000a0 	cmpeqi	r2,r2,2
   8746c:	1000011e 	bne	r2,zero,87474 <OSFlagPend+0x52c>
   87470:	00000406 	br	87484 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   87474:	e0c00217 	ldw	r3,8(fp)
   87478:	00800384 	movi	r2,14
   8747c:	18800005 	stb	r2,0(r3)
                 break;
   87480:	00000306 	br	87490 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   87484:	e0c00217 	ldw	r3,8(fp)
   87488:	00800284 	movi	r2,10
   8748c:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
   87490:	e0fff30b 	ldhu	r3,-52(fp)
   87494:	e0ffff15 	stw	r3,-4(fp)
   87498:	00003606 	br	87574 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   8749c:	00800274 	movhi	r2,9
   874a0:	10886a04 	addi	r2,r2,8616
   874a4:	10800017 	ldw	r2,0(r2)
   874a8:	10800b0b 	ldhu	r2,44(r2)
   874ac:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   874b0:	e0bff203 	ldbu	r2,-56(fp)
   874b4:	10800058 	cmpnei	r2,r2,1
   874b8:	1000261e 	bne	r2,zero,87554 <OSFlagPend+0x60c>
        switch (wait_type) {
   874bc:	e0bffb03 	ldbu	r2,-20(fp)
   874c0:	e0bffd15 	stw	r2,-12(fp)
   874c4:	e0fffd17 	ldw	r3,-12(fp)
   874c8:	1804803a 	cmplt	r2,r3,zero
   874cc:	1000181e 	bne	r2,zero,87530 <OSFlagPend+0x5e8>
   874d0:	e0fffd17 	ldw	r3,-12(fp)
   874d4:	18800090 	cmplti	r2,r3,2
   874d8:	10000d1e 	bne	r2,zero,87510 <OSFlagPend+0x5c8>
   874dc:	e0fffd17 	ldw	r3,-12(fp)
   874e0:	18800108 	cmpgei	r2,r3,4
   874e4:	1000121e 	bne	r2,zero,87530 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   874e8:	e0bff917 	ldw	r2,-28(fp)
   874ec:	1080020b 	ldhu	r2,8(r2)
   874f0:	1007883a 	mov	r3,r2
   874f4:	e0bff30b 	ldhu	r2,-52(fp)
   874f8:	0084303a 	nor	r2,zero,r2
   874fc:	1884703a 	and	r2,r3,r2
   87500:	1007883a 	mov	r3,r2
   87504:	e0bff917 	ldw	r2,-28(fp)
   87508:	10c0020d 	sth	r3,8(r2)
                 break;
   8750c:	00001106 	br	87554 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   87510:	e0bff917 	ldw	r2,-28(fp)
   87514:	10c0020b 	ldhu	r3,8(r2)
   87518:	e0bff30b 	ldhu	r2,-52(fp)
   8751c:	1884b03a 	or	r2,r3,r2
   87520:	1007883a 	mov	r3,r2
   87524:	e0bff917 	ldw	r2,-28(fp)
   87528:	10c0020d 	sth	r3,8(r2)
                 break;
   8752c:	00000906 	br	87554 <OSFlagPend+0x60c>
   87530:	e0bff117 	ldw	r2,-60(fp)
   87534:	e0bfe415 	stw	r2,-112(fp)
   87538:	e0bfe417 	ldw	r2,-112(fp)
   8753c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   87540:	e0c00217 	ldw	r3,8(fp)
   87544:	00801bc4 	movi	r2,111
   87548:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
   8754c:	e03fff15 	stw	zero,-4(fp)
   87550:	00000806 	br	87574 <OSFlagPend+0x62c>
   87554:	e0bff117 	ldw	r2,-60(fp)
   87558:	e0bfe315 	stw	r2,-116(fp)
   8755c:	e0bfe317 	ldw	r2,-116(fp)
   87560:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   87564:	e0800217 	ldw	r2,8(fp)
   87568:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   8756c:	e0bff30b 	ldhu	r2,-52(fp)
   87570:	e0bfff15 	stw	r2,-4(fp)
   87574:	e0bfff17 	ldw	r2,-4(fp)
}
   87578:	e037883a 	mov	sp,fp
   8757c:	dfc00117 	ldw	ra,4(sp)
   87580:	df000017 	ldw	fp,0(sp)
   87584:	dec00204 	addi	sp,sp,8
   87588:	f800283a 	ret

0008758c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   8758c:	defffb04 	addi	sp,sp,-20
   87590:	df000415 	stw	fp,16(sp)
   87594:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   87598:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8759c:	0005303a 	rdctl	r2,status
   875a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   875a4:	e0fffd17 	ldw	r3,-12(fp)
   875a8:	00bfff84 	movi	r2,-2
   875ac:	1884703a 	and	r2,r3,r2
   875b0:	1001703a 	wrctl	status,r2
  
  return context;
   875b4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   875b8:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   875bc:	00800274 	movhi	r2,9
   875c0:	10886a04 	addi	r2,r2,8616
   875c4:	10800017 	ldw	r2,0(r2)
   875c8:	10800b0b 	ldhu	r2,44(r2)
   875cc:	e0bfff0d 	sth	r2,-4(fp)
   875d0:	e0bffe17 	ldw	r2,-8(fp)
   875d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   875d8:	e0bffc17 	ldw	r2,-16(fp)
   875dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   875e0:	e0bfff0b 	ldhu	r2,-4(fp)
}
   875e4:	e037883a 	mov	sp,fp
   875e8:	df000017 	ldw	fp,0(sp)
   875ec:	dec00104 	addi	sp,sp,4
   875f0:	f800283a 	ret

000875f4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   875f4:	deffed04 	addi	sp,sp,-76
   875f8:	dfc01215 	stw	ra,72(sp)
   875fc:	df001115 	stw	fp,68(sp)
   87600:	df001104 	addi	fp,sp,68
   87604:	e13ff915 	stw	r4,-28(fp)
   87608:	e1fffc15 	stw	r7,-16(fp)
   8760c:	e17ffa0d 	sth	r5,-24(fp)
   87610:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   87614:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   87618:	e0bffc17 	ldw	r2,-16(fp)
   8761c:	1004c03a 	cmpne	r2,r2,zero
   87620:	1000021e 	bne	r2,zero,8762c <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
   87624:	e03fff15 	stw	zero,-4(fp)
   87628:	0000d606 	br	87984 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   8762c:	e0bff917 	ldw	r2,-28(fp)
   87630:	1004c03a 	cmpne	r2,r2,zero
   87634:	1000051e 	bne	r2,zero,8764c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   87638:	e0fffc17 	ldw	r3,-16(fp)
   8763c:	00801b84 	movi	r2,110
   87640:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   87644:	e03fff15 	stw	zero,-4(fp)
   87648:	0000ce06 	br	87984 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   8764c:	e0bff917 	ldw	r2,-28(fp)
   87650:	10800003 	ldbu	r2,0(r2)
   87654:	10803fcc 	andi	r2,r2,255
   87658:	10800160 	cmpeqi	r2,r2,5
   8765c:	1000051e 	bne	r2,zero,87674 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   87660:	e0fffc17 	ldw	r3,-16(fp)
   87664:	00800044 	movi	r2,1
   87668:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8766c:	e03fff15 	stw	zero,-4(fp)
   87670:	0000c406 	br	87984 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   87674:	0005303a 	rdctl	r2,status
   87678:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8767c:	e0fff417 	ldw	r3,-48(fp)
   87680:	00bfff84 	movi	r2,-2
   87684:	1884703a 	and	r2,r3,r2
   87688:	1001703a 	wrctl	status,r2
  
  return context;
   8768c:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   87690:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
   87694:	e0bffb03 	ldbu	r2,-20(fp)
   87698:	e0bffe15 	stw	r2,-8(fp)
   8769c:	e0fffe17 	ldw	r3,-8(fp)
   876a0:	1805003a 	cmpeq	r2,r3,zero
   876a4:	1000041e 	bne	r2,zero,876b8 <OSFlagPost+0xc4>
   876a8:	e0fffe17 	ldw	r3,-8(fp)
   876ac:	18800060 	cmpeqi	r2,r3,1
   876b0:	10000b1e 	bne	r2,zero,876e0 <OSFlagPost+0xec>
   876b4:	00001206 	br	87700 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   876b8:	e0bff917 	ldw	r2,-28(fp)
   876bc:	1080020b 	ldhu	r2,8(r2)
   876c0:	1007883a 	mov	r3,r2
   876c4:	e0bffa0b 	ldhu	r2,-24(fp)
   876c8:	0084303a 	nor	r2,zero,r2
   876cc:	1884703a 	and	r2,r3,r2
   876d0:	1007883a 	mov	r3,r2
   876d4:	e0bff917 	ldw	r2,-28(fp)
   876d8:	10c0020d 	sth	r3,8(r2)
             break;
   876dc:	00001106 	br	87724 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   876e0:	e0bff917 	ldw	r2,-28(fp)
   876e4:	10c0020b 	ldhu	r3,8(r2)
   876e8:	e0bffa0b 	ldhu	r2,-24(fp)
   876ec:	1884b03a 	or	r2,r3,r2
   876f0:	1007883a 	mov	r3,r2
   876f4:	e0bff917 	ldw	r2,-28(fp)
   876f8:	10c0020d 	sth	r3,8(r2)
             break;
   876fc:	00000906 	br	87724 <OSFlagPost+0x130>
   87700:	e0bff517 	ldw	r2,-44(fp)
   87704:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   87708:	e0bff317 	ldw	r2,-52(fp)
   8770c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   87710:	e0fffc17 	ldw	r3,-16(fp)
   87714:	00801c44 	movi	r2,113
   87718:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
   8771c:	e03fff15 	stw	zero,-4(fp)
   87720:	00009806 	br	87984 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   87724:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   87728:	e0bff917 	ldw	r2,-28(fp)
   8772c:	10800117 	ldw	r2,4(r2)
   87730:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   87734:	00007506 	br	8790c <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
   87738:	e0bff817 	ldw	r2,-32(fp)
   8773c:	10800483 	ldbu	r2,18(r2)
   87740:	10803fcc 	andi	r2,r2,255
   87744:	e0bffd15 	stw	r2,-12(fp)
   87748:	e0fffd17 	ldw	r3,-12(fp)
   8774c:	18800060 	cmpeqi	r2,r3,1
   87750:	10004d1e 	bne	r2,zero,87888 <OSFlagPost+0x294>
   87754:	e0fffd17 	ldw	r3,-12(fp)
   87758:	18800088 	cmpgei	r2,r3,2
   8775c:	1000041e 	bne	r2,zero,87770 <OSFlagPost+0x17c>
   87760:	e0fffd17 	ldw	r3,-12(fp)
   87764:	1805003a 	cmpeq	r2,r3,zero
   87768:	1000301e 	bne	r2,zero,8782c <OSFlagPost+0x238>
   8776c:	00005b06 	br	878dc <OSFlagPost+0x2e8>
   87770:	e0fffd17 	ldw	r3,-12(fp)
   87774:	188000a0 	cmpeqi	r2,r3,2
   87778:	1000041e 	bne	r2,zero,8778c <OSFlagPost+0x198>
   8777c:	e0fffd17 	ldw	r3,-12(fp)
   87780:	188000e0 	cmpeqi	r2,r3,3
   87784:	1000161e 	bne	r2,zero,877e0 <OSFlagPost+0x1ec>
   87788:	00005406 	br	878dc <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   8778c:	e0bff917 	ldw	r2,-28(fp)
   87790:	10c0020b 	ldhu	r3,8(r2)
   87794:	e0bff817 	ldw	r2,-32(fp)
   87798:	1080040b 	ldhu	r2,16(r2)
   8779c:	1884703a 	and	r2,r3,r2
   877a0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   877a4:	e0bff817 	ldw	r2,-32(fp)
   877a8:	1080040b 	ldhu	r2,16(r2)
   877ac:	10ffffcc 	andi	r3,r2,65535
   877b0:	e0bff68b 	ldhu	r2,-38(fp)
   877b4:	1880521e 	bne	r3,r2,87900 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   877b8:	e17ff68b 	ldhu	r5,-38(fp)
   877bc:	e13ff817 	ldw	r4,-32(fp)
   877c0:	0087d180 	call	87d18 <OS_FlagTaskRdy>
   877c4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   877c8:	e0bff603 	ldbu	r2,-40(fp)
   877cc:	10800058 	cmpnei	r2,r2,1
   877d0:	10004b1e 	bne	r2,zero,87900 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   877d4:	00800044 	movi	r2,1
   877d8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   877dc:	00004806 	br	87900 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   877e0:	e0bff917 	ldw	r2,-28(fp)
   877e4:	10c0020b 	ldhu	r3,8(r2)
   877e8:	e0bff817 	ldw	r2,-32(fp)
   877ec:	1080040b 	ldhu	r2,16(r2)
   877f0:	1884703a 	and	r2,r3,r2
   877f4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   877f8:	e0bff68b 	ldhu	r2,-38(fp)
   877fc:	1005003a 	cmpeq	r2,r2,zero
   87800:	10003f1e 	bne	r2,zero,87900 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   87804:	e17ff68b 	ldhu	r5,-38(fp)
   87808:	e13ff817 	ldw	r4,-32(fp)
   8780c:	0087d180 	call	87d18 <OS_FlagTaskRdy>
   87810:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   87814:	e0bff603 	ldbu	r2,-40(fp)
   87818:	10800058 	cmpnei	r2,r2,1
   8781c:	1000381e 	bne	r2,zero,87900 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   87820:	00800044 	movi	r2,1
   87824:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   87828:	00003506 	br	87900 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   8782c:	e0bff917 	ldw	r2,-28(fp)
   87830:	1080020b 	ldhu	r2,8(r2)
   87834:	0084303a 	nor	r2,zero,r2
   87838:	1007883a 	mov	r3,r2
   8783c:	e0bff817 	ldw	r2,-32(fp)
   87840:	1080040b 	ldhu	r2,16(r2)
   87844:	1884703a 	and	r2,r3,r2
   87848:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   8784c:	e0bff817 	ldw	r2,-32(fp)
   87850:	1080040b 	ldhu	r2,16(r2)
   87854:	10ffffcc 	andi	r3,r2,65535
   87858:	e0bff68b 	ldhu	r2,-38(fp)
   8785c:	1880281e 	bne	r3,r2,87900 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   87860:	e17ff68b 	ldhu	r5,-38(fp)
   87864:	e13ff817 	ldw	r4,-32(fp)
   87868:	0087d180 	call	87d18 <OS_FlagTaskRdy>
   8786c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   87870:	e0bff603 	ldbu	r2,-40(fp)
   87874:	10800058 	cmpnei	r2,r2,1
   87878:	1000211e 	bne	r2,zero,87900 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   8787c:	00800044 	movi	r2,1
   87880:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   87884:	00001e06 	br	87900 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   87888:	e0bff917 	ldw	r2,-28(fp)
   8788c:	1080020b 	ldhu	r2,8(r2)
   87890:	0084303a 	nor	r2,zero,r2
   87894:	1007883a 	mov	r3,r2
   87898:	e0bff817 	ldw	r2,-32(fp)
   8789c:	1080040b 	ldhu	r2,16(r2)
   878a0:	1884703a 	and	r2,r3,r2
   878a4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   878a8:	e0bff68b 	ldhu	r2,-38(fp)
   878ac:	1005003a 	cmpeq	r2,r2,zero
   878b0:	1000131e 	bne	r2,zero,87900 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   878b4:	e17ff68b 	ldhu	r5,-38(fp)
   878b8:	e13ff817 	ldw	r4,-32(fp)
   878bc:	0087d180 	call	87d18 <OS_FlagTaskRdy>
   878c0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   878c4:	e0bff603 	ldbu	r2,-40(fp)
   878c8:	10800058 	cmpnei	r2,r2,1
   878cc:	10000c1e 	bne	r2,zero,87900 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   878d0:	00800044 	movi	r2,1
   878d4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   878d8:	00000906 	br	87900 <OSFlagPost+0x30c>
   878dc:	e0bff517 	ldw	r2,-44(fp)
   878e0:	e0bff215 	stw	r2,-56(fp)
   878e4:	e0bff217 	ldw	r2,-56(fp)
   878e8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   878ec:	e0fffc17 	ldw	r3,-16(fp)
   878f0:	00801bc4 	movi	r2,111
   878f4:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
   878f8:	e03fff15 	stw	zero,-4(fp)
   878fc:	00002106 	br	87984 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   87900:	e0bff817 	ldw	r2,-32(fp)
   87904:	10800017 	ldw	r2,0(r2)
   87908:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   8790c:	e0bff817 	ldw	r2,-32(fp)
   87910:	1004c03a 	cmpne	r2,r2,zero
   87914:	103f881e 	bne	r2,zero,87738 <OSFlagPost+0x144>
   87918:	e0bff517 	ldw	r2,-44(fp)
   8791c:	e0bff115 	stw	r2,-60(fp)
   87920:	e0bff117 	ldw	r2,-60(fp)
   87924:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   87928:	e0bff783 	ldbu	r2,-34(fp)
   8792c:	10800058 	cmpnei	r2,r2,1
   87930:	1000011e 	bne	r2,zero,87938 <OSFlagPost+0x344>
        OS_Sched();
   87934:	0085d240 	call	85d24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   87938:	0005303a 	rdctl	r2,status
   8793c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   87940:	e0fff017 	ldw	r3,-64(fp)
   87944:	00bfff84 	movi	r2,-2
   87948:	1884703a 	and	r2,r3,r2
   8794c:	1001703a 	wrctl	status,r2
  
  return context;
   87950:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
   87954:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
   87958:	e0bff917 	ldw	r2,-28(fp)
   8795c:	1080020b 	ldhu	r2,8(r2)
   87960:	e0bff70d 	sth	r2,-36(fp)
   87964:	e0bff517 	ldw	r2,-44(fp)
   87968:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8796c:	e0bfef17 	ldw	r2,-68(fp)
   87970:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   87974:	e0bffc17 	ldw	r2,-16(fp)
   87978:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   8797c:	e0bff70b 	ldhu	r2,-36(fp)
   87980:	e0bfff15 	stw	r2,-4(fp)
   87984:	e0bfff17 	ldw	r2,-4(fp)
}
   87988:	e037883a 	mov	sp,fp
   8798c:	dfc00117 	ldw	ra,4(sp)
   87990:	df000017 	ldw	fp,0(sp)
   87994:	dec00204 	addi	sp,sp,8
   87998:	f800283a 	ret

0008799c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   8799c:	defff804 	addi	sp,sp,-32
   879a0:	df000715 	stw	fp,28(sp)
   879a4:	df000704 	addi	fp,sp,28
   879a8:	e13ffd15 	stw	r4,-12(fp)
   879ac:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   879b0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   879b4:	e0bffe17 	ldw	r2,-8(fp)
   879b8:	1004c03a 	cmpne	r2,r2,zero
   879bc:	1000021e 	bne	r2,zero,879c8 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
   879c0:	e03fff15 	stw	zero,-4(fp)
   879c4:	00002506 	br	87a5c <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   879c8:	e0bffd17 	ldw	r2,-12(fp)
   879cc:	1004c03a 	cmpne	r2,r2,zero
   879d0:	1000051e 	bne	r2,zero,879e8 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   879d4:	e0fffe17 	ldw	r3,-8(fp)
   879d8:	00801b84 	movi	r2,110
   879dc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   879e0:	e03fff15 	stw	zero,-4(fp)
   879e4:	00001d06 	br	87a5c <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   879e8:	e0bffd17 	ldw	r2,-12(fp)
   879ec:	10800003 	ldbu	r2,0(r2)
   879f0:	10803fcc 	andi	r2,r2,255
   879f4:	10800160 	cmpeqi	r2,r2,5
   879f8:	1000051e 	bne	r2,zero,87a10 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   879fc:	e0fffe17 	ldw	r3,-8(fp)
   87a00:	00800044 	movi	r2,1
   87a04:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   87a08:	e03fff15 	stw	zero,-4(fp)
   87a0c:	00001306 	br	87a5c <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   87a10:	0005303a 	rdctl	r2,status
   87a14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   87a18:	e0fffa17 	ldw	r3,-24(fp)
   87a1c:	00bfff84 	movi	r2,-2
   87a20:	1884703a 	and	r2,r3,r2
   87a24:	1001703a 	wrctl	status,r2
  
  return context;
   87a28:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   87a2c:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
   87a30:	e0bffd17 	ldw	r2,-12(fp)
   87a34:	1080020b 	ldhu	r2,8(r2)
   87a38:	e0bffc0d 	sth	r2,-16(fp)
   87a3c:	e0bffb17 	ldw	r2,-20(fp)
   87a40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   87a44:	e0bff917 	ldw	r2,-28(fp)
   87a48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   87a4c:	e0bffe17 	ldw	r2,-8(fp)
   87a50:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   87a54:	e0bffc0b 	ldhu	r2,-16(fp)
   87a58:	e0bfff15 	stw	r2,-4(fp)
   87a5c:	e0bfff17 	ldw	r2,-4(fp)
}
   87a60:	e037883a 	mov	sp,fp
   87a64:	df000017 	ldw	fp,0(sp)
   87a68:	dec00104 	addi	sp,sp,4
   87a6c:	f800283a 	ret

00087a70 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   87a70:	defff804 	addi	sp,sp,-32
   87a74:	df000715 	stw	fp,28(sp)
   87a78:	df000704 	addi	fp,sp,28
   87a7c:	e13ffb15 	stw	r4,-20(fp)
   87a80:	e17ffc15 	stw	r5,-16(fp)
   87a84:	e0800117 	ldw	r2,4(fp)
   87a88:	e1bffd0d 	sth	r6,-12(fp)
   87a8c:	e1fffe05 	stb	r7,-8(fp)
   87a90:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   87a94:	00800274 	movhi	r2,9
   87a98:	10886a04 	addi	r2,r2,8616
   87a9c:	10c00017 	ldw	r3,0(r2)
   87aa0:	00800274 	movhi	r2,9
   87aa4:	10886a04 	addi	r2,r2,8616
   87aa8:	10800017 	ldw	r2,0(r2)
   87aac:	10800c03 	ldbu	r2,48(r2)
   87ab0:	10800814 	ori	r2,r2,32
   87ab4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   87ab8:	00800274 	movhi	r2,9
   87abc:	10886a04 	addi	r2,r2,8616
   87ac0:	10800017 	ldw	r2,0(r2)
   87ac4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   87ac8:	00800274 	movhi	r2,9
   87acc:	10886a04 	addi	r2,r2,8616
   87ad0:	10c00017 	ldw	r3,0(r2)
   87ad4:	e0bfff0b 	ldhu	r2,-4(fp)
   87ad8:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   87adc:	00800274 	movhi	r2,9
   87ae0:	10886a04 	addi	r2,r2,8616
   87ae4:	10c00017 	ldw	r3,0(r2)
   87ae8:	e0bffc17 	ldw	r2,-16(fp)
   87aec:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   87af0:	e0fffc17 	ldw	r3,-16(fp)
   87af4:	e0bffd0b 	ldhu	r2,-12(fp)
   87af8:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   87afc:	e0fffc17 	ldw	r3,-16(fp)
   87b00:	e0bffe03 	ldbu	r2,-8(fp)
   87b04:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   87b08:	00800274 	movhi	r2,9
   87b0c:	10886a04 	addi	r2,r2,8616
   87b10:	10c00017 	ldw	r3,0(r2)
   87b14:	e0bffc17 	ldw	r2,-16(fp)
   87b18:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   87b1c:	e0bffb17 	ldw	r2,-20(fp)
   87b20:	10c00117 	ldw	r3,4(r2)
   87b24:	e0bffc17 	ldw	r2,-16(fp)
   87b28:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   87b2c:	e0bffc17 	ldw	r2,-16(fp)
   87b30:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   87b34:	e0fffc17 	ldw	r3,-16(fp)
   87b38:	e0bffb17 	ldw	r2,-20(fp)
   87b3c:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   87b40:	e0bffb17 	ldw	r2,-20(fp)
   87b44:	10800117 	ldw	r2,4(r2)
   87b48:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   87b4c:	e0bffa17 	ldw	r2,-24(fp)
   87b50:	1005003a 	cmpeq	r2,r2,zero
   87b54:	1000031e 	bne	r2,zero,87b64 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   87b58:	e0fffa17 	ldw	r3,-24(fp)
   87b5c:	e0bffc17 	ldw	r2,-16(fp)
   87b60:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   87b64:	e0fffb17 	ldw	r3,-20(fp)
   87b68:	e0bffc17 	ldw	r2,-16(fp)
   87b6c:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   87b70:	00800274 	movhi	r2,9
   87b74:	10886a04 	addi	r2,r2,8616
   87b78:	10800017 	ldw	r2,0(r2)
   87b7c:	10800d03 	ldbu	r2,52(r2)
   87b80:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   87b84:	e13ff903 	ldbu	r4,-28(fp)
   87b88:	e0fff903 	ldbu	r3,-28(fp)
   87b8c:	00800274 	movhi	r2,9
   87b90:	10886744 	addi	r2,r2,8605
   87b94:	10c5883a 	add	r2,r2,r3
   87b98:	10800003 	ldbu	r2,0(r2)
   87b9c:	1007883a 	mov	r3,r2
   87ba0:	00800274 	movhi	r2,9
   87ba4:	10886a04 	addi	r2,r2,8616
   87ba8:	10800017 	ldw	r2,0(r2)
   87bac:	10800d43 	ldbu	r2,53(r2)
   87bb0:	0084303a 	nor	r2,zero,r2
   87bb4:	1884703a 	and	r2,r3,r2
   87bb8:	1007883a 	mov	r3,r2
   87bbc:	00800274 	movhi	r2,9
   87bc0:	10886744 	addi	r2,r2,8605
   87bc4:	1105883a 	add	r2,r2,r4
   87bc8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   87bcc:	e0fff903 	ldbu	r3,-28(fp)
   87bd0:	00800274 	movhi	r2,9
   87bd4:	10886744 	addi	r2,r2,8605
   87bd8:	10c5883a 	add	r2,r2,r3
   87bdc:	10800003 	ldbu	r2,0(r2)
   87be0:	10803fcc 	andi	r2,r2,255
   87be4:	1004c03a 	cmpne	r2,r2,zero
   87be8:	10000e1e 	bne	r2,zero,87c24 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   87bec:	00800274 	movhi	r2,9
   87bf0:	10886a04 	addi	r2,r2,8616
   87bf4:	10800017 	ldw	r2,0(r2)
   87bf8:	10800d83 	ldbu	r2,54(r2)
   87bfc:	0084303a 	nor	r2,zero,r2
   87c00:	1007883a 	mov	r3,r2
   87c04:	00800274 	movhi	r2,9
   87c08:	10886704 	addi	r2,r2,8604
   87c0c:	10800003 	ldbu	r2,0(r2)
   87c10:	1884703a 	and	r2,r3,r2
   87c14:	1007883a 	mov	r3,r2
   87c18:	00800274 	movhi	r2,9
   87c1c:	10886704 	addi	r2,r2,8604
   87c20:	10c00005 	stb	r3,0(r2)
    }
}
   87c24:	e037883a 	mov	sp,fp
   87c28:	df000017 	ldw	fp,0(sp)
   87c2c:	dec00104 	addi	sp,sp,4
   87c30:	f800283a 	ret

00087c34 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   87c34:	defffb04 	addi	sp,sp,-20
   87c38:	dfc00415 	stw	ra,16(sp)
   87c3c:	df000315 	stw	fp,12(sp)
   87c40:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   87c44:	01000274 	movhi	r4,9
   87c48:	21188c04 	addi	r4,r4,25136
   87c4c:	0140dc04 	movi	r5,880
   87c50:	0085c640 	call	85c64 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   87c54:	00800274 	movhi	r2,9
   87c58:	10988c04 	addi	r2,r2,25136
   87c5c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   87c60:	00800274 	movhi	r2,9
   87c64:	10989704 	addi	r2,r2,25180
   87c68:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   87c6c:	e03fff0d 	sth	zero,-4(fp)
   87c70:	00001306 	br	87cc0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   87c74:	e0bffe17 	ldw	r2,-8(fp)
   87c78:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   87c7c:	e0fffe17 	ldw	r3,-8(fp)
   87c80:	e0bffd17 	ldw	r2,-12(fp)
   87c84:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   87c88:	e0fffe17 	ldw	r3,-8(fp)
   87c8c:	00800fc4 	movi	r2,63
   87c90:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   87c94:	e0bffe17 	ldw	r2,-8(fp)
   87c98:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   87c9c:	e0bffe17 	ldw	r2,-8(fp)
   87ca0:	10800b04 	addi	r2,r2,44
   87ca4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   87ca8:	e0bffd17 	ldw	r2,-12(fp)
   87cac:	10800b04 	addi	r2,r2,44
   87cb0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   87cb4:	e0bfff0b 	ldhu	r2,-4(fp)
   87cb8:	10800044 	addi	r2,r2,1
   87cbc:	e0bfff0d 	sth	r2,-4(fp)
   87cc0:	e0bfff0b 	ldhu	r2,-4(fp)
   87cc4:	108004f0 	cmpltui	r2,r2,19
   87cc8:	103fea1e 	bne	r2,zero,87c74 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   87ccc:	e0bffe17 	ldw	r2,-8(fp)
   87cd0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   87cd4:	e0bffe17 	ldw	r2,-8(fp)
   87cd8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   87cdc:	e0fffe17 	ldw	r3,-8(fp)
   87ce0:	00800fc4 	movi	r2,63
   87ce4:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   87ce8:	e0bffe17 	ldw	r2,-8(fp)
   87cec:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   87cf0:	00c00274 	movhi	r3,9
   87cf4:	18c86c04 	addi	r3,r3,8624
   87cf8:	00800274 	movhi	r2,9
   87cfc:	10988c04 	addi	r2,r2,25136
   87d00:	18800015 	stw	r2,0(r3)
#endif
}
   87d04:	e037883a 	mov	sp,fp
   87d08:	dfc00117 	ldw	ra,4(sp)
   87d0c:	df000017 	ldw	fp,0(sp)
   87d10:	dec00204 	addi	sp,sp,8
   87d14:	f800283a 	ret

00087d18 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   87d18:	defffa04 	addi	sp,sp,-24
   87d1c:	dfc00515 	stw	ra,20(sp)
   87d20:	df000415 	stw	fp,16(sp)
   87d24:	df000404 	addi	fp,sp,16
   87d28:	e13ffe15 	stw	r4,-8(fp)
   87d2c:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   87d30:	e0bffe17 	ldw	r2,-8(fp)
   87d34:	10800217 	ldw	r2,8(r2)
   87d38:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   87d3c:	e0bffd17 	ldw	r2,-12(fp)
   87d40:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   87d44:	e0fffd17 	ldw	r3,-12(fp)
   87d48:	e0bfff0b 	ldhu	r2,-4(fp)
   87d4c:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   87d50:	e0bffd17 	ldw	r2,-12(fp)
   87d54:	10c00c03 	ldbu	r3,48(r2)
   87d58:	00bff7c4 	movi	r2,-33
   87d5c:	1884703a 	and	r2,r3,r2
   87d60:	1007883a 	mov	r3,r2
   87d64:	e0bffd17 	ldw	r2,-12(fp)
   87d68:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   87d6c:	e0bffd17 	ldw	r2,-12(fp)
   87d70:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   87d74:	e0bffd17 	ldw	r2,-12(fp)
   87d78:	10800c03 	ldbu	r2,48(r2)
   87d7c:	10803fcc 	andi	r2,r2,255
   87d80:	1004c03a 	cmpne	r2,r2,zero
   87d84:	10001f1e 	bne	r2,zero,87e04 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   87d88:	e0bffd17 	ldw	r2,-12(fp)
   87d8c:	10c00d83 	ldbu	r3,54(r2)
   87d90:	00800274 	movhi	r2,9
   87d94:	10886704 	addi	r2,r2,8604
   87d98:	10800003 	ldbu	r2,0(r2)
   87d9c:	1884b03a 	or	r2,r3,r2
   87da0:	1007883a 	mov	r3,r2
   87da4:	00800274 	movhi	r2,9
   87da8:	10886704 	addi	r2,r2,8604
   87dac:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   87db0:	e0bffd17 	ldw	r2,-12(fp)
   87db4:	10800d03 	ldbu	r2,52(r2)
   87db8:	11003fcc 	andi	r4,r2,255
   87dbc:	e0bffd17 	ldw	r2,-12(fp)
   87dc0:	10800d03 	ldbu	r2,52(r2)
   87dc4:	10c03fcc 	andi	r3,r2,255
   87dc8:	00800274 	movhi	r2,9
   87dcc:	10886744 	addi	r2,r2,8605
   87dd0:	10c5883a 	add	r2,r2,r3
   87dd4:	10c00003 	ldbu	r3,0(r2)
   87dd8:	e0bffd17 	ldw	r2,-12(fp)
   87ddc:	10800d43 	ldbu	r2,53(r2)
   87de0:	1884b03a 	or	r2,r3,r2
   87de4:	1007883a 	mov	r3,r2
   87de8:	00800274 	movhi	r2,9
   87dec:	10886744 	addi	r2,r2,8605
   87df0:	1105883a 	add	r2,r2,r4
   87df4:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
   87df8:	00800044 	movi	r2,1
   87dfc:	e0bffc05 	stb	r2,-16(fp)
   87e00:	00000106 	br	87e08 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   87e04:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   87e08:	e13ffe17 	ldw	r4,-8(fp)
   87e0c:	0087e280 	call	87e28 <OS_FlagUnlink>
    return (sched);
   87e10:	e0bffc03 	ldbu	r2,-16(fp)
}
   87e14:	e037883a 	mov	sp,fp
   87e18:	dfc00117 	ldw	ra,4(sp)
   87e1c:	df000017 	ldw	fp,0(sp)
   87e20:	dec00204 	addi	sp,sp,8
   87e24:	f800283a 	ret

00087e28 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   87e28:	defffa04 	addi	sp,sp,-24
   87e2c:	df000515 	stw	fp,20(sp)
   87e30:	df000504 	addi	fp,sp,20
   87e34:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   87e38:	e0bfff17 	ldw	r2,-4(fp)
   87e3c:	10800117 	ldw	r2,4(r2)
   87e40:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   87e44:	e0bfff17 	ldw	r2,-4(fp)
   87e48:	10800017 	ldw	r2,0(r2)
   87e4c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   87e50:	e0bffc17 	ldw	r2,-16(fp)
   87e54:	1004c03a 	cmpne	r2,r2,zero
   87e58:	10000c1e 	bne	r2,zero,87e8c <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   87e5c:	e0bfff17 	ldw	r2,-4(fp)
   87e60:	10800317 	ldw	r2,12(r2)
   87e64:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   87e68:	e0fffd17 	ldw	r3,-12(fp)
   87e6c:	e0bffb17 	ldw	r2,-20(fp)
   87e70:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   87e74:	e0bffb17 	ldw	r2,-20(fp)
   87e78:	1005003a 	cmpeq	r2,r2,zero
   87e7c:	10000c1e 	bne	r2,zero,87eb0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   87e80:	e0bffb17 	ldw	r2,-20(fp)
   87e84:	10000115 	stw	zero,4(r2)
   87e88:	00000906 	br	87eb0 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   87e8c:	e0fffc17 	ldw	r3,-16(fp)
   87e90:	e0bffb17 	ldw	r2,-20(fp)
   87e94:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   87e98:	e0bffb17 	ldw	r2,-20(fp)
   87e9c:	1005003a 	cmpeq	r2,r2,zero
   87ea0:	1000031e 	bne	r2,zero,87eb0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   87ea4:	e0fffb17 	ldw	r3,-20(fp)
   87ea8:	e0bffc17 	ldw	r2,-16(fp)
   87eac:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   87eb0:	e0bfff17 	ldw	r2,-4(fp)
   87eb4:	10800217 	ldw	r2,8(r2)
   87eb8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   87ebc:	e0bffe17 	ldw	r2,-8(fp)
   87ec0:	10000a15 	stw	zero,40(r2)
#endif
}
   87ec4:	e037883a 	mov	sp,fp
   87ec8:	df000017 	ldw	fp,0(sp)
   87ecc:	dec00104 	addi	sp,sp,4
   87ed0:	f800283a 	ret

00087ed4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   87ed4:	defff304 	addi	sp,sp,-52
   87ed8:	df000c15 	stw	fp,48(sp)
   87edc:	df000c04 	addi	fp,sp,48
   87ee0:	e13ffb15 	stw	r4,-20(fp)
   87ee4:	e17ffc15 	stw	r5,-16(fp)
   87ee8:	e1bffd15 	stw	r6,-12(fp)
   87eec:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   87ef0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   87ef4:	e0bffe17 	ldw	r2,-8(fp)
   87ef8:	1004c03a 	cmpne	r2,r2,zero
   87efc:	1000021e 	bne	r2,zero,87f08 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
   87f00:	e03fff15 	stw	zero,-4(fp)
   87f04:	00007506 	br	880dc <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   87f08:	e0bffb17 	ldw	r2,-20(fp)
   87f0c:	1004c03a 	cmpne	r2,r2,zero
   87f10:	1000051e 	bne	r2,zero,87f28 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   87f14:	e0fffe17 	ldw	r3,-8(fp)
   87f18:	00801884 	movi	r2,98
   87f1c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   87f20:	e03fff15 	stw	zero,-4(fp)
   87f24:	00006d06 	br	880dc <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   87f28:	e0bffb17 	ldw	r2,-20(fp)
   87f2c:	108000cc 	andi	r2,r2,3
   87f30:	1005003a 	cmpeq	r2,r2,zero
   87f34:	1000051e 	bne	r2,zero,87f4c <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   87f38:	e0fffe17 	ldw	r3,-8(fp)
   87f3c:	00801884 	movi	r2,98
   87f40:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   87f44:	e03fff15 	stw	zero,-4(fp)
   87f48:	00006406 	br	880dc <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   87f4c:	e0bffc17 	ldw	r2,-16(fp)
   87f50:	108000a8 	cmpgeui	r2,r2,2
   87f54:	1000051e 	bne	r2,zero,87f6c <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   87f58:	e0fffe17 	ldw	r3,-8(fp)
   87f5c:	008016c4 	movi	r2,91
   87f60:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   87f64:	e03fff15 	stw	zero,-4(fp)
   87f68:	00005c06 	br	880dc <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   87f6c:	e0bffd17 	ldw	r2,-12(fp)
   87f70:	10800128 	cmpgeui	r2,r2,4
   87f74:	1000051e 	bne	r2,zero,87f8c <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   87f78:	e0fffe17 	ldw	r3,-8(fp)
   87f7c:	00801704 	movi	r2,92
   87f80:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   87f84:	e03fff15 	stw	zero,-4(fp)
   87f88:	00005406 	br	880dc <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   87f8c:	0005303a 	rdctl	r2,status
   87f90:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   87f94:	e0fff517 	ldw	r3,-44(fp)
   87f98:	00bfff84 	movi	r2,-2
   87f9c:	1884703a 	and	r2,r3,r2
   87fa0:	1001703a 	wrctl	status,r2
  
  return context;
   87fa4:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   87fa8:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   87fac:	00800274 	movhi	r2,9
   87fb0:	10886404 	addi	r2,r2,8592
   87fb4:	10800017 	ldw	r2,0(r2)
   87fb8:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   87fbc:	00800274 	movhi	r2,9
   87fc0:	10886404 	addi	r2,r2,8592
   87fc4:	10800017 	ldw	r2,0(r2)
   87fc8:	1005003a 	cmpeq	r2,r2,zero
   87fcc:	1000081e 	bne	r2,zero,87ff0 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   87fd0:	00800274 	movhi	r2,9
   87fd4:	10886404 	addi	r2,r2,8592
   87fd8:	10800017 	ldw	r2,0(r2)
   87fdc:	10800117 	ldw	r2,4(r2)
   87fe0:	1007883a 	mov	r3,r2
   87fe4:	00800274 	movhi	r2,9
   87fe8:	10886404 	addi	r2,r2,8592
   87fec:	10c00015 	stw	r3,0(r2)
   87ff0:	e0bff617 	ldw	r2,-40(fp)
   87ff4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   87ff8:	e0bff417 	ldw	r2,-48(fp)
   87ffc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   88000:	e0bffa17 	ldw	r2,-24(fp)
   88004:	1004c03a 	cmpne	r2,r2,zero
   88008:	1000051e 	bne	r2,zero,88020 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
   8800c:	e0fffe17 	ldw	r3,-8(fp)
   88010:	00801684 	movi	r2,90
   88014:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   88018:	e03fff15 	stw	zero,-4(fp)
   8801c:	00002f06 	br	880dc <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   88020:	e0bffb17 	ldw	r2,-20(fp)
   88024:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   88028:	e0bffb17 	ldw	r2,-20(fp)
   8802c:	1007883a 	mov	r3,r2
   88030:	e0bffd17 	ldw	r2,-12(fp)
   88034:	1885883a 	add	r2,r3,r2
   88038:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
   8803c:	e03ff715 	stw	zero,-36(fp)
   88040:	00000d06 	br	88078 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   88044:	e0fff817 	ldw	r3,-32(fp)
   88048:	e0bff917 	ldw	r2,-28(fp)
   8804c:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   88050:	e0bff917 	ldw	r2,-28(fp)
   88054:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   88058:	e0bff917 	ldw	r2,-28(fp)
   8805c:	1007883a 	mov	r3,r2
   88060:	e0bffd17 	ldw	r2,-12(fp)
   88064:	1885883a 	add	r2,r3,r2
   88068:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   8806c:	e0bff717 	ldw	r2,-36(fp)
   88070:	10800044 	addi	r2,r2,1
   88074:	e0bff715 	stw	r2,-36(fp)
   88078:	e0bffc17 	ldw	r2,-16(fp)
   8807c:	10ffffc4 	addi	r3,r2,-1
   88080:	e0bff717 	ldw	r2,-36(fp)
   88084:	10ffef36 	bltu	r2,r3,88044 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   88088:	e0bff817 	ldw	r2,-32(fp)
   8808c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   88090:	e0fffa17 	ldw	r3,-24(fp)
   88094:	e0bffb17 	ldw	r2,-20(fp)
   88098:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   8809c:	e0fffa17 	ldw	r3,-24(fp)
   880a0:	e0bffb17 	ldw	r2,-20(fp)
   880a4:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   880a8:	e0fffa17 	ldw	r3,-24(fp)
   880ac:	e0bffc17 	ldw	r2,-16(fp)
   880b0:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
   880b4:	e0fffa17 	ldw	r3,-24(fp)
   880b8:	e0bffc17 	ldw	r2,-16(fp)
   880bc:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   880c0:	e0fffa17 	ldw	r3,-24(fp)
   880c4:	e0bffd17 	ldw	r2,-12(fp)
   880c8:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
   880cc:	e0bffe17 	ldw	r2,-8(fp)
   880d0:	10000005 	stb	zero,0(r2)
    return (pmem);
   880d4:	e0bffa17 	ldw	r2,-24(fp)
   880d8:	e0bfff15 	stw	r2,-4(fp)
   880dc:	e0bfff17 	ldw	r2,-4(fp)
}
   880e0:	e037883a 	mov	sp,fp
   880e4:	df000017 	ldw	fp,0(sp)
   880e8:	dec00104 	addi	sp,sp,4
   880ec:	f800283a 	ret

000880f0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   880f0:	defff704 	addi	sp,sp,-36
   880f4:	df000815 	stw	fp,32(sp)
   880f8:	df000804 	addi	fp,sp,32
   880fc:	e13ffd15 	stw	r4,-12(fp)
   88100:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   88104:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   88108:	e0bffe17 	ldw	r2,-8(fp)
   8810c:	1004c03a 	cmpne	r2,r2,zero
   88110:	1000021e 	bne	r2,zero,8811c <OSMemGet+0x2c>
        return ((void *)0);
   88114:	e03fff15 	stw	zero,-4(fp)
   88118:	00003106 	br	881e0 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   8811c:	e0bffd17 	ldw	r2,-12(fp)
   88120:	1004c03a 	cmpne	r2,r2,zero
   88124:	1000051e 	bne	r2,zero,8813c <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   88128:	e0fffe17 	ldw	r3,-8(fp)
   8812c:	00801804 	movi	r2,96
   88130:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   88134:	e03fff15 	stw	zero,-4(fp)
   88138:	00002906 	br	881e0 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8813c:	0005303a 	rdctl	r2,status
   88140:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88144:	e0fffa17 	ldw	r3,-24(fp)
   88148:	00bfff84 	movi	r2,-2
   8814c:	1884703a 	and	r2,r3,r2
   88150:	1001703a 	wrctl	status,r2
  
  return context;
   88154:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   88158:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   8815c:	e0bffd17 	ldw	r2,-12(fp)
   88160:	10800417 	ldw	r2,16(r2)
   88164:	1005003a 	cmpeq	r2,r2,zero
   88168:	1000151e 	bne	r2,zero,881c0 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   8816c:	e0bffd17 	ldw	r2,-12(fp)
   88170:	10800117 	ldw	r2,4(r2)
   88174:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   88178:	e0bffc17 	ldw	r2,-16(fp)
   8817c:	10c00017 	ldw	r3,0(r2)
   88180:	e0bffd17 	ldw	r2,-12(fp)
   88184:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   88188:	e0bffd17 	ldw	r2,-12(fp)
   8818c:	10800417 	ldw	r2,16(r2)
   88190:	10ffffc4 	addi	r3,r2,-1
   88194:	e0bffd17 	ldw	r2,-12(fp)
   88198:	10c00415 	stw	r3,16(r2)
   8819c:	e0bffb17 	ldw	r2,-20(fp)
   881a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   881a4:	e0bff917 	ldw	r2,-28(fp)
   881a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   881ac:	e0bffe17 	ldw	r2,-8(fp)
   881b0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   881b4:	e0bffc17 	ldw	r2,-16(fp)
   881b8:	e0bfff15 	stw	r2,-4(fp)
   881bc:	00000806 	br	881e0 <OSMemGet+0xf0>
   881c0:	e0bffb17 	ldw	r2,-20(fp)
   881c4:	e0bff815 	stw	r2,-32(fp)
   881c8:	e0bff817 	ldw	r2,-32(fp)
   881cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   881d0:	e0fffe17 	ldw	r3,-8(fp)
   881d4:	00801744 	movi	r2,93
   881d8:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   881dc:	e03fff15 	stw	zero,-4(fp)
   881e0:	e0bfff17 	ldw	r2,-4(fp)
}
   881e4:	e037883a 	mov	sp,fp
   881e8:	df000017 	ldw	fp,0(sp)
   881ec:	dec00104 	addi	sp,sp,4
   881f0:	f800283a 	ret

000881f4 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   881f4:	defff604 	addi	sp,sp,-40
   881f8:	dfc00915 	stw	ra,36(sp)
   881fc:	df000815 	stw	fp,32(sp)
   88200:	df000804 	addi	fp,sp,32
   88204:	e13ffc15 	stw	r4,-16(fp)
   88208:	e17ffd15 	stw	r5,-12(fp)
   8820c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   88210:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   88214:	e0bffe17 	ldw	r2,-8(fp)
   88218:	1004c03a 	cmpne	r2,r2,zero
   8821c:	1000021e 	bne	r2,zero,88228 <OSMemNameGet+0x34>
        return (0);
   88220:	e03fff15 	stw	zero,-4(fp)
   88224:	00003006 	br	882e8 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   88228:	e0bffc17 	ldw	r2,-16(fp)
   8822c:	1004c03a 	cmpne	r2,r2,zero
   88230:	1000051e 	bne	r2,zero,88248 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   88234:	e0fffe17 	ldw	r3,-8(fp)
   88238:	00801804 	movi	r2,96
   8823c:	18800005 	stb	r2,0(r3)
        return (0);
   88240:	e03fff15 	stw	zero,-4(fp)
   88244:	00002806 	br	882e8 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   88248:	e0bffd17 	ldw	r2,-12(fp)
   8824c:	1004c03a 	cmpne	r2,r2,zero
   88250:	1000051e 	bne	r2,zero,88268 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   88254:	e0fffe17 	ldw	r3,-8(fp)
   88258:	00800304 	movi	r2,12
   8825c:	18800005 	stb	r2,0(r3)
        return (0);
   88260:	e03fff15 	stw	zero,-4(fp)
   88264:	00002006 	br	882e8 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   88268:	00800274 	movhi	r2,9
   8826c:	10886904 	addi	r2,r2,8612
   88270:	10800003 	ldbu	r2,0(r2)
   88274:	10803fcc 	andi	r2,r2,255
   88278:	1005003a 	cmpeq	r2,r2,zero
   8827c:	1000051e 	bne	r2,zero,88294 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
   88280:	e0fffe17 	ldw	r3,-8(fp)
   88284:	00800444 	movi	r2,17
   88288:	18800005 	stb	r2,0(r3)
        return (0);
   8828c:	e03fff15 	stw	zero,-4(fp)
   88290:	00001506 	br	882e8 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88294:	0005303a 	rdctl	r2,status
   88298:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8829c:	e0fff917 	ldw	r3,-28(fp)
   882a0:	00bfff84 	movi	r2,-2
   882a4:	1884703a 	and	r2,r3,r2
   882a8:	1001703a 	wrctl	status,r2
  
  return context;
   882ac:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   882b0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   882b4:	e0bffc17 	ldw	r2,-16(fp)
   882b8:	11400504 	addi	r5,r2,20
   882bc:	e13ffd17 	ldw	r4,-12(fp)
   882c0:	0085e680 	call	85e68 <OS_StrCopy>
   882c4:	e0bffb05 	stb	r2,-20(fp)
   882c8:	e0bffa17 	ldw	r2,-24(fp)
   882cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   882d0:	e0bff817 	ldw	r2,-32(fp)
   882d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   882d8:	e0bffe17 	ldw	r2,-8(fp)
   882dc:	10000005 	stb	zero,0(r2)
    return (len);
   882e0:	e0bffb03 	ldbu	r2,-20(fp)
   882e4:	e0bfff15 	stw	r2,-4(fp)
   882e8:	e0bfff17 	ldw	r2,-4(fp)
}
   882ec:	e037883a 	mov	sp,fp
   882f0:	dfc00117 	ldw	ra,4(sp)
   882f4:	df000017 	ldw	fp,0(sp)
   882f8:	dec00204 	addi	sp,sp,8
   882fc:	f800283a 	ret

00088300 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   88300:	defff604 	addi	sp,sp,-40
   88304:	dfc00915 	stw	ra,36(sp)
   88308:	df000815 	stw	fp,32(sp)
   8830c:	df000804 	addi	fp,sp,32
   88310:	e13ffd15 	stw	r4,-12(fp)
   88314:	e17ffe15 	stw	r5,-8(fp)
   88318:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8831c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   88320:	e0bfff17 	ldw	r2,-4(fp)
   88324:	1005003a 	cmpeq	r2,r2,zero
   88328:	1000381e 	bne	r2,zero,8840c <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   8832c:	e0bffd17 	ldw	r2,-12(fp)
   88330:	1004c03a 	cmpne	r2,r2,zero
   88334:	1000041e 	bne	r2,zero,88348 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   88338:	e0ffff17 	ldw	r3,-4(fp)
   8833c:	00801804 	movi	r2,96
   88340:	18800005 	stb	r2,0(r3)
        return;
   88344:	00003106 	br	8840c <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   88348:	e0bffe17 	ldw	r2,-8(fp)
   8834c:	1004c03a 	cmpne	r2,r2,zero
   88350:	1000041e 	bne	r2,zero,88364 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   88354:	e0ffff17 	ldw	r3,-4(fp)
   88358:	00800304 	movi	r2,12
   8835c:	18800005 	stb	r2,0(r3)
        return;
   88360:	00002a06 	br	8840c <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   88364:	00800274 	movhi	r2,9
   88368:	10886904 	addi	r2,r2,8612
   8836c:	10800003 	ldbu	r2,0(r2)
   88370:	10803fcc 	andi	r2,r2,255
   88374:	1005003a 	cmpeq	r2,r2,zero
   88378:	1000041e 	bne	r2,zero,8838c <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
   8837c:	e0ffff17 	ldw	r3,-4(fp)
   88380:	00800484 	movi	r2,18
   88384:	18800005 	stb	r2,0(r3)
        return;
   88388:	00002006 	br	8840c <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8838c:	0005303a 	rdctl	r2,status
   88390:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88394:	e0fffa17 	ldw	r3,-24(fp)
   88398:	00bfff84 	movi	r2,-2
   8839c:	1884703a 	and	r2,r3,r2
   883a0:	1001703a 	wrctl	status,r2
  
  return context;
   883a4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   883a8:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   883ac:	e13ffe17 	ldw	r4,-8(fp)
   883b0:	0085ee80 	call	85ee8 <OS_StrLen>
   883b4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   883b8:	e0bffc03 	ldbu	r2,-16(fp)
   883bc:	10800830 	cmpltui	r2,r2,32
   883c0:	1000081e 	bne	r2,zero,883e4 <OSMemNameSet+0xe4>
   883c4:	e0bffb17 	ldw	r2,-20(fp)
   883c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   883cc:	e0bff917 	ldw	r2,-28(fp)
   883d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   883d4:	e0ffff17 	ldw	r3,-4(fp)
   883d8:	008018c4 	movi	r2,99
   883dc:	18800005 	stb	r2,0(r3)
        return;
   883e0:	00000a06 	br	8840c <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   883e4:	e0bffd17 	ldw	r2,-12(fp)
   883e8:	11000504 	addi	r4,r2,20
   883ec:	e17ffe17 	ldw	r5,-8(fp)
   883f0:	0085e680 	call	85e68 <OS_StrCopy>
   883f4:	e0bffb17 	ldw	r2,-20(fp)
   883f8:	e0bff815 	stw	r2,-32(fp)
   883fc:	e0bff817 	ldw	r2,-32(fp)
   88400:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   88404:	e0bfff17 	ldw	r2,-4(fp)
   88408:	10000005 	stb	zero,0(r2)
}
   8840c:	e037883a 	mov	sp,fp
   88410:	dfc00117 	ldw	ra,4(sp)
   88414:	df000017 	ldw	fp,0(sp)
   88418:	dec00204 	addi	sp,sp,8
   8841c:	f800283a 	ret

00088420 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   88420:	defff804 	addi	sp,sp,-32
   88424:	df000715 	stw	fp,28(sp)
   88428:	df000704 	addi	fp,sp,28
   8842c:	e13ffd15 	stw	r4,-12(fp)
   88430:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   88434:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   88438:	e0bffd17 	ldw	r2,-12(fp)
   8843c:	1004c03a 	cmpne	r2,r2,zero
   88440:	1000031e 	bne	r2,zero,88450 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
   88444:	00801804 	movi	r2,96
   88448:	e0bfff15 	stw	r2,-4(fp)
   8844c:	00002b06 	br	884fc <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   88450:	e0bffe17 	ldw	r2,-8(fp)
   88454:	1004c03a 	cmpne	r2,r2,zero
   88458:	1000031e 	bne	r2,zero,88468 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
   8845c:	008017c4 	movi	r2,95
   88460:	e0bfff15 	stw	r2,-4(fp)
   88464:	00002506 	br	884fc <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88468:	0005303a 	rdctl	r2,status
   8846c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88470:	e0fffb17 	ldw	r3,-20(fp)
   88474:	00bfff84 	movi	r2,-2
   88478:	1884703a 	and	r2,r3,r2
   8847c:	1001703a 	wrctl	status,r2
  
  return context;
   88480:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   88484:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   88488:	e0bffd17 	ldw	r2,-12(fp)
   8848c:	10c00417 	ldw	r3,16(r2)
   88490:	e0bffd17 	ldw	r2,-12(fp)
   88494:	10800317 	ldw	r2,12(r2)
   88498:	18800736 	bltu	r3,r2,884b8 <OSMemPut+0x98>
   8849c:	e0bffc17 	ldw	r2,-16(fp)
   884a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   884a4:	e0bffa17 	ldw	r2,-24(fp)
   884a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   884ac:	00801784 	movi	r2,94
   884b0:	e0bfff15 	stw	r2,-4(fp)
   884b4:	00001106 	br	884fc <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   884b8:	e0fffe17 	ldw	r3,-8(fp)
   884bc:	e0bffd17 	ldw	r2,-12(fp)
   884c0:	10800117 	ldw	r2,4(r2)
   884c4:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
   884c8:	e0fffd17 	ldw	r3,-12(fp)
   884cc:	e0bffe17 	ldw	r2,-8(fp)
   884d0:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   884d4:	e0bffd17 	ldw	r2,-12(fp)
   884d8:	10800417 	ldw	r2,16(r2)
   884dc:	10c00044 	addi	r3,r2,1
   884e0:	e0bffd17 	ldw	r2,-12(fp)
   884e4:	10c00415 	stw	r3,16(r2)
   884e8:	e0bffc17 	ldw	r2,-16(fp)
   884ec:	e0bff915 	stw	r2,-28(fp)
   884f0:	e0bff917 	ldw	r2,-28(fp)
   884f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   884f8:	e03fff15 	stw	zero,-4(fp)
   884fc:	e0bfff17 	ldw	r2,-4(fp)
}
   88500:	e037883a 	mov	sp,fp
   88504:	df000017 	ldw	fp,0(sp)
   88508:	dec00104 	addi	sp,sp,4
   8850c:	f800283a 	ret

00088510 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   88510:	defff904 	addi	sp,sp,-28
   88514:	df000615 	stw	fp,24(sp)
   88518:	df000604 	addi	fp,sp,24
   8851c:	e13ffd15 	stw	r4,-12(fp)
   88520:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   88524:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   88528:	e0bffd17 	ldw	r2,-12(fp)
   8852c:	1004c03a 	cmpne	r2,r2,zero
   88530:	1000031e 	bne	r2,zero,88540 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
   88534:	00801804 	movi	r2,96
   88538:	e0bfff15 	stw	r2,-4(fp)
   8853c:	00002e06 	br	885f8 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   88540:	e0bffe17 	ldw	r2,-8(fp)
   88544:	1004c03a 	cmpne	r2,r2,zero
   88548:	1000031e 	bne	r2,zero,88558 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
   8854c:	00801844 	movi	r2,97
   88550:	e0bfff15 	stw	r2,-4(fp)
   88554:	00002806 	br	885f8 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88558:	0005303a 	rdctl	r2,status
   8855c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88560:	e0fffb17 	ldw	r3,-20(fp)
   88564:	00bfff84 	movi	r2,-2
   88568:	1884703a 	and	r2,r3,r2
   8856c:	1001703a 	wrctl	status,r2
  
  return context;
   88570:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   88574:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   88578:	e0bffd17 	ldw	r2,-12(fp)
   8857c:	10c00017 	ldw	r3,0(r2)
   88580:	e0bffe17 	ldw	r2,-8(fp)
   88584:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   88588:	e0bffd17 	ldw	r2,-12(fp)
   8858c:	10c00117 	ldw	r3,4(r2)
   88590:	e0bffe17 	ldw	r2,-8(fp)
   88594:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   88598:	e0bffd17 	ldw	r2,-12(fp)
   8859c:	10c00217 	ldw	r3,8(r2)
   885a0:	e0bffe17 	ldw	r2,-8(fp)
   885a4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   885a8:	e0bffd17 	ldw	r2,-12(fp)
   885ac:	10c00317 	ldw	r3,12(r2)
   885b0:	e0bffe17 	ldw	r2,-8(fp)
   885b4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   885b8:	e0bffd17 	ldw	r2,-12(fp)
   885bc:	10c00417 	ldw	r3,16(r2)
   885c0:	e0bffe17 	ldw	r2,-8(fp)
   885c4:	10c00415 	stw	r3,16(r2)
   885c8:	e0bffc17 	ldw	r2,-16(fp)
   885cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   885d0:	e0bffa17 	ldw	r2,-24(fp)
   885d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   885d8:	e0bffe17 	ldw	r2,-8(fp)
   885dc:	10c00317 	ldw	r3,12(r2)
   885e0:	e0bffe17 	ldw	r2,-8(fp)
   885e4:	10800417 	ldw	r2,16(r2)
   885e8:	1887c83a 	sub	r3,r3,r2
   885ec:	e0bffe17 	ldw	r2,-8(fp)
   885f0:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   885f4:	e03fff15 	stw	zero,-4(fp)
   885f8:	e0bfff17 	ldw	r2,-4(fp)
}
   885fc:	e037883a 	mov	sp,fp
   88600:	df000017 	ldw	fp,0(sp)
   88604:	dec00104 	addi	sp,sp,4
   88608:	f800283a 	ret

0008860c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   8860c:	defffc04 	addi	sp,sp,-16
   88610:	dfc00315 	stw	ra,12(sp)
   88614:	df000215 	stw	fp,8(sp)
   88618:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   8861c:	01000274 	movhi	r4,9
   88620:	21196804 	addi	r4,r4,26016
   88624:	01430c04 	movi	r5,3120
   88628:	0085c640 	call	85c64 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   8862c:	00800274 	movhi	r2,9
   88630:	10996804 	addi	r2,r2,26016
   88634:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   88638:	e03ffe0d 	sth	zero,-8(fp)
   8863c:	00001406 	br	88690 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   88640:	e13ffe0b 	ldhu	r4,-8(fp)
   88644:	01400d04 	movi	r5,52
   88648:	00837500 	call	83750 <__mulsi3>
   8864c:	1007883a 	mov	r3,r2
   88650:	00800274 	movhi	r2,9
   88654:	10997504 	addi	r2,r2,26068
   88658:	1887883a 	add	r3,r3,r2
   8865c:	e0bfff17 	ldw	r2,-4(fp)
   88660:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   88664:	e0ffff17 	ldw	r3,-4(fp)
   88668:	00800fc4 	movi	r2,63
   8866c:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   88670:	e0bfff17 	ldw	r2,-4(fp)
   88674:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   88678:	e0bfff17 	ldw	r2,-4(fp)
   8867c:	10800d04 	addi	r2,r2,52
   88680:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   88684:	e0bffe0b 	ldhu	r2,-8(fp)
   88688:	10800044 	addi	r2,r2,1
   8868c:	e0bffe0d 	sth	r2,-8(fp)
   88690:	e0bffe0b 	ldhu	r2,-8(fp)
   88694:	10800ef0 	cmpltui	r2,r2,59
   88698:	103fe91e 	bne	r2,zero,88640 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   8869c:	e0bfff17 	ldw	r2,-4(fp)
   886a0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   886a4:	e0ffff17 	ldw	r3,-4(fp)
   886a8:	00800fc4 	movi	r2,63
   886ac:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   886b0:	e0bfff17 	ldw	r2,-4(fp)
   886b4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   886b8:	00c00274 	movhi	r3,9
   886bc:	18c86404 	addi	r3,r3,8592
   886c0:	00800274 	movhi	r2,9
   886c4:	10996804 	addi	r2,r2,26016
   886c8:	18800015 	stw	r2,0(r3)
#endif
}
   886cc:	e037883a 	mov	sp,fp
   886d0:	dfc00117 	ldw	ra,4(sp)
   886d4:	df000017 	ldw	fp,0(sp)
   886d8:	dec00204 	addi	sp,sp,8
   886dc:	f800283a 	ret

000886e0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   886e0:	defff704 	addi	sp,sp,-36
   886e4:	df000815 	stw	fp,32(sp)
   886e8:	df000804 	addi	fp,sp,32
   886ec:	e13ffd15 	stw	r4,-12(fp)
   886f0:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   886f4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   886f8:	e0bffe17 	ldw	r2,-8(fp)
   886fc:	1004c03a 	cmpne	r2,r2,zero
   88700:	1000021e 	bne	r2,zero,8870c <OSQAccept+0x2c>
        return ((void *)0);
   88704:	e03fff15 	stw	zero,-4(fp)
   88708:	00004506 	br	88820 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   8870c:	e0bffd17 	ldw	r2,-12(fp)
   88710:	1004c03a 	cmpne	r2,r2,zero
   88714:	1000051e 	bne	r2,zero,8872c <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   88718:	e0fffe17 	ldw	r3,-8(fp)
   8871c:	00800104 	movi	r2,4
   88720:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   88724:	e03fff15 	stw	zero,-4(fp)
   88728:	00003d06 	br	88820 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   8872c:	e0bffd17 	ldw	r2,-12(fp)
   88730:	10800003 	ldbu	r2,0(r2)
   88734:	10803fcc 	andi	r2,r2,255
   88738:	108000a0 	cmpeqi	r2,r2,2
   8873c:	1000051e 	bne	r2,zero,88754 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   88740:	e0fffe17 	ldw	r3,-8(fp)
   88744:	00800044 	movi	r2,1
   88748:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   8874c:	e03fff15 	stw	zero,-4(fp)
   88750:	00003306 	br	88820 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88754:	0005303a 	rdctl	r2,status
   88758:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8875c:	e0fff917 	ldw	r3,-28(fp)
   88760:	00bfff84 	movi	r2,-2
   88764:	1884703a 	and	r2,r3,r2
   88768:	1001703a 	wrctl	status,r2
  
  return context;
   8876c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   88770:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   88774:	e0bffd17 	ldw	r2,-12(fp)
   88778:	10800117 	ldw	r2,4(r2)
   8877c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   88780:	e0bffb17 	ldw	r2,-20(fp)
   88784:	1080058b 	ldhu	r2,22(r2)
   88788:	10bfffcc 	andi	r2,r2,65535
   8878c:	1005003a 	cmpeq	r2,r2,zero
   88790:	1000191e 	bne	r2,zero,887f8 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   88794:	e0bffb17 	ldw	r2,-20(fp)
   88798:	10c00417 	ldw	r3,16(r2)
   8879c:	18800017 	ldw	r2,0(r3)
   887a0:	e0bffc15 	stw	r2,-16(fp)
   887a4:	18c00104 	addi	r3,r3,4
   887a8:	e0bffb17 	ldw	r2,-20(fp)
   887ac:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   887b0:	e0bffb17 	ldw	r2,-20(fp)
   887b4:	1080058b 	ldhu	r2,22(r2)
   887b8:	10bfffc4 	addi	r2,r2,-1
   887bc:	1007883a 	mov	r3,r2
   887c0:	e0bffb17 	ldw	r2,-20(fp)
   887c4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   887c8:	e0bffb17 	ldw	r2,-20(fp)
   887cc:	10c00417 	ldw	r3,16(r2)
   887d0:	e0bffb17 	ldw	r2,-20(fp)
   887d4:	10800217 	ldw	r2,8(r2)
   887d8:	1880041e 	bne	r3,r2,887ec <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
   887dc:	e0bffb17 	ldw	r2,-20(fp)
   887e0:	10c00117 	ldw	r3,4(r2)
   887e4:	e0bffb17 	ldw	r2,-20(fp)
   887e8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   887ec:	e0bffe17 	ldw	r2,-8(fp)
   887f0:	10000005 	stb	zero,0(r2)
   887f4:	00000406 	br	88808 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   887f8:	e0fffe17 	ldw	r3,-8(fp)
   887fc:	008007c4 	movi	r2,31
   88800:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   88804:	e03ffc15 	stw	zero,-16(fp)
   88808:	e0bffa17 	ldw	r2,-24(fp)
   8880c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88810:	e0bff817 	ldw	r2,-32(fp)
   88814:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   88818:	e0bffc17 	ldw	r2,-16(fp)
   8881c:	e0bfff15 	stw	r2,-4(fp)
   88820:	e0bfff17 	ldw	r2,-4(fp)
}
   88824:	e037883a 	mov	sp,fp
   88828:	df000017 	ldw	fp,0(sp)
   8882c:	dec00104 	addi	sp,sp,4
   88830:	f800283a 	ret

00088834 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   88834:	defff304 	addi	sp,sp,-52
   88838:	dfc00c15 	stw	ra,48(sp)
   8883c:	df000b15 	stw	fp,44(sp)
   88840:	df000b04 	addi	fp,sp,44
   88844:	e13ffd15 	stw	r4,-12(fp)
   88848:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8884c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   88850:	00800274 	movhi	r2,9
   88854:	10886904 	addi	r2,r2,8612
   88858:	10800003 	ldbu	r2,0(r2)
   8885c:	10803fcc 	andi	r2,r2,255
   88860:	1005003a 	cmpeq	r2,r2,zero
   88864:	1000021e 	bne	r2,zero,88870 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   88868:	e03fff15 	stw	zero,-4(fp)
   8886c:	00007006 	br	88a30 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88870:	0005303a 	rdctl	r2,status
   88874:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88878:	e0fff917 	ldw	r3,-28(fp)
   8887c:	00bfff84 	movi	r2,-2
   88880:	1884703a 	and	r2,r3,r2
   88884:	1001703a 	wrctl	status,r2
  
  return context;
   88888:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   8888c:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   88890:	00800274 	movhi	r2,9
   88894:	10886804 	addi	r2,r2,8608
   88898:	10800017 	ldw	r2,0(r2)
   8889c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   888a0:	00800274 	movhi	r2,9
   888a4:	10886804 	addi	r2,r2,8608
   888a8:	10800017 	ldw	r2,0(r2)
   888ac:	1005003a 	cmpeq	r2,r2,zero
   888b0:	1000081e 	bne	r2,zero,888d4 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   888b4:	00800274 	movhi	r2,9
   888b8:	10886804 	addi	r2,r2,8608
   888bc:	10800017 	ldw	r2,0(r2)
   888c0:	10800117 	ldw	r2,4(r2)
   888c4:	1007883a 	mov	r3,r2
   888c8:	00800274 	movhi	r2,9
   888cc:	10886804 	addi	r2,r2,8608
   888d0:	10c00015 	stw	r3,0(r2)
   888d4:	e0bffa17 	ldw	r2,-24(fp)
   888d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   888dc:	e0bff817 	ldw	r2,-32(fp)
   888e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   888e4:	e0bffc17 	ldw	r2,-16(fp)
   888e8:	1005003a 	cmpeq	r2,r2,zero
   888ec:	10004e1e 	bne	r2,zero,88a28 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   888f0:	0005303a 	rdctl	r2,status
   888f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   888f8:	e0fff717 	ldw	r3,-36(fp)
   888fc:	00bfff84 	movi	r2,-2
   88900:	1884703a 	and	r2,r3,r2
   88904:	1001703a 	wrctl	status,r2
  
  return context;
   88908:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
   8890c:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   88910:	00800274 	movhi	r2,9
   88914:	10886604 	addi	r2,r2,8600
   88918:	10800017 	ldw	r2,0(r2)
   8891c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   88920:	e0bffb17 	ldw	r2,-20(fp)
   88924:	1005003a 	cmpeq	r2,r2,zero
   88928:	1000311e 	bne	r2,zero,889f0 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   8892c:	00800274 	movhi	r2,9
   88930:	10886604 	addi	r2,r2,8600
   88934:	10800017 	ldw	r2,0(r2)
   88938:	10c00017 	ldw	r3,0(r2)
   8893c:	00800274 	movhi	r2,9
   88940:	10886604 	addi	r2,r2,8600
   88944:	10c00015 	stw	r3,0(r2)
   88948:	e0bffa17 	ldw	r2,-24(fp)
   8894c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88950:	e0bff617 	ldw	r2,-40(fp)
   88954:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   88958:	e0fffb17 	ldw	r3,-20(fp)
   8895c:	e0bffd17 	ldw	r2,-12(fp)
   88960:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
   88964:	e0bffe0b 	ldhu	r2,-8(fp)
   88968:	1085883a 	add	r2,r2,r2
   8896c:	1085883a 	add	r2,r2,r2
   88970:	1007883a 	mov	r3,r2
   88974:	e0bffd17 	ldw	r2,-12(fp)
   88978:	1887883a 	add	r3,r3,r2
   8897c:	e0bffb17 	ldw	r2,-20(fp)
   88980:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   88984:	e0fffb17 	ldw	r3,-20(fp)
   88988:	e0bffd17 	ldw	r2,-12(fp)
   8898c:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
   88990:	e0fffb17 	ldw	r3,-20(fp)
   88994:	e0bffd17 	ldw	r2,-12(fp)
   88998:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
   8899c:	e0fffb17 	ldw	r3,-20(fp)
   889a0:	e0bffe0b 	ldhu	r2,-8(fp)
   889a4:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
   889a8:	e0bffb17 	ldw	r2,-20(fp)
   889ac:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   889b0:	e0fffc17 	ldw	r3,-16(fp)
   889b4:	00800084 	movi	r2,2
   889b8:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
   889bc:	e0bffc17 	ldw	r2,-16(fp)
   889c0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   889c4:	e0fffc17 	ldw	r3,-16(fp)
   889c8:	e0bffb17 	ldw	r2,-20(fp)
   889cc:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   889d0:	e0fffc17 	ldw	r3,-16(fp)
   889d4:	00800fc4 	movi	r2,63
   889d8:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   889dc:	e0bffc17 	ldw	r2,-16(fp)
   889e0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   889e4:	e13ffc17 	ldw	r4,-16(fp)
   889e8:	00858980 	call	85898 <OS_EventWaitListInit>
   889ec:	00000e06 	br	88a28 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   889f0:	00800274 	movhi	r2,9
   889f4:	10886804 	addi	r2,r2,8608
   889f8:	10c00017 	ldw	r3,0(r2)
   889fc:	e0bffc17 	ldw	r2,-16(fp)
   88a00:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   88a04:	00c00274 	movhi	r3,9
   88a08:	18c86804 	addi	r3,r3,8608
   88a0c:	e0bffc17 	ldw	r2,-16(fp)
   88a10:	18800015 	stw	r2,0(r3)
   88a14:	e0bffa17 	ldw	r2,-24(fp)
   88a18:	e0bff515 	stw	r2,-44(fp)
   88a1c:	e0bff517 	ldw	r2,-44(fp)
   88a20:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   88a24:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
   88a28:	e0bffc17 	ldw	r2,-16(fp)
   88a2c:	e0bfff15 	stw	r2,-4(fp)
   88a30:	e0bfff17 	ldw	r2,-4(fp)
}
   88a34:	e037883a 	mov	sp,fp
   88a38:	dfc00117 	ldw	ra,4(sp)
   88a3c:	df000017 	ldw	fp,0(sp)
   88a40:	dec00204 	addi	sp,sp,8
   88a44:	f800283a 	ret

00088a48 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   88a48:	defff004 	addi	sp,sp,-64
   88a4c:	dfc00f15 	stw	ra,60(sp)
   88a50:	df000e15 	stw	fp,56(sp)
   88a54:	df000e04 	addi	fp,sp,56
   88a58:	e13ffb15 	stw	r4,-20(fp)
   88a5c:	e1bffd15 	stw	r6,-12(fp)
   88a60:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   88a64:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   88a68:	e0bffd17 	ldw	r2,-12(fp)
   88a6c:	1004c03a 	cmpne	r2,r2,zero
   88a70:	1000031e 	bne	r2,zero,88a80 <OSQDel+0x38>
        return (pevent);
   88a74:	e0bffb17 	ldw	r2,-20(fp)
   88a78:	e0bfff15 	stw	r2,-4(fp)
   88a7c:	0000ac06 	br	88d30 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   88a80:	e0bffb17 	ldw	r2,-20(fp)
   88a84:	1004c03a 	cmpne	r2,r2,zero
   88a88:	1000061e 	bne	r2,zero,88aa4 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   88a8c:	e0fffd17 	ldw	r3,-12(fp)
   88a90:	00800104 	movi	r2,4
   88a94:	18800005 	stb	r2,0(r3)
        return (pevent);
   88a98:	e0fffb17 	ldw	r3,-20(fp)
   88a9c:	e0ffff15 	stw	r3,-4(fp)
   88aa0:	0000a306 	br	88d30 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   88aa4:	e0bffb17 	ldw	r2,-20(fp)
   88aa8:	10800003 	ldbu	r2,0(r2)
   88aac:	10803fcc 	andi	r2,r2,255
   88ab0:	108000a0 	cmpeqi	r2,r2,2
   88ab4:	1000061e 	bne	r2,zero,88ad0 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   88ab8:	e0fffd17 	ldw	r3,-12(fp)
   88abc:	00800044 	movi	r2,1
   88ac0:	18800005 	stb	r2,0(r3)
        return (pevent);
   88ac4:	e0bffb17 	ldw	r2,-20(fp)
   88ac8:	e0bfff15 	stw	r2,-4(fp)
   88acc:	00009806 	br	88d30 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   88ad0:	00800274 	movhi	r2,9
   88ad4:	10886904 	addi	r2,r2,8612
   88ad8:	10800003 	ldbu	r2,0(r2)
   88adc:	10803fcc 	andi	r2,r2,255
   88ae0:	1005003a 	cmpeq	r2,r2,zero
   88ae4:	1000061e 	bne	r2,zero,88b00 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   88ae8:	e0fffd17 	ldw	r3,-12(fp)
   88aec:	008003c4 	movi	r2,15
   88af0:	18800005 	stb	r2,0(r3)
        return (pevent);
   88af4:	e0fffb17 	ldw	r3,-20(fp)
   88af8:	e0ffff15 	stw	r3,-4(fp)
   88afc:	00008c06 	br	88d30 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88b00:	0005303a 	rdctl	r2,status
   88b04:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88b08:	e0fff617 	ldw	r3,-40(fp)
   88b0c:	00bfff84 	movi	r2,-2
   88b10:	1884703a 	and	r2,r3,r2
   88b14:	1001703a 	wrctl	status,r2
  
  return context;
   88b18:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
   88b1c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   88b20:	e0bffb17 	ldw	r2,-20(fp)
   88b24:	10800283 	ldbu	r2,10(r2)
   88b28:	10803fcc 	andi	r2,r2,255
   88b2c:	1005003a 	cmpeq	r2,r2,zero
   88b30:	1000031e 	bne	r2,zero,88b40 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   88b34:	00800044 	movi	r2,1
   88b38:	e0bffa05 	stb	r2,-24(fp)
   88b3c:	00000106 	br	88b44 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   88b40:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   88b44:	e0bffc03 	ldbu	r2,-16(fp)
   88b48:	e0bffe15 	stw	r2,-8(fp)
   88b4c:	e0fffe17 	ldw	r3,-8(fp)
   88b50:	1805003a 	cmpeq	r2,r3,zero
   88b54:	1000041e 	bne	r2,zero,88b68 <OSQDel+0x120>
   88b58:	e0fffe17 	ldw	r3,-8(fp)
   88b5c:	18800060 	cmpeqi	r2,r3,1
   88b60:	1000391e 	bne	r2,zero,88c48 <OSQDel+0x200>
   88b64:	00006706 	br	88d04 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   88b68:	e0bffa03 	ldbu	r2,-24(fp)
   88b6c:	1004c03a 	cmpne	r2,r2,zero
   88b70:	1000261e 	bne	r2,zero,88c0c <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   88b74:	e0fffb17 	ldw	r3,-20(fp)
   88b78:	00800fc4 	movi	r2,63
   88b7c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   88b80:	e0bffb17 	ldw	r2,-20(fp)
   88b84:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   88b88:	e0bffb17 	ldw	r2,-20(fp)
   88b8c:	10800117 	ldw	r2,4(r2)
   88b90:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   88b94:	00800274 	movhi	r2,9
   88b98:	10886604 	addi	r2,r2,8600
   88b9c:	10c00017 	ldw	r3,0(r2)
   88ba0:	e0bff817 	ldw	r2,-32(fp)
   88ba4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   88ba8:	00c00274 	movhi	r3,9
   88bac:	18c86604 	addi	r3,r3,8600
   88bb0:	e0bff817 	ldw	r2,-32(fp)
   88bb4:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   88bb8:	e0bffb17 	ldw	r2,-20(fp)
   88bbc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   88bc0:	00800274 	movhi	r2,9
   88bc4:	10886804 	addi	r2,r2,8608
   88bc8:	10c00017 	ldw	r3,0(r2)
   88bcc:	e0bffb17 	ldw	r2,-20(fp)
   88bd0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   88bd4:	e0bffb17 	ldw	r2,-20(fp)
   88bd8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   88bdc:	00c00274 	movhi	r3,9
   88be0:	18c86804 	addi	r3,r3,8608
   88be4:	e0bffb17 	ldw	r2,-20(fp)
   88be8:	18800015 	stw	r2,0(r3)
   88bec:	e0bff717 	ldw	r2,-36(fp)
   88bf0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88bf4:	e0bff517 	ldw	r2,-44(fp)
   88bf8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   88bfc:	e0bffd17 	ldw	r2,-12(fp)
   88c00:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   88c04:	e03ff915 	stw	zero,-28(fp)
   88c08:	00004706 	br	88d28 <OSQDel+0x2e0>
   88c0c:	e0bff717 	ldw	r2,-36(fp)
   88c10:	e0bff415 	stw	r2,-48(fp)
   88c14:	e0bff417 	ldw	r2,-48(fp)
   88c18:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   88c1c:	e0fffd17 	ldw	r3,-12(fp)
   88c20:	00801244 	movi	r2,73
   88c24:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   88c28:	e0bffb17 	ldw	r2,-20(fp)
   88c2c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   88c30:	00003d06 	br	88d28 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   88c34:	e13ffb17 	ldw	r4,-20(fp)
   88c38:	000b883a 	mov	r5,zero
   88c3c:	01800104 	movi	r6,4
   88c40:	000f883a 	mov	r7,zero
   88c44:	00852e40 	call	852e4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   88c48:	e0bffb17 	ldw	r2,-20(fp)
   88c4c:	10800283 	ldbu	r2,10(r2)
   88c50:	10803fcc 	andi	r2,r2,255
   88c54:	1004c03a 	cmpne	r2,r2,zero
   88c58:	103ff61e 	bne	r2,zero,88c34 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   88c5c:	e0fffb17 	ldw	r3,-20(fp)
   88c60:	00800fc4 	movi	r2,63
   88c64:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   88c68:	e0bffb17 	ldw	r2,-20(fp)
   88c6c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   88c70:	e0bffb17 	ldw	r2,-20(fp)
   88c74:	10800117 	ldw	r2,4(r2)
   88c78:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   88c7c:	00800274 	movhi	r2,9
   88c80:	10886604 	addi	r2,r2,8600
   88c84:	10c00017 	ldw	r3,0(r2)
   88c88:	e0bff817 	ldw	r2,-32(fp)
   88c8c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   88c90:	00c00274 	movhi	r3,9
   88c94:	18c86604 	addi	r3,r3,8600
   88c98:	e0bff817 	ldw	r2,-32(fp)
   88c9c:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   88ca0:	e0bffb17 	ldw	r2,-20(fp)
   88ca4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   88ca8:	00800274 	movhi	r2,9
   88cac:	10886804 	addi	r2,r2,8608
   88cb0:	10c00017 	ldw	r3,0(r2)
   88cb4:	e0bffb17 	ldw	r2,-20(fp)
   88cb8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   88cbc:	e0bffb17 	ldw	r2,-20(fp)
   88cc0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   88cc4:	00c00274 	movhi	r3,9
   88cc8:	18c86804 	addi	r3,r3,8608
   88ccc:	e0bffb17 	ldw	r2,-20(fp)
   88cd0:	18800015 	stw	r2,0(r3)
   88cd4:	e0bff717 	ldw	r2,-36(fp)
   88cd8:	e0bff315 	stw	r2,-52(fp)
   88cdc:	e0bff317 	ldw	r2,-52(fp)
   88ce0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   88ce4:	e0bffa03 	ldbu	r2,-24(fp)
   88ce8:	10800058 	cmpnei	r2,r2,1
   88cec:	1000011e 	bne	r2,zero,88cf4 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   88cf0:	0085d240 	call	85d24 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   88cf4:	e0bffd17 	ldw	r2,-12(fp)
   88cf8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   88cfc:	e03ff915 	stw	zero,-28(fp)
             break;
   88d00:	00000906 	br	88d28 <OSQDel+0x2e0>
   88d04:	e0bff717 	ldw	r2,-36(fp)
   88d08:	e0bff215 	stw	r2,-56(fp)
   88d0c:	e0bff217 	ldw	r2,-56(fp)
   88d10:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   88d14:	e0fffd17 	ldw	r3,-12(fp)
   88d18:	008001c4 	movi	r2,7
   88d1c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   88d20:	e0bffb17 	ldw	r2,-20(fp)
   88d24:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   88d28:	e0bff917 	ldw	r2,-28(fp)
   88d2c:	e0bfff15 	stw	r2,-4(fp)
   88d30:	e0bfff17 	ldw	r2,-4(fp)
}
   88d34:	e037883a 	mov	sp,fp
   88d38:	dfc00117 	ldw	ra,4(sp)
   88d3c:	df000017 	ldw	fp,0(sp)
   88d40:	dec00204 	addi	sp,sp,8
   88d44:	f800283a 	ret

00088d48 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   88d48:	defff904 	addi	sp,sp,-28
   88d4c:	df000615 	stw	fp,24(sp)
   88d50:	df000604 	addi	fp,sp,24
   88d54:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   88d58:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   88d5c:	e0bffe17 	ldw	r2,-8(fp)
   88d60:	1004c03a 	cmpne	r2,r2,zero
   88d64:	1000031e 	bne	r2,zero,88d74 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
   88d68:	00800104 	movi	r2,4
   88d6c:	e0bfff15 	stw	r2,-4(fp)
   88d70:	00002206 	br	88dfc <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   88d74:	e0bffe17 	ldw	r2,-8(fp)
   88d78:	10800003 	ldbu	r2,0(r2)
   88d7c:	10803fcc 	andi	r2,r2,255
   88d80:	108000a0 	cmpeqi	r2,r2,2
   88d84:	1000031e 	bne	r2,zero,88d94 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
   88d88:	00800044 	movi	r2,1
   88d8c:	e0bfff15 	stw	r2,-4(fp)
   88d90:	00001a06 	br	88dfc <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88d94:	0005303a 	rdctl	r2,status
   88d98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88d9c:	e0fffb17 	ldw	r3,-20(fp)
   88da0:	00bfff84 	movi	r2,-2
   88da4:	1884703a 	and	r2,r3,r2
   88da8:	1001703a 	wrctl	status,r2
  
  return context;
   88dac:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   88db0:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   88db4:	e0bffe17 	ldw	r2,-8(fp)
   88db8:	10800117 	ldw	r2,4(r2)
   88dbc:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
   88dc0:	e0bffd17 	ldw	r2,-12(fp)
   88dc4:	10c00117 	ldw	r3,4(r2)
   88dc8:	e0bffd17 	ldw	r2,-12(fp)
   88dcc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   88dd0:	e0bffd17 	ldw	r2,-12(fp)
   88dd4:	10c00117 	ldw	r3,4(r2)
   88dd8:	e0bffd17 	ldw	r2,-12(fp)
   88ddc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   88de0:	e0bffd17 	ldw	r2,-12(fp)
   88de4:	1000058d 	sth	zero,22(r2)
   88de8:	e0bffc17 	ldw	r2,-16(fp)
   88dec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88df0:	e0bffa17 	ldw	r2,-24(fp)
   88df4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   88df8:	e03fff15 	stw	zero,-4(fp)
   88dfc:	e0bfff17 	ldw	r2,-4(fp)
}
   88e00:	e037883a 	mov	sp,fp
   88e04:	df000017 	ldw	fp,0(sp)
   88e08:	dec00104 	addi	sp,sp,4
   88e0c:	f800283a 	ret

00088e10 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   88e10:	defff104 	addi	sp,sp,-60
   88e14:	dfc00e15 	stw	ra,56(sp)
   88e18:	df000d15 	stw	fp,52(sp)
   88e1c:	df000d04 	addi	fp,sp,52
   88e20:	e13ffb15 	stw	r4,-20(fp)
   88e24:	e1bffd15 	stw	r6,-12(fp)
   88e28:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   88e2c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   88e30:	e0bffd17 	ldw	r2,-12(fp)
   88e34:	1004c03a 	cmpne	r2,r2,zero
   88e38:	1000021e 	bne	r2,zero,88e44 <OSQPend+0x34>
        return ((void *)0);
   88e3c:	e03fff15 	stw	zero,-4(fp)
   88e40:	0000b506 	br	89118 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   88e44:	e0bffb17 	ldw	r2,-20(fp)
   88e48:	1004c03a 	cmpne	r2,r2,zero
   88e4c:	1000051e 	bne	r2,zero,88e64 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   88e50:	e0fffd17 	ldw	r3,-12(fp)
   88e54:	00800104 	movi	r2,4
   88e58:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   88e5c:	e03fff15 	stw	zero,-4(fp)
   88e60:	0000ad06 	br	89118 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   88e64:	e0bffb17 	ldw	r2,-20(fp)
   88e68:	10800003 	ldbu	r2,0(r2)
   88e6c:	10803fcc 	andi	r2,r2,255
   88e70:	108000a0 	cmpeqi	r2,r2,2
   88e74:	1000051e 	bne	r2,zero,88e8c <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   88e78:	e0fffd17 	ldw	r3,-12(fp)
   88e7c:	00800044 	movi	r2,1
   88e80:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   88e84:	e03fff15 	stw	zero,-4(fp)
   88e88:	0000a306 	br	89118 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   88e8c:	00800274 	movhi	r2,9
   88e90:	10886904 	addi	r2,r2,8612
   88e94:	10800003 	ldbu	r2,0(r2)
   88e98:	10803fcc 	andi	r2,r2,255
   88e9c:	1005003a 	cmpeq	r2,r2,zero
   88ea0:	1000051e 	bne	r2,zero,88eb8 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   88ea4:	e0fffd17 	ldw	r3,-12(fp)
   88ea8:	00800084 	movi	r2,2
   88eac:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   88eb0:	e03fff15 	stw	zero,-4(fp)
   88eb4:	00009806 	br	89118 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   88eb8:	00800274 	movhi	r2,9
   88ebc:	10885b04 	addi	r2,r2,8556
   88ec0:	10800003 	ldbu	r2,0(r2)
   88ec4:	10803fcc 	andi	r2,r2,255
   88ec8:	1005003a 	cmpeq	r2,r2,zero
   88ecc:	1000051e 	bne	r2,zero,88ee4 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   88ed0:	e0fffd17 	ldw	r3,-12(fp)
   88ed4:	00800344 	movi	r2,13
   88ed8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   88edc:	e03fff15 	stw	zero,-4(fp)
   88ee0:	00008d06 	br	89118 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   88ee4:	0005303a 	rdctl	r2,status
   88ee8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   88eec:	e0fff717 	ldw	r3,-36(fp)
   88ef0:	00bfff84 	movi	r2,-2
   88ef4:	1884703a 	and	r2,r3,r2
   88ef8:	1001703a 	wrctl	status,r2
  
  return context;
   88efc:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   88f00:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   88f04:	e0bffb17 	ldw	r2,-20(fp)
   88f08:	10800117 	ldw	r2,4(r2)
   88f0c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   88f10:	e0bff917 	ldw	r2,-28(fp)
   88f14:	1080058b 	ldhu	r2,22(r2)
   88f18:	10bfffcc 	andi	r2,r2,65535
   88f1c:	1005003a 	cmpeq	r2,r2,zero
   88f20:	10001f1e 	bne	r2,zero,88fa0 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   88f24:	e0bff917 	ldw	r2,-28(fp)
   88f28:	10c00417 	ldw	r3,16(r2)
   88f2c:	18800017 	ldw	r2,0(r3)
   88f30:	e0bffa15 	stw	r2,-24(fp)
   88f34:	18c00104 	addi	r3,r3,4
   88f38:	e0bff917 	ldw	r2,-28(fp)
   88f3c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   88f40:	e0bff917 	ldw	r2,-28(fp)
   88f44:	1080058b 	ldhu	r2,22(r2)
   88f48:	10bfffc4 	addi	r2,r2,-1
   88f4c:	1007883a 	mov	r3,r2
   88f50:	e0bff917 	ldw	r2,-28(fp)
   88f54:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   88f58:	e0bff917 	ldw	r2,-28(fp)
   88f5c:	10c00417 	ldw	r3,16(r2)
   88f60:	e0bff917 	ldw	r2,-28(fp)
   88f64:	10800217 	ldw	r2,8(r2)
   88f68:	1880041e 	bne	r3,r2,88f7c <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
   88f6c:	e0bff917 	ldw	r2,-28(fp)
   88f70:	10c00117 	ldw	r3,4(r2)
   88f74:	e0bff917 	ldw	r2,-28(fp)
   88f78:	10c00415 	stw	r3,16(r2)
   88f7c:	e0bff817 	ldw	r2,-32(fp)
   88f80:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   88f84:	e0bff617 	ldw	r2,-40(fp)
   88f88:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   88f8c:	e0bffd17 	ldw	r2,-12(fp)
   88f90:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   88f94:	e0bffa17 	ldw	r2,-24(fp)
   88f98:	e0bfff15 	stw	r2,-4(fp)
   88f9c:	00005e06 	br	89118 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   88fa0:	00800274 	movhi	r2,9
   88fa4:	10886a04 	addi	r2,r2,8616
   88fa8:	10c00017 	ldw	r3,0(r2)
   88fac:	00800274 	movhi	r2,9
   88fb0:	10886a04 	addi	r2,r2,8616
   88fb4:	10800017 	ldw	r2,0(r2)
   88fb8:	10800c03 	ldbu	r2,48(r2)
   88fbc:	10800114 	ori	r2,r2,4
   88fc0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   88fc4:	00800274 	movhi	r2,9
   88fc8:	10886a04 	addi	r2,r2,8616
   88fcc:	10800017 	ldw	r2,0(r2)
   88fd0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   88fd4:	00800274 	movhi	r2,9
   88fd8:	10886a04 	addi	r2,r2,8616
   88fdc:	10c00017 	ldw	r3,0(r2)
   88fe0:	e0bffc0b 	ldhu	r2,-16(fp)
   88fe4:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   88fe8:	e13ffb17 	ldw	r4,-20(fp)
   88fec:	00854780 	call	85478 <OS_EventTaskWait>
   88ff0:	e0bff817 	ldw	r2,-32(fp)
   88ff4:	e0bff515 	stw	r2,-44(fp)
   88ff8:	e0bff517 	ldw	r2,-44(fp)
   88ffc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   89000:	0085d240 	call	85d24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89004:	0005303a 	rdctl	r2,status
   89008:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8900c:	e0fff417 	ldw	r3,-48(fp)
   89010:	00bfff84 	movi	r2,-2
   89014:	1884703a 	and	r2,r3,r2
   89018:	1001703a 	wrctl	status,r2
  
  return context;
   8901c:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
   89020:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   89024:	00800274 	movhi	r2,9
   89028:	10886a04 	addi	r2,r2,8616
   8902c:	10800017 	ldw	r2,0(r2)
   89030:	10800c43 	ldbu	r2,49(r2)
   89034:	10803fcc 	andi	r2,r2,255
   89038:	e0bffe15 	stw	r2,-8(fp)
   8903c:	e0fffe17 	ldw	r3,-8(fp)
   89040:	1805003a 	cmpeq	r2,r3,zero
   89044:	1000041e 	bne	r2,zero,89058 <OSQPend+0x248>
   89048:	e0fffe17 	ldw	r3,-8(fp)
   8904c:	188000a0 	cmpeqi	r2,r3,2
   89050:	1000091e 	bne	r2,zero,89078 <OSQPend+0x268>
   89054:	00000d06 	br	8908c <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   89058:	00800274 	movhi	r2,9
   8905c:	10886a04 	addi	r2,r2,8616
   89060:	10800017 	ldw	r2,0(r2)
   89064:	10800917 	ldw	r2,36(r2)
   89068:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
   8906c:	e0bffd17 	ldw	r2,-12(fp)
   89070:	10000005 	stb	zero,0(r2)
             break;
   89074:	00000e06 	br	890b0 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   89078:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   8907c:	e0fffd17 	ldw	r3,-12(fp)
   89080:	00800384 	movi	r2,14
   89084:	18800005 	stb	r2,0(r3)
             break;
   89088:	00000906 	br	890b0 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   8908c:	00800274 	movhi	r2,9
   89090:	10886a04 	addi	r2,r2,8616
   89094:	11000017 	ldw	r4,0(r2)
   89098:	e17ffb17 	ldw	r5,-20(fp)
   8909c:	00856dc0 	call	856dc <OS_EventTaskRemove>
             pmsg = (void *)0;
   890a0:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   890a4:	e0fffd17 	ldw	r3,-12(fp)
   890a8:	00800284 	movi	r2,10
   890ac:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   890b0:	00800274 	movhi	r2,9
   890b4:	10886a04 	addi	r2,r2,8616
   890b8:	10800017 	ldw	r2,0(r2)
   890bc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   890c0:	00800274 	movhi	r2,9
   890c4:	10886a04 	addi	r2,r2,8616
   890c8:	10800017 	ldw	r2,0(r2)
   890cc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   890d0:	00800274 	movhi	r2,9
   890d4:	10886a04 	addi	r2,r2,8616
   890d8:	10800017 	ldw	r2,0(r2)
   890dc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   890e0:	00800274 	movhi	r2,9
   890e4:	10886a04 	addi	r2,r2,8616
   890e8:	10800017 	ldw	r2,0(r2)
   890ec:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   890f0:	00800274 	movhi	r2,9
   890f4:	10886a04 	addi	r2,r2,8616
   890f8:	10800017 	ldw	r2,0(r2)
   890fc:	10000915 	stw	zero,36(r2)
   89100:	e0bff817 	ldw	r2,-32(fp)
   89104:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89108:	e0bff317 	ldw	r2,-52(fp)
   8910c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   89110:	e0bffa17 	ldw	r2,-24(fp)
   89114:	e0bfff15 	stw	r2,-4(fp)
   89118:	e0bfff17 	ldw	r2,-4(fp)
}
   8911c:	e037883a 	mov	sp,fp
   89120:	dfc00117 	ldw	ra,4(sp)
   89124:	df000017 	ldw	fp,0(sp)
   89128:	dec00204 	addi	sp,sp,8
   8912c:	f800283a 	ret

00089130 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   89130:	defff504 	addi	sp,sp,-44
   89134:	dfc00a15 	stw	ra,40(sp)
   89138:	df000915 	stw	fp,36(sp)
   8913c:	df000904 	addi	fp,sp,36
   89140:	e13ffc15 	stw	r4,-16(fp)
   89144:	e1bffe15 	stw	r6,-8(fp)
   89148:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8914c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   89150:	e0bffe17 	ldw	r2,-8(fp)
   89154:	1004c03a 	cmpne	r2,r2,zero
   89158:	1000021e 	bne	r2,zero,89164 <OSQPendAbort+0x34>
        return (0);
   8915c:	e03fff15 	stw	zero,-4(fp)
   89160:	00004c06 	br	89294 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   89164:	e0bffc17 	ldw	r2,-16(fp)
   89168:	1004c03a 	cmpne	r2,r2,zero
   8916c:	1000051e 	bne	r2,zero,89184 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   89170:	e0fffe17 	ldw	r3,-8(fp)
   89174:	00800104 	movi	r2,4
   89178:	18800005 	stb	r2,0(r3)
        return (0);
   8917c:	e03fff15 	stw	zero,-4(fp)
   89180:	00004406 	br	89294 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   89184:	e0bffc17 	ldw	r2,-16(fp)
   89188:	10800003 	ldbu	r2,0(r2)
   8918c:	10803fcc 	andi	r2,r2,255
   89190:	108000a0 	cmpeqi	r2,r2,2
   89194:	1000051e 	bne	r2,zero,891ac <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   89198:	e0fffe17 	ldw	r3,-8(fp)
   8919c:	00800044 	movi	r2,1
   891a0:	18800005 	stb	r2,0(r3)
        return (0);
   891a4:	e03fff15 	stw	zero,-4(fp)
   891a8:	00003a06 	br	89294 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   891ac:	0005303a 	rdctl	r2,status
   891b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   891b4:	e0fff917 	ldw	r3,-28(fp)
   891b8:	00bfff84 	movi	r2,-2
   891bc:	1884703a 	and	r2,r3,r2
   891c0:	1001703a 	wrctl	status,r2
  
  return context;
   891c4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   891c8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   891cc:	e0bffc17 	ldw	r2,-16(fp)
   891d0:	10800283 	ldbu	r2,10(r2)
   891d4:	10803fcc 	andi	r2,r2,255
   891d8:	1005003a 	cmpeq	r2,r2,zero
   891dc:	1000261e 	bne	r2,zero,89278 <OSQPendAbort+0x148>
        nbr_tasks = 0;
   891e0:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   891e4:	e0bffd03 	ldbu	r2,-12(fp)
   891e8:	10800060 	cmpeqi	r2,r2,1
   891ec:	1000091e 	bne	r2,zero,89214 <OSQPendAbort+0xe4>
   891f0:	00000e06 	br	8922c <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   891f4:	e13ffc17 	ldw	r4,-16(fp)
   891f8:	000b883a 	mov	r5,zero
   891fc:	01800104 	movi	r6,4
   89200:	01c00084 	movi	r7,2
   89204:	00852e40 	call	852e4 <OS_EventTaskRdy>
                     nbr_tasks++;
   89208:	e0bffb03 	ldbu	r2,-20(fp)
   8920c:	10800044 	addi	r2,r2,1
   89210:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   89214:	e0bffc17 	ldw	r2,-16(fp)
   89218:	10800283 	ldbu	r2,10(r2)
   8921c:	10803fcc 	andi	r2,r2,255
   89220:	1004c03a 	cmpne	r2,r2,zero
   89224:	103ff31e 	bne	r2,zero,891f4 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   89228:	00000806 	br	8924c <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   8922c:	e13ffc17 	ldw	r4,-16(fp)
   89230:	000b883a 	mov	r5,zero
   89234:	01800104 	movi	r6,4
   89238:	01c00084 	movi	r7,2
   8923c:	00852e40 	call	852e4 <OS_EventTaskRdy>
                 nbr_tasks++;
   89240:	e0bffb03 	ldbu	r2,-20(fp)
   89244:	10800044 	addi	r2,r2,1
   89248:	e0bffb05 	stb	r2,-20(fp)
   8924c:	e0bffa17 	ldw	r2,-24(fp)
   89250:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89254:	e0bff817 	ldw	r2,-32(fp)
   89258:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   8925c:	0085d240 	call	85d24 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   89260:	e0fffe17 	ldw	r3,-8(fp)
   89264:	00800384 	movi	r2,14
   89268:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   8926c:	e0bffb03 	ldbu	r2,-20(fp)
   89270:	e0bfff15 	stw	r2,-4(fp)
   89274:	00000706 	br	89294 <OSQPendAbort+0x164>
   89278:	e0bffa17 	ldw	r2,-24(fp)
   8927c:	e0bff715 	stw	r2,-36(fp)
   89280:	e0bff717 	ldw	r2,-36(fp)
   89284:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   89288:	e0bffe17 	ldw	r2,-8(fp)
   8928c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   89290:	e03fff15 	stw	zero,-4(fp)
   89294:	e0bfff17 	ldw	r2,-4(fp)
}
   89298:	e037883a 	mov	sp,fp
   8929c:	dfc00117 	ldw	ra,4(sp)
   892a0:	df000017 	ldw	fp,0(sp)
   892a4:	dec00204 	addi	sp,sp,8
   892a8:	f800283a 	ret

000892ac <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   892ac:	defff504 	addi	sp,sp,-44
   892b0:	dfc00a15 	stw	ra,40(sp)
   892b4:	df000915 	stw	fp,36(sp)
   892b8:	df000904 	addi	fp,sp,36
   892bc:	e13ffd15 	stw	r4,-12(fp)
   892c0:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   892c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   892c8:	e0bffd17 	ldw	r2,-12(fp)
   892cc:	1004c03a 	cmpne	r2,r2,zero
   892d0:	1000031e 	bne	r2,zero,892e0 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
   892d4:	00800104 	movi	r2,4
   892d8:	e0bfff15 	stw	r2,-4(fp)
   892dc:	00004d06 	br	89414 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   892e0:	e0bffd17 	ldw	r2,-12(fp)
   892e4:	10800003 	ldbu	r2,0(r2)
   892e8:	10803fcc 	andi	r2,r2,255
   892ec:	108000a0 	cmpeqi	r2,r2,2
   892f0:	1000031e 	bne	r2,zero,89300 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
   892f4:	00800044 	movi	r2,1
   892f8:	e0bfff15 	stw	r2,-4(fp)
   892fc:	00004506 	br	89414 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89300:	0005303a 	rdctl	r2,status
   89304:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89308:	e0fffa17 	ldw	r3,-24(fp)
   8930c:	00bfff84 	movi	r2,-2
   89310:	1884703a 	and	r2,r3,r2
   89314:	1001703a 	wrctl	status,r2
  
  return context;
   89318:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   8931c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   89320:	e0bffd17 	ldw	r2,-12(fp)
   89324:	10800283 	ldbu	r2,10(r2)
   89328:	10803fcc 	andi	r2,r2,255
   8932c:	1005003a 	cmpeq	r2,r2,zero
   89330:	10000c1e 	bne	r2,zero,89364 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   89334:	e13ffd17 	ldw	r4,-12(fp)
   89338:	e17ffe17 	ldw	r5,-8(fp)
   8933c:	01800104 	movi	r6,4
   89340:	000f883a 	mov	r7,zero
   89344:	00852e40 	call	852e4 <OS_EventTaskRdy>
   89348:	e0bffb17 	ldw	r2,-20(fp)
   8934c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89350:	e0bff917 	ldw	r2,-28(fp)
   89354:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   89358:	0085d240 	call	85d24 <OS_Sched>
        return (OS_ERR_NONE);
   8935c:	e03fff15 	stw	zero,-4(fp)
   89360:	00002c06 	br	89414 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   89364:	e0bffd17 	ldw	r2,-12(fp)
   89368:	10800117 	ldw	r2,4(r2)
   8936c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   89370:	e0bffc17 	ldw	r2,-16(fp)
   89374:	10c0058b 	ldhu	r3,22(r2)
   89378:	e0bffc17 	ldw	r2,-16(fp)
   8937c:	1080050b 	ldhu	r2,20(r2)
   89380:	18ffffcc 	andi	r3,r3,65535
   89384:	10bfffcc 	andi	r2,r2,65535
   89388:	18800736 	bltu	r3,r2,893a8 <OSQPost+0xfc>
   8938c:	e0bffb17 	ldw	r2,-20(fp)
   89390:	e0bff815 	stw	r2,-32(fp)
   89394:	e0bff817 	ldw	r2,-32(fp)
   89398:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   8939c:	00800784 	movi	r2,30
   893a0:	e0bfff15 	stw	r2,-4(fp)
   893a4:	00001b06 	br	89414 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   893a8:	e0bffc17 	ldw	r2,-16(fp)
   893ac:	10c00317 	ldw	r3,12(r2)
   893b0:	e0bffe17 	ldw	r2,-8(fp)
   893b4:	18800015 	stw	r2,0(r3)
   893b8:	18c00104 	addi	r3,r3,4
   893bc:	e0bffc17 	ldw	r2,-16(fp)
   893c0:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   893c4:	e0bffc17 	ldw	r2,-16(fp)
   893c8:	1080058b 	ldhu	r2,22(r2)
   893cc:	10800044 	addi	r2,r2,1
   893d0:	1007883a 	mov	r3,r2
   893d4:	e0bffc17 	ldw	r2,-16(fp)
   893d8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   893dc:	e0bffc17 	ldw	r2,-16(fp)
   893e0:	10c00317 	ldw	r3,12(r2)
   893e4:	e0bffc17 	ldw	r2,-16(fp)
   893e8:	10800217 	ldw	r2,8(r2)
   893ec:	1880041e 	bne	r3,r2,89400 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
   893f0:	e0bffc17 	ldw	r2,-16(fp)
   893f4:	10c00117 	ldw	r3,4(r2)
   893f8:	e0bffc17 	ldw	r2,-16(fp)
   893fc:	10c00315 	stw	r3,12(r2)
   89400:	e0bffb17 	ldw	r2,-20(fp)
   89404:	e0bff715 	stw	r2,-36(fp)
   89408:	e0bff717 	ldw	r2,-36(fp)
   8940c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   89410:	e03fff15 	stw	zero,-4(fp)
   89414:	e0bfff17 	ldw	r2,-4(fp)
}
   89418:	e037883a 	mov	sp,fp
   8941c:	dfc00117 	ldw	ra,4(sp)
   89420:	df000017 	ldw	fp,0(sp)
   89424:	dec00204 	addi	sp,sp,8
   89428:	f800283a 	ret

0008942c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   8942c:	defff504 	addi	sp,sp,-44
   89430:	dfc00a15 	stw	ra,40(sp)
   89434:	df000915 	stw	fp,36(sp)
   89438:	df000904 	addi	fp,sp,36
   8943c:	e13ffd15 	stw	r4,-12(fp)
   89440:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   89444:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   89448:	e0bffd17 	ldw	r2,-12(fp)
   8944c:	1004c03a 	cmpne	r2,r2,zero
   89450:	1000031e 	bne	r2,zero,89460 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
   89454:	00800104 	movi	r2,4
   89458:	e0bfff15 	stw	r2,-4(fp)
   8945c:	00004f06 	br	8959c <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   89460:	e0bffd17 	ldw	r2,-12(fp)
   89464:	10800003 	ldbu	r2,0(r2)
   89468:	10803fcc 	andi	r2,r2,255
   8946c:	108000a0 	cmpeqi	r2,r2,2
   89470:	1000031e 	bne	r2,zero,89480 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
   89474:	00800044 	movi	r2,1
   89478:	e0bfff15 	stw	r2,-4(fp)
   8947c:	00004706 	br	8959c <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89480:	0005303a 	rdctl	r2,status
   89484:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89488:	e0fffa17 	ldw	r3,-24(fp)
   8948c:	00bfff84 	movi	r2,-2
   89490:	1884703a 	and	r2,r3,r2
   89494:	1001703a 	wrctl	status,r2
  
  return context;
   89498:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   8949c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   894a0:	e0bffd17 	ldw	r2,-12(fp)
   894a4:	10800283 	ldbu	r2,10(r2)
   894a8:	10803fcc 	andi	r2,r2,255
   894ac:	1005003a 	cmpeq	r2,r2,zero
   894b0:	10000c1e 	bne	r2,zero,894e4 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   894b4:	e13ffd17 	ldw	r4,-12(fp)
   894b8:	e17ffe17 	ldw	r5,-8(fp)
   894bc:	01800104 	movi	r6,4
   894c0:	000f883a 	mov	r7,zero
   894c4:	00852e40 	call	852e4 <OS_EventTaskRdy>
   894c8:	e0bffb17 	ldw	r2,-20(fp)
   894cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   894d0:	e0bff917 	ldw	r2,-28(fp)
   894d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   894d8:	0085d240 	call	85d24 <OS_Sched>
        return (OS_ERR_NONE);
   894dc:	e03fff15 	stw	zero,-4(fp)
   894e0:	00002e06 	br	8959c <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   894e4:	e0bffd17 	ldw	r2,-12(fp)
   894e8:	10800117 	ldw	r2,4(r2)
   894ec:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   894f0:	e0bffc17 	ldw	r2,-16(fp)
   894f4:	10c0058b 	ldhu	r3,22(r2)
   894f8:	e0bffc17 	ldw	r2,-16(fp)
   894fc:	1080050b 	ldhu	r2,20(r2)
   89500:	18ffffcc 	andi	r3,r3,65535
   89504:	10bfffcc 	andi	r2,r2,65535
   89508:	18800736 	bltu	r3,r2,89528 <OSQPostFront+0xfc>
   8950c:	e0bffb17 	ldw	r2,-20(fp)
   89510:	e0bff815 	stw	r2,-32(fp)
   89514:	e0bff817 	ldw	r2,-32(fp)
   89518:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   8951c:	00800784 	movi	r2,30
   89520:	e0bfff15 	stw	r2,-4(fp)
   89524:	00001d06 	br	8959c <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   89528:	e0bffc17 	ldw	r2,-16(fp)
   8952c:	10c00417 	ldw	r3,16(r2)
   89530:	e0bffc17 	ldw	r2,-16(fp)
   89534:	10800117 	ldw	r2,4(r2)
   89538:	1880041e 	bne	r3,r2,8954c <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
   8953c:	e0bffc17 	ldw	r2,-16(fp)
   89540:	10c00217 	ldw	r3,8(r2)
   89544:	e0bffc17 	ldw	r2,-16(fp)
   89548:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   8954c:	e0bffc17 	ldw	r2,-16(fp)
   89550:	10800417 	ldw	r2,16(r2)
   89554:	10ffff04 	addi	r3,r2,-4
   89558:	e0bffc17 	ldw	r2,-16(fp)
   8955c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   89560:	e0bffc17 	ldw	r2,-16(fp)
   89564:	10c00417 	ldw	r3,16(r2)
   89568:	e0bffe17 	ldw	r2,-8(fp)
   8956c:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   89570:	e0bffc17 	ldw	r2,-16(fp)
   89574:	1080058b 	ldhu	r2,22(r2)
   89578:	10800044 	addi	r2,r2,1
   8957c:	1007883a 	mov	r3,r2
   89580:	e0bffc17 	ldw	r2,-16(fp)
   89584:	10c0058d 	sth	r3,22(r2)
   89588:	e0bffb17 	ldw	r2,-20(fp)
   8958c:	e0bff715 	stw	r2,-36(fp)
   89590:	e0bff717 	ldw	r2,-36(fp)
   89594:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   89598:	e03fff15 	stw	zero,-4(fp)
   8959c:	e0bfff17 	ldw	r2,-4(fp)
}
   895a0:	e037883a 	mov	sp,fp
   895a4:	dfc00117 	ldw	ra,4(sp)
   895a8:	df000017 	ldw	fp,0(sp)
   895ac:	dec00204 	addi	sp,sp,8
   895b0:	f800283a 	ret

000895b4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   895b4:	defff404 	addi	sp,sp,-48
   895b8:	dfc00b15 	stw	ra,44(sp)
   895bc:	df000a15 	stw	fp,40(sp)
   895c0:	df000a04 	addi	fp,sp,40
   895c4:	e13ffc15 	stw	r4,-16(fp)
   895c8:	e17ffd15 	stw	r5,-12(fp)
   895cc:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   895d0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   895d4:	e0bffc17 	ldw	r2,-16(fp)
   895d8:	1004c03a 	cmpne	r2,r2,zero
   895dc:	1000031e 	bne	r2,zero,895ec <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
   895e0:	00800104 	movi	r2,4
   895e4:	e0bfff15 	stw	r2,-4(fp)
   895e8:	00007906 	br	897d0 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   895ec:	e0bffc17 	ldw	r2,-16(fp)
   895f0:	10800003 	ldbu	r2,0(r2)
   895f4:	10803fcc 	andi	r2,r2,255
   895f8:	108000a0 	cmpeqi	r2,r2,2
   895fc:	1000031e 	bne	r2,zero,8960c <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
   89600:	00800044 	movi	r2,1
   89604:	e0bfff15 	stw	r2,-4(fp)
   89608:	00007106 	br	897d0 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8960c:	0005303a 	rdctl	r2,status
   89610:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89614:	e0fff917 	ldw	r3,-28(fp)
   89618:	00bfff84 	movi	r2,-2
   8961c:	1884703a 	and	r2,r3,r2
   89620:	1001703a 	wrctl	status,r2
  
  return context;
   89624:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   89628:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   8962c:	e0bffc17 	ldw	r2,-16(fp)
   89630:	10800283 	ldbu	r2,10(r2)
   89634:	10803fcc 	andi	r2,r2,255
   89638:	1005003a 	cmpeq	r2,r2,zero
   8963c:	1000211e 	bne	r2,zero,896c4 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   89640:	e0bffe03 	ldbu	r2,-8(fp)
   89644:	1080004c 	andi	r2,r2,1
   89648:	10803fcc 	andi	r2,r2,255
   8964c:	1005003a 	cmpeq	r2,r2,zero
   89650:	10000c1e 	bne	r2,zero,89684 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   89654:	00000506 	br	8966c <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   89658:	e13ffc17 	ldw	r4,-16(fp)
   8965c:	e17ffd17 	ldw	r5,-12(fp)
   89660:	01800104 	movi	r6,4
   89664:	000f883a 	mov	r7,zero
   89668:	00852e40 	call	852e4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   8966c:	e0bffc17 	ldw	r2,-16(fp)
   89670:	10800283 	ldbu	r2,10(r2)
   89674:	10803fcc 	andi	r2,r2,255
   89678:	1004c03a 	cmpne	r2,r2,zero
   8967c:	103ff61e 	bne	r2,zero,89658 <OSQPostOpt+0xa4>
   89680:	00000506 	br	89698 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   89684:	e13ffc17 	ldw	r4,-16(fp)
   89688:	e17ffd17 	ldw	r5,-12(fp)
   8968c:	01800104 	movi	r6,4
   89690:	000f883a 	mov	r7,zero
   89694:	00852e40 	call	852e4 <OS_EventTaskRdy>
   89698:	e0bffa17 	ldw	r2,-24(fp)
   8969c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   896a0:	e0bff817 	ldw	r2,-32(fp)
   896a4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   896a8:	e0bffe03 	ldbu	r2,-8(fp)
   896ac:	1080010c 	andi	r2,r2,4
   896b0:	1004c03a 	cmpne	r2,r2,zero
   896b4:	1000011e 	bne	r2,zero,896bc <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
   896b8:	0085d240 	call	85d24 <OS_Sched>
        }
        return (OS_ERR_NONE);
   896bc:	e03fff15 	stw	zero,-4(fp)
   896c0:	00004306 	br	897d0 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   896c4:	e0bffc17 	ldw	r2,-16(fp)
   896c8:	10800117 	ldw	r2,4(r2)
   896cc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   896d0:	e0bffb17 	ldw	r2,-20(fp)
   896d4:	10c0058b 	ldhu	r3,22(r2)
   896d8:	e0bffb17 	ldw	r2,-20(fp)
   896dc:	1080050b 	ldhu	r2,20(r2)
   896e0:	18ffffcc 	andi	r3,r3,65535
   896e4:	10bfffcc 	andi	r2,r2,65535
   896e8:	18800736 	bltu	r3,r2,89708 <OSQPostOpt+0x154>
   896ec:	e0bffa17 	ldw	r2,-24(fp)
   896f0:	e0bff715 	stw	r2,-36(fp)
   896f4:	e0bff717 	ldw	r2,-36(fp)
   896f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   896fc:	00800784 	movi	r2,30
   89700:	e0bfff15 	stw	r2,-4(fp)
   89704:	00003206 	br	897d0 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   89708:	e0bffe03 	ldbu	r2,-8(fp)
   8970c:	1080008c 	andi	r2,r2,2
   89710:	1005003a 	cmpeq	r2,r2,zero
   89714:	1000131e 	bne	r2,zero,89764 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   89718:	e0bffb17 	ldw	r2,-20(fp)
   8971c:	10c00417 	ldw	r3,16(r2)
   89720:	e0bffb17 	ldw	r2,-20(fp)
   89724:	10800117 	ldw	r2,4(r2)
   89728:	1880041e 	bne	r3,r2,8973c <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   8972c:	e0bffb17 	ldw	r2,-20(fp)
   89730:	10c00217 	ldw	r3,8(r2)
   89734:	e0bffb17 	ldw	r2,-20(fp)
   89738:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   8973c:	e0bffb17 	ldw	r2,-20(fp)
   89740:	10800417 	ldw	r2,16(r2)
   89744:	10ffff04 	addi	r3,r2,-4
   89748:	e0bffb17 	ldw	r2,-20(fp)
   8974c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   89750:	e0bffb17 	ldw	r2,-20(fp)
   89754:	10c00417 	ldw	r3,16(r2)
   89758:	e0bffd17 	ldw	r2,-12(fp)
   8975c:	18800015 	stw	r2,0(r3)
   89760:	00001006 	br	897a4 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   89764:	e0bffb17 	ldw	r2,-20(fp)
   89768:	10c00317 	ldw	r3,12(r2)
   8976c:	e0bffd17 	ldw	r2,-12(fp)
   89770:	18800015 	stw	r2,0(r3)
   89774:	18c00104 	addi	r3,r3,4
   89778:	e0bffb17 	ldw	r2,-20(fp)
   8977c:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   89780:	e0bffb17 	ldw	r2,-20(fp)
   89784:	10c00317 	ldw	r3,12(r2)
   89788:	e0bffb17 	ldw	r2,-20(fp)
   8978c:	10800217 	ldw	r2,8(r2)
   89790:	1880041e 	bne	r3,r2,897a4 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
   89794:	e0bffb17 	ldw	r2,-20(fp)
   89798:	10c00117 	ldw	r3,4(r2)
   8979c:	e0bffb17 	ldw	r2,-20(fp)
   897a0:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   897a4:	e0bffb17 	ldw	r2,-20(fp)
   897a8:	1080058b 	ldhu	r2,22(r2)
   897ac:	10800044 	addi	r2,r2,1
   897b0:	1007883a 	mov	r3,r2
   897b4:	e0bffb17 	ldw	r2,-20(fp)
   897b8:	10c0058d 	sth	r3,22(r2)
   897bc:	e0bffa17 	ldw	r2,-24(fp)
   897c0:	e0bff615 	stw	r2,-40(fp)
   897c4:	e0bff617 	ldw	r2,-40(fp)
   897c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   897cc:	e03fff15 	stw	zero,-4(fp)
   897d0:	e0bfff17 	ldw	r2,-4(fp)
}
   897d4:	e037883a 	mov	sp,fp
   897d8:	dfc00117 	ldw	ra,4(sp)
   897dc:	df000017 	ldw	fp,0(sp)
   897e0:	dec00204 	addi	sp,sp,8
   897e4:	f800283a 	ret

000897e8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   897e8:	defff504 	addi	sp,sp,-44
   897ec:	df000a15 	stw	fp,40(sp)
   897f0:	df000a04 	addi	fp,sp,40
   897f4:	e13ffd15 	stw	r4,-12(fp)
   897f8:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   897fc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   89800:	e0bffd17 	ldw	r2,-12(fp)
   89804:	1004c03a 	cmpne	r2,r2,zero
   89808:	1000031e 	bne	r2,zero,89818 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   8980c:	00800104 	movi	r2,4
   89810:	e0bfff15 	stw	r2,-4(fp)
   89814:	00004f06 	br	89954 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   89818:	e0bffe17 	ldw	r2,-8(fp)
   8981c:	1004c03a 	cmpne	r2,r2,zero
   89820:	1000031e 	bne	r2,zero,89830 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   89824:	00800244 	movi	r2,9
   89828:	e0bfff15 	stw	r2,-4(fp)
   8982c:	00004906 	br	89954 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   89830:	e0bffd17 	ldw	r2,-12(fp)
   89834:	10800003 	ldbu	r2,0(r2)
   89838:	10803fcc 	andi	r2,r2,255
   8983c:	108000a0 	cmpeqi	r2,r2,2
   89840:	1000031e 	bne	r2,zero,89850 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   89844:	00800044 	movi	r2,1
   89848:	e0bfff15 	stw	r2,-4(fp)
   8984c:	00004106 	br	89954 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89850:	0005303a 	rdctl	r2,status
   89854:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89858:	e0fff717 	ldw	r3,-36(fp)
   8985c:	00bfff84 	movi	r2,-2
   89860:	1884703a 	and	r2,r3,r2
   89864:	1001703a 	wrctl	status,r2
  
  return context;
   89868:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   8986c:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   89870:	e0bffd17 	ldw	r2,-12(fp)
   89874:	10c00283 	ldbu	r3,10(r2)
   89878:	e0bffe17 	ldw	r2,-8(fp)
   8987c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   89880:	e0bffd17 	ldw	r2,-12(fp)
   89884:	108002c4 	addi	r2,r2,11
   89888:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   8988c:	e0bffe17 	ldw	r2,-8(fp)
   89890:	10800204 	addi	r2,r2,8
   89894:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   89898:	e03ffb05 	stb	zero,-20(fp)
   8989c:	00000d06 	br	898d4 <OSQQuery+0xec>
        *pdest++ = *psrc++;
   898a0:	e0bffa17 	ldw	r2,-24(fp)
   898a4:	10c00003 	ldbu	r3,0(r2)
   898a8:	e0bff917 	ldw	r2,-28(fp)
   898ac:	10c00005 	stb	r3,0(r2)
   898b0:	e0bff917 	ldw	r2,-28(fp)
   898b4:	10800044 	addi	r2,r2,1
   898b8:	e0bff915 	stw	r2,-28(fp)
   898bc:	e0bffa17 	ldw	r2,-24(fp)
   898c0:	10800044 	addi	r2,r2,1
   898c4:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   898c8:	e0bffb03 	ldbu	r2,-20(fp)
   898cc:	10800044 	addi	r2,r2,1
   898d0:	e0bffb05 	stb	r2,-20(fp)
   898d4:	e0bffb03 	ldbu	r2,-20(fp)
   898d8:	108000f0 	cmpltui	r2,r2,3
   898dc:	103ff01e 	bne	r2,zero,898a0 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   898e0:	e0bffd17 	ldw	r2,-12(fp)
   898e4:	10800117 	ldw	r2,4(r2)
   898e8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   898ec:	e0bffc17 	ldw	r2,-16(fp)
   898f0:	1080058b 	ldhu	r2,22(r2)
   898f4:	10bfffcc 	andi	r2,r2,65535
   898f8:	1005003a 	cmpeq	r2,r2,zero
   898fc:	1000061e 	bne	r2,zero,89918 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   89900:	e0bffc17 	ldw	r2,-16(fp)
   89904:	10800417 	ldw	r2,16(r2)
   89908:	10c00017 	ldw	r3,0(r2)
   8990c:	e0bffe17 	ldw	r2,-8(fp)
   89910:	10c00015 	stw	r3,0(r2)
   89914:	00000206 	br	89920 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
   89918:	e0bffe17 	ldw	r2,-8(fp)
   8991c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   89920:	e0bffc17 	ldw	r2,-16(fp)
   89924:	10c0058b 	ldhu	r3,22(r2)
   89928:	e0bffe17 	ldw	r2,-8(fp)
   8992c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   89930:	e0bffc17 	ldw	r2,-16(fp)
   89934:	10c0050b 	ldhu	r3,20(r2)
   89938:	e0bffe17 	ldw	r2,-8(fp)
   8993c:	10c0018d 	sth	r3,6(r2)
   89940:	e0bff817 	ldw	r2,-32(fp)
   89944:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89948:	e0bff617 	ldw	r2,-40(fp)
   8994c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   89950:	e03fff15 	stw	zero,-4(fp)
   89954:	e0bfff17 	ldw	r2,-4(fp)
}
   89958:	e037883a 	mov	sp,fp
   8995c:	df000017 	ldw	fp,0(sp)
   89960:	dec00104 	addi	sp,sp,4
   89964:	f800283a 	ret

00089968 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   89968:	defffb04 	addi	sp,sp,-20
   8996c:	dfc00415 	stw	ra,16(sp)
   89970:	df000315 	stw	fp,12(sp)
   89974:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   89978:	01000274 	movhi	r4,9
   8997c:	211e7404 	addi	r4,r4,31184
   89980:	01407804 	movi	r5,480
   89984:	0085c640 	call	85c64 <OS_MemClr>
    pq1 = &OSQTbl[0];
   89988:	00800274 	movhi	r2,9
   8998c:	109e7404 	addi	r2,r2,31184
   89990:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   89994:	00800274 	movhi	r2,9
   89998:	109e7a04 	addi	r2,r2,31208
   8999c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   899a0:	e03fff0d 	sth	zero,-4(fp)
   899a4:	00000c06 	br	899d8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   899a8:	e0fffe17 	ldw	r3,-8(fp)
   899ac:	e0bffd17 	ldw	r2,-12(fp)
   899b0:	18800015 	stw	r2,0(r3)
        pq1++;
   899b4:	e0bffe17 	ldw	r2,-8(fp)
   899b8:	10800604 	addi	r2,r2,24
   899bc:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   899c0:	e0bffd17 	ldw	r2,-12(fp)
   899c4:	10800604 	addi	r2,r2,24
   899c8:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   899cc:	e0bfff0b 	ldhu	r2,-4(fp)
   899d0:	10800044 	addi	r2,r2,1
   899d4:	e0bfff0d 	sth	r2,-4(fp)
   899d8:	e0bfff0b 	ldhu	r2,-4(fp)
   899dc:	108004f0 	cmpltui	r2,r2,19
   899e0:	103ff11e 	bne	r2,zero,899a8 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   899e4:	e0bffe17 	ldw	r2,-8(fp)
   899e8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   899ec:	00c00274 	movhi	r3,9
   899f0:	18c86604 	addi	r3,r3,8600
   899f4:	00800274 	movhi	r2,9
   899f8:	109e7404 	addi	r2,r2,31184
   899fc:	18800015 	stw	r2,0(r3)
#endif
}
   89a00:	e037883a 	mov	sp,fp
   89a04:	dfc00117 	ldw	ra,4(sp)
   89a08:	df000017 	ldw	fp,0(sp)
   89a0c:	dec00204 	addi	sp,sp,8
   89a10:	f800283a 	ret

00089a14 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   89a14:	defff904 	addi	sp,sp,-28
   89a18:	df000615 	stw	fp,24(sp)
   89a1c:	df000604 	addi	fp,sp,24
   89a20:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   89a24:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   89a28:	e0bffe17 	ldw	r2,-8(fp)
   89a2c:	1004c03a 	cmpne	r2,r2,zero
   89a30:	1000021e 	bne	r2,zero,89a3c <OSSemAccept+0x28>
        return (0);
   89a34:	e03fff15 	stw	zero,-4(fp)
   89a38:	00002106 	br	89ac0 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   89a3c:	e0bffe17 	ldw	r2,-8(fp)
   89a40:	10800003 	ldbu	r2,0(r2)
   89a44:	10803fcc 	andi	r2,r2,255
   89a48:	108000e0 	cmpeqi	r2,r2,3
   89a4c:	1000021e 	bne	r2,zero,89a58 <OSSemAccept+0x44>
        return (0);
   89a50:	e03fff15 	stw	zero,-4(fp)
   89a54:	00001a06 	br	89ac0 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89a58:	0005303a 	rdctl	r2,status
   89a5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89a60:	e0fffb17 	ldw	r3,-20(fp)
   89a64:	00bfff84 	movi	r2,-2
   89a68:	1884703a 	and	r2,r3,r2
   89a6c:	1001703a 	wrctl	status,r2
  
  return context;
   89a70:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   89a74:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
   89a78:	e0bffe17 	ldw	r2,-8(fp)
   89a7c:	1080020b 	ldhu	r2,8(r2)
   89a80:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   89a84:	e0bffd0b 	ldhu	r2,-12(fp)
   89a88:	1005003a 	cmpeq	r2,r2,zero
   89a8c:	1000061e 	bne	r2,zero,89aa8 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   89a90:	e0bffe17 	ldw	r2,-8(fp)
   89a94:	1080020b 	ldhu	r2,8(r2)
   89a98:	10bfffc4 	addi	r2,r2,-1
   89a9c:	1007883a 	mov	r3,r2
   89aa0:	e0bffe17 	ldw	r2,-8(fp)
   89aa4:	10c0020d 	sth	r3,8(r2)
   89aa8:	e0bffc17 	ldw	r2,-16(fp)
   89aac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89ab0:	e0bffa17 	ldw	r2,-24(fp)
   89ab4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   89ab8:	e0bffd0b 	ldhu	r2,-12(fp)
   89abc:	e0bfff15 	stw	r2,-4(fp)
   89ac0:	e0bfff17 	ldw	r2,-4(fp)
}
   89ac4:	e037883a 	mov	sp,fp
   89ac8:	df000017 	ldw	fp,0(sp)
   89acc:	dec00104 	addi	sp,sp,4
   89ad0:	f800283a 	ret

00089ad4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   89ad4:	defff804 	addi	sp,sp,-32
   89ad8:	dfc00715 	stw	ra,28(sp)
   89adc:	df000615 	stw	fp,24(sp)
   89ae0:	df000604 	addi	fp,sp,24
   89ae4:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   89ae8:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   89aec:	00800274 	movhi	r2,9
   89af0:	10886904 	addi	r2,r2,8612
   89af4:	10800003 	ldbu	r2,0(r2)
   89af8:	10803fcc 	andi	r2,r2,255
   89afc:	1005003a 	cmpeq	r2,r2,zero
   89b00:	1000021e 	bne	r2,zero,89b0c <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   89b04:	e03fff15 	stw	zero,-4(fp)
   89b08:	00003106 	br	89bd0 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89b0c:	0005303a 	rdctl	r2,status
   89b10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89b14:	e0fffb17 	ldw	r3,-20(fp)
   89b18:	00bfff84 	movi	r2,-2
   89b1c:	1884703a 	and	r2,r3,r2
   89b20:	1001703a 	wrctl	status,r2
  
  return context;
   89b24:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   89b28:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   89b2c:	00800274 	movhi	r2,9
   89b30:	10886804 	addi	r2,r2,8608
   89b34:	10800017 	ldw	r2,0(r2)
   89b38:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   89b3c:	00800274 	movhi	r2,9
   89b40:	10886804 	addi	r2,r2,8608
   89b44:	10800017 	ldw	r2,0(r2)
   89b48:	1005003a 	cmpeq	r2,r2,zero
   89b4c:	1000081e 	bne	r2,zero,89b70 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   89b50:	00800274 	movhi	r2,9
   89b54:	10886804 	addi	r2,r2,8608
   89b58:	10800017 	ldw	r2,0(r2)
   89b5c:	10800117 	ldw	r2,4(r2)
   89b60:	1007883a 	mov	r3,r2
   89b64:	00800274 	movhi	r2,9
   89b68:	10886804 	addi	r2,r2,8608
   89b6c:	10c00015 	stw	r3,0(r2)
   89b70:	e0bffc17 	ldw	r2,-16(fp)
   89b74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89b78:	e0bffa17 	ldw	r2,-24(fp)
   89b7c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   89b80:	e0bffd17 	ldw	r2,-12(fp)
   89b84:	1005003a 	cmpeq	r2,r2,zero
   89b88:	10000f1e 	bne	r2,zero,89bc8 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   89b8c:	e0fffd17 	ldw	r3,-12(fp)
   89b90:	008000c4 	movi	r2,3
   89b94:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   89b98:	e0fffd17 	ldw	r3,-12(fp)
   89b9c:	e0bffe0b 	ldhu	r2,-8(fp)
   89ba0:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   89ba4:	e0bffd17 	ldw	r2,-12(fp)
   89ba8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   89bac:	e0fffd17 	ldw	r3,-12(fp)
   89bb0:	00800fc4 	movi	r2,63
   89bb4:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   89bb8:	e0bffd17 	ldw	r2,-12(fp)
   89bbc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   89bc0:	e13ffd17 	ldw	r4,-12(fp)
   89bc4:	00858980 	call	85898 <OS_EventWaitListInit>
    }
    return (pevent);
   89bc8:	e0bffd17 	ldw	r2,-12(fp)
   89bcc:	e0bfff15 	stw	r2,-4(fp)
   89bd0:	e0bfff17 	ldw	r2,-4(fp)
}
   89bd4:	e037883a 	mov	sp,fp
   89bd8:	dfc00117 	ldw	ra,4(sp)
   89bdc:	df000017 	ldw	fp,0(sp)
   89be0:	dec00204 	addi	sp,sp,8
   89be4:	f800283a 	ret

00089be8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   89be8:	defff104 	addi	sp,sp,-60
   89bec:	dfc00e15 	stw	ra,56(sp)
   89bf0:	df000d15 	stw	fp,52(sp)
   89bf4:	df000d04 	addi	fp,sp,52
   89bf8:	e13ffb15 	stw	r4,-20(fp)
   89bfc:	e1bffd15 	stw	r6,-12(fp)
   89c00:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   89c04:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   89c08:	e0bffd17 	ldw	r2,-12(fp)
   89c0c:	1004c03a 	cmpne	r2,r2,zero
   89c10:	1000031e 	bne	r2,zero,89c20 <OSSemDel+0x38>
        return (pevent);
   89c14:	e0bffb17 	ldw	r2,-20(fp)
   89c18:	e0bfff15 	stw	r2,-4(fp)
   89c1c:	00009406 	br	89e70 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   89c20:	e0bffb17 	ldw	r2,-20(fp)
   89c24:	1004c03a 	cmpne	r2,r2,zero
   89c28:	1000061e 	bne	r2,zero,89c44 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   89c2c:	e0fffd17 	ldw	r3,-12(fp)
   89c30:	00800104 	movi	r2,4
   89c34:	18800005 	stb	r2,0(r3)
        return (pevent);
   89c38:	e0fffb17 	ldw	r3,-20(fp)
   89c3c:	e0ffff15 	stw	r3,-4(fp)
   89c40:	00008b06 	br	89e70 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   89c44:	e0bffb17 	ldw	r2,-20(fp)
   89c48:	10800003 	ldbu	r2,0(r2)
   89c4c:	10803fcc 	andi	r2,r2,255
   89c50:	108000e0 	cmpeqi	r2,r2,3
   89c54:	1000061e 	bne	r2,zero,89c70 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   89c58:	e0fffd17 	ldw	r3,-12(fp)
   89c5c:	00800044 	movi	r2,1
   89c60:	18800005 	stb	r2,0(r3)
        return (pevent);
   89c64:	e0bffb17 	ldw	r2,-20(fp)
   89c68:	e0bfff15 	stw	r2,-4(fp)
   89c6c:	00008006 	br	89e70 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   89c70:	00800274 	movhi	r2,9
   89c74:	10886904 	addi	r2,r2,8612
   89c78:	10800003 	ldbu	r2,0(r2)
   89c7c:	10803fcc 	andi	r2,r2,255
   89c80:	1005003a 	cmpeq	r2,r2,zero
   89c84:	1000061e 	bne	r2,zero,89ca0 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   89c88:	e0fffd17 	ldw	r3,-12(fp)
   89c8c:	008003c4 	movi	r2,15
   89c90:	18800005 	stb	r2,0(r3)
        return (pevent);
   89c94:	e0fffb17 	ldw	r3,-20(fp)
   89c98:	e0ffff15 	stw	r3,-4(fp)
   89c9c:	00007406 	br	89e70 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89ca0:	0005303a 	rdctl	r2,status
   89ca4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89ca8:	e0fff717 	ldw	r3,-36(fp)
   89cac:	00bfff84 	movi	r2,-2
   89cb0:	1884703a 	and	r2,r3,r2
   89cb4:	1001703a 	wrctl	status,r2
  
  return context;
   89cb8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   89cbc:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   89cc0:	e0bffb17 	ldw	r2,-20(fp)
   89cc4:	10800283 	ldbu	r2,10(r2)
   89cc8:	10803fcc 	andi	r2,r2,255
   89ccc:	1005003a 	cmpeq	r2,r2,zero
   89cd0:	1000031e 	bne	r2,zero,89ce0 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   89cd4:	00800044 	movi	r2,1
   89cd8:	e0bffa05 	stb	r2,-24(fp)
   89cdc:	00000106 	br	89ce4 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   89ce0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   89ce4:	e0bffc03 	ldbu	r2,-16(fp)
   89ce8:	e0bffe15 	stw	r2,-8(fp)
   89cec:	e0fffe17 	ldw	r3,-8(fp)
   89cf0:	1805003a 	cmpeq	r2,r3,zero
   89cf4:	1000041e 	bne	r2,zero,89d08 <OSSemDel+0x120>
   89cf8:	e0fffe17 	ldw	r3,-8(fp)
   89cfc:	18800060 	cmpeqi	r2,r3,1
   89d00:	10002d1e 	bne	r2,zero,89db8 <OSSemDel+0x1d0>
   89d04:	00004f06 	br	89e44 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   89d08:	e0bffa03 	ldbu	r2,-24(fp)
   89d0c:	1004c03a 	cmpne	r2,r2,zero
   89d10:	10001a1e 	bne	r2,zero,89d7c <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   89d14:	e0fffb17 	ldw	r3,-20(fp)
   89d18:	00800fc4 	movi	r2,63
   89d1c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   89d20:	e0bffb17 	ldw	r2,-20(fp)
   89d24:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   89d28:	e0bffb17 	ldw	r2,-20(fp)
   89d2c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   89d30:	00800274 	movhi	r2,9
   89d34:	10886804 	addi	r2,r2,8608
   89d38:	10c00017 	ldw	r3,0(r2)
   89d3c:	e0bffb17 	ldw	r2,-20(fp)
   89d40:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   89d44:	e0bffb17 	ldw	r2,-20(fp)
   89d48:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   89d4c:	00c00274 	movhi	r3,9
   89d50:	18c86804 	addi	r3,r3,8608
   89d54:	e0bffb17 	ldw	r2,-20(fp)
   89d58:	18800015 	stw	r2,0(r3)
   89d5c:	e0bff817 	ldw	r2,-32(fp)
   89d60:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89d64:	e0bff617 	ldw	r2,-40(fp)
   89d68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   89d6c:	e0bffd17 	ldw	r2,-12(fp)
   89d70:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   89d74:	e03ff915 	stw	zero,-28(fp)
   89d78:	00003b06 	br	89e68 <OSSemDel+0x280>
   89d7c:	e0bff817 	ldw	r2,-32(fp)
   89d80:	e0bff515 	stw	r2,-44(fp)
   89d84:	e0bff517 	ldw	r2,-44(fp)
   89d88:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   89d8c:	e0fffd17 	ldw	r3,-12(fp)
   89d90:	00801244 	movi	r2,73
   89d94:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   89d98:	e0bffb17 	ldw	r2,-20(fp)
   89d9c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   89da0:	00003106 	br	89e68 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   89da4:	e13ffb17 	ldw	r4,-20(fp)
   89da8:	000b883a 	mov	r5,zero
   89dac:	01800044 	movi	r6,1
   89db0:	000f883a 	mov	r7,zero
   89db4:	00852e40 	call	852e4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   89db8:	e0bffb17 	ldw	r2,-20(fp)
   89dbc:	10800283 	ldbu	r2,10(r2)
   89dc0:	10803fcc 	andi	r2,r2,255
   89dc4:	1004c03a 	cmpne	r2,r2,zero
   89dc8:	103ff61e 	bne	r2,zero,89da4 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   89dcc:	e0fffb17 	ldw	r3,-20(fp)
   89dd0:	00800fc4 	movi	r2,63
   89dd4:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   89dd8:	e0bffb17 	ldw	r2,-20(fp)
   89ddc:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   89de0:	e0bffb17 	ldw	r2,-20(fp)
   89de4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   89de8:	00800274 	movhi	r2,9
   89dec:	10886804 	addi	r2,r2,8608
   89df0:	10c00017 	ldw	r3,0(r2)
   89df4:	e0bffb17 	ldw	r2,-20(fp)
   89df8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   89dfc:	e0bffb17 	ldw	r2,-20(fp)
   89e00:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   89e04:	00c00274 	movhi	r3,9
   89e08:	18c86804 	addi	r3,r3,8608
   89e0c:	e0bffb17 	ldw	r2,-20(fp)
   89e10:	18800015 	stw	r2,0(r3)
   89e14:	e0bff817 	ldw	r2,-32(fp)
   89e18:	e0bff415 	stw	r2,-48(fp)
   89e1c:	e0bff417 	ldw	r2,-48(fp)
   89e20:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   89e24:	e0bffa03 	ldbu	r2,-24(fp)
   89e28:	10800058 	cmpnei	r2,r2,1
   89e2c:	1000011e 	bne	r2,zero,89e34 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   89e30:	0085d240 	call	85d24 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   89e34:	e0bffd17 	ldw	r2,-12(fp)
   89e38:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   89e3c:	e03ff915 	stw	zero,-28(fp)
             break;
   89e40:	00000906 	br	89e68 <OSSemDel+0x280>
   89e44:	e0bff817 	ldw	r2,-32(fp)
   89e48:	e0bff315 	stw	r2,-52(fp)
   89e4c:	e0bff317 	ldw	r2,-52(fp)
   89e50:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   89e54:	e0fffd17 	ldw	r3,-12(fp)
   89e58:	008001c4 	movi	r2,7
   89e5c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   89e60:	e0bffb17 	ldw	r2,-20(fp)
   89e64:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   89e68:	e0bff917 	ldw	r2,-28(fp)
   89e6c:	e0bfff15 	stw	r2,-4(fp)
   89e70:	e0bfff17 	ldw	r2,-4(fp)
}
   89e74:	e037883a 	mov	sp,fp
   89e78:	dfc00117 	ldw	ra,4(sp)
   89e7c:	df000017 	ldw	fp,0(sp)
   89e80:	dec00204 	addi	sp,sp,8
   89e84:	f800283a 	ret

00089e88 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   89e88:	defff404 	addi	sp,sp,-48
   89e8c:	dfc00b15 	stw	ra,44(sp)
   89e90:	df000a15 	stw	fp,40(sp)
   89e94:	df000a04 	addi	fp,sp,40
   89e98:	e13ffc15 	stw	r4,-16(fp)
   89e9c:	e1bffe15 	stw	r6,-8(fp)
   89ea0:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   89ea4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   89ea8:	e0bffe17 	ldw	r2,-8(fp)
   89eac:	1005003a 	cmpeq	r2,r2,zero
   89eb0:	10008f1e 	bne	r2,zero,8a0f0 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   89eb4:	e0bffc17 	ldw	r2,-16(fp)
   89eb8:	1004c03a 	cmpne	r2,r2,zero
   89ebc:	1000041e 	bne	r2,zero,89ed0 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   89ec0:	e0fffe17 	ldw	r3,-8(fp)
   89ec4:	00800104 	movi	r2,4
   89ec8:	18800005 	stb	r2,0(r3)
        return;
   89ecc:	00008806 	br	8a0f0 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   89ed0:	e0bffc17 	ldw	r2,-16(fp)
   89ed4:	10800003 	ldbu	r2,0(r2)
   89ed8:	10803fcc 	andi	r2,r2,255
   89edc:	108000e0 	cmpeqi	r2,r2,3
   89ee0:	1000041e 	bne	r2,zero,89ef4 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   89ee4:	e0fffe17 	ldw	r3,-8(fp)
   89ee8:	00800044 	movi	r2,1
   89eec:	18800005 	stb	r2,0(r3)
        return;
   89ef0:	00007f06 	br	8a0f0 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   89ef4:	00800274 	movhi	r2,9
   89ef8:	10886904 	addi	r2,r2,8612
   89efc:	10800003 	ldbu	r2,0(r2)
   89f00:	10803fcc 	andi	r2,r2,255
   89f04:	1005003a 	cmpeq	r2,r2,zero
   89f08:	1000041e 	bne	r2,zero,89f1c <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   89f0c:	e0fffe17 	ldw	r3,-8(fp)
   89f10:	00800084 	movi	r2,2
   89f14:	18800005 	stb	r2,0(r3)
        return;
   89f18:	00007506 	br	8a0f0 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   89f1c:	00800274 	movhi	r2,9
   89f20:	10885b04 	addi	r2,r2,8556
   89f24:	10800003 	ldbu	r2,0(r2)
   89f28:	10803fcc 	andi	r2,r2,255
   89f2c:	1005003a 	cmpeq	r2,r2,zero
   89f30:	1000041e 	bne	r2,zero,89f44 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   89f34:	e0fffe17 	ldw	r3,-8(fp)
   89f38:	00800344 	movi	r2,13
   89f3c:	18800005 	stb	r2,0(r3)
        return;
   89f40:	00006b06 	br	8a0f0 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   89f44:	0005303a 	rdctl	r2,status
   89f48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   89f4c:	e0fffa17 	ldw	r3,-24(fp)
   89f50:	00bfff84 	movi	r2,-2
   89f54:	1884703a 	and	r2,r3,r2
   89f58:	1001703a 	wrctl	status,r2
  
  return context;
   89f5c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   89f60:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   89f64:	e0bffc17 	ldw	r2,-16(fp)
   89f68:	1080020b 	ldhu	r2,8(r2)
   89f6c:	10bfffcc 	andi	r2,r2,65535
   89f70:	1005003a 	cmpeq	r2,r2,zero
   89f74:	10000d1e 	bne	r2,zero,89fac <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   89f78:	e0bffc17 	ldw	r2,-16(fp)
   89f7c:	1080020b 	ldhu	r2,8(r2)
   89f80:	10bfffc4 	addi	r2,r2,-1
   89f84:	1007883a 	mov	r3,r2
   89f88:	e0bffc17 	ldw	r2,-16(fp)
   89f8c:	10c0020d 	sth	r3,8(r2)
   89f90:	e0bffb17 	ldw	r2,-20(fp)
   89f94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   89f98:	e0bff917 	ldw	r2,-28(fp)
   89f9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   89fa0:	e0bffe17 	ldw	r2,-8(fp)
   89fa4:	10000005 	stb	zero,0(r2)
        return;
   89fa8:	00005106 	br	8a0f0 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   89fac:	00800274 	movhi	r2,9
   89fb0:	10886a04 	addi	r2,r2,8616
   89fb4:	10c00017 	ldw	r3,0(r2)
   89fb8:	00800274 	movhi	r2,9
   89fbc:	10886a04 	addi	r2,r2,8616
   89fc0:	10800017 	ldw	r2,0(r2)
   89fc4:	10800c03 	ldbu	r2,48(r2)
   89fc8:	10800054 	ori	r2,r2,1
   89fcc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   89fd0:	00800274 	movhi	r2,9
   89fd4:	10886a04 	addi	r2,r2,8616
   89fd8:	10800017 	ldw	r2,0(r2)
   89fdc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   89fe0:	00800274 	movhi	r2,9
   89fe4:	10886a04 	addi	r2,r2,8616
   89fe8:	10c00017 	ldw	r3,0(r2)
   89fec:	e0bffd0b 	ldhu	r2,-12(fp)
   89ff0:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   89ff4:	e13ffc17 	ldw	r4,-16(fp)
   89ff8:	00854780 	call	85478 <OS_EventTaskWait>
   89ffc:	e0bffb17 	ldw	r2,-20(fp)
   8a000:	e0bff815 	stw	r2,-32(fp)
   8a004:	e0bff817 	ldw	r2,-32(fp)
   8a008:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   8a00c:	0085d240 	call	85d24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a010:	0005303a 	rdctl	r2,status
   8a014:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a018:	e0fff717 	ldw	r3,-36(fp)
   8a01c:	00bfff84 	movi	r2,-2
   8a020:	1884703a 	and	r2,r3,r2
   8a024:	1001703a 	wrctl	status,r2
  
  return context;
   8a028:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   8a02c:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   8a030:	00800274 	movhi	r2,9
   8a034:	10886a04 	addi	r2,r2,8616
   8a038:	10800017 	ldw	r2,0(r2)
   8a03c:	10800c43 	ldbu	r2,49(r2)
   8a040:	10803fcc 	andi	r2,r2,255
   8a044:	e0bfff15 	stw	r2,-4(fp)
   8a048:	e0ffff17 	ldw	r3,-4(fp)
   8a04c:	1805003a 	cmpeq	r2,r3,zero
   8a050:	1000041e 	bne	r2,zero,8a064 <OSSemPend+0x1dc>
   8a054:	e0ffff17 	ldw	r3,-4(fp)
   8a058:	188000a0 	cmpeqi	r2,r3,2
   8a05c:	1000041e 	bne	r2,zero,8a070 <OSSemPend+0x1e8>
   8a060:	00000706 	br	8a080 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   8a064:	e0bffe17 	ldw	r2,-8(fp)
   8a068:	10000005 	stb	zero,0(r2)
             break;
   8a06c:	00000c06 	br	8a0a0 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   8a070:	e0fffe17 	ldw	r3,-8(fp)
   8a074:	00800384 	movi	r2,14
   8a078:	18800005 	stb	r2,0(r3)
             break;
   8a07c:	00000806 	br	8a0a0 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   8a080:	00800274 	movhi	r2,9
   8a084:	10886a04 	addi	r2,r2,8616
   8a088:	11000017 	ldw	r4,0(r2)
   8a08c:	e17ffc17 	ldw	r5,-16(fp)
   8a090:	00856dc0 	call	856dc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   8a094:	e0fffe17 	ldw	r3,-8(fp)
   8a098:	00800284 	movi	r2,10
   8a09c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   8a0a0:	00800274 	movhi	r2,9
   8a0a4:	10886a04 	addi	r2,r2,8616
   8a0a8:	10800017 	ldw	r2,0(r2)
   8a0ac:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   8a0b0:	00800274 	movhi	r2,9
   8a0b4:	10886a04 	addi	r2,r2,8616
   8a0b8:	10800017 	ldw	r2,0(r2)
   8a0bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   8a0c0:	00800274 	movhi	r2,9
   8a0c4:	10886a04 	addi	r2,r2,8616
   8a0c8:	10800017 	ldw	r2,0(r2)
   8a0cc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   8a0d0:	00800274 	movhi	r2,9
   8a0d4:	10886a04 	addi	r2,r2,8616
   8a0d8:	10800017 	ldw	r2,0(r2)
   8a0dc:	10000815 	stw	zero,32(r2)
   8a0e0:	e0bffb17 	ldw	r2,-20(fp)
   8a0e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a0e8:	e0bff617 	ldw	r2,-40(fp)
   8a0ec:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   8a0f0:	e037883a 	mov	sp,fp
   8a0f4:	dfc00117 	ldw	ra,4(sp)
   8a0f8:	df000017 	ldw	fp,0(sp)
   8a0fc:	dec00204 	addi	sp,sp,8
   8a100:	f800283a 	ret

0008a104 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   8a104:	defff504 	addi	sp,sp,-44
   8a108:	dfc00a15 	stw	ra,40(sp)
   8a10c:	df000915 	stw	fp,36(sp)
   8a110:	df000904 	addi	fp,sp,36
   8a114:	e13ffc15 	stw	r4,-16(fp)
   8a118:	e1bffe15 	stw	r6,-8(fp)
   8a11c:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   8a120:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   8a124:	e0bffe17 	ldw	r2,-8(fp)
   8a128:	1004c03a 	cmpne	r2,r2,zero
   8a12c:	1000021e 	bne	r2,zero,8a138 <OSSemPendAbort+0x34>
        return (0);
   8a130:	e03fff15 	stw	zero,-4(fp)
   8a134:	00004c06 	br	8a268 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   8a138:	e0bffc17 	ldw	r2,-16(fp)
   8a13c:	1004c03a 	cmpne	r2,r2,zero
   8a140:	1000051e 	bne	r2,zero,8a158 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   8a144:	e0fffe17 	ldw	r3,-8(fp)
   8a148:	00800104 	movi	r2,4
   8a14c:	18800005 	stb	r2,0(r3)
        return (0);
   8a150:	e03fff15 	stw	zero,-4(fp)
   8a154:	00004406 	br	8a268 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   8a158:	e0bffc17 	ldw	r2,-16(fp)
   8a15c:	10800003 	ldbu	r2,0(r2)
   8a160:	10803fcc 	andi	r2,r2,255
   8a164:	108000e0 	cmpeqi	r2,r2,3
   8a168:	1000051e 	bne	r2,zero,8a180 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   8a16c:	e0fffe17 	ldw	r3,-8(fp)
   8a170:	00800044 	movi	r2,1
   8a174:	18800005 	stb	r2,0(r3)
        return (0);
   8a178:	e03fff15 	stw	zero,-4(fp)
   8a17c:	00003a06 	br	8a268 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a180:	0005303a 	rdctl	r2,status
   8a184:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a188:	e0fff917 	ldw	r3,-28(fp)
   8a18c:	00bfff84 	movi	r2,-2
   8a190:	1884703a 	and	r2,r3,r2
   8a194:	1001703a 	wrctl	status,r2
  
  return context;
   8a198:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   8a19c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   8a1a0:	e0bffc17 	ldw	r2,-16(fp)
   8a1a4:	10800283 	ldbu	r2,10(r2)
   8a1a8:	10803fcc 	andi	r2,r2,255
   8a1ac:	1005003a 	cmpeq	r2,r2,zero
   8a1b0:	1000261e 	bne	r2,zero,8a24c <OSSemPendAbort+0x148>
        nbr_tasks = 0;
   8a1b4:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   8a1b8:	e0bffd03 	ldbu	r2,-12(fp)
   8a1bc:	10800060 	cmpeqi	r2,r2,1
   8a1c0:	1000091e 	bne	r2,zero,8a1e8 <OSSemPendAbort+0xe4>
   8a1c4:	00000e06 	br	8a200 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   8a1c8:	e13ffc17 	ldw	r4,-16(fp)
   8a1cc:	000b883a 	mov	r5,zero
   8a1d0:	01800044 	movi	r6,1
   8a1d4:	01c00084 	movi	r7,2
   8a1d8:	00852e40 	call	852e4 <OS_EventTaskRdy>
                     nbr_tasks++;
   8a1dc:	e0bffb03 	ldbu	r2,-20(fp)
   8a1e0:	10800044 	addi	r2,r2,1
   8a1e4:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   8a1e8:	e0bffc17 	ldw	r2,-16(fp)
   8a1ec:	10800283 	ldbu	r2,10(r2)
   8a1f0:	10803fcc 	andi	r2,r2,255
   8a1f4:	1004c03a 	cmpne	r2,r2,zero
   8a1f8:	103ff31e 	bne	r2,zero,8a1c8 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   8a1fc:	00000806 	br	8a220 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   8a200:	e13ffc17 	ldw	r4,-16(fp)
   8a204:	000b883a 	mov	r5,zero
   8a208:	01800044 	movi	r6,1
   8a20c:	01c00084 	movi	r7,2
   8a210:	00852e40 	call	852e4 <OS_EventTaskRdy>
                 nbr_tasks++;
   8a214:	e0bffb03 	ldbu	r2,-20(fp)
   8a218:	10800044 	addi	r2,r2,1
   8a21c:	e0bffb05 	stb	r2,-20(fp)
   8a220:	e0bffa17 	ldw	r2,-24(fp)
   8a224:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a228:	e0bff817 	ldw	r2,-32(fp)
   8a22c:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   8a230:	0085d240 	call	85d24 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   8a234:	e0fffe17 	ldw	r3,-8(fp)
   8a238:	00800384 	movi	r2,14
   8a23c:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   8a240:	e0bffb03 	ldbu	r2,-20(fp)
   8a244:	e0bfff15 	stw	r2,-4(fp)
   8a248:	00000706 	br	8a268 <OSSemPendAbort+0x164>
   8a24c:	e0bffa17 	ldw	r2,-24(fp)
   8a250:	e0bff715 	stw	r2,-36(fp)
   8a254:	e0bff717 	ldw	r2,-36(fp)
   8a258:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8a25c:	e0bffe17 	ldw	r2,-8(fp)
   8a260:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   8a264:	e03fff15 	stw	zero,-4(fp)
   8a268:	e0bfff17 	ldw	r2,-4(fp)
}
   8a26c:	e037883a 	mov	sp,fp
   8a270:	dfc00117 	ldw	ra,4(sp)
   8a274:	df000017 	ldw	fp,0(sp)
   8a278:	dec00204 	addi	sp,sp,8
   8a27c:	f800283a 	ret

0008a280 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   8a280:	defff704 	addi	sp,sp,-36
   8a284:	dfc00815 	stw	ra,32(sp)
   8a288:	df000715 	stw	fp,28(sp)
   8a28c:	df000704 	addi	fp,sp,28
   8a290:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   8a294:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   8a298:	e0bffe17 	ldw	r2,-8(fp)
   8a29c:	1004c03a 	cmpne	r2,r2,zero
   8a2a0:	1000031e 	bne	r2,zero,8a2b0 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
   8a2a4:	00800104 	movi	r2,4
   8a2a8:	e0bfff15 	stw	r2,-4(fp)
   8a2ac:	00003806 	br	8a390 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   8a2b0:	e0bffe17 	ldw	r2,-8(fp)
   8a2b4:	10800003 	ldbu	r2,0(r2)
   8a2b8:	10803fcc 	andi	r2,r2,255
   8a2bc:	108000e0 	cmpeqi	r2,r2,3
   8a2c0:	1000031e 	bne	r2,zero,8a2d0 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
   8a2c4:	00800044 	movi	r2,1
   8a2c8:	e0bfff15 	stw	r2,-4(fp)
   8a2cc:	00003006 	br	8a390 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a2d0:	0005303a 	rdctl	r2,status
   8a2d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a2d8:	e0fffc17 	ldw	r3,-16(fp)
   8a2dc:	00bfff84 	movi	r2,-2
   8a2e0:	1884703a 	and	r2,r3,r2
   8a2e4:	1001703a 	wrctl	status,r2
  
  return context;
   8a2e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   8a2ec:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   8a2f0:	e0bffe17 	ldw	r2,-8(fp)
   8a2f4:	10800283 	ldbu	r2,10(r2)
   8a2f8:	10803fcc 	andi	r2,r2,255
   8a2fc:	1005003a 	cmpeq	r2,r2,zero
   8a300:	10000c1e 	bne	r2,zero,8a334 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   8a304:	e13ffe17 	ldw	r4,-8(fp)
   8a308:	000b883a 	mov	r5,zero
   8a30c:	01800044 	movi	r6,1
   8a310:	000f883a 	mov	r7,zero
   8a314:	00852e40 	call	852e4 <OS_EventTaskRdy>
   8a318:	e0bffd17 	ldw	r2,-12(fp)
   8a31c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a320:	e0bffb17 	ldw	r2,-20(fp)
   8a324:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   8a328:	0085d240 	call	85d24 <OS_Sched>
        return (OS_ERR_NONE);
   8a32c:	e03fff15 	stw	zero,-4(fp)
   8a330:	00001706 	br	8a390 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   8a334:	e0bffe17 	ldw	r2,-8(fp)
   8a338:	1080020b 	ldhu	r2,8(r2)
   8a33c:	10ffffcc 	andi	r3,r2,65535
   8a340:	00bfffd4 	movui	r2,65535
   8a344:	18800c26 	beq	r3,r2,8a378 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   8a348:	e0bffe17 	ldw	r2,-8(fp)
   8a34c:	1080020b 	ldhu	r2,8(r2)
   8a350:	10800044 	addi	r2,r2,1
   8a354:	1007883a 	mov	r3,r2
   8a358:	e0bffe17 	ldw	r2,-8(fp)
   8a35c:	10c0020d 	sth	r3,8(r2)
   8a360:	e0bffd17 	ldw	r2,-12(fp)
   8a364:	e0bffa15 	stw	r2,-24(fp)
   8a368:	e0bffa17 	ldw	r2,-24(fp)
   8a36c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   8a370:	e03fff15 	stw	zero,-4(fp)
   8a374:	00000606 	br	8a390 <OSSemPost+0x110>
   8a378:	e0bffd17 	ldw	r2,-12(fp)
   8a37c:	e0bff915 	stw	r2,-28(fp)
   8a380:	e0bff917 	ldw	r2,-28(fp)
   8a384:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   8a388:	00800c84 	movi	r2,50
   8a38c:	e0bfff15 	stw	r2,-4(fp)
   8a390:	e0bfff17 	ldw	r2,-4(fp)
}
   8a394:	e037883a 	mov	sp,fp
   8a398:	dfc00117 	ldw	ra,4(sp)
   8a39c:	df000017 	ldw	fp,0(sp)
   8a3a0:	dec00204 	addi	sp,sp,8
   8a3a4:	f800283a 	ret

0008a3a8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   8a3a8:	defff604 	addi	sp,sp,-40
   8a3ac:	df000915 	stw	fp,36(sp)
   8a3b0:	df000904 	addi	fp,sp,36
   8a3b4:	e13ffd15 	stw	r4,-12(fp)
   8a3b8:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8a3bc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   8a3c0:	e0bffd17 	ldw	r2,-12(fp)
   8a3c4:	1004c03a 	cmpne	r2,r2,zero
   8a3c8:	1000031e 	bne	r2,zero,8a3d8 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   8a3cc:	00800104 	movi	r2,4
   8a3d0:	e0bfff15 	stw	r2,-4(fp)
   8a3d4:	00003b06 	br	8a4c4 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   8a3d8:	e0bffe17 	ldw	r2,-8(fp)
   8a3dc:	1004c03a 	cmpne	r2,r2,zero
   8a3e0:	1000031e 	bne	r2,zero,8a3f0 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   8a3e4:	00800244 	movi	r2,9
   8a3e8:	e0bfff15 	stw	r2,-4(fp)
   8a3ec:	00003506 	br	8a4c4 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   8a3f0:	e0bffd17 	ldw	r2,-12(fp)
   8a3f4:	10800003 	ldbu	r2,0(r2)
   8a3f8:	10803fcc 	andi	r2,r2,255
   8a3fc:	108000e0 	cmpeqi	r2,r2,3
   8a400:	1000031e 	bne	r2,zero,8a410 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   8a404:	00800044 	movi	r2,1
   8a408:	e0bfff15 	stw	r2,-4(fp)
   8a40c:	00002d06 	br	8a4c4 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a410:	0005303a 	rdctl	r2,status
   8a414:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a418:	e0fff817 	ldw	r3,-32(fp)
   8a41c:	00bfff84 	movi	r2,-2
   8a420:	1884703a 	and	r2,r3,r2
   8a424:	1001703a 	wrctl	status,r2
  
  return context;
   8a428:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   8a42c:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   8a430:	e0bffd17 	ldw	r2,-12(fp)
   8a434:	10c00283 	ldbu	r3,10(r2)
   8a438:	e0bffe17 	ldw	r2,-8(fp)
   8a43c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   8a440:	e0bffd17 	ldw	r2,-12(fp)
   8a444:	108002c4 	addi	r2,r2,11
   8a448:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   8a44c:	e0bffe17 	ldw	r2,-8(fp)
   8a450:	10800084 	addi	r2,r2,2
   8a454:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   8a458:	e03ffa05 	stb	zero,-24(fp)
   8a45c:	00000d06 	br	8a494 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
   8a460:	e0bffc17 	ldw	r2,-16(fp)
   8a464:	10c00003 	ldbu	r3,0(r2)
   8a468:	e0bffb17 	ldw	r2,-20(fp)
   8a46c:	10c00005 	stb	r3,0(r2)
   8a470:	e0bffb17 	ldw	r2,-20(fp)
   8a474:	10800044 	addi	r2,r2,1
   8a478:	e0bffb15 	stw	r2,-20(fp)
   8a47c:	e0bffc17 	ldw	r2,-16(fp)
   8a480:	10800044 	addi	r2,r2,1
   8a484:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   8a488:	e0bffa03 	ldbu	r2,-24(fp)
   8a48c:	10800044 	addi	r2,r2,1
   8a490:	e0bffa05 	stb	r2,-24(fp)
   8a494:	e0bffa03 	ldbu	r2,-24(fp)
   8a498:	108000f0 	cmpltui	r2,r2,3
   8a49c:	103ff01e 	bne	r2,zero,8a460 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   8a4a0:	e0bffd17 	ldw	r2,-12(fp)
   8a4a4:	10c0020b 	ldhu	r3,8(r2)
   8a4a8:	e0bffe17 	ldw	r2,-8(fp)
   8a4ac:	10c0000d 	sth	r3,0(r2)
   8a4b0:	e0bff917 	ldw	r2,-28(fp)
   8a4b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a4b8:	e0bff717 	ldw	r2,-36(fp)
   8a4bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   8a4c0:	e03fff15 	stw	zero,-4(fp)
   8a4c4:	e0bfff17 	ldw	r2,-4(fp)
}
   8a4c8:	e037883a 	mov	sp,fp
   8a4cc:	df000017 	ldw	fp,0(sp)
   8a4d0:	dec00104 	addi	sp,sp,4
   8a4d4:	f800283a 	ret

0008a4d8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   8a4d8:	defff904 	addi	sp,sp,-28
   8a4dc:	df000615 	stw	fp,24(sp)
   8a4e0:	df000604 	addi	fp,sp,24
   8a4e4:	e13ffd15 	stw	r4,-12(fp)
   8a4e8:	e1bfff15 	stw	r6,-4(fp)
   8a4ec:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   8a4f0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   8a4f4:	e0bfff17 	ldw	r2,-4(fp)
   8a4f8:	1005003a 	cmpeq	r2,r2,zero
   8a4fc:	1000331e 	bne	r2,zero,8a5cc <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   8a500:	e0bffd17 	ldw	r2,-12(fp)
   8a504:	1004c03a 	cmpne	r2,r2,zero
   8a508:	1000041e 	bne	r2,zero,8a51c <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   8a50c:	e0ffff17 	ldw	r3,-4(fp)
   8a510:	00800104 	movi	r2,4
   8a514:	18800005 	stb	r2,0(r3)
        return;
   8a518:	00002c06 	br	8a5cc <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   8a51c:	e0bffd17 	ldw	r2,-12(fp)
   8a520:	10800003 	ldbu	r2,0(r2)
   8a524:	10803fcc 	andi	r2,r2,255
   8a528:	108000e0 	cmpeqi	r2,r2,3
   8a52c:	1000041e 	bne	r2,zero,8a540 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   8a530:	e0ffff17 	ldw	r3,-4(fp)
   8a534:	00800044 	movi	r2,1
   8a538:	18800005 	stb	r2,0(r3)
        return;
   8a53c:	00002306 	br	8a5cc <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a540:	0005303a 	rdctl	r2,status
   8a544:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a548:	e0fffb17 	ldw	r3,-20(fp)
   8a54c:	00bfff84 	movi	r2,-2
   8a550:	1884703a 	and	r2,r3,r2
   8a554:	1001703a 	wrctl	status,r2
  
  return context;
   8a558:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   8a55c:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
   8a560:	e0bfff17 	ldw	r2,-4(fp)
   8a564:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   8a568:	e0bffd17 	ldw	r2,-12(fp)
   8a56c:	1080020b 	ldhu	r2,8(r2)
   8a570:	10bfffcc 	andi	r2,r2,65535
   8a574:	1005003a 	cmpeq	r2,r2,zero
   8a578:	1000041e 	bne	r2,zero,8a58c <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   8a57c:	e0fffd17 	ldw	r3,-12(fp)
   8a580:	e0bffe0b 	ldhu	r2,-8(fp)
   8a584:	1880020d 	sth	r2,8(r3)
   8a588:	00000c06 	br	8a5bc <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   8a58c:	e0bffd17 	ldw	r2,-12(fp)
   8a590:	10800283 	ldbu	r2,10(r2)
   8a594:	10803fcc 	andi	r2,r2,255
   8a598:	1004c03a 	cmpne	r2,r2,zero
   8a59c:	1000041e 	bne	r2,zero,8a5b0 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   8a5a0:	e0fffd17 	ldw	r3,-12(fp)
   8a5a4:	e0bffe0b 	ldhu	r2,-8(fp)
   8a5a8:	1880020d 	sth	r2,8(r3)
   8a5ac:	00000306 	br	8a5bc <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   8a5b0:	e0ffff17 	ldw	r3,-4(fp)
   8a5b4:	00801244 	movi	r2,73
   8a5b8:	18800005 	stb	r2,0(r3)
   8a5bc:	e0bffc17 	ldw	r2,-16(fp)
   8a5c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a5c4:	e0bffa17 	ldw	r2,-24(fp)
   8a5c8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   8a5cc:	e037883a 	mov	sp,fp
   8a5d0:	df000017 	ldw	fp,0(sp)
   8a5d4:	dec00104 	addi	sp,sp,4
   8a5d8:	f800283a 	ret

0008a5dc <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   8a5dc:	defff004 	addi	sp,sp,-64
   8a5e0:	dfc00f15 	stw	ra,60(sp)
   8a5e4:	df000e15 	stw	fp,56(sp)
   8a5e8:	df000e04 	addi	fp,sp,56
   8a5ec:	e13ffd05 	stb	r4,-12(fp)
   8a5f0:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   8a5f4:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   8a5f8:	e0bffd03 	ldbu	r2,-12(fp)
   8a5fc:	10800530 	cmpltui	r2,r2,20
   8a600:	1000061e 	bne	r2,zero,8a61c <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
   8a604:	e0bffd03 	ldbu	r2,-12(fp)
   8a608:	10803fe0 	cmpeqi	r2,r2,255
   8a60c:	1000031e 	bne	r2,zero,8a61c <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
   8a610:	00800a84 	movi	r2,42
   8a614:	e0bfff15 	stw	r2,-4(fp)
   8a618:	00014706 	br	8ab38 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   8a61c:	e0bffe03 	ldbu	r2,-8(fp)
   8a620:	10800530 	cmpltui	r2,r2,20
   8a624:	1000031e 	bne	r2,zero,8a634 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   8a628:	00800a84 	movi	r2,42
   8a62c:	e0bfff15 	stw	r2,-4(fp)
   8a630:	00014106 	br	8ab38 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a634:	0005303a 	rdctl	r2,status
   8a638:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a63c:	e0fff617 	ldw	r3,-40(fp)
   8a640:	00bfff84 	movi	r2,-2
   8a644:	1884703a 	and	r2,r3,r2
   8a648:	1001703a 	wrctl	status,r2
  
  return context;
   8a64c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8a650:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   8a654:	e0bffe03 	ldbu	r2,-8(fp)
   8a658:	00c002b4 	movhi	r3,10
   8a65c:	18e50004 	addi	r3,r3,-27648
   8a660:	1085883a 	add	r2,r2,r2
   8a664:	1085883a 	add	r2,r2,r2
   8a668:	10c5883a 	add	r2,r2,r3
   8a66c:	10800017 	ldw	r2,0(r2)
   8a670:	1005003a 	cmpeq	r2,r2,zero
   8a674:	1000071e 	bne	r2,zero,8a694 <OSTaskChangePrio+0xb8>
   8a678:	e0bff717 	ldw	r2,-36(fp)
   8a67c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8a680:	e0bff517 	ldw	r2,-44(fp)
   8a684:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   8a688:	00800a04 	movi	r2,40
   8a68c:	e0bfff15 	stw	r2,-4(fp)
   8a690:	00012906 	br	8ab38 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   8a694:	e0bffd03 	ldbu	r2,-12(fp)
   8a698:	10803fd8 	cmpnei	r2,r2,255
   8a69c:	1000051e 	bne	r2,zero,8a6b4 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   8a6a0:	00800274 	movhi	r2,9
   8a6a4:	10886a04 	addi	r2,r2,8616
   8a6a8:	10800017 	ldw	r2,0(r2)
   8a6ac:	10800c83 	ldbu	r2,50(r2)
   8a6b0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   8a6b4:	e0bffd03 	ldbu	r2,-12(fp)
   8a6b8:	00c002b4 	movhi	r3,10
   8a6bc:	18e50004 	addi	r3,r3,-27648
   8a6c0:	1085883a 	add	r2,r2,r2
   8a6c4:	1085883a 	add	r2,r2,r2
   8a6c8:	10c5883a 	add	r2,r2,r3
   8a6cc:	10800017 	ldw	r2,0(r2)
   8a6d0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   8a6d4:	e0bffa17 	ldw	r2,-24(fp)
   8a6d8:	1004c03a 	cmpne	r2,r2,zero
   8a6dc:	1000071e 	bne	r2,zero,8a6fc <OSTaskChangePrio+0x120>
   8a6e0:	e0bff717 	ldw	r2,-36(fp)
   8a6e4:	e0bff415 	stw	r2,-48(fp)
   8a6e8:	e0bff417 	ldw	r2,-48(fp)
   8a6ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   8a6f0:	00800a44 	movi	r2,41
   8a6f4:	e0bfff15 	stw	r2,-4(fp)
   8a6f8:	00010f06 	br	8ab38 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   8a6fc:	e0bffa17 	ldw	r2,-24(fp)
   8a700:	10800058 	cmpnei	r2,r2,1
   8a704:	1000071e 	bne	r2,zero,8a724 <OSTaskChangePrio+0x148>
   8a708:	e0bff717 	ldw	r2,-36(fp)
   8a70c:	e0bff315 	stw	r2,-52(fp)
   8a710:	e0bff317 	ldw	r2,-52(fp)
   8a714:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   8a718:	008010c4 	movi	r2,67
   8a71c:	e0bfff15 	stw	r2,-4(fp)
   8a720:	00010506 	br	8ab38 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   8a724:	e0bffe03 	ldbu	r2,-8(fp)
   8a728:	1004d0fa 	srli	r2,r2,3
   8a72c:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   8a730:	e0bffe03 	ldbu	r2,-8(fp)
   8a734:	108001cc 	andi	r2,r2,7
   8a738:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
   8a73c:	e0fff983 	ldbu	r3,-26(fp)
   8a740:	00800044 	movi	r2,1
   8a744:	10c4983a 	sll	r2,r2,r3
   8a748:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
   8a74c:	e0fff943 	ldbu	r3,-27(fp)
   8a750:	00800044 	movi	r2,1
   8a754:	10c4983a 	sll	r2,r2,r3
   8a758:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   8a75c:	e0bffd03 	ldbu	r2,-12(fp)
   8a760:	00c002b4 	movhi	r3,10
   8a764:	18e50004 	addi	r3,r3,-27648
   8a768:	1085883a 	add	r2,r2,r2
   8a76c:	1085883a 	add	r2,r2,r2
   8a770:	10c5883a 	add	r2,r2,r3
   8a774:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   8a778:	e0bffe03 	ldbu	r2,-8(fp)
   8a77c:	00c002b4 	movhi	r3,10
   8a780:	18e50004 	addi	r3,r3,-27648
   8a784:	1085883a 	add	r2,r2,r2
   8a788:	1085883a 	add	r2,r2,r2
   8a78c:	10c7883a 	add	r3,r2,r3
   8a790:	e0bffa17 	ldw	r2,-24(fp)
   8a794:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
   8a798:	e0bffa17 	ldw	r2,-24(fp)
   8a79c:	10800d03 	ldbu	r2,52(r2)
   8a7a0:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
   8a7a4:	e0bffa17 	ldw	r2,-24(fp)
   8a7a8:	10800d83 	ldbu	r2,54(r2)
   8a7ac:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   8a7b0:	e0bffa17 	ldw	r2,-24(fp)
   8a7b4:	10800d43 	ldbu	r2,53(r2)
   8a7b8:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   8a7bc:	e0fff903 	ldbu	r3,-28(fp)
   8a7c0:	00800274 	movhi	r2,9
   8a7c4:	10886744 	addi	r2,r2,8605
   8a7c8:	10c5883a 	add	r2,r2,r3
   8a7cc:	10c00003 	ldbu	r3,0(r2)
   8a7d0:	e0bff803 	ldbu	r2,-32(fp)
   8a7d4:	1884703a 	and	r2,r3,r2
   8a7d8:	10803fcc 	andi	r2,r2,255
   8a7dc:	1005003a 	cmpeq	r2,r2,zero
   8a7e0:	1000381e 	bne	r2,zero,8a8c4 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
   8a7e4:	e13ff903 	ldbu	r4,-28(fp)
   8a7e8:	e0fff903 	ldbu	r3,-28(fp)
   8a7ec:	00800274 	movhi	r2,9
   8a7f0:	10886744 	addi	r2,r2,8605
   8a7f4:	10c5883a 	add	r2,r2,r3
   8a7f8:	10800003 	ldbu	r2,0(r2)
   8a7fc:	1007883a 	mov	r3,r2
   8a800:	e0bff803 	ldbu	r2,-32(fp)
   8a804:	0084303a 	nor	r2,zero,r2
   8a808:	1884703a 	and	r2,r3,r2
   8a80c:	1007883a 	mov	r3,r2
   8a810:	00800274 	movhi	r2,9
   8a814:	10886744 	addi	r2,r2,8605
   8a818:	1105883a 	add	r2,r2,r4
   8a81c:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   8a820:	e0fff903 	ldbu	r3,-28(fp)
   8a824:	00800274 	movhi	r2,9
   8a828:	10886744 	addi	r2,r2,8605
   8a82c:	10c5883a 	add	r2,r2,r3
   8a830:	10800003 	ldbu	r2,0(r2)
   8a834:	10803fcc 	andi	r2,r2,255
   8a838:	1004c03a 	cmpne	r2,r2,zero
   8a83c:	10000b1e 	bne	r2,zero,8a86c <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
   8a840:	e0bff843 	ldbu	r2,-31(fp)
   8a844:	0084303a 	nor	r2,zero,r2
   8a848:	1007883a 	mov	r3,r2
   8a84c:	00800274 	movhi	r2,9
   8a850:	10886704 	addi	r2,r2,8604
   8a854:	10800003 	ldbu	r2,0(r2)
   8a858:	1884703a 	and	r2,r3,r2
   8a85c:	1007883a 	mov	r3,r2
   8a860:	00800274 	movhi	r2,9
   8a864:	10886704 	addi	r2,r2,8604
   8a868:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   8a86c:	00800274 	movhi	r2,9
   8a870:	10886704 	addi	r2,r2,8604
   8a874:	10c00003 	ldbu	r3,0(r2)
   8a878:	e0bff8c3 	ldbu	r2,-29(fp)
   8a87c:	1884b03a 	or	r2,r3,r2
   8a880:	1007883a 	mov	r3,r2
   8a884:	00800274 	movhi	r2,9
   8a888:	10886704 	addi	r2,r2,8604
   8a88c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   8a890:	e13ff983 	ldbu	r4,-26(fp)
   8a894:	e0fff983 	ldbu	r3,-26(fp)
   8a898:	00800274 	movhi	r2,9
   8a89c:	10886744 	addi	r2,r2,8605
   8a8a0:	10c5883a 	add	r2,r2,r3
   8a8a4:	10c00003 	ldbu	r3,0(r2)
   8a8a8:	e0bff883 	ldbu	r2,-30(fp)
   8a8ac:	1884b03a 	or	r2,r3,r2
   8a8b0:	1007883a 	mov	r3,r2
   8a8b4:	00800274 	movhi	r2,9
   8a8b8:	10886744 	addi	r2,r2,8605
   8a8bc:	1105883a 	add	r2,r2,r4
   8a8c0:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   8a8c4:	e0bffa17 	ldw	r2,-24(fp)
   8a8c8:	10800717 	ldw	r2,28(r2)
   8a8cc:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
   8a8d0:	e0bffc17 	ldw	r2,-16(fp)
   8a8d4:	1005003a 	cmpeq	r2,r2,zero
   8a8d8:	1000341e 	bne	r2,zero,8a9ac <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   8a8dc:	e13ff903 	ldbu	r4,-28(fp)
   8a8e0:	e0fff903 	ldbu	r3,-28(fp)
   8a8e4:	e0bffc17 	ldw	r2,-16(fp)
   8a8e8:	1885883a 	add	r2,r3,r2
   8a8ec:	10800204 	addi	r2,r2,8
   8a8f0:	108000c3 	ldbu	r2,3(r2)
   8a8f4:	1007883a 	mov	r3,r2
   8a8f8:	e0bff803 	ldbu	r2,-32(fp)
   8a8fc:	0084303a 	nor	r2,zero,r2
   8a900:	1884703a 	and	r2,r3,r2
   8a904:	1007883a 	mov	r3,r2
   8a908:	e0bffc17 	ldw	r2,-16(fp)
   8a90c:	2085883a 	add	r2,r4,r2
   8a910:	10800204 	addi	r2,r2,8
   8a914:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   8a918:	e0fff903 	ldbu	r3,-28(fp)
   8a91c:	e0bffc17 	ldw	r2,-16(fp)
   8a920:	1885883a 	add	r2,r3,r2
   8a924:	10800204 	addi	r2,r2,8
   8a928:	108000c3 	ldbu	r2,3(r2)
   8a92c:	10803fcc 	andi	r2,r2,255
   8a930:	1004c03a 	cmpne	r2,r2,zero
   8a934:	1000091e 	bne	r2,zero,8a95c <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
   8a938:	e0bffc17 	ldw	r2,-16(fp)
   8a93c:	10800283 	ldbu	r2,10(r2)
   8a940:	1007883a 	mov	r3,r2
   8a944:	e0bff843 	ldbu	r2,-31(fp)
   8a948:	0084303a 	nor	r2,zero,r2
   8a94c:	1884703a 	and	r2,r3,r2
   8a950:	1007883a 	mov	r3,r2
   8a954:	e0bffc17 	ldw	r2,-16(fp)
   8a958:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   8a95c:	e0bffc17 	ldw	r2,-16(fp)
   8a960:	10c00283 	ldbu	r3,10(r2)
   8a964:	e0bff8c3 	ldbu	r2,-29(fp)
   8a968:	1884b03a 	or	r2,r3,r2
   8a96c:	1007883a 	mov	r3,r2
   8a970:	e0bffc17 	ldw	r2,-16(fp)
   8a974:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   8a978:	e13ff983 	ldbu	r4,-26(fp)
   8a97c:	e0fff983 	ldbu	r3,-26(fp)
   8a980:	e0bffc17 	ldw	r2,-16(fp)
   8a984:	1885883a 	add	r2,r3,r2
   8a988:	10800204 	addi	r2,r2,8
   8a98c:	10c000c3 	ldbu	r3,3(r2)
   8a990:	e0bff883 	ldbu	r2,-30(fp)
   8a994:	1884b03a 	or	r2,r3,r2
   8a998:	1007883a 	mov	r3,r2
   8a99c:	e0bffc17 	ldw	r2,-16(fp)
   8a9a0:	2085883a 	add	r2,r4,r2
   8a9a4:	10800204 	addi	r2,r2,8
   8a9a8:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   8a9ac:	e0bffa17 	ldw	r2,-24(fp)
   8a9b0:	10800817 	ldw	r2,32(r2)
   8a9b4:	1005003a 	cmpeq	r2,r2,zero
   8a9b8:	1000441e 	bne	r2,zero,8aacc <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   8a9bc:	e0bffa17 	ldw	r2,-24(fp)
   8a9c0:	10800817 	ldw	r2,32(r2)
   8a9c4:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
   8a9c8:	e0bffb17 	ldw	r2,-20(fp)
   8a9cc:	10800017 	ldw	r2,0(r2)
   8a9d0:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
   8a9d4:	00003a06 	br	8aac0 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   8a9d8:	e13ff903 	ldbu	r4,-28(fp)
   8a9dc:	e0fff903 	ldbu	r3,-28(fp)
   8a9e0:	e0bffc17 	ldw	r2,-16(fp)
   8a9e4:	1885883a 	add	r2,r3,r2
   8a9e8:	10800204 	addi	r2,r2,8
   8a9ec:	108000c3 	ldbu	r2,3(r2)
   8a9f0:	1007883a 	mov	r3,r2
   8a9f4:	e0bff803 	ldbu	r2,-32(fp)
   8a9f8:	0084303a 	nor	r2,zero,r2
   8a9fc:	1884703a 	and	r2,r3,r2
   8aa00:	1007883a 	mov	r3,r2
   8aa04:	e0bffc17 	ldw	r2,-16(fp)
   8aa08:	2085883a 	add	r2,r4,r2
   8aa0c:	10800204 	addi	r2,r2,8
   8aa10:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   8aa14:	e0fff903 	ldbu	r3,-28(fp)
   8aa18:	e0bffc17 	ldw	r2,-16(fp)
   8aa1c:	1885883a 	add	r2,r3,r2
   8aa20:	10800204 	addi	r2,r2,8
   8aa24:	108000c3 	ldbu	r2,3(r2)
   8aa28:	10803fcc 	andi	r2,r2,255
   8aa2c:	1004c03a 	cmpne	r2,r2,zero
   8aa30:	1000091e 	bne	r2,zero,8aa58 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
   8aa34:	e0bffc17 	ldw	r2,-16(fp)
   8aa38:	10800283 	ldbu	r2,10(r2)
   8aa3c:	1007883a 	mov	r3,r2
   8aa40:	e0bff843 	ldbu	r2,-31(fp)
   8aa44:	0084303a 	nor	r2,zero,r2
   8aa48:	1884703a 	and	r2,r3,r2
   8aa4c:	1007883a 	mov	r3,r2
   8aa50:	e0bffc17 	ldw	r2,-16(fp)
   8aa54:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   8aa58:	e0bffc17 	ldw	r2,-16(fp)
   8aa5c:	10c00283 	ldbu	r3,10(r2)
   8aa60:	e0bff8c3 	ldbu	r2,-29(fp)
   8aa64:	1884b03a 	or	r2,r3,r2
   8aa68:	1007883a 	mov	r3,r2
   8aa6c:	e0bffc17 	ldw	r2,-16(fp)
   8aa70:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   8aa74:	e13ff983 	ldbu	r4,-26(fp)
   8aa78:	e0fff983 	ldbu	r3,-26(fp)
   8aa7c:	e0bffc17 	ldw	r2,-16(fp)
   8aa80:	1885883a 	add	r2,r3,r2
   8aa84:	10800204 	addi	r2,r2,8
   8aa88:	10c000c3 	ldbu	r3,3(r2)
   8aa8c:	e0bff883 	ldbu	r2,-30(fp)
   8aa90:	1884b03a 	or	r2,r3,r2
   8aa94:	1007883a 	mov	r3,r2
   8aa98:	e0bffc17 	ldw	r2,-16(fp)
   8aa9c:	2085883a 	add	r2,r4,r2
   8aaa0:	10800204 	addi	r2,r2,8
   8aaa4:	10c000c5 	stb	r3,3(r2)
            pevents++;
   8aaa8:	e0bffb17 	ldw	r2,-20(fp)
   8aaac:	10800104 	addi	r2,r2,4
   8aab0:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
   8aab4:	e0bffb17 	ldw	r2,-20(fp)
   8aab8:	10800017 	ldw	r2,0(r2)
   8aabc:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   8aac0:	e0bffc17 	ldw	r2,-16(fp)
   8aac4:	1004c03a 	cmpne	r2,r2,zero
   8aac8:	103fc31e 	bne	r2,zero,8a9d8 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   8aacc:	e0fffa17 	ldw	r3,-24(fp)
   8aad0:	e0bffe03 	ldbu	r2,-8(fp)
   8aad4:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
   8aad8:	e0fffa17 	ldw	r3,-24(fp)
   8aadc:	e0bff983 	ldbu	r2,-26(fp)
   8aae0:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
   8aae4:	e0fffa17 	ldw	r3,-24(fp)
   8aae8:	e0bff943 	ldbu	r2,-27(fp)
   8aaec:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
   8aaf0:	e0fffa17 	ldw	r3,-24(fp)
   8aaf4:	e0bff8c3 	ldbu	r2,-29(fp)
   8aaf8:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
   8aafc:	e0fffa17 	ldw	r3,-24(fp)
   8ab00:	e0bff883 	ldbu	r2,-30(fp)
   8ab04:	18800d45 	stb	r2,53(r3)
   8ab08:	e0bff717 	ldw	r2,-36(fp)
   8ab0c:	e0bff215 	stw	r2,-56(fp)
   8ab10:	e0bff217 	ldw	r2,-56(fp)
   8ab14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   8ab18:	00800274 	movhi	r2,9
   8ab1c:	10885b44 	addi	r2,r2,8557
   8ab20:	10800003 	ldbu	r2,0(r2)
   8ab24:	10803fcc 	andi	r2,r2,255
   8ab28:	10800058 	cmpnei	r2,r2,1
   8ab2c:	1000011e 	bne	r2,zero,8ab34 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
   8ab30:	0085d240 	call	85d24 <OS_Sched>
    }
    return (OS_ERR_NONE);
   8ab34:	e03fff15 	stw	zero,-4(fp)
   8ab38:	e0bfff17 	ldw	r2,-4(fp)
}
   8ab3c:	e037883a 	mov	sp,fp
   8ab40:	dfc00117 	ldw	ra,4(sp)
   8ab44:	df000017 	ldw	fp,0(sp)
   8ab48:	dec00204 	addi	sp,sp,8
   8ab4c:	f800283a 	ret

0008ab50 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   8ab50:	deffed04 	addi	sp,sp,-76
   8ab54:	dfc01215 	stw	ra,72(sp)
   8ab58:	df001115 	stw	fp,68(sp)
   8ab5c:	df001104 	addi	fp,sp,68
   8ab60:	e13ffb15 	stw	r4,-20(fp)
   8ab64:	e17ffc15 	stw	r5,-16(fp)
   8ab68:	e1bffd15 	stw	r6,-12(fp)
   8ab6c:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   8ab70:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   8ab74:	e0bffe03 	ldbu	r2,-8(fp)
   8ab78:	10800570 	cmpltui	r2,r2,21
   8ab7c:	1000031e 	bne	r2,zero,8ab8c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   8ab80:	00800a84 	movi	r2,42
   8ab84:	e0bfff15 	stw	r2,-4(fp)
   8ab88:	00006006 	br	8ad0c <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ab8c:	0005303a 	rdctl	r2,status
   8ab90:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ab94:	e0fff717 	ldw	r3,-36(fp)
   8ab98:	00bfff84 	movi	r2,-2
   8ab9c:	1884703a 	and	r2,r3,r2
   8aba0:	1001703a 	wrctl	status,r2
  
  return context;
   8aba4:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8aba8:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   8abac:	00800274 	movhi	r2,9
   8abb0:	10886904 	addi	r2,r2,8612
   8abb4:	10800003 	ldbu	r2,0(r2)
   8abb8:	10803fcc 	andi	r2,r2,255
   8abbc:	1005003a 	cmpeq	r2,r2,zero
   8abc0:	1000071e 	bne	r2,zero,8abe0 <OSTaskCreate+0x90>
   8abc4:	e0bff817 	ldw	r2,-32(fp)
   8abc8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8abcc:	e0bff617 	ldw	r2,-40(fp)
   8abd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   8abd4:	00800f04 	movi	r2,60
   8abd8:	e0bfff15 	stw	r2,-4(fp)
   8abdc:	00004b06 	br	8ad0c <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   8abe0:	e0bffe03 	ldbu	r2,-8(fp)
   8abe4:	00c002b4 	movhi	r3,10
   8abe8:	18e50004 	addi	r3,r3,-27648
   8abec:	1085883a 	add	r2,r2,r2
   8abf0:	1085883a 	add	r2,r2,r2
   8abf4:	10c5883a 	add	r2,r2,r3
   8abf8:	10800017 	ldw	r2,0(r2)
   8abfc:	1004c03a 	cmpne	r2,r2,zero
   8ac00:	10003c1e 	bne	r2,zero,8acf4 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   8ac04:	e0bffe03 	ldbu	r2,-8(fp)
   8ac08:	00c002b4 	movhi	r3,10
   8ac0c:	18e50004 	addi	r3,r3,-27648
   8ac10:	1085883a 	add	r2,r2,r2
   8ac14:	1085883a 	add	r2,r2,r2
   8ac18:	10c7883a 	add	r3,r2,r3
   8ac1c:	00800044 	movi	r2,1
   8ac20:	18800015 	stw	r2,0(r3)
   8ac24:	e0bff817 	ldw	r2,-32(fp)
   8ac28:	e0bff515 	stw	r2,-44(fp)
   8ac2c:	e0bff517 	ldw	r2,-44(fp)
   8ac30:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   8ac34:	e13ffb17 	ldw	r4,-20(fp)
   8ac38:	e17ffc17 	ldw	r5,-16(fp)
   8ac3c:	e1bffd17 	ldw	r6,-12(fp)
   8ac40:	000f883a 	mov	r7,zero
   8ac44:	008e4040 	call	8e404 <OSTaskStkInit>
   8ac48:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   8ac4c:	e13ffe03 	ldbu	r4,-8(fp)
   8ac50:	d8000015 	stw	zero,0(sp)
   8ac54:	d8000115 	stw	zero,4(sp)
   8ac58:	d8000215 	stw	zero,8(sp)
   8ac5c:	e17ffa17 	ldw	r5,-24(fp)
   8ac60:	000d883a 	mov	r6,zero
   8ac64:	000f883a 	mov	r7,zero
   8ac68:	008612c0 	call	8612c <OS_TCBInit>
   8ac6c:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
   8ac70:	e0bff903 	ldbu	r2,-28(fp)
   8ac74:	1004c03a 	cmpne	r2,r2,zero
   8ac78:	1000081e 	bne	r2,zero,8ac9c <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   8ac7c:	00800274 	movhi	r2,9
   8ac80:	10885b44 	addi	r2,r2,8557
   8ac84:	10800003 	ldbu	r2,0(r2)
   8ac88:	10803fcc 	andi	r2,r2,255
   8ac8c:	10800058 	cmpnei	r2,r2,1
   8ac90:	1000151e 	bne	r2,zero,8ace8 <OSTaskCreate+0x198>
                OS_Sched();
   8ac94:	0085d240 	call	85d24 <OS_Sched>
   8ac98:	00001306 	br	8ace8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ac9c:	0005303a 	rdctl	r2,status
   8aca0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8aca4:	e0fff417 	ldw	r3,-48(fp)
   8aca8:	00bfff84 	movi	r2,-2
   8acac:	1884703a 	and	r2,r3,r2
   8acb0:	1001703a 	wrctl	status,r2
  
  return context;
   8acb4:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   8acb8:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   8acbc:	e0bffe03 	ldbu	r2,-8(fp)
   8acc0:	00c002b4 	movhi	r3,10
   8acc4:	18e50004 	addi	r3,r3,-27648
   8acc8:	1085883a 	add	r2,r2,r2
   8accc:	1085883a 	add	r2,r2,r2
   8acd0:	10c5883a 	add	r2,r2,r3
   8acd4:	10000015 	stw	zero,0(r2)
   8acd8:	e0bff817 	ldw	r2,-32(fp)
   8acdc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ace0:	e0bff317 	ldw	r2,-52(fp)
   8ace4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   8ace8:	e0bff903 	ldbu	r2,-28(fp)
   8acec:	e0bfff15 	stw	r2,-4(fp)
   8acf0:	00000606 	br	8ad0c <OSTaskCreate+0x1bc>
   8acf4:	e0bff817 	ldw	r2,-32(fp)
   8acf8:	e0bff215 	stw	r2,-56(fp)
   8acfc:	e0bff217 	ldw	r2,-56(fp)
   8ad00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   8ad04:	00800a04 	movi	r2,40
   8ad08:	e0bfff15 	stw	r2,-4(fp)
   8ad0c:	e0bfff17 	ldw	r2,-4(fp)
}
   8ad10:	e037883a 	mov	sp,fp
   8ad14:	dfc00117 	ldw	ra,4(sp)
   8ad18:	df000017 	ldw	fp,0(sp)
   8ad1c:	dec00204 	addi	sp,sp,8
   8ad20:	f800283a 	ret

0008ad24 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   8ad24:	deffeb04 	addi	sp,sp,-84
   8ad28:	dfc01415 	stw	ra,80(sp)
   8ad2c:	df001315 	stw	fp,76(sp)
   8ad30:	df001304 	addi	fp,sp,76
   8ad34:	e13ff915 	stw	r4,-28(fp)
   8ad38:	e17ffa15 	stw	r5,-24(fp)
   8ad3c:	e1bffb15 	stw	r6,-20(fp)
   8ad40:	e0800217 	ldw	r2,8(fp)
   8ad44:	e0c00617 	ldw	r3,24(fp)
   8ad48:	e1fffc05 	stb	r7,-16(fp)
   8ad4c:	e0bffd0d 	sth	r2,-12(fp)
   8ad50:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   8ad54:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   8ad58:	e0bffc03 	ldbu	r2,-16(fp)
   8ad5c:	10800570 	cmpltui	r2,r2,21
   8ad60:	1000031e 	bne	r2,zero,8ad70 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   8ad64:	00800a84 	movi	r2,42
   8ad68:	e0bfff15 	stw	r2,-4(fp)
   8ad6c:	00006706 	br	8af0c <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ad70:	0005303a 	rdctl	r2,status
   8ad74:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ad78:	e0fff517 	ldw	r3,-44(fp)
   8ad7c:	00bfff84 	movi	r2,-2
   8ad80:	1884703a 	and	r2,r3,r2
   8ad84:	1001703a 	wrctl	status,r2
  
  return context;
   8ad88:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8ad8c:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   8ad90:	00800274 	movhi	r2,9
   8ad94:	10886904 	addi	r2,r2,8612
   8ad98:	10800003 	ldbu	r2,0(r2)
   8ad9c:	10803fcc 	andi	r2,r2,255
   8ada0:	1005003a 	cmpeq	r2,r2,zero
   8ada4:	1000071e 	bne	r2,zero,8adc4 <OSTaskCreateExt+0xa0>
   8ada8:	e0bff617 	ldw	r2,-40(fp)
   8adac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8adb0:	e0bff417 	ldw	r2,-48(fp)
   8adb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   8adb8:	00800f04 	movi	r2,60
   8adbc:	e0bfff15 	stw	r2,-4(fp)
   8adc0:	00005206 	br	8af0c <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   8adc4:	e0bffc03 	ldbu	r2,-16(fp)
   8adc8:	00c002b4 	movhi	r3,10
   8adcc:	18e50004 	addi	r3,r3,-27648
   8add0:	1085883a 	add	r2,r2,r2
   8add4:	1085883a 	add	r2,r2,r2
   8add8:	10c5883a 	add	r2,r2,r3
   8addc:	10800017 	ldw	r2,0(r2)
   8ade0:	1004c03a 	cmpne	r2,r2,zero
   8ade4:	1000431e 	bne	r2,zero,8aef4 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   8ade8:	e0bffc03 	ldbu	r2,-16(fp)
   8adec:	00c002b4 	movhi	r3,10
   8adf0:	18e50004 	addi	r3,r3,-27648
   8adf4:	1085883a 	add	r2,r2,r2
   8adf8:	1085883a 	add	r2,r2,r2
   8adfc:	10c7883a 	add	r3,r2,r3
   8ae00:	00800044 	movi	r2,1
   8ae04:	18800015 	stw	r2,0(r3)
   8ae08:	e0bff617 	ldw	r2,-40(fp)
   8ae0c:	e0bff315 	stw	r2,-52(fp)
   8ae10:	e0bff317 	ldw	r2,-52(fp)
   8ae14:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   8ae18:	e1bffe0b 	ldhu	r6,-8(fp)
   8ae1c:	e1000317 	ldw	r4,12(fp)
   8ae20:	e1400417 	ldw	r5,16(fp)
   8ae24:	008bfa00 	call	8bfa0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   8ae28:	e1fffe0b 	ldhu	r7,-8(fp)
   8ae2c:	e13ff917 	ldw	r4,-28(fp)
   8ae30:	e17ffa17 	ldw	r5,-24(fp)
   8ae34:	e1bffb17 	ldw	r6,-20(fp)
   8ae38:	008e4040 	call	8e404 <OSTaskStkInit>
   8ae3c:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   8ae40:	e13ffc03 	ldbu	r4,-16(fp)
   8ae44:	e1fffd0b 	ldhu	r7,-12(fp)
   8ae48:	e0fffe0b 	ldhu	r3,-8(fp)
   8ae4c:	e0800417 	ldw	r2,16(fp)
   8ae50:	d8800015 	stw	r2,0(sp)
   8ae54:	e0800517 	ldw	r2,20(fp)
   8ae58:	d8800115 	stw	r2,4(sp)
   8ae5c:	d8c00215 	stw	r3,8(sp)
   8ae60:	e17ff817 	ldw	r5,-32(fp)
   8ae64:	e1800317 	ldw	r6,12(fp)
   8ae68:	008612c0 	call	8612c <OS_TCBInit>
   8ae6c:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
   8ae70:	e0bff703 	ldbu	r2,-36(fp)
   8ae74:	1004c03a 	cmpne	r2,r2,zero
   8ae78:	1000081e 	bne	r2,zero,8ae9c <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   8ae7c:	00800274 	movhi	r2,9
   8ae80:	10885b44 	addi	r2,r2,8557
   8ae84:	10800003 	ldbu	r2,0(r2)
   8ae88:	10803fcc 	andi	r2,r2,255
   8ae8c:	10800058 	cmpnei	r2,r2,1
   8ae90:	1000151e 	bne	r2,zero,8aee8 <OSTaskCreateExt+0x1c4>
                OS_Sched();
   8ae94:	0085d240 	call	85d24 <OS_Sched>
   8ae98:	00001306 	br	8aee8 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ae9c:	0005303a 	rdctl	r2,status
   8aea0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8aea4:	e0fff217 	ldw	r3,-56(fp)
   8aea8:	00bfff84 	movi	r2,-2
   8aeac:	1884703a 	and	r2,r3,r2
   8aeb0:	1001703a 	wrctl	status,r2
  
  return context;
   8aeb4:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   8aeb8:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   8aebc:	e0bffc03 	ldbu	r2,-16(fp)
   8aec0:	00c002b4 	movhi	r3,10
   8aec4:	18e50004 	addi	r3,r3,-27648
   8aec8:	1085883a 	add	r2,r2,r2
   8aecc:	1085883a 	add	r2,r2,r2
   8aed0:	10c5883a 	add	r2,r2,r3
   8aed4:	10000015 	stw	zero,0(r2)
   8aed8:	e0bff617 	ldw	r2,-40(fp)
   8aedc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8aee0:	e0bff117 	ldw	r2,-60(fp)
   8aee4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   8aee8:	e0bff703 	ldbu	r2,-36(fp)
   8aeec:	e0bfff15 	stw	r2,-4(fp)
   8aef0:	00000606 	br	8af0c <OSTaskCreateExt+0x1e8>
   8aef4:	e0bff617 	ldw	r2,-40(fp)
   8aef8:	e0bff015 	stw	r2,-64(fp)
   8aefc:	e0bff017 	ldw	r2,-64(fp)
   8af00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   8af04:	00800a04 	movi	r2,40
   8af08:	e0bfff15 	stw	r2,-4(fp)
   8af0c:	e0bfff17 	ldw	r2,-4(fp)
}
   8af10:	e037883a 	mov	sp,fp
   8af14:	dfc00117 	ldw	ra,4(sp)
   8af18:	df000017 	ldw	fp,0(sp)
   8af1c:	dec00204 	addi	sp,sp,8
   8af20:	f800283a 	ret

0008af24 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   8af24:	defff304 	addi	sp,sp,-52
   8af28:	dfc00c15 	stw	ra,48(sp)
   8af2c:	df000b15 	stw	fp,44(sp)
   8af30:	df000b04 	addi	fp,sp,44
   8af34:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   8af38:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   8af3c:	00800274 	movhi	r2,9
   8af40:	10886904 	addi	r2,r2,8612
   8af44:	10800003 	ldbu	r2,0(r2)
   8af48:	10803fcc 	andi	r2,r2,255
   8af4c:	1005003a 	cmpeq	r2,r2,zero
   8af50:	1000031e 	bne	r2,zero,8af60 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
   8af54:	00801004 	movi	r2,64
   8af58:	e0bfff15 	stw	r2,-4(fp)
   8af5c:	0000ee06 	br	8b318 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   8af60:	e0bffe03 	ldbu	r2,-8(fp)
   8af64:	10800518 	cmpnei	r2,r2,20
   8af68:	1000031e 	bne	r2,zero,8af78 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
   8af6c:	00800f84 	movi	r2,62
   8af70:	e0bfff15 	stw	r2,-4(fp)
   8af74:	0000e806 	br	8b318 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   8af78:	e0bffe03 	ldbu	r2,-8(fp)
   8af7c:	10800530 	cmpltui	r2,r2,20
   8af80:	1000061e 	bne	r2,zero,8af9c <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
   8af84:	e0bffe03 	ldbu	r2,-8(fp)
   8af88:	10803fe0 	cmpeqi	r2,r2,255
   8af8c:	1000031e 	bne	r2,zero,8af9c <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
   8af90:	00800a84 	movi	r2,42
   8af94:	e0bfff15 	stw	r2,-4(fp)
   8af98:	0000df06 	br	8b318 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8af9c:	0005303a 	rdctl	r2,status
   8afa0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8afa4:	e0fffa17 	ldw	r3,-24(fp)
   8afa8:	00bfff84 	movi	r2,-2
   8afac:	1884703a 	and	r2,r3,r2
   8afb0:	1001703a 	wrctl	status,r2
  
  return context;
   8afb4:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   8afb8:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   8afbc:	e0bffe03 	ldbu	r2,-8(fp)
   8afc0:	10803fd8 	cmpnei	r2,r2,255
   8afc4:	1000051e 	bne	r2,zero,8afdc <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   8afc8:	00800274 	movhi	r2,9
   8afcc:	10886a04 	addi	r2,r2,8616
   8afd0:	10800017 	ldw	r2,0(r2)
   8afd4:	10800c83 	ldbu	r2,50(r2)
   8afd8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   8afdc:	e0bffe03 	ldbu	r2,-8(fp)
   8afe0:	00c002b4 	movhi	r3,10
   8afe4:	18e50004 	addi	r3,r3,-27648
   8afe8:	1085883a 	add	r2,r2,r2
   8afec:	1085883a 	add	r2,r2,r2
   8aff0:	10c5883a 	add	r2,r2,r3
   8aff4:	10800017 	ldw	r2,0(r2)
   8aff8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   8affc:	e0bffc17 	ldw	r2,-16(fp)
   8b000:	1004c03a 	cmpne	r2,r2,zero
   8b004:	1000071e 	bne	r2,zero,8b024 <OSTaskDel+0x100>
   8b008:	e0bffb17 	ldw	r2,-20(fp)
   8b00c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b010:	e0bff917 	ldw	r2,-28(fp)
   8b014:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   8b018:	008010c4 	movi	r2,67
   8b01c:	e0bfff15 	stw	r2,-4(fp)
   8b020:	0000bd06 	br	8b318 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   8b024:	e0bffc17 	ldw	r2,-16(fp)
   8b028:	10800058 	cmpnei	r2,r2,1
   8b02c:	1000071e 	bne	r2,zero,8b04c <OSTaskDel+0x128>
   8b030:	e0bffb17 	ldw	r2,-20(fp)
   8b034:	e0bff815 	stw	r2,-32(fp)
   8b038:	e0bff817 	ldw	r2,-32(fp)
   8b03c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   8b040:	00800f44 	movi	r2,61
   8b044:	e0bfff15 	stw	r2,-4(fp)
   8b048:	0000b306 	br	8b318 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   8b04c:	e0bffc17 	ldw	r2,-16(fp)
   8b050:	10800d03 	ldbu	r2,52(r2)
   8b054:	11003fcc 	andi	r4,r2,255
   8b058:	e0bffc17 	ldw	r2,-16(fp)
   8b05c:	10800d03 	ldbu	r2,52(r2)
   8b060:	10c03fcc 	andi	r3,r2,255
   8b064:	00800274 	movhi	r2,9
   8b068:	10886744 	addi	r2,r2,8605
   8b06c:	10c5883a 	add	r2,r2,r3
   8b070:	10800003 	ldbu	r2,0(r2)
   8b074:	1007883a 	mov	r3,r2
   8b078:	e0bffc17 	ldw	r2,-16(fp)
   8b07c:	10800d43 	ldbu	r2,53(r2)
   8b080:	0084303a 	nor	r2,zero,r2
   8b084:	1884703a 	and	r2,r3,r2
   8b088:	1007883a 	mov	r3,r2
   8b08c:	00800274 	movhi	r2,9
   8b090:	10886744 	addi	r2,r2,8605
   8b094:	1105883a 	add	r2,r2,r4
   8b098:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   8b09c:	e0bffc17 	ldw	r2,-16(fp)
   8b0a0:	10800d03 	ldbu	r2,52(r2)
   8b0a4:	10c03fcc 	andi	r3,r2,255
   8b0a8:	00800274 	movhi	r2,9
   8b0ac:	10886744 	addi	r2,r2,8605
   8b0b0:	10c5883a 	add	r2,r2,r3
   8b0b4:	10800003 	ldbu	r2,0(r2)
   8b0b8:	10803fcc 	andi	r2,r2,255
   8b0bc:	1004c03a 	cmpne	r2,r2,zero
   8b0c0:	10000c1e 	bne	r2,zero,8b0f4 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   8b0c4:	e0bffc17 	ldw	r2,-16(fp)
   8b0c8:	10800d83 	ldbu	r2,54(r2)
   8b0cc:	0084303a 	nor	r2,zero,r2
   8b0d0:	1007883a 	mov	r3,r2
   8b0d4:	00800274 	movhi	r2,9
   8b0d8:	10886704 	addi	r2,r2,8604
   8b0dc:	10800003 	ldbu	r2,0(r2)
   8b0e0:	1884703a 	and	r2,r3,r2
   8b0e4:	1007883a 	mov	r3,r2
   8b0e8:	00800274 	movhi	r2,9
   8b0ec:	10886704 	addi	r2,r2,8604
   8b0f0:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   8b0f4:	e0bffc17 	ldw	r2,-16(fp)
   8b0f8:	10800717 	ldw	r2,28(r2)
   8b0fc:	1005003a 	cmpeq	r2,r2,zero
   8b100:	1000041e 	bne	r2,zero,8b114 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   8b104:	e0bffc17 	ldw	r2,-16(fp)
   8b108:	11400717 	ldw	r5,28(r2)
   8b10c:	e13ffc17 	ldw	r4,-16(fp)
   8b110:	00856dc0 	call	856dc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   8b114:	e0bffc17 	ldw	r2,-16(fp)
   8b118:	10800817 	ldw	r2,32(r2)
   8b11c:	1005003a 	cmpeq	r2,r2,zero
   8b120:	1000041e 	bne	r2,zero,8b134 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   8b124:	e0bffc17 	ldw	r2,-16(fp)
   8b128:	11400817 	ldw	r5,32(r2)
   8b12c:	e13ffc17 	ldw	r4,-16(fp)
   8b130:	00857940 	call	85794 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   8b134:	e0bffc17 	ldw	r2,-16(fp)
   8b138:	10800a17 	ldw	r2,40(r2)
   8b13c:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   8b140:	e0bffd17 	ldw	r2,-12(fp)
   8b144:	1005003a 	cmpeq	r2,r2,zero
   8b148:	1000021e 	bne	r2,zero,8b154 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   8b14c:	e13ffd17 	ldw	r4,-12(fp)
   8b150:	0087e280 	call	87e28 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   8b154:	e0bffc17 	ldw	r2,-16(fp)
   8b158:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   8b15c:	e0bffc17 	ldw	r2,-16(fp)
   8b160:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   8b164:	e0bffc17 	ldw	r2,-16(fp)
   8b168:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   8b16c:	00800274 	movhi	r2,9
   8b170:	10885b04 	addi	r2,r2,8556
   8b174:	10800003 	ldbu	r2,0(r2)
   8b178:	10803fcc 	andi	r2,r2,255
   8b17c:	10803fe0 	cmpeqi	r2,r2,255
   8b180:	1000081e 	bne	r2,zero,8b1a4 <OSTaskDel+0x280>
        OSLockNesting++;
   8b184:	00800274 	movhi	r2,9
   8b188:	10885b04 	addi	r2,r2,8556
   8b18c:	10800003 	ldbu	r2,0(r2)
   8b190:	10800044 	addi	r2,r2,1
   8b194:	1007883a 	mov	r3,r2
   8b198:	00800274 	movhi	r2,9
   8b19c:	10885b04 	addi	r2,r2,8556
   8b1a0:	10c00005 	stb	r3,0(r2)
   8b1a4:	e0bffb17 	ldw	r2,-20(fp)
   8b1a8:	e0bff715 	stw	r2,-36(fp)
   8b1ac:	e0bff717 	ldw	r2,-36(fp)
   8b1b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   8b1b4:	00852c80 	call	852c8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b1b8:	0005303a 	rdctl	r2,status
   8b1bc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b1c0:	e0fff617 	ldw	r3,-40(fp)
   8b1c4:	00bfff84 	movi	r2,-2
   8b1c8:	1884703a 	and	r2,r3,r2
   8b1cc:	1001703a 	wrctl	status,r2
  
  return context;
   8b1d0:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   8b1d4:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   8b1d8:	00800274 	movhi	r2,9
   8b1dc:	10885b04 	addi	r2,r2,8556
   8b1e0:	10800003 	ldbu	r2,0(r2)
   8b1e4:	10803fcc 	andi	r2,r2,255
   8b1e8:	1005003a 	cmpeq	r2,r2,zero
   8b1ec:	1000081e 	bne	r2,zero,8b210 <OSTaskDel+0x2ec>
        OSLockNesting--;
   8b1f0:	00800274 	movhi	r2,9
   8b1f4:	10885b04 	addi	r2,r2,8556
   8b1f8:	10800003 	ldbu	r2,0(r2)
   8b1fc:	10bfffc4 	addi	r2,r2,-1
   8b200:	1007883a 	mov	r3,r2
   8b204:	00800274 	movhi	r2,9
   8b208:	10885b04 	addi	r2,r2,8556
   8b20c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   8b210:	e13ffc17 	ldw	r4,-16(fp)
   8b214:	008e7340 	call	8e734 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   8b218:	00800274 	movhi	r2,9
   8b21c:	10886344 	addi	r2,r2,8589
   8b220:	10800003 	ldbu	r2,0(r2)
   8b224:	10bfffc4 	addi	r2,r2,-1
   8b228:	1007883a 	mov	r3,r2
   8b22c:	00800274 	movhi	r2,9
   8b230:	10886344 	addi	r2,r2,8589
   8b234:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   8b238:	e0bffe03 	ldbu	r2,-8(fp)
   8b23c:	00c002b4 	movhi	r3,10
   8b240:	18e50004 	addi	r3,r3,-27648
   8b244:	1085883a 	add	r2,r2,r2
   8b248:	1085883a 	add	r2,r2,r2
   8b24c:	10c5883a 	add	r2,r2,r3
   8b250:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   8b254:	e0bffc17 	ldw	r2,-16(fp)
   8b258:	10800617 	ldw	r2,24(r2)
   8b25c:	1004c03a 	cmpne	r2,r2,zero
   8b260:	1000091e 	bne	r2,zero,8b288 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   8b264:	e0bffc17 	ldw	r2,-16(fp)
   8b268:	10800517 	ldw	r2,20(r2)
   8b26c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   8b270:	e0bffc17 	ldw	r2,-16(fp)
   8b274:	10c00517 	ldw	r3,20(r2)
   8b278:	00800274 	movhi	r2,9
   8b27c:	10885e04 	addi	r2,r2,8568
   8b280:	10c00015 	stw	r3,0(r2)
   8b284:	00000a06 	br	8b2b0 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   8b288:	e0bffc17 	ldw	r2,-16(fp)
   8b28c:	10c00617 	ldw	r3,24(r2)
   8b290:	e0bffc17 	ldw	r2,-16(fp)
   8b294:	10800517 	ldw	r2,20(r2)
   8b298:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   8b29c:	e0bffc17 	ldw	r2,-16(fp)
   8b2a0:	10c00517 	ldw	r3,20(r2)
   8b2a4:	e0bffc17 	ldw	r2,-16(fp)
   8b2a8:	10800617 	ldw	r2,24(r2)
   8b2ac:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   8b2b0:	00800274 	movhi	r2,9
   8b2b4:	10886204 	addi	r2,r2,8584
   8b2b8:	10c00017 	ldw	r3,0(r2)
   8b2bc:	e0bffc17 	ldw	r2,-16(fp)
   8b2c0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   8b2c4:	00c00274 	movhi	r3,9
   8b2c8:	18c86204 	addi	r3,r3,8584
   8b2cc:	e0bffc17 	ldw	r2,-16(fp)
   8b2d0:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   8b2d4:	e0fffc17 	ldw	r3,-16(fp)
   8b2d8:	00800fc4 	movi	r2,63
   8b2dc:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   8b2e0:	e0bffc17 	ldw	r2,-16(fp)
   8b2e4:	10001345 	stb	zero,77(r2)
   8b2e8:	e0bffb17 	ldw	r2,-20(fp)
   8b2ec:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b2f0:	e0bff517 	ldw	r2,-44(fp)
   8b2f4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   8b2f8:	00800274 	movhi	r2,9
   8b2fc:	10885b44 	addi	r2,r2,8557
   8b300:	10800003 	ldbu	r2,0(r2)
   8b304:	10803fcc 	andi	r2,r2,255
   8b308:	10800058 	cmpnei	r2,r2,1
   8b30c:	1000011e 	bne	r2,zero,8b314 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
   8b310:	0085d240 	call	85d24 <OS_Sched>
    }
    return (OS_ERR_NONE);
   8b314:	e03fff15 	stw	zero,-4(fp)
   8b318:	e0bfff17 	ldw	r2,-4(fp)
}
   8b31c:	e037883a 	mov	sp,fp
   8b320:	dfc00117 	ldw	ra,4(sp)
   8b324:	df000017 	ldw	fp,0(sp)
   8b328:	dec00204 	addi	sp,sp,8
   8b32c:	f800283a 	ret

0008b330 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   8b330:	defff404 	addi	sp,sp,-48
   8b334:	df000b15 	stw	fp,44(sp)
   8b338:	df000b04 	addi	fp,sp,44
   8b33c:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8b340:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   8b344:	e0bffe03 	ldbu	r2,-8(fp)
   8b348:	10800518 	cmpnei	r2,r2,20
   8b34c:	1000031e 	bne	r2,zero,8b35c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   8b350:	00800f84 	movi	r2,62
   8b354:	e0bfff15 	stw	r2,-4(fp)
   8b358:	00004c06 	br	8b48c <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   8b35c:	e0bffe03 	ldbu	r2,-8(fp)
   8b360:	10800530 	cmpltui	r2,r2,20
   8b364:	1000061e 	bne	r2,zero,8b380 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
   8b368:	e0bffe03 	ldbu	r2,-8(fp)
   8b36c:	10803fe0 	cmpeqi	r2,r2,255
   8b370:	1000031e 	bne	r2,zero,8b380 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
   8b374:	00800a84 	movi	r2,42
   8b378:	e0bfff15 	stw	r2,-4(fp)
   8b37c:	00004306 	br	8b48c <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   8b380:	e0bffe03 	ldbu	r2,-8(fp)
   8b384:	10803fd8 	cmpnei	r2,r2,255
   8b388:	1000141e 	bne	r2,zero,8b3dc <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b38c:	0005303a 	rdctl	r2,status
   8b390:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b394:	e0fffa17 	ldw	r3,-24(fp)
   8b398:	00bfff84 	movi	r2,-2
   8b39c:	1884703a 	and	r2,r3,r2
   8b3a0:	1001703a 	wrctl	status,r2
  
  return context;
   8b3a4:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   8b3a8:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   8b3ac:	00800274 	movhi	r2,9
   8b3b0:	10886a04 	addi	r2,r2,8616
   8b3b4:	10800017 	ldw	r2,0(r2)
   8b3b8:	10800dc3 	ldbu	r2,55(r2)
   8b3bc:	e0bffd05 	stb	r2,-12(fp)
   8b3c0:	e0bffb17 	ldw	r2,-20(fp)
   8b3c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b3c8:	e0bff917 	ldw	r2,-28(fp)
   8b3cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   8b3d0:	e0bffd03 	ldbu	r2,-12(fp)
   8b3d4:	e0bfff15 	stw	r2,-4(fp)
   8b3d8:	00002c06 	br	8b48c <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b3dc:	0005303a 	rdctl	r2,status
   8b3e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b3e4:	e0fff817 	ldw	r3,-32(fp)
   8b3e8:	00bfff84 	movi	r2,-2
   8b3ec:	1884703a 	and	r2,r3,r2
   8b3f0:	1001703a 	wrctl	status,r2
  
  return context;
   8b3f4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   8b3f8:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
   8b3fc:	e0bffe03 	ldbu	r2,-8(fp)
   8b400:	00c002b4 	movhi	r3,10
   8b404:	18e50004 	addi	r3,r3,-27648
   8b408:	1085883a 	add	r2,r2,r2
   8b40c:	1085883a 	add	r2,r2,r2
   8b410:	10c5883a 	add	r2,r2,r3
   8b414:	10800017 	ldw	r2,0(r2)
   8b418:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   8b41c:	e0bffc17 	ldw	r2,-16(fp)
   8b420:	1004c03a 	cmpne	r2,r2,zero
   8b424:	1000071e 	bne	r2,zero,8b444 <OSTaskDelReq+0x114>
   8b428:	e0bffb17 	ldw	r2,-20(fp)
   8b42c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b430:	e0bff717 	ldw	r2,-36(fp)
   8b434:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   8b438:	008010c4 	movi	r2,67
   8b43c:	e0bfff15 	stw	r2,-4(fp)
   8b440:	00001206 	br	8b48c <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   8b444:	e0bffc17 	ldw	r2,-16(fp)
   8b448:	10800058 	cmpnei	r2,r2,1
   8b44c:	1000071e 	bne	r2,zero,8b46c <OSTaskDelReq+0x13c>
   8b450:	e0bffb17 	ldw	r2,-20(fp)
   8b454:	e0bff615 	stw	r2,-40(fp)
   8b458:	e0bff617 	ldw	r2,-40(fp)
   8b45c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   8b460:	00800f44 	movi	r2,61
   8b464:	e0bfff15 	stw	r2,-4(fp)
   8b468:	00000806 	br	8b48c <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   8b46c:	e0fffc17 	ldw	r3,-16(fp)
   8b470:	00800fc4 	movi	r2,63
   8b474:	18800dc5 	stb	r2,55(r3)
   8b478:	e0bffb17 	ldw	r2,-20(fp)
   8b47c:	e0bff515 	stw	r2,-44(fp)
   8b480:	e0bff517 	ldw	r2,-44(fp)
   8b484:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   8b488:	e03fff15 	stw	zero,-4(fp)
   8b48c:	e0bfff17 	ldw	r2,-4(fp)
}
   8b490:	e037883a 	mov	sp,fp
   8b494:	df000017 	ldw	fp,0(sp)
   8b498:	dec00104 	addi	sp,sp,4
   8b49c:	f800283a 	ret

0008b4a0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   8b4a0:	defff304 	addi	sp,sp,-52
   8b4a4:	dfc00c15 	stw	ra,48(sp)
   8b4a8:	df000b15 	stw	fp,44(sp)
   8b4ac:	df000b04 	addi	fp,sp,44
   8b4b0:	e17ffd15 	stw	r5,-12(fp)
   8b4b4:	e1bffe15 	stw	r6,-8(fp)
   8b4b8:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   8b4bc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   8b4c0:	e0bffe17 	ldw	r2,-8(fp)
   8b4c4:	1004c03a 	cmpne	r2,r2,zero
   8b4c8:	1000021e 	bne	r2,zero,8b4d4 <OSTaskNameGet+0x34>
        return (0);
   8b4cc:	e03fff15 	stw	zero,-4(fp)
   8b4d0:	00005b06 	br	8b640 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   8b4d4:	e0bffc03 	ldbu	r2,-16(fp)
   8b4d8:	10800570 	cmpltui	r2,r2,21
   8b4dc:	1000081e 	bne	r2,zero,8b500 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   8b4e0:	e0bffc03 	ldbu	r2,-16(fp)
   8b4e4:	10803fe0 	cmpeqi	r2,r2,255
   8b4e8:	1000051e 	bne	r2,zero,8b500 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   8b4ec:	e0fffe17 	ldw	r3,-8(fp)
   8b4f0:	00800a84 	movi	r2,42
   8b4f4:	18800005 	stb	r2,0(r3)
            return (0);
   8b4f8:	e03fff15 	stw	zero,-4(fp)
   8b4fc:	00005006 	br	8b640 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   8b500:	e0bffd17 	ldw	r2,-12(fp)
   8b504:	1004c03a 	cmpne	r2,r2,zero
   8b508:	1000051e 	bne	r2,zero,8b520 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   8b50c:	e0fffe17 	ldw	r3,-8(fp)
   8b510:	00800304 	movi	r2,12
   8b514:	18800005 	stb	r2,0(r3)
        return (0);
   8b518:	e03fff15 	stw	zero,-4(fp)
   8b51c:	00004806 	br	8b640 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   8b520:	00800274 	movhi	r2,9
   8b524:	10886904 	addi	r2,r2,8612
   8b528:	10800003 	ldbu	r2,0(r2)
   8b52c:	10803fcc 	andi	r2,r2,255
   8b530:	1005003a 	cmpeq	r2,r2,zero
   8b534:	1000051e 	bne	r2,zero,8b54c <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
   8b538:	e0fffe17 	ldw	r3,-8(fp)
   8b53c:	00800444 	movi	r2,17
   8b540:	18800005 	stb	r2,0(r3)
        return (0);
   8b544:	e03fff15 	stw	zero,-4(fp)
   8b548:	00003d06 	br	8b640 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b54c:	0005303a 	rdctl	r2,status
   8b550:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b554:	e0fff817 	ldw	r3,-32(fp)
   8b558:	00bfff84 	movi	r2,-2
   8b55c:	1884703a 	and	r2,r3,r2
   8b560:	1001703a 	wrctl	status,r2
  
  return context;
   8b564:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   8b568:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   8b56c:	e0bffc03 	ldbu	r2,-16(fp)
   8b570:	10803fd8 	cmpnei	r2,r2,255
   8b574:	1000051e 	bne	r2,zero,8b58c <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
   8b578:	00800274 	movhi	r2,9
   8b57c:	10886a04 	addi	r2,r2,8616
   8b580:	10800017 	ldw	r2,0(r2)
   8b584:	10800c83 	ldbu	r2,50(r2)
   8b588:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   8b58c:	e0bffc03 	ldbu	r2,-16(fp)
   8b590:	00c002b4 	movhi	r3,10
   8b594:	18e50004 	addi	r3,r3,-27648
   8b598:	1085883a 	add	r2,r2,r2
   8b59c:	1085883a 	add	r2,r2,r2
   8b5a0:	10c5883a 	add	r2,r2,r3
   8b5a4:	10800017 	ldw	r2,0(r2)
   8b5a8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   8b5ac:	e0bffb17 	ldw	r2,-20(fp)
   8b5b0:	1004c03a 	cmpne	r2,r2,zero
   8b5b4:	1000091e 	bne	r2,zero,8b5dc <OSTaskNameGet+0x13c>
   8b5b8:	e0bff917 	ldw	r2,-28(fp)
   8b5bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b5c0:	e0bff717 	ldw	r2,-36(fp)
   8b5c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   8b5c8:	e0fffe17 	ldw	r3,-8(fp)
   8b5cc:	008010c4 	movi	r2,67
   8b5d0:	18800005 	stb	r2,0(r3)
        return (0);
   8b5d4:	e03fff15 	stw	zero,-4(fp)
   8b5d8:	00001906 	br	8b640 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   8b5dc:	e0bffb17 	ldw	r2,-20(fp)
   8b5e0:	10800058 	cmpnei	r2,r2,1
   8b5e4:	1000091e 	bne	r2,zero,8b60c <OSTaskNameGet+0x16c>
   8b5e8:	e0bff917 	ldw	r2,-28(fp)
   8b5ec:	e0bff615 	stw	r2,-40(fp)
   8b5f0:	e0bff617 	ldw	r2,-40(fp)
   8b5f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   8b5f8:	e0fffe17 	ldw	r3,-8(fp)
   8b5fc:	008010c4 	movi	r2,67
   8b600:	18800005 	stb	r2,0(r3)
        return (0);
   8b604:	e03fff15 	stw	zero,-4(fp)
   8b608:	00000d06 	br	8b640 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   8b60c:	e0bffb17 	ldw	r2,-20(fp)
   8b610:	11401304 	addi	r5,r2,76
   8b614:	e13ffd17 	ldw	r4,-12(fp)
   8b618:	0085e680 	call	85e68 <OS_StrCopy>
   8b61c:	e0bffa05 	stb	r2,-24(fp)
   8b620:	e0bff917 	ldw	r2,-28(fp)
   8b624:	e0bff515 	stw	r2,-44(fp)
   8b628:	e0bff517 	ldw	r2,-44(fp)
   8b62c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8b630:	e0bffe17 	ldw	r2,-8(fp)
   8b634:	10000005 	stb	zero,0(r2)
    return (len);
   8b638:	e0bffa03 	ldbu	r2,-24(fp)
   8b63c:	e0bfff15 	stw	r2,-4(fp)
   8b640:	e0bfff17 	ldw	r2,-4(fp)
}
   8b644:	e037883a 	mov	sp,fp
   8b648:	dfc00117 	ldw	ra,4(sp)
   8b64c:	df000017 	ldw	fp,0(sp)
   8b650:	dec00204 	addi	sp,sp,8
   8b654:	f800283a 	ret

0008b658 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   8b658:	defff304 	addi	sp,sp,-52
   8b65c:	dfc00c15 	stw	ra,48(sp)
   8b660:	df000b15 	stw	fp,44(sp)
   8b664:	df000b04 	addi	fp,sp,44
   8b668:	e17ffe15 	stw	r5,-8(fp)
   8b66c:	e1bfff15 	stw	r6,-4(fp)
   8b670:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   8b674:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   8b678:	e0bfff17 	ldw	r2,-4(fp)
   8b67c:	1005003a 	cmpeq	r2,r2,zero
   8b680:	1000611e 	bne	r2,zero,8b808 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   8b684:	e0bffd03 	ldbu	r2,-12(fp)
   8b688:	10800570 	cmpltui	r2,r2,21
   8b68c:	1000071e 	bne	r2,zero,8b6ac <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   8b690:	e0bffd03 	ldbu	r2,-12(fp)
   8b694:	10803fe0 	cmpeqi	r2,r2,255
   8b698:	1000041e 	bne	r2,zero,8b6ac <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   8b69c:	e0ffff17 	ldw	r3,-4(fp)
   8b6a0:	00800a84 	movi	r2,42
   8b6a4:	18800005 	stb	r2,0(r3)
            return;
   8b6a8:	00005706 	br	8b808 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   8b6ac:	e0bffe17 	ldw	r2,-8(fp)
   8b6b0:	1004c03a 	cmpne	r2,r2,zero
   8b6b4:	1000041e 	bne	r2,zero,8b6c8 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   8b6b8:	e0ffff17 	ldw	r3,-4(fp)
   8b6bc:	00800304 	movi	r2,12
   8b6c0:	18800005 	stb	r2,0(r3)
        return;
   8b6c4:	00005006 	br	8b808 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   8b6c8:	00800274 	movhi	r2,9
   8b6cc:	10886904 	addi	r2,r2,8612
   8b6d0:	10800003 	ldbu	r2,0(r2)
   8b6d4:	10803fcc 	andi	r2,r2,255
   8b6d8:	1005003a 	cmpeq	r2,r2,zero
   8b6dc:	1000041e 	bne	r2,zero,8b6f0 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
   8b6e0:	e0ffff17 	ldw	r3,-4(fp)
   8b6e4:	00800484 	movi	r2,18
   8b6e8:	18800005 	stb	r2,0(r3)
        return;
   8b6ec:	00004606 	br	8b808 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b6f0:	0005303a 	rdctl	r2,status
   8b6f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b6f8:	e0fff917 	ldw	r3,-28(fp)
   8b6fc:	00bfff84 	movi	r2,-2
   8b700:	1884703a 	and	r2,r3,r2
   8b704:	1001703a 	wrctl	status,r2
  
  return context;
   8b708:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   8b70c:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   8b710:	e0bffd03 	ldbu	r2,-12(fp)
   8b714:	10803fd8 	cmpnei	r2,r2,255
   8b718:	1000051e 	bne	r2,zero,8b730 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
   8b71c:	00800274 	movhi	r2,9
   8b720:	10886a04 	addi	r2,r2,8616
   8b724:	10800017 	ldw	r2,0(r2)
   8b728:	10800c83 	ldbu	r2,50(r2)
   8b72c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   8b730:	e0bffd03 	ldbu	r2,-12(fp)
   8b734:	00c002b4 	movhi	r3,10
   8b738:	18e50004 	addi	r3,r3,-27648
   8b73c:	1085883a 	add	r2,r2,r2
   8b740:	1085883a 	add	r2,r2,r2
   8b744:	10c5883a 	add	r2,r2,r3
   8b748:	10800017 	ldw	r2,0(r2)
   8b74c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   8b750:	e0bffb17 	ldw	r2,-20(fp)
   8b754:	1004c03a 	cmpne	r2,r2,zero
   8b758:	1000081e 	bne	r2,zero,8b77c <OSTaskNameSet+0x124>
   8b75c:	e0bffa17 	ldw	r2,-24(fp)
   8b760:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b764:	e0bff817 	ldw	r2,-32(fp)
   8b768:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   8b76c:	e0ffff17 	ldw	r3,-4(fp)
   8b770:	008010c4 	movi	r2,67
   8b774:	18800005 	stb	r2,0(r3)
        return;
   8b778:	00002306 	br	8b808 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   8b77c:	e0bffb17 	ldw	r2,-20(fp)
   8b780:	10800058 	cmpnei	r2,r2,1
   8b784:	1000081e 	bne	r2,zero,8b7a8 <OSTaskNameSet+0x150>
   8b788:	e0bffa17 	ldw	r2,-24(fp)
   8b78c:	e0bff715 	stw	r2,-36(fp)
   8b790:	e0bff717 	ldw	r2,-36(fp)
   8b794:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   8b798:	e0ffff17 	ldw	r3,-4(fp)
   8b79c:	008010c4 	movi	r2,67
   8b7a0:	18800005 	stb	r2,0(r3)
        return;
   8b7a4:	00001806 	br	8b808 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   8b7a8:	e13ffe17 	ldw	r4,-8(fp)
   8b7ac:	0085ee80 	call	85ee8 <OS_StrLen>
   8b7b0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   8b7b4:	e0bffc03 	ldbu	r2,-16(fp)
   8b7b8:	10800830 	cmpltui	r2,r2,32
   8b7bc:	1000081e 	bne	r2,zero,8b7e0 <OSTaskNameSet+0x188>
   8b7c0:	e0bffa17 	ldw	r2,-24(fp)
   8b7c4:	e0bff615 	stw	r2,-40(fp)
   8b7c8:	e0bff617 	ldw	r2,-40(fp)
   8b7cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   8b7d0:	e0ffff17 	ldw	r3,-4(fp)
   8b7d4:	00801044 	movi	r2,65
   8b7d8:	18800005 	stb	r2,0(r3)
        return;
   8b7dc:	00000a06 	br	8b808 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   8b7e0:	e0bffb17 	ldw	r2,-20(fp)
   8b7e4:	11001304 	addi	r4,r2,76
   8b7e8:	e17ffe17 	ldw	r5,-8(fp)
   8b7ec:	0085e680 	call	85e68 <OS_StrCopy>
   8b7f0:	e0bffa17 	ldw	r2,-24(fp)
   8b7f4:	e0bff515 	stw	r2,-44(fp)
   8b7f8:	e0bff517 	ldw	r2,-44(fp)
   8b7fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8b800:	e0bfff17 	ldw	r2,-4(fp)
   8b804:	10000005 	stb	zero,0(r2)
}
   8b808:	e037883a 	mov	sp,fp
   8b80c:	dfc00117 	ldw	ra,4(sp)
   8b810:	df000017 	ldw	fp,0(sp)
   8b814:	dec00204 	addi	sp,sp,8
   8b818:	f800283a 	ret

0008b81c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   8b81c:	defff304 	addi	sp,sp,-52
   8b820:	dfc00c15 	stw	ra,48(sp)
   8b824:	df000b15 	stw	fp,44(sp)
   8b828:	df000b04 	addi	fp,sp,44
   8b82c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   8b830:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   8b834:	e0bffe03 	ldbu	r2,-8(fp)
   8b838:	10800530 	cmpltui	r2,r2,20
   8b83c:	1000031e 	bne	r2,zero,8b84c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   8b840:	00800a84 	movi	r2,42
   8b844:	e0bfff15 	stw	r2,-4(fp)
   8b848:	00007406 	br	8ba1c <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b84c:	0005303a 	rdctl	r2,status
   8b850:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b854:	e0fffb17 	ldw	r3,-20(fp)
   8b858:	00bfff84 	movi	r2,-2
   8b85c:	1884703a 	and	r2,r3,r2
   8b860:	1001703a 	wrctl	status,r2
  
  return context;
   8b864:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8b868:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
   8b86c:	e0bffe03 	ldbu	r2,-8(fp)
   8b870:	00c002b4 	movhi	r3,10
   8b874:	18e50004 	addi	r3,r3,-27648
   8b878:	1085883a 	add	r2,r2,r2
   8b87c:	1085883a 	add	r2,r2,r2
   8b880:	10c5883a 	add	r2,r2,r3
   8b884:	10800017 	ldw	r2,0(r2)
   8b888:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   8b88c:	e0bffd17 	ldw	r2,-12(fp)
   8b890:	1004c03a 	cmpne	r2,r2,zero
   8b894:	1000071e 	bne	r2,zero,8b8b4 <OSTaskResume+0x98>
   8b898:	e0bffc17 	ldw	r2,-16(fp)
   8b89c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b8a0:	e0bffa17 	ldw	r2,-24(fp)
   8b8a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   8b8a8:	00801184 	movi	r2,70
   8b8ac:	e0bfff15 	stw	r2,-4(fp)
   8b8b0:	00005a06 	br	8ba1c <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   8b8b4:	e0bffd17 	ldw	r2,-12(fp)
   8b8b8:	10800058 	cmpnei	r2,r2,1
   8b8bc:	1000071e 	bne	r2,zero,8b8dc <OSTaskResume+0xc0>
   8b8c0:	e0bffc17 	ldw	r2,-16(fp)
   8b8c4:	e0bff915 	stw	r2,-28(fp)
   8b8c8:	e0bff917 	ldw	r2,-28(fp)
   8b8cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   8b8d0:	008010c4 	movi	r2,67
   8b8d4:	e0bfff15 	stw	r2,-4(fp)
   8b8d8:	00005006 	br	8ba1c <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   8b8dc:	e0bffd17 	ldw	r2,-12(fp)
   8b8e0:	10800c03 	ldbu	r2,48(r2)
   8b8e4:	10803fcc 	andi	r2,r2,255
   8b8e8:	1080020c 	andi	r2,r2,8
   8b8ec:	1005003a 	cmpeq	r2,r2,zero
   8b8f0:	1000441e 	bne	r2,zero,8ba04 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   8b8f4:	e0bffd17 	ldw	r2,-12(fp)
   8b8f8:	10c00c03 	ldbu	r3,48(r2)
   8b8fc:	00bffdc4 	movi	r2,-9
   8b900:	1884703a 	and	r2,r3,r2
   8b904:	1007883a 	mov	r3,r2
   8b908:	e0bffd17 	ldw	r2,-12(fp)
   8b90c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   8b910:	e0bffd17 	ldw	r2,-12(fp)
   8b914:	10800c03 	ldbu	r2,48(r2)
   8b918:	10803fcc 	andi	r2,r2,255
   8b91c:	1004c03a 	cmpne	r2,r2,zero
   8b920:	1000321e 	bne	r2,zero,8b9ec <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
   8b924:	e0bffd17 	ldw	r2,-12(fp)
   8b928:	10800b8b 	ldhu	r2,46(r2)
   8b92c:	10bfffcc 	andi	r2,r2,65535
   8b930:	1004c03a 	cmpne	r2,r2,zero
   8b934:	1000281e 	bne	r2,zero,8b9d8 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   8b938:	e0bffd17 	ldw	r2,-12(fp)
   8b93c:	10c00d83 	ldbu	r3,54(r2)
   8b940:	00800274 	movhi	r2,9
   8b944:	10886704 	addi	r2,r2,8604
   8b948:	10800003 	ldbu	r2,0(r2)
   8b94c:	1884b03a 	or	r2,r3,r2
   8b950:	1007883a 	mov	r3,r2
   8b954:	00800274 	movhi	r2,9
   8b958:	10886704 	addi	r2,r2,8604
   8b95c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8b960:	e0bffd17 	ldw	r2,-12(fp)
   8b964:	10800d03 	ldbu	r2,52(r2)
   8b968:	11003fcc 	andi	r4,r2,255
   8b96c:	e0bffd17 	ldw	r2,-12(fp)
   8b970:	10800d03 	ldbu	r2,52(r2)
   8b974:	10c03fcc 	andi	r3,r2,255
   8b978:	00800274 	movhi	r2,9
   8b97c:	10886744 	addi	r2,r2,8605
   8b980:	10c5883a 	add	r2,r2,r3
   8b984:	10c00003 	ldbu	r3,0(r2)
   8b988:	e0bffd17 	ldw	r2,-12(fp)
   8b98c:	10800d43 	ldbu	r2,53(r2)
   8b990:	1884b03a 	or	r2,r3,r2
   8b994:	1007883a 	mov	r3,r2
   8b998:	00800274 	movhi	r2,9
   8b99c:	10886744 	addi	r2,r2,8605
   8b9a0:	1105883a 	add	r2,r2,r4
   8b9a4:	10c00005 	stb	r3,0(r2)
   8b9a8:	e0bffc17 	ldw	r2,-16(fp)
   8b9ac:	e0bff815 	stw	r2,-32(fp)
   8b9b0:	e0bff817 	ldw	r2,-32(fp)
   8b9b4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   8b9b8:	00800274 	movhi	r2,9
   8b9bc:	10885b44 	addi	r2,r2,8557
   8b9c0:	10800003 	ldbu	r2,0(r2)
   8b9c4:	10803fcc 	andi	r2,r2,255
   8b9c8:	10800058 	cmpnei	r2,r2,1
   8b9cc:	10000b1e 	bne	r2,zero,8b9fc <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
   8b9d0:	0085d240 	call	85d24 <OS_Sched>
   8b9d4:	00000906 	br	8b9fc <OSTaskResume+0x1e0>
   8b9d8:	e0bffc17 	ldw	r2,-16(fp)
   8b9dc:	e0bff715 	stw	r2,-36(fp)
   8b9e0:	e0bff717 	ldw	r2,-36(fp)
   8b9e4:	1001703a 	wrctl	status,r2
   8b9e8:	00000406 	br	8b9fc <OSTaskResume+0x1e0>
   8b9ec:	e0bffc17 	ldw	r2,-16(fp)
   8b9f0:	e0bff615 	stw	r2,-40(fp)
   8b9f4:	e0bff617 	ldw	r2,-40(fp)
   8b9f8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   8b9fc:	e03fff15 	stw	zero,-4(fp)
   8ba00:	00000606 	br	8ba1c <OSTaskResume+0x200>
   8ba04:	e0bffc17 	ldw	r2,-16(fp)
   8ba08:	e0bff515 	stw	r2,-44(fp)
   8ba0c:	e0bff517 	ldw	r2,-44(fp)
   8ba10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   8ba14:	00801104 	movi	r2,68
   8ba18:	e0bfff15 	stw	r2,-4(fp)
   8ba1c:	e0bfff17 	ldw	r2,-4(fp)
}
   8ba20:	e037883a 	mov	sp,fp
   8ba24:	dfc00117 	ldw	ra,4(sp)
   8ba28:	df000017 	ldw	fp,0(sp)
   8ba2c:	dec00204 	addi	sp,sp,8
   8ba30:	f800283a 	ret

0008ba34 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   8ba34:	defff204 	addi	sp,sp,-56
   8ba38:	df000d15 	stw	fp,52(sp)
   8ba3c:	df000d04 	addi	fp,sp,52
   8ba40:	e17ffe15 	stw	r5,-8(fp)
   8ba44:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   8ba48:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   8ba4c:	e0bffd03 	ldbu	r2,-12(fp)
   8ba50:	10800570 	cmpltui	r2,r2,21
   8ba54:	1000061e 	bne	r2,zero,8ba70 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   8ba58:	e0bffd03 	ldbu	r2,-12(fp)
   8ba5c:	10803fe0 	cmpeqi	r2,r2,255
   8ba60:	1000031e 	bne	r2,zero,8ba70 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   8ba64:	00800a84 	movi	r2,42
   8ba68:	e0bfff15 	stw	r2,-4(fp)
   8ba6c:	00006b06 	br	8bc1c <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   8ba70:	e0bffe17 	ldw	r2,-8(fp)
   8ba74:	1004c03a 	cmpne	r2,r2,zero
   8ba78:	1000031e 	bne	r2,zero,8ba88 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
   8ba7c:	00800244 	movi	r2,9
   8ba80:	e0bfff15 	stw	r2,-4(fp)
   8ba84:	00006506 	br	8bc1c <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   8ba88:	e0bffe17 	ldw	r2,-8(fp)
   8ba8c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   8ba90:	e0bffe17 	ldw	r2,-8(fp)
   8ba94:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ba98:	0005303a 	rdctl	r2,status
   8ba9c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8baa0:	e0fff717 	ldw	r3,-36(fp)
   8baa4:	00bfff84 	movi	r2,-2
   8baa8:	1884703a 	and	r2,r3,r2
   8baac:	1001703a 	wrctl	status,r2
  
  return context;
   8bab0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   8bab4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   8bab8:	e0bffd03 	ldbu	r2,-12(fp)
   8babc:	10803fd8 	cmpnei	r2,r2,255
   8bac0:	1000051e 	bne	r2,zero,8bad8 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
   8bac4:	00800274 	movhi	r2,9
   8bac8:	10886a04 	addi	r2,r2,8616
   8bacc:	10800017 	ldw	r2,0(r2)
   8bad0:	10800c83 	ldbu	r2,50(r2)
   8bad4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   8bad8:	e0bffd03 	ldbu	r2,-12(fp)
   8badc:	00c002b4 	movhi	r3,10
   8bae0:	18e50004 	addi	r3,r3,-27648
   8bae4:	1085883a 	add	r2,r2,r2
   8bae8:	1085883a 	add	r2,r2,r2
   8baec:	10c5883a 	add	r2,r2,r3
   8baf0:	10800017 	ldw	r2,0(r2)
   8baf4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   8baf8:	e0bffc17 	ldw	r2,-16(fp)
   8bafc:	1004c03a 	cmpne	r2,r2,zero
   8bb00:	1000071e 	bne	r2,zero,8bb20 <OSTaskStkChk+0xec>
   8bb04:	e0bff817 	ldw	r2,-32(fp)
   8bb08:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bb0c:	e0bff617 	ldw	r2,-40(fp)
   8bb10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   8bb14:	008010c4 	movi	r2,67
   8bb18:	e0bfff15 	stw	r2,-4(fp)
   8bb1c:	00003f06 	br	8bc1c <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   8bb20:	e0bffc17 	ldw	r2,-16(fp)
   8bb24:	10800058 	cmpnei	r2,r2,1
   8bb28:	1000071e 	bne	r2,zero,8bb48 <OSTaskStkChk+0x114>
   8bb2c:	e0bff817 	ldw	r2,-32(fp)
   8bb30:	e0bff515 	stw	r2,-44(fp)
   8bb34:	e0bff517 	ldw	r2,-44(fp)
   8bb38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   8bb3c:	008010c4 	movi	r2,67
   8bb40:	e0bfff15 	stw	r2,-4(fp)
   8bb44:	00003506 	br	8bc1c <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   8bb48:	e0bffc17 	ldw	r2,-16(fp)
   8bb4c:	1080040b 	ldhu	r2,16(r2)
   8bb50:	10bfffcc 	andi	r2,r2,65535
   8bb54:	1080004c 	andi	r2,r2,1
   8bb58:	1004c03a 	cmpne	r2,r2,zero
   8bb5c:	1000071e 	bne	r2,zero,8bb7c <OSTaskStkChk+0x148>
   8bb60:	e0bff817 	ldw	r2,-32(fp)
   8bb64:	e0bff415 	stw	r2,-48(fp)
   8bb68:	e0bff417 	ldw	r2,-48(fp)
   8bb6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   8bb70:	00801144 	movi	r2,69
   8bb74:	e0bfff15 	stw	r2,-4(fp)
   8bb78:	00002806 	br	8bc1c <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
   8bb7c:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
   8bb80:	e0bffc17 	ldw	r2,-16(fp)
   8bb84:	10800317 	ldw	r2,12(r2)
   8bb88:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
   8bb8c:	e0bffc17 	ldw	r2,-16(fp)
   8bb90:	10800217 	ldw	r2,8(r2)
   8bb94:	e0bffb15 	stw	r2,-20(fp)
   8bb98:	e0bff817 	ldw	r2,-32(fp)
   8bb9c:	e0bff315 	stw	r2,-52(fp)
   8bba0:	e0bff317 	ldw	r2,-52(fp)
   8bba4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   8bba8:	00000306 	br	8bbb8 <OSTaskStkChk+0x184>
        nfree++;
   8bbac:	e0bffa17 	ldw	r2,-24(fp)
   8bbb0:	10800044 	addi	r2,r2,1
   8bbb4:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   8bbb8:	e0bffb17 	ldw	r2,-20(fp)
   8bbbc:	10800017 	ldw	r2,0(r2)
   8bbc0:	1005003a 	cmpeq	r2,r2,zero
   8bbc4:	1007883a 	mov	r3,r2
   8bbc8:	e0bffb17 	ldw	r2,-20(fp)
   8bbcc:	10800104 	addi	r2,r2,4
   8bbd0:	e0bffb15 	stw	r2,-20(fp)
   8bbd4:	18803fcc 	andi	r2,r3,255
   8bbd8:	1004c03a 	cmpne	r2,r2,zero
   8bbdc:	103ff31e 	bne	r2,zero,8bbac <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   8bbe0:	e0bffa17 	ldw	r2,-24(fp)
   8bbe4:	1085883a 	add	r2,r2,r2
   8bbe8:	1085883a 	add	r2,r2,r2
   8bbec:	1007883a 	mov	r3,r2
   8bbf0:	e0bffe17 	ldw	r2,-8(fp)
   8bbf4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   8bbf8:	e0fff917 	ldw	r3,-28(fp)
   8bbfc:	e0bffa17 	ldw	r2,-24(fp)
   8bc00:	1885c83a 	sub	r2,r3,r2
   8bc04:	1085883a 	add	r2,r2,r2
   8bc08:	1085883a 	add	r2,r2,r2
   8bc0c:	1007883a 	mov	r3,r2
   8bc10:	e0bffe17 	ldw	r2,-8(fp)
   8bc14:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   8bc18:	e03fff15 	stw	zero,-4(fp)
   8bc1c:	e0bfff17 	ldw	r2,-4(fp)
}
   8bc20:	e037883a 	mov	sp,fp
   8bc24:	df000017 	ldw	fp,0(sp)
   8bc28:	dec00104 	addi	sp,sp,4
   8bc2c:	f800283a 	ret

0008bc30 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   8bc30:	defff404 	addi	sp,sp,-48
   8bc34:	dfc00b15 	stw	ra,44(sp)
   8bc38:	df000a15 	stw	fp,40(sp)
   8bc3c:	df000a04 	addi	fp,sp,40
   8bc40:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8bc44:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   8bc48:	e0bffe03 	ldbu	r2,-8(fp)
   8bc4c:	10800518 	cmpnei	r2,r2,20
   8bc50:	1000031e 	bne	r2,zero,8bc60 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   8bc54:	008011c4 	movi	r2,71
   8bc58:	e0bfff15 	stw	r2,-4(fp)
   8bc5c:	00007906 	br	8be44 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   8bc60:	e0bffe03 	ldbu	r2,-8(fp)
   8bc64:	10800530 	cmpltui	r2,r2,20
   8bc68:	1000061e 	bne	r2,zero,8bc84 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
   8bc6c:	e0bffe03 	ldbu	r2,-8(fp)
   8bc70:	10803fe0 	cmpeqi	r2,r2,255
   8bc74:	1000031e 	bne	r2,zero,8bc84 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
   8bc78:	00800a84 	movi	r2,42
   8bc7c:	e0bfff15 	stw	r2,-4(fp)
   8bc80:	00007006 	br	8be44 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bc84:	0005303a 	rdctl	r2,status
   8bc88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bc8c:	e0fff917 	ldw	r3,-28(fp)
   8bc90:	00bfff84 	movi	r2,-2
   8bc94:	1884703a 	and	r2,r3,r2
   8bc98:	1001703a 	wrctl	status,r2
  
  return context;
   8bc9c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   8bca0:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   8bca4:	e0bffe03 	ldbu	r2,-8(fp)
   8bca8:	10803fd8 	cmpnei	r2,r2,255
   8bcac:	1000081e 	bne	r2,zero,8bcd0 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
   8bcb0:	00800274 	movhi	r2,9
   8bcb4:	10886a04 	addi	r2,r2,8616
   8bcb8:	10800017 	ldw	r2,0(r2)
   8bcbc:	10800c83 	ldbu	r2,50(r2)
   8bcc0:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
   8bcc4:	00800044 	movi	r2,1
   8bcc8:	e0bffd05 	stb	r2,-12(fp)
   8bccc:	00000b06 	br	8bcfc <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   8bcd0:	00800274 	movhi	r2,9
   8bcd4:	10886a04 	addi	r2,r2,8616
   8bcd8:	10800017 	ldw	r2,0(r2)
   8bcdc:	10800c83 	ldbu	r2,50(r2)
   8bce0:	10c03fcc 	andi	r3,r2,255
   8bce4:	e0bffe03 	ldbu	r2,-8(fp)
   8bce8:	1880031e 	bne	r3,r2,8bcf8 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
   8bcec:	00800044 	movi	r2,1
   8bcf0:	e0bffd05 	stb	r2,-12(fp)
   8bcf4:	00000106 	br	8bcfc <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   8bcf8:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   8bcfc:	e0bffe03 	ldbu	r2,-8(fp)
   8bd00:	00c002b4 	movhi	r3,10
   8bd04:	18e50004 	addi	r3,r3,-27648
   8bd08:	1085883a 	add	r2,r2,r2
   8bd0c:	1085883a 	add	r2,r2,r2
   8bd10:	10c5883a 	add	r2,r2,r3
   8bd14:	10800017 	ldw	r2,0(r2)
   8bd18:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   8bd1c:	e0bffc17 	ldw	r2,-16(fp)
   8bd20:	1004c03a 	cmpne	r2,r2,zero
   8bd24:	1000071e 	bne	r2,zero,8bd44 <OSTaskSuspend+0x114>
   8bd28:	e0bffa17 	ldw	r2,-24(fp)
   8bd2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bd30:	e0bff817 	ldw	r2,-32(fp)
   8bd34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   8bd38:	00801204 	movi	r2,72
   8bd3c:	e0bfff15 	stw	r2,-4(fp)
   8bd40:	00004006 	br	8be44 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   8bd44:	e0bffc17 	ldw	r2,-16(fp)
   8bd48:	10800058 	cmpnei	r2,r2,1
   8bd4c:	1000071e 	bne	r2,zero,8bd6c <OSTaskSuspend+0x13c>
   8bd50:	e0bffa17 	ldw	r2,-24(fp)
   8bd54:	e0bff715 	stw	r2,-36(fp)
   8bd58:	e0bff717 	ldw	r2,-36(fp)
   8bd5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   8bd60:	008010c4 	movi	r2,67
   8bd64:	e0bfff15 	stw	r2,-4(fp)
   8bd68:	00003606 	br	8be44 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
   8bd6c:	e0bffc17 	ldw	r2,-16(fp)
   8bd70:	10800d03 	ldbu	r2,52(r2)
   8bd74:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   8bd78:	e13ffb03 	ldbu	r4,-20(fp)
   8bd7c:	e0fffb03 	ldbu	r3,-20(fp)
   8bd80:	00800274 	movhi	r2,9
   8bd84:	10886744 	addi	r2,r2,8605
   8bd88:	10c5883a 	add	r2,r2,r3
   8bd8c:	10800003 	ldbu	r2,0(r2)
   8bd90:	1007883a 	mov	r3,r2
   8bd94:	e0bffc17 	ldw	r2,-16(fp)
   8bd98:	10800d43 	ldbu	r2,53(r2)
   8bd9c:	0084303a 	nor	r2,zero,r2
   8bda0:	1884703a 	and	r2,r3,r2
   8bda4:	1007883a 	mov	r3,r2
   8bda8:	00800274 	movhi	r2,9
   8bdac:	10886744 	addi	r2,r2,8605
   8bdb0:	1105883a 	add	r2,r2,r4
   8bdb4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   8bdb8:	e0fffb03 	ldbu	r3,-20(fp)
   8bdbc:	00800274 	movhi	r2,9
   8bdc0:	10886744 	addi	r2,r2,8605
   8bdc4:	10c5883a 	add	r2,r2,r3
   8bdc8:	10800003 	ldbu	r2,0(r2)
   8bdcc:	10803fcc 	andi	r2,r2,255
   8bdd0:	1004c03a 	cmpne	r2,r2,zero
   8bdd4:	10000c1e 	bne	r2,zero,8be08 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   8bdd8:	e0bffc17 	ldw	r2,-16(fp)
   8bddc:	10800d83 	ldbu	r2,54(r2)
   8bde0:	0084303a 	nor	r2,zero,r2
   8bde4:	1007883a 	mov	r3,r2
   8bde8:	00800274 	movhi	r2,9
   8bdec:	10886704 	addi	r2,r2,8604
   8bdf0:	10800003 	ldbu	r2,0(r2)
   8bdf4:	1884703a 	and	r2,r3,r2
   8bdf8:	1007883a 	mov	r3,r2
   8bdfc:	00800274 	movhi	r2,9
   8be00:	10886704 	addi	r2,r2,8604
   8be04:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   8be08:	e0bffc17 	ldw	r2,-16(fp)
   8be0c:	10800c03 	ldbu	r2,48(r2)
   8be10:	10800214 	ori	r2,r2,8
   8be14:	1007883a 	mov	r3,r2
   8be18:	e0bffc17 	ldw	r2,-16(fp)
   8be1c:	10c00c05 	stb	r3,48(r2)
   8be20:	e0bffa17 	ldw	r2,-24(fp)
   8be24:	e0bff615 	stw	r2,-40(fp)
   8be28:	e0bff617 	ldw	r2,-40(fp)
   8be2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   8be30:	e0bffd03 	ldbu	r2,-12(fp)
   8be34:	10800058 	cmpnei	r2,r2,1
   8be38:	1000011e 	bne	r2,zero,8be40 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
   8be3c:	0085d240 	call	85d24 <OS_Sched>
    }
    return (OS_ERR_NONE);
   8be40:	e03fff15 	stw	zero,-4(fp)
   8be44:	e0bfff17 	ldw	r2,-4(fp)
}
   8be48:	e037883a 	mov	sp,fp
   8be4c:	dfc00117 	ldw	ra,4(sp)
   8be50:	df000017 	ldw	fp,0(sp)
   8be54:	dec00204 	addi	sp,sp,8
   8be58:	f800283a 	ret

0008be5c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   8be5c:	defff504 	addi	sp,sp,-44
   8be60:	dfc00a15 	stw	ra,40(sp)
   8be64:	df000915 	stw	fp,36(sp)
   8be68:	df000904 	addi	fp,sp,36
   8be6c:	e17ffe15 	stw	r5,-8(fp)
   8be70:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8be74:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   8be78:	e0bffd03 	ldbu	r2,-12(fp)
   8be7c:	10800570 	cmpltui	r2,r2,21
   8be80:	1000061e 	bne	r2,zero,8be9c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   8be84:	e0bffd03 	ldbu	r2,-12(fp)
   8be88:	10803fe0 	cmpeqi	r2,r2,255
   8be8c:	1000031e 	bne	r2,zero,8be9c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   8be90:	00800a84 	movi	r2,42
   8be94:	e0bfff15 	stw	r2,-4(fp)
   8be98:	00003b06 	br	8bf88 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   8be9c:	e0bffe17 	ldw	r2,-8(fp)
   8bea0:	1004c03a 	cmpne	r2,r2,zero
   8bea4:	1000031e 	bne	r2,zero,8beb4 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
   8bea8:	00800244 	movi	r2,9
   8beac:	e0bfff15 	stw	r2,-4(fp)
   8beb0:	00003506 	br	8bf88 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8beb4:	0005303a 	rdctl	r2,status
   8beb8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bebc:	e0fffa17 	ldw	r3,-24(fp)
   8bec0:	00bfff84 	movi	r2,-2
   8bec4:	1884703a 	and	r2,r3,r2
   8bec8:	1001703a 	wrctl	status,r2
  
  return context;
   8becc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8bed0:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   8bed4:	e0bffd03 	ldbu	r2,-12(fp)
   8bed8:	10803fd8 	cmpnei	r2,r2,255
   8bedc:	1000051e 	bne	r2,zero,8bef4 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
   8bee0:	00800274 	movhi	r2,9
   8bee4:	10886a04 	addi	r2,r2,8616
   8bee8:	10800017 	ldw	r2,0(r2)
   8beec:	10800c83 	ldbu	r2,50(r2)
   8bef0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   8bef4:	e0bffd03 	ldbu	r2,-12(fp)
   8bef8:	00c002b4 	movhi	r3,10
   8befc:	18e50004 	addi	r3,r3,-27648
   8bf00:	1085883a 	add	r2,r2,r2
   8bf04:	1085883a 	add	r2,r2,r2
   8bf08:	10c5883a 	add	r2,r2,r3
   8bf0c:	10800017 	ldw	r2,0(r2)
   8bf10:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   8bf14:	e0bffc17 	ldw	r2,-16(fp)
   8bf18:	1004c03a 	cmpne	r2,r2,zero
   8bf1c:	1000071e 	bne	r2,zero,8bf3c <OSTaskQuery+0xe0>
   8bf20:	e0bffb17 	ldw	r2,-20(fp)
   8bf24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bf28:	e0bff917 	ldw	r2,-28(fp)
   8bf2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   8bf30:	00800a44 	movi	r2,41
   8bf34:	e0bfff15 	stw	r2,-4(fp)
   8bf38:	00001306 	br	8bf88 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   8bf3c:	e0bffc17 	ldw	r2,-16(fp)
   8bf40:	10800058 	cmpnei	r2,r2,1
   8bf44:	1000071e 	bne	r2,zero,8bf64 <OSTaskQuery+0x108>
   8bf48:	e0bffb17 	ldw	r2,-20(fp)
   8bf4c:	e0bff815 	stw	r2,-32(fp)
   8bf50:	e0bff817 	ldw	r2,-32(fp)
   8bf54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   8bf58:	008010c4 	movi	r2,67
   8bf5c:	e0bfff15 	stw	r2,-4(fp)
   8bf60:	00000906 	br	8bf88 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   8bf64:	e13ffe17 	ldw	r4,-8(fp)
   8bf68:	e17ffc17 	ldw	r5,-16(fp)
   8bf6c:	01801b04 	movi	r6,108
   8bf70:	0085cb80 	call	85cb8 <OS_MemCopy>
   8bf74:	e0bffb17 	ldw	r2,-20(fp)
   8bf78:	e0bff715 	stw	r2,-36(fp)
   8bf7c:	e0bff717 	ldw	r2,-36(fp)
   8bf80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   8bf84:	e03fff15 	stw	zero,-4(fp)
   8bf88:	e0bfff17 	ldw	r2,-4(fp)
}
   8bf8c:	e037883a 	mov	sp,fp
   8bf90:	dfc00117 	ldw	ra,4(sp)
   8bf94:	df000017 	ldw	fp,0(sp)
   8bf98:	dec00204 	addi	sp,sp,8
   8bf9c:	f800283a 	ret

0008bfa0 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   8bfa0:	defffc04 	addi	sp,sp,-16
   8bfa4:	df000315 	stw	fp,12(sp)
   8bfa8:	df000304 	addi	fp,sp,12
   8bfac:	e13ffd15 	stw	r4,-12(fp)
   8bfb0:	e17ffe15 	stw	r5,-8(fp)
   8bfb4:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   8bfb8:	e0bfff0b 	ldhu	r2,-4(fp)
   8bfbc:	1080004c 	andi	r2,r2,1
   8bfc0:	10803fcc 	andi	r2,r2,255
   8bfc4:	1005003a 	cmpeq	r2,r2,zero
   8bfc8:	1000101e 	bne	r2,zero,8c00c <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   8bfcc:	e0bfff0b 	ldhu	r2,-4(fp)
   8bfd0:	1080008c 	andi	r2,r2,2
   8bfd4:	1005003a 	cmpeq	r2,r2,zero
   8bfd8:	10000c1e 	bne	r2,zero,8c00c <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   8bfdc:	00000806 	br	8c000 <OS_TaskStkClr+0x60>
                size--;
   8bfe0:	e0bffe17 	ldw	r2,-8(fp)
   8bfe4:	10bfffc4 	addi	r2,r2,-1
   8bfe8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   8bfec:	e0bffd17 	ldw	r2,-12(fp)
   8bff0:	10000015 	stw	zero,0(r2)
   8bff4:	e0bffd17 	ldw	r2,-12(fp)
   8bff8:	10800104 	addi	r2,r2,4
   8bffc:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   8c000:	e0bffe17 	ldw	r2,-8(fp)
   8c004:	1004c03a 	cmpne	r2,r2,zero
   8c008:	103ff51e 	bne	r2,zero,8bfe0 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   8c00c:	e037883a 	mov	sp,fp
   8c010:	df000017 	ldw	fp,0(sp)
   8c014:	dec00104 	addi	sp,sp,4
   8c018:	f800283a 	ret

0008c01c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   8c01c:	defff904 	addi	sp,sp,-28
   8c020:	dfc00615 	stw	ra,24(sp)
   8c024:	df000515 	stw	fp,20(sp)
   8c028:	df000504 	addi	fp,sp,20
   8c02c:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8c030:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8c034:	00800274 	movhi	r2,9
   8c038:	10886904 	addi	r2,r2,8612
   8c03c:	10800003 	ldbu	r2,0(r2)
   8c040:	10803fcc 	andi	r2,r2,255
   8c044:	1004c03a 	cmpne	r2,r2,zero
   8c048:	1000421e 	bne	r2,zero,8c154 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   8c04c:	e0bfff0b 	ldhu	r2,-4(fp)
   8c050:	1005003a 	cmpeq	r2,r2,zero
   8c054:	10003f1e 	bne	r2,zero,8c154 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c058:	0005303a 	rdctl	r2,status
   8c05c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c060:	e0fffc17 	ldw	r3,-16(fp)
   8c064:	00bfff84 	movi	r2,-2
   8c068:	1884703a 	and	r2,r3,r2
   8c06c:	1001703a 	wrctl	status,r2
  
  return context;
   8c070:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
   8c074:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   8c078:	00800274 	movhi	r2,9
   8c07c:	10886a04 	addi	r2,r2,8616
   8c080:	10800017 	ldw	r2,0(r2)
   8c084:	10800d03 	ldbu	r2,52(r2)
   8c088:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   8c08c:	e13ffe03 	ldbu	r4,-8(fp)
   8c090:	e0fffe03 	ldbu	r3,-8(fp)
   8c094:	00800274 	movhi	r2,9
   8c098:	10886744 	addi	r2,r2,8605
   8c09c:	10c5883a 	add	r2,r2,r3
   8c0a0:	10800003 	ldbu	r2,0(r2)
   8c0a4:	1007883a 	mov	r3,r2
   8c0a8:	00800274 	movhi	r2,9
   8c0ac:	10886a04 	addi	r2,r2,8616
   8c0b0:	10800017 	ldw	r2,0(r2)
   8c0b4:	10800d43 	ldbu	r2,53(r2)
   8c0b8:	0084303a 	nor	r2,zero,r2
   8c0bc:	1884703a 	and	r2,r3,r2
   8c0c0:	1007883a 	mov	r3,r2
   8c0c4:	00800274 	movhi	r2,9
   8c0c8:	10886744 	addi	r2,r2,8605
   8c0cc:	1105883a 	add	r2,r2,r4
   8c0d0:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
   8c0d4:	e0fffe03 	ldbu	r3,-8(fp)
   8c0d8:	00800274 	movhi	r2,9
   8c0dc:	10886744 	addi	r2,r2,8605
   8c0e0:	10c5883a 	add	r2,r2,r3
   8c0e4:	10800003 	ldbu	r2,0(r2)
   8c0e8:	10803fcc 	andi	r2,r2,255
   8c0ec:	1004c03a 	cmpne	r2,r2,zero
   8c0f0:	10000e1e 	bne	r2,zero,8c12c <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   8c0f4:	00800274 	movhi	r2,9
   8c0f8:	10886a04 	addi	r2,r2,8616
   8c0fc:	10800017 	ldw	r2,0(r2)
   8c100:	10800d83 	ldbu	r2,54(r2)
   8c104:	0084303a 	nor	r2,zero,r2
   8c108:	1007883a 	mov	r3,r2
   8c10c:	00800274 	movhi	r2,9
   8c110:	10886704 	addi	r2,r2,8604
   8c114:	10800003 	ldbu	r2,0(r2)
   8c118:	1884703a 	and	r2,r3,r2
   8c11c:	1007883a 	mov	r3,r2
   8c120:	00800274 	movhi	r2,9
   8c124:	10886704 	addi	r2,r2,8604
   8c128:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   8c12c:	00800274 	movhi	r2,9
   8c130:	10886a04 	addi	r2,r2,8616
   8c134:	10c00017 	ldw	r3,0(r2)
   8c138:	e0bfff0b 	ldhu	r2,-4(fp)
   8c13c:	18800b8d 	sth	r2,46(r3)
   8c140:	e0bffd17 	ldw	r2,-12(fp)
   8c144:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c148:	e0bffb17 	ldw	r2,-20(fp)
   8c14c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   8c150:	0085d240 	call	85d24 <OS_Sched>
    }
}
   8c154:	e037883a 	mov	sp,fp
   8c158:	dfc00117 	ldw	ra,4(sp)
   8c15c:	df000017 	ldw	fp,0(sp)
   8c160:	dec00204 	addi	sp,sp,8
   8c164:	f800283a 	ret

0008c168 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   8c168:	defff604 	addi	sp,sp,-40
   8c16c:	dfc00915 	stw	ra,36(sp)
   8c170:	df000815 	stw	fp,32(sp)
   8c174:	dc000715 	stw	r16,28(sp)
   8c178:	df000704 	addi	fp,sp,28
   8c17c:	e13ffb05 	stb	r4,-20(fp)
   8c180:	e17ffc05 	stb	r5,-16(fp)
   8c184:	e1bffd05 	stb	r6,-12(fp)
   8c188:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8c18c:	00800274 	movhi	r2,9
   8c190:	10886904 	addi	r2,r2,8612
   8c194:	10800003 	ldbu	r2,0(r2)
   8c198:	10803fcc 	andi	r2,r2,255
   8c19c:	1005003a 	cmpeq	r2,r2,zero
   8c1a0:	1000031e 	bne	r2,zero,8c1b0 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   8c1a4:	00801544 	movi	r2,85
   8c1a8:	e0bfff15 	stw	r2,-4(fp)
   8c1ac:	00004b06 	br	8c2dc <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   8c1b0:	e0bffb03 	ldbu	r2,-20(fp)
   8c1b4:	1004c03a 	cmpne	r2,r2,zero
   8c1b8:	10000c1e 	bne	r2,zero,8c1ec <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
   8c1bc:	e0bffc03 	ldbu	r2,-16(fp)
   8c1c0:	1004c03a 	cmpne	r2,r2,zero
   8c1c4:	1000091e 	bne	r2,zero,8c1ec <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
   8c1c8:	e0bffd03 	ldbu	r2,-12(fp)
   8c1cc:	1004c03a 	cmpne	r2,r2,zero
   8c1d0:	1000061e 	bne	r2,zero,8c1ec <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
   8c1d4:	e0bffe0b 	ldhu	r2,-8(fp)
   8c1d8:	1004c03a 	cmpne	r2,r2,zero
   8c1dc:	1000031e 	bne	r2,zero,8c1ec <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
   8c1e0:	00801504 	movi	r2,84
   8c1e4:	e0bfff15 	stw	r2,-4(fp)
   8c1e8:	00003c06 	br	8c2dc <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
   8c1ec:	e0bffc03 	ldbu	r2,-16(fp)
   8c1f0:	10800f30 	cmpltui	r2,r2,60
   8c1f4:	1000031e 	bne	r2,zero,8c204 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   8c1f8:	00801444 	movi	r2,81
   8c1fc:	e0bfff15 	stw	r2,-4(fp)
   8c200:	00003606 	br	8c2dc <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
   8c204:	e0bffd03 	ldbu	r2,-12(fp)
   8c208:	10800f30 	cmpltui	r2,r2,60
   8c20c:	1000031e 	bne	r2,zero,8c21c <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
   8c210:	00801484 	movi	r2,82
   8c214:	e0bfff15 	stw	r2,-4(fp)
   8c218:	00003006 	br	8c2dc <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
   8c21c:	e0bffe0b 	ldhu	r2,-8(fp)
   8c220:	1080fa30 	cmpltui	r2,r2,1000
   8c224:	1000031e 	bne	r2,zero,8c234 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
   8c228:	008014c4 	movi	r2,83
   8c22c:	e0bfff15 	stw	r2,-4(fp)
   8c230:	00002a06 	br	8c2dc <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   8c234:	e13ffb03 	ldbu	r4,-20(fp)
   8c238:	01438404 	movi	r5,3600
   8c23c:	00837500 	call	83750 <__mulsi3>
   8c240:	1021883a 	mov	r16,r2
   8c244:	e13ffc03 	ldbu	r4,-16(fp)
   8c248:	01400f04 	movi	r5,60
   8c24c:	00837500 	call	83750 <__mulsi3>
   8c250:	8087883a 	add	r3,r16,r2
   8c254:	e0bffd03 	ldbu	r2,-12(fp)
   8c258:	1889883a 	add	r4,r3,r2
   8c25c:	0140fa04 	movi	r5,1000
   8c260:	00837500 	call	83750 <__mulsi3>
   8c264:	1021883a 	mov	r16,r2
   8c268:	e13ffe0b 	ldhu	r4,-8(fp)
   8c26c:	0140fa04 	movi	r5,1000
   8c270:	00837500 	call	83750 <__mulsi3>
   8c274:	1009883a 	mov	r4,r2
   8c278:	0140fa04 	movi	r5,1000
   8c27c:	00837400 	call	83740 <__udivsi3>
   8c280:	8085883a 	add	r2,r16,r2
   8c284:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   8c288:	e0bffa17 	ldw	r2,-24(fp)
   8c28c:	1004d43a 	srli	r2,r2,16
   8c290:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   8c294:	e0bffa17 	ldw	r2,-24(fp)
   8c298:	10bfffcc 	andi	r2,r2,65535
   8c29c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   8c2a0:	e0bffa17 	ldw	r2,-24(fp)
   8c2a4:	113fffcc 	andi	r4,r2,65535
   8c2a8:	008c01c0 	call	8c01c <OSTimeDly>
    while (loops > 0) {
   8c2ac:	00000706 	br	8c2cc <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
   8c2b0:	01200014 	movui	r4,32768
   8c2b4:	008c01c0 	call	8c01c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   8c2b8:	01200014 	movui	r4,32768
   8c2bc:	008c01c0 	call	8c01c <OSTimeDly>
        loops--;
   8c2c0:	e0bff90b 	ldhu	r2,-28(fp)
   8c2c4:	10bfffc4 	addi	r2,r2,-1
   8c2c8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   8c2cc:	e0bff90b 	ldhu	r2,-28(fp)
   8c2d0:	1004c03a 	cmpne	r2,r2,zero
   8c2d4:	103ff61e 	bne	r2,zero,8c2b0 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   8c2d8:	e03fff15 	stw	zero,-4(fp)
   8c2dc:	e0bfff17 	ldw	r2,-4(fp)
}
   8c2e0:	e037883a 	mov	sp,fp
   8c2e4:	dfc00217 	ldw	ra,8(sp)
   8c2e8:	df000117 	ldw	fp,4(sp)
   8c2ec:	dc000017 	ldw	r16,0(sp)
   8c2f0:	dec00304 	addi	sp,sp,12
   8c2f4:	f800283a 	ret

0008c2f8 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   8c2f8:	defff404 	addi	sp,sp,-48
   8c2fc:	dfc00b15 	stw	ra,44(sp)
   8c300:	df000a15 	stw	fp,40(sp)
   8c304:	df000a04 	addi	fp,sp,40
   8c308:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   8c30c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   8c310:	e0bffe03 	ldbu	r2,-8(fp)
   8c314:	10800530 	cmpltui	r2,r2,20
   8c318:	1000031e 	bne	r2,zero,8c328 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   8c31c:	00800a84 	movi	r2,42
   8c320:	e0bfff15 	stw	r2,-4(fp)
   8c324:	00007206 	br	8c4f0 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c328:	0005303a 	rdctl	r2,status
   8c32c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c330:	e0fffb17 	ldw	r3,-20(fp)
   8c334:	00bfff84 	movi	r2,-2
   8c338:	1884703a 	and	r2,r3,r2
   8c33c:	1001703a 	wrctl	status,r2
  
  return context;
   8c340:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   8c344:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   8c348:	e0bffe03 	ldbu	r2,-8(fp)
   8c34c:	00c002b4 	movhi	r3,10
   8c350:	18e50004 	addi	r3,r3,-27648
   8c354:	1085883a 	add	r2,r2,r2
   8c358:	1085883a 	add	r2,r2,r2
   8c35c:	10c5883a 	add	r2,r2,r3
   8c360:	10800017 	ldw	r2,0(r2)
   8c364:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
   8c368:	e0bffd17 	ldw	r2,-12(fp)
   8c36c:	1004c03a 	cmpne	r2,r2,zero
   8c370:	1000071e 	bne	r2,zero,8c390 <OSTimeDlyResume+0x98>
   8c374:	e0bffc17 	ldw	r2,-16(fp)
   8c378:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c37c:	e0bffa17 	ldw	r2,-24(fp)
   8c380:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   8c384:	008010c4 	movi	r2,67
   8c388:	e0bfff15 	stw	r2,-4(fp)
   8c38c:	00005806 	br	8c4f0 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   8c390:	e0bffd17 	ldw	r2,-12(fp)
   8c394:	10800058 	cmpnei	r2,r2,1
   8c398:	1000071e 	bne	r2,zero,8c3b8 <OSTimeDlyResume+0xc0>
   8c39c:	e0bffc17 	ldw	r2,-16(fp)
   8c3a0:	e0bff915 	stw	r2,-28(fp)
   8c3a4:	e0bff917 	ldw	r2,-28(fp)
   8c3a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   8c3ac:	008010c4 	movi	r2,67
   8c3b0:	e0bfff15 	stw	r2,-4(fp)
   8c3b4:	00004e06 	br	8c4f0 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   8c3b8:	e0bffd17 	ldw	r2,-12(fp)
   8c3bc:	10800b8b 	ldhu	r2,46(r2)
   8c3c0:	10bfffcc 	andi	r2,r2,65535
   8c3c4:	1004c03a 	cmpne	r2,r2,zero
   8c3c8:	1000071e 	bne	r2,zero,8c3e8 <OSTimeDlyResume+0xf0>
   8c3cc:	e0bffc17 	ldw	r2,-16(fp)
   8c3d0:	e0bff815 	stw	r2,-32(fp)
   8c3d4:	e0bff817 	ldw	r2,-32(fp)
   8c3d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   8c3dc:	00801404 	movi	r2,80
   8c3e0:	e0bfff15 	stw	r2,-4(fp)
   8c3e4:	00004206 	br	8c4f0 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   8c3e8:	e0bffd17 	ldw	r2,-12(fp)
   8c3ec:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   8c3f0:	e0bffd17 	ldw	r2,-12(fp)
   8c3f4:	10800c03 	ldbu	r2,48(r2)
   8c3f8:	10803fcc 	andi	r2,r2,255
   8c3fc:	10800dcc 	andi	r2,r2,55
   8c400:	1005003a 	cmpeq	r2,r2,zero
   8c404:	10000b1e 	bne	r2,zero,8c434 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   8c408:	e0bffd17 	ldw	r2,-12(fp)
   8c40c:	10c00c03 	ldbu	r3,48(r2)
   8c410:	00bff204 	movi	r2,-56
   8c414:	1884703a 	and	r2,r3,r2
   8c418:	1007883a 	mov	r3,r2
   8c41c:	e0bffd17 	ldw	r2,-12(fp)
   8c420:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   8c424:	e0fffd17 	ldw	r3,-12(fp)
   8c428:	00800044 	movi	r2,1
   8c42c:	18800c45 	stb	r2,49(r3)
   8c430:	00000206 	br	8c43c <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   8c434:	e0bffd17 	ldw	r2,-12(fp)
   8c438:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   8c43c:	e0bffd17 	ldw	r2,-12(fp)
   8c440:	10800c03 	ldbu	r2,48(r2)
   8c444:	10803fcc 	andi	r2,r2,255
   8c448:	1080020c 	andi	r2,r2,8
   8c44c:	1004c03a 	cmpne	r2,r2,zero
   8c450:	1000221e 	bne	r2,zero,8c4dc <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   8c454:	e0bffd17 	ldw	r2,-12(fp)
   8c458:	10c00d83 	ldbu	r3,54(r2)
   8c45c:	00800274 	movhi	r2,9
   8c460:	10886704 	addi	r2,r2,8604
   8c464:	10800003 	ldbu	r2,0(r2)
   8c468:	1884b03a 	or	r2,r3,r2
   8c46c:	1007883a 	mov	r3,r2
   8c470:	00800274 	movhi	r2,9
   8c474:	10886704 	addi	r2,r2,8604
   8c478:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8c47c:	e0bffd17 	ldw	r2,-12(fp)
   8c480:	10800d03 	ldbu	r2,52(r2)
   8c484:	11003fcc 	andi	r4,r2,255
   8c488:	e0bffd17 	ldw	r2,-12(fp)
   8c48c:	10800d03 	ldbu	r2,52(r2)
   8c490:	10c03fcc 	andi	r3,r2,255
   8c494:	00800274 	movhi	r2,9
   8c498:	10886744 	addi	r2,r2,8605
   8c49c:	10c5883a 	add	r2,r2,r3
   8c4a0:	10c00003 	ldbu	r3,0(r2)
   8c4a4:	e0bffd17 	ldw	r2,-12(fp)
   8c4a8:	10800d43 	ldbu	r2,53(r2)
   8c4ac:	1884b03a 	or	r2,r3,r2
   8c4b0:	1007883a 	mov	r3,r2
   8c4b4:	00800274 	movhi	r2,9
   8c4b8:	10886744 	addi	r2,r2,8605
   8c4bc:	1105883a 	add	r2,r2,r4
   8c4c0:	10c00005 	stb	r3,0(r2)
   8c4c4:	e0bffc17 	ldw	r2,-16(fp)
   8c4c8:	e0bff715 	stw	r2,-36(fp)
   8c4cc:	e0bff717 	ldw	r2,-36(fp)
   8c4d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   8c4d4:	0085d240 	call	85d24 <OS_Sched>
   8c4d8:	00000406 	br	8c4ec <OSTimeDlyResume+0x1f4>
   8c4dc:	e0bffc17 	ldw	r2,-16(fp)
   8c4e0:	e0bff615 	stw	r2,-40(fp)
   8c4e4:	e0bff617 	ldw	r2,-40(fp)
   8c4e8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   8c4ec:	e03fff15 	stw	zero,-4(fp)
   8c4f0:	e0bfff17 	ldw	r2,-4(fp)
}
   8c4f4:	e037883a 	mov	sp,fp
   8c4f8:	dfc00117 	ldw	ra,4(sp)
   8c4fc:	df000017 	ldw	fp,0(sp)
   8c500:	dec00204 	addi	sp,sp,8
   8c504:	f800283a 	ret

0008c508 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   8c508:	defffb04 	addi	sp,sp,-20
   8c50c:	df000415 	stw	fp,16(sp)
   8c510:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8c514:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c518:	0005303a 	rdctl	r2,status
   8c51c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c520:	e0fffd17 	ldw	r3,-12(fp)
   8c524:	00bfff84 	movi	r2,-2
   8c528:	1884703a 	and	r2,r3,r2
   8c52c:	1001703a 	wrctl	status,r2
  
  return context;
   8c530:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   8c534:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
   8c538:	00800274 	movhi	r2,9
   8c53c:	10886b04 	addi	r2,r2,8620
   8c540:	10800017 	ldw	r2,0(r2)
   8c544:	e0bfff15 	stw	r2,-4(fp)
   8c548:	e0bffe17 	ldw	r2,-8(fp)
   8c54c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c550:	e0bffc17 	ldw	r2,-16(fp)
   8c554:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   8c558:	e0bfff17 	ldw	r2,-4(fp)
}
   8c55c:	e037883a 	mov	sp,fp
   8c560:	df000017 	ldw	fp,0(sp)
   8c564:	dec00104 	addi	sp,sp,4
   8c568:	f800283a 	ret

0008c56c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   8c56c:	defffb04 	addi	sp,sp,-20
   8c570:	df000415 	stw	fp,16(sp)
   8c574:	df000404 	addi	fp,sp,16
   8c578:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8c57c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c580:	0005303a 	rdctl	r2,status
   8c584:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c588:	e0fffd17 	ldw	r3,-12(fp)
   8c58c:	00bfff84 	movi	r2,-2
   8c590:	1884703a 	and	r2,r3,r2
   8c594:	1001703a 	wrctl	status,r2
  
  return context;
   8c598:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   8c59c:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
   8c5a0:	00c00274 	movhi	r3,9
   8c5a4:	18c86b04 	addi	r3,r3,8620
   8c5a8:	e0bfff17 	ldw	r2,-4(fp)
   8c5ac:	18800015 	stw	r2,0(r3)
   8c5b0:	e0bffe17 	ldw	r2,-8(fp)
   8c5b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c5b8:	e0bffc17 	ldw	r2,-16(fp)
   8c5bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   8c5c0:	e037883a 	mov	sp,fp
   8c5c4:	df000017 	ldw	fp,0(sp)
   8c5c8:	dec00104 	addi	sp,sp,4
   8c5cc:	f800283a 	ret

0008c5d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8c5d0:	defffd04 	addi	sp,sp,-12
   8c5d4:	dfc00215 	stw	ra,8(sp)
   8c5d8:	df000115 	stw	fp,4(sp)
   8c5dc:	df000104 	addi	fp,sp,4
   8c5e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   8c5e4:	008e3140 	call	8e314 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8c5e8:	00800044 	movi	r2,1
   8c5ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8c5f0:	e037883a 	mov	sp,fp
   8c5f4:	dfc00117 	ldw	ra,4(sp)
   8c5f8:	df000017 	ldw	fp,0(sp)
   8c5fc:	dec00204 	addi	sp,sp,8
   8c600:	f800283a 	ret

0008c604 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8c604:	defffe04 	addi	sp,sp,-8
   8c608:	dfc00115 	stw	ra,4(sp)
   8c60c:	df000015 	stw	fp,0(sp)
   8c610:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   8c614:	01000474 	movhi	r4,17
   8c618:	21240004 	addi	r4,r4,-28672
   8c61c:	000b883a 	mov	r5,zero
   8c620:	000d883a 	mov	r6,zero
   8c624:	01c0fa04 	movi	r7,1000
   8c628:	008d4700 	call	8d470 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8c62c:	01000274 	movhi	r4,9
   8c630:	213de604 	addi	r4,r4,-2152
   8c634:	000b883a 	mov	r5,zero
   8c638:	01800044 	movi	r6,1
   8c63c:	008c7ec0 	call	8c7ec <altera_avalon_jtag_uart_init>
   8c640:	01000274 	movhi	r4,9
   8c644:	213ddc04 	addi	r4,r4,-2192
   8c648:	008c66c0 	call	8c66c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
   8c64c:	01000274 	movhi	r4,9
   8c650:	2101f704 	addi	r4,r4,2012
   8c654:	008c66c0 	call	8c66c <alt_dev_reg>
}
   8c658:	e037883a 	mov	sp,fp
   8c65c:	dfc00117 	ldw	ra,4(sp)
   8c660:	df000017 	ldw	fp,0(sp)
   8c664:	dec00204 	addi	sp,sp,8
   8c668:	f800283a 	ret

0008c66c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8c66c:	defffd04 	addi	sp,sp,-12
   8c670:	dfc00215 	stw	ra,8(sp)
   8c674:	df000115 	stw	fp,4(sp)
   8c678:	df000104 	addi	fp,sp,4
   8c67c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8c680:	e13fff17 	ldw	r4,-4(fp)
   8c684:	01400274 	movhi	r5,9
   8c688:	29429104 	addi	r5,r5,2628
   8c68c:	008d7fc0 	call	8d7fc <alt_dev_llist_insert>
}
   8c690:	e037883a 	mov	sp,fp
   8c694:	dfc00117 	ldw	ra,4(sp)
   8c698:	df000017 	ldw	fp,0(sp)
   8c69c:	dec00204 	addi	sp,sp,8
   8c6a0:	f800283a 	ret

0008c6a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8c6a4:	defffa04 	addi	sp,sp,-24
   8c6a8:	dfc00515 	stw	ra,20(sp)
   8c6ac:	df000415 	stw	fp,16(sp)
   8c6b0:	df000404 	addi	fp,sp,16
   8c6b4:	e13ffd15 	stw	r4,-12(fp)
   8c6b8:	e17ffe15 	stw	r5,-8(fp)
   8c6bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8c6c0:	e0bffd17 	ldw	r2,-12(fp)
   8c6c4:	10800017 	ldw	r2,0(r2)
   8c6c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8c6cc:	e0bffc17 	ldw	r2,-16(fp)
   8c6d0:	11000a04 	addi	r4,r2,40
   8c6d4:	e0bffd17 	ldw	r2,-12(fp)
   8c6d8:	11c00217 	ldw	r7,8(r2)
   8c6dc:	e17ffe17 	ldw	r5,-8(fp)
   8c6e0:	e1bfff17 	ldw	r6,-4(fp)
   8c6e4:	008ce640 	call	8ce64 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8c6e8:	e037883a 	mov	sp,fp
   8c6ec:	dfc00117 	ldw	ra,4(sp)
   8c6f0:	df000017 	ldw	fp,0(sp)
   8c6f4:	dec00204 	addi	sp,sp,8
   8c6f8:	f800283a 	ret

0008c6fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8c6fc:	defffa04 	addi	sp,sp,-24
   8c700:	dfc00515 	stw	ra,20(sp)
   8c704:	df000415 	stw	fp,16(sp)
   8c708:	df000404 	addi	fp,sp,16
   8c70c:	e13ffd15 	stw	r4,-12(fp)
   8c710:	e17ffe15 	stw	r5,-8(fp)
   8c714:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8c718:	e0bffd17 	ldw	r2,-12(fp)
   8c71c:	10800017 	ldw	r2,0(r2)
   8c720:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8c724:	e0bffc17 	ldw	r2,-16(fp)
   8c728:	11000a04 	addi	r4,r2,40
   8c72c:	e0bffd17 	ldw	r2,-12(fp)
   8c730:	11c00217 	ldw	r7,8(r2)
   8c734:	e17ffe17 	ldw	r5,-8(fp)
   8c738:	e1bfff17 	ldw	r6,-4(fp)
   8c73c:	008d1240 	call	8d124 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8c740:	e037883a 	mov	sp,fp
   8c744:	dfc00117 	ldw	ra,4(sp)
   8c748:	df000017 	ldw	fp,0(sp)
   8c74c:	dec00204 	addi	sp,sp,8
   8c750:	f800283a 	ret

0008c754 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8c754:	defffc04 	addi	sp,sp,-16
   8c758:	dfc00315 	stw	ra,12(sp)
   8c75c:	df000215 	stw	fp,8(sp)
   8c760:	df000204 	addi	fp,sp,8
   8c764:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8c768:	e0bfff17 	ldw	r2,-4(fp)
   8c76c:	10800017 	ldw	r2,0(r2)
   8c770:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8c774:	e0bffe17 	ldw	r2,-8(fp)
   8c778:	11000a04 	addi	r4,r2,40
   8c77c:	e0bfff17 	ldw	r2,-4(fp)
   8c780:	11400217 	ldw	r5,8(r2)
   8c784:	008ccfc0 	call	8ccfc <altera_avalon_jtag_uart_close>
}
   8c788:	e037883a 	mov	sp,fp
   8c78c:	dfc00117 	ldw	ra,4(sp)
   8c790:	df000017 	ldw	fp,0(sp)
   8c794:	dec00204 	addi	sp,sp,8
   8c798:	f800283a 	ret

0008c79c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8c79c:	defffa04 	addi	sp,sp,-24
   8c7a0:	dfc00515 	stw	ra,20(sp)
   8c7a4:	df000415 	stw	fp,16(sp)
   8c7a8:	df000404 	addi	fp,sp,16
   8c7ac:	e13ffd15 	stw	r4,-12(fp)
   8c7b0:	e17ffe15 	stw	r5,-8(fp)
   8c7b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8c7b8:	e0bffd17 	ldw	r2,-12(fp)
   8c7bc:	10800017 	ldw	r2,0(r2)
   8c7c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8c7c4:	e0bffc17 	ldw	r2,-16(fp)
   8c7c8:	11000a04 	addi	r4,r2,40
   8c7cc:	e17ffe17 	ldw	r5,-8(fp)
   8c7d0:	e1bfff17 	ldw	r6,-4(fp)
   8c7d4:	008cd700 	call	8cd70 <altera_avalon_jtag_uart_ioctl>
}
   8c7d8:	e037883a 	mov	sp,fp
   8c7dc:	dfc00117 	ldw	ra,4(sp)
   8c7e0:	df000017 	ldw	fp,0(sp)
   8c7e4:	dec00204 	addi	sp,sp,8
   8c7e8:	f800283a 	ret

0008c7ec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8c7ec:	defff404 	addi	sp,sp,-48
   8c7f0:	dfc00b15 	stw	ra,44(sp)
   8c7f4:	df000a15 	stw	fp,40(sp)
   8c7f8:	df000a04 	addi	fp,sp,40
   8c7fc:	e13ffd15 	stw	r4,-12(fp)
   8c800:	e17ffe15 	stw	r5,-8(fp)
   8c804:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   8c808:	e0bffd17 	ldw	r2,-12(fp)
   8c80c:	10800c04 	addi	r2,r2,48
   8c810:	e0bffb15 	stw	r2,-20(fp)
   8c814:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   8c818:	e13ffc0b 	ldhu	r4,-16(fp)
   8c81c:	e17ffc84 	addi	r5,fp,-14
   8c820:	00868cc0 	call	868cc <OSFlagCreate>
   8c824:	1007883a 	mov	r3,r2
   8c828:	e0bffb17 	ldw	r2,-20(fp)
   8c82c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   8c830:	e0bffd17 	ldw	r2,-12(fp)
   8c834:	10800a04 	addi	r2,r2,40
   8c838:	e0bff915 	stw	r2,-28(fp)
   8c83c:	00800044 	movi	r2,1
   8c840:	e0bffa0d 	sth	r2,-24(fp)
   8c844:	e13ffa0b 	ldhu	r4,-24(fp)
   8c848:	0089ad40 	call	89ad4 <OSSemCreate>
   8c84c:	1007883a 	mov	r3,r2
   8c850:	e0bff917 	ldw	r2,-28(fp)
   8c854:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   8c858:	e0bffd17 	ldw	r2,-12(fp)
   8c85c:	10800b04 	addi	r2,r2,44
   8c860:	e0bff715 	stw	r2,-36(fp)
   8c864:	00800044 	movi	r2,1
   8c868:	e0bff80d 	sth	r2,-32(fp)
   8c86c:	e13ff80b 	ldhu	r4,-32(fp)
   8c870:	0089ad40 	call	89ad4 <OSSemCreate>
   8c874:	1007883a 	mov	r3,r2
   8c878:	e0bff717 	ldw	r2,-36(fp)
   8c87c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c880:	e0fffd17 	ldw	r3,-12(fp)
   8c884:	00800044 	movi	r2,1
   8c888:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8c88c:	e0bffd17 	ldw	r2,-12(fp)
   8c890:	10800017 	ldw	r2,0(r2)
   8c894:	11000104 	addi	r4,r2,4
   8c898:	e0bffd17 	ldw	r2,-12(fp)
   8c89c:	10800817 	ldw	r2,32(r2)
   8c8a0:	1007883a 	mov	r3,r2
   8c8a4:	2005883a 	mov	r2,r4
   8c8a8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8c8ac:	e13ffe17 	ldw	r4,-8(fp)
   8c8b0:	e17fff17 	ldw	r5,-4(fp)
   8c8b4:	d8000015 	stw	zero,0(sp)
   8c8b8:	01800274 	movhi	r6,9
   8c8bc:	31b24904 	addi	r6,r6,-14044
   8c8c0:	e1fffd17 	ldw	r7,-12(fp)
   8c8c4:	008d9f40 	call	8d9f4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8c8c8:	e0bffd17 	ldw	r2,-12(fp)
   8c8cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8c8d0:	e0bffd17 	ldw	r2,-12(fp)
   8c8d4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8c8d8:	00800274 	movhi	r2,9
   8c8dc:	10887104 	addi	r2,r2,8644
   8c8e0:	10800017 	ldw	r2,0(r2)
   8c8e4:	100b883a 	mov	r5,r2
   8c8e8:	01800274 	movhi	r6,9
   8c8ec:	31b2fa04 	addi	r6,r6,-13336
   8c8f0:	e1fffd17 	ldw	r7,-12(fp)
   8c8f4:	008d5000 	call	8d500 <alt_alarm_start>
   8c8f8:	1004403a 	cmpge	r2,r2,zero
   8c8fc:	1000041e 	bne	r2,zero,8c910 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8c900:	e0fffd17 	ldw	r3,-12(fp)
   8c904:	00a00034 	movhi	r2,32768
   8c908:	10bfffc4 	addi	r2,r2,-1
   8c90c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8c910:	e037883a 	mov	sp,fp
   8c914:	dfc00117 	ldw	ra,4(sp)
   8c918:	df000017 	ldw	fp,0(sp)
   8c91c:	dec00204 	addi	sp,sp,8
   8c920:	f800283a 	ret

0008c924 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8c924:	defff204 	addi	sp,sp,-56
   8c928:	dfc00d15 	stw	ra,52(sp)
   8c92c:	df000c15 	stw	fp,48(sp)
   8c930:	df000c04 	addi	fp,sp,48
   8c934:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8c938:	e0bfff17 	ldw	r2,-4(fp)
   8c93c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   8c940:	e0bffd17 	ldw	r2,-12(fp)
   8c944:	10800017 	ldw	r2,0(r2)
   8c948:	e0bffc15 	stw	r2,-16(fp)
   8c94c:	00000006 	br	8c950 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c950:	e0bffc17 	ldw	r2,-16(fp)
   8c954:	10800104 	addi	r2,r2,4
   8c958:	10800037 	ldwio	r2,0(r2)
   8c95c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8c960:	e0bffb17 	ldw	r2,-20(fp)
   8c964:	1080c00c 	andi	r2,r2,768
   8c968:	1005003a 	cmpeq	r2,r2,zero
   8c96c:	1000991e 	bne	r2,zero,8cbd4 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8c970:	e0bffb17 	ldw	r2,-20(fp)
   8c974:	1080400c 	andi	r2,r2,256
   8c978:	1005003a 	cmpeq	r2,r2,zero
   8c97c:	1000481e 	bne	r2,zero,8caa0 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8c980:	00800074 	movhi	r2,1
   8c984:	e0bffa15 	stw	r2,-24(fp)
   8c988:	00000006 	br	8c98c <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c98c:	e0bffd17 	ldw	r2,-12(fp)
   8c990:	10800d17 	ldw	r2,52(r2)
   8c994:	10800044 	addi	r2,r2,1
   8c998:	1081ffcc 	andi	r2,r2,2047
   8c99c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   8c9a0:	e0bffd17 	ldw	r2,-12(fp)
   8c9a4:	10c00e17 	ldw	r3,56(r2)
   8c9a8:	e0bff917 	ldw	r2,-28(fp)
   8c9ac:	18802826 	beq	r3,r2,8ca50 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8c9b0:	e0bffc17 	ldw	r2,-16(fp)
   8c9b4:	10800037 	ldwio	r2,0(r2)
   8c9b8:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8c9bc:	e0bffa17 	ldw	r2,-24(fp)
   8c9c0:	10a0000c 	andi	r2,r2,32768
   8c9c4:	1005003a 	cmpeq	r2,r2,zero
   8c9c8:	1000211e 	bne	r2,zero,8ca50 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8c9cc:	e0bffd17 	ldw	r2,-12(fp)
   8c9d0:	10c00d17 	ldw	r3,52(r2)
   8c9d4:	e0bffa17 	ldw	r2,-24(fp)
   8c9d8:	1009883a 	mov	r4,r2
   8c9dc:	e0bffd17 	ldw	r2,-12(fp)
   8c9e0:	1885883a 	add	r2,r3,r2
   8c9e4:	10801104 	addi	r2,r2,68
   8c9e8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c9ec:	e0bffd17 	ldw	r2,-12(fp)
   8c9f0:	10800d17 	ldw	r2,52(r2)
   8c9f4:	10800044 	addi	r2,r2,1
   8c9f8:	10c1ffcc 	andi	r3,r2,2047
   8c9fc:	e0bffd17 	ldw	r2,-12(fp)
   8ca00:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   8ca04:	e0bffd17 	ldw	r2,-12(fp)
   8ca08:	10800c17 	ldw	r2,48(r2)
   8ca0c:	e0bff615 	stw	r2,-40(fp)
   8ca10:	00800044 	movi	r2,1
   8ca14:	e0bff70d 	sth	r2,-36(fp)
   8ca18:	00800044 	movi	r2,1
   8ca1c:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   8ca20:	00800274 	movhi	r2,9
   8ca24:	10885b44 	addi	r2,r2,8557
   8ca28:	10800003 	ldbu	r2,0(r2)
   8ca2c:	10803fcc 	andi	r2,r2,255
   8ca30:	1005003a 	cmpeq	r2,r2,zero
   8ca34:	103fd51e 	bne	r2,zero,8c98c <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
   8ca38:	e17ff70b 	ldhu	r5,-36(fp)
   8ca3c:	e1bff783 	ldbu	r6,-34(fp)
   8ca40:	e1fffe04 	addi	r7,fp,-8
   8ca44:	e13ff617 	ldw	r4,-40(fp)
   8ca48:	00875f40 	call	875f4 <OSFlagPost>
    return err;
   8ca4c:	003fcf06 	br	8c98c <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8ca50:	e0bffa17 	ldw	r2,-24(fp)
   8ca54:	10bfffec 	andhi	r2,r2,65535
   8ca58:	1005003a 	cmpeq	r2,r2,zero
   8ca5c:	1000101e 	bne	r2,zero,8caa0 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8ca60:	e0bffd17 	ldw	r2,-12(fp)
   8ca64:	10c00817 	ldw	r3,32(r2)
   8ca68:	00bfff84 	movi	r2,-2
   8ca6c:	1886703a 	and	r3,r3,r2
   8ca70:	e0bffd17 	ldw	r2,-12(fp)
   8ca74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8ca78:	e0bffc17 	ldw	r2,-16(fp)
   8ca7c:	11000104 	addi	r4,r2,4
   8ca80:	e0bffd17 	ldw	r2,-12(fp)
   8ca84:	10800817 	ldw	r2,32(r2)
   8ca88:	1007883a 	mov	r3,r2
   8ca8c:	2005883a 	mov	r2,r4
   8ca90:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8ca94:	e0bffc17 	ldw	r2,-16(fp)
   8ca98:	10800104 	addi	r2,r2,4
   8ca9c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8caa0:	e0bffb17 	ldw	r2,-20(fp)
   8caa4:	1080800c 	andi	r2,r2,512
   8caa8:	1005003a 	cmpeq	r2,r2,zero
   8caac:	103fa81e 	bne	r2,zero,8c950 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8cab0:	e0bffb17 	ldw	r2,-20(fp)
   8cab4:	10bfffec 	andhi	r2,r2,65535
   8cab8:	1004d43a 	srli	r2,r2,16
   8cabc:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8cac0:	00002706 	br	8cb60 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8cac4:	e13ffc17 	ldw	r4,-16(fp)
   8cac8:	e0bffd17 	ldw	r2,-12(fp)
   8cacc:	10c01017 	ldw	r3,64(r2)
   8cad0:	e0bffd17 	ldw	r2,-12(fp)
   8cad4:	1885883a 	add	r2,r3,r2
   8cad8:	10821104 	addi	r2,r2,2116
   8cadc:	10800003 	ldbu	r2,0(r2)
   8cae0:	10c03fcc 	andi	r3,r2,255
   8cae4:	18c0201c 	xori	r3,r3,128
   8cae8:	18ffe004 	addi	r3,r3,-128
   8caec:	2005883a 	mov	r2,r4
   8caf0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8caf4:	e0bffd17 	ldw	r2,-12(fp)
   8caf8:	10801017 	ldw	r2,64(r2)
   8cafc:	10800044 	addi	r2,r2,1
   8cb00:	10c1ffcc 	andi	r3,r2,2047
   8cb04:	e0bffd17 	ldw	r2,-12(fp)
   8cb08:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   8cb0c:	e0bffd17 	ldw	r2,-12(fp)
   8cb10:	10800c17 	ldw	r2,48(r2)
   8cb14:	e0bff415 	stw	r2,-48(fp)
   8cb18:	00800084 	movi	r2,2
   8cb1c:	e0bff50d 	sth	r2,-44(fp)
   8cb20:	00800044 	movi	r2,1
   8cb24:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   8cb28:	00800274 	movhi	r2,9
   8cb2c:	10885b44 	addi	r2,r2,8557
   8cb30:	10800003 	ldbu	r2,0(r2)
   8cb34:	10803fcc 	andi	r2,r2,255
   8cb38:	1005003a 	cmpeq	r2,r2,zero
   8cb3c:	1000051e 	bne	r2,zero,8cb54 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
   8cb40:	e17ff50b 	ldhu	r5,-44(fp)
   8cb44:	e1bff583 	ldbu	r6,-42(fp)
   8cb48:	e1fffe44 	addi	r7,fp,-7
   8cb4c:	e13ff417 	ldw	r4,-48(fp)
   8cb50:	00875f40 	call	875f4 <OSFlagPost>

        space--;
   8cb54:	e0bff817 	ldw	r2,-32(fp)
   8cb58:	10bfffc4 	addi	r2,r2,-1
   8cb5c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8cb60:	e0bff817 	ldw	r2,-32(fp)
   8cb64:	1005003a 	cmpeq	r2,r2,zero
   8cb68:	1000051e 	bne	r2,zero,8cb80 <altera_avalon_jtag_uart_irq+0x25c>
   8cb6c:	e0bffd17 	ldw	r2,-12(fp)
   8cb70:	10c01017 	ldw	r3,64(r2)
   8cb74:	e0bffd17 	ldw	r2,-12(fp)
   8cb78:	10800f17 	ldw	r2,60(r2)
   8cb7c:	18bfd11e 	bne	r3,r2,8cac4 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8cb80:	e0bff817 	ldw	r2,-32(fp)
   8cb84:	1005003a 	cmpeq	r2,r2,zero
   8cb88:	103f711e 	bne	r2,zero,8c950 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8cb8c:	e0bffd17 	ldw	r2,-12(fp)
   8cb90:	10c00817 	ldw	r3,32(r2)
   8cb94:	00bfff44 	movi	r2,-3
   8cb98:	1886703a 	and	r3,r3,r2
   8cb9c:	e0bffd17 	ldw	r2,-12(fp)
   8cba0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8cba4:	e0bffd17 	ldw	r2,-12(fp)
   8cba8:	10800017 	ldw	r2,0(r2)
   8cbac:	11000104 	addi	r4,r2,4
   8cbb0:	e0bffd17 	ldw	r2,-12(fp)
   8cbb4:	10800817 	ldw	r2,32(r2)
   8cbb8:	1007883a 	mov	r3,r2
   8cbbc:	2005883a 	mov	r2,r4
   8cbc0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8cbc4:	e0bffc17 	ldw	r2,-16(fp)
   8cbc8:	10800104 	addi	r2,r2,4
   8cbcc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8cbd0:	003f5f06 	br	8c950 <altera_avalon_jtag_uart_irq+0x2c>
}
   8cbd4:	e037883a 	mov	sp,fp
   8cbd8:	dfc00117 	ldw	ra,4(sp)
   8cbdc:	df000017 	ldw	fp,0(sp)
   8cbe0:	dec00204 	addi	sp,sp,8
   8cbe4:	f800283a 	ret

0008cbe8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8cbe8:	defff804 	addi	sp,sp,-32
   8cbec:	dfc00715 	stw	ra,28(sp)
   8cbf0:	df000615 	stw	fp,24(sp)
   8cbf4:	df000604 	addi	fp,sp,24
   8cbf8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8cbfc:	e0bfff17 	ldw	r2,-4(fp)
   8cc00:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8cc04:	e0bffd17 	ldw	r2,-12(fp)
   8cc08:	10800017 	ldw	r2,0(r2)
   8cc0c:	10800104 	addi	r2,r2,4
   8cc10:	10800037 	ldwio	r2,0(r2)
   8cc14:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8cc18:	e0bffc17 	ldw	r2,-16(fp)
   8cc1c:	1081000c 	andi	r2,r2,1024
   8cc20:	1005003a 	cmpeq	r2,r2,zero
   8cc24:	10000c1e 	bne	r2,zero,8cc58 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8cc28:	e0bffd17 	ldw	r2,-12(fp)
   8cc2c:	10800017 	ldw	r2,0(r2)
   8cc30:	11000104 	addi	r4,r2,4
   8cc34:	e0bffd17 	ldw	r2,-12(fp)
   8cc38:	10800817 	ldw	r2,32(r2)
   8cc3c:	10810014 	ori	r2,r2,1024
   8cc40:	1007883a 	mov	r3,r2
   8cc44:	2005883a 	mov	r2,r4
   8cc48:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8cc4c:	e0bffd17 	ldw	r2,-12(fp)
   8cc50:	10000915 	stw	zero,36(r2)
   8cc54:	00002106 	br	8ccdc <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8cc58:	e0bffd17 	ldw	r2,-12(fp)
   8cc5c:	10c00917 	ldw	r3,36(r2)
   8cc60:	00a00034 	movhi	r2,32768
   8cc64:	10bfff04 	addi	r2,r2,-4
   8cc68:	10c01c36 	bltu	r2,r3,8ccdc <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
   8cc6c:	e0bffd17 	ldw	r2,-12(fp)
   8cc70:	10800917 	ldw	r2,36(r2)
   8cc74:	10c00044 	addi	r3,r2,1
   8cc78:	e0bffd17 	ldw	r2,-12(fp)
   8cc7c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   8cc80:	e0bffd17 	ldw	r2,-12(fp)
   8cc84:	10c00917 	ldw	r3,36(r2)
   8cc88:	e0bffd17 	ldw	r2,-12(fp)
   8cc8c:	10800117 	ldw	r2,4(r2)
   8cc90:	18801236 	bltu	r3,r2,8ccdc <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   8cc94:	e0bffd17 	ldw	r2,-12(fp)
   8cc98:	10800c17 	ldw	r2,48(r2)
   8cc9c:	e0bffa15 	stw	r2,-24(fp)
   8cca0:	00800104 	movi	r2,4
   8cca4:	e0bffb0d 	sth	r2,-20(fp)
   8cca8:	00800044 	movi	r2,1
   8ccac:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   8ccb0:	00800274 	movhi	r2,9
   8ccb4:	10885b44 	addi	r2,r2,8557
   8ccb8:	10800003 	ldbu	r2,0(r2)
   8ccbc:	10803fcc 	andi	r2,r2,255
   8ccc0:	1005003a 	cmpeq	r2,r2,zero
   8ccc4:	1000051e 	bne	r2,zero,8ccdc <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
   8ccc8:	e17ffb0b 	ldhu	r5,-20(fp)
   8cccc:	e1bffb83 	ldbu	r6,-18(fp)
   8ccd0:	e1fffe04 	addi	r7,fp,-8
   8ccd4:	e13ffa17 	ldw	r4,-24(fp)
   8ccd8:	00875f40 	call	875f4 <OSFlagPost>
   8ccdc:	00800274 	movhi	r2,9
   8cce0:	10887104 	addi	r2,r2,8644
   8cce4:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   8cce8:	e037883a 	mov	sp,fp
   8ccec:	dfc00117 	ldw	ra,4(sp)
   8ccf0:	df000017 	ldw	fp,0(sp)
   8ccf4:	dec00204 	addi	sp,sp,8
   8ccf8:	f800283a 	ret

0008ccfc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8ccfc:	defffc04 	addi	sp,sp,-16
   8cd00:	df000315 	stw	fp,12(sp)
   8cd04:	df000304 	addi	fp,sp,12
   8cd08:	e13ffd15 	stw	r4,-12(fp)
   8cd0c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8cd10:	00000706 	br	8cd30 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8cd14:	e0bffe17 	ldw	r2,-8(fp)
   8cd18:	1090000c 	andi	r2,r2,16384
   8cd1c:	1005003a 	cmpeq	r2,r2,zero
   8cd20:	1000031e 	bne	r2,zero,8cd30 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8cd24:	00bffd44 	movi	r2,-11
   8cd28:	e0bfff15 	stw	r2,-4(fp)
   8cd2c:	00000b06 	br	8cd5c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8cd30:	e0bffd17 	ldw	r2,-12(fp)
   8cd34:	10c01017 	ldw	r3,64(r2)
   8cd38:	e0bffd17 	ldw	r2,-12(fp)
   8cd3c:	10800f17 	ldw	r2,60(r2)
   8cd40:	18800526 	beq	r3,r2,8cd58 <altera_avalon_jtag_uart_close+0x5c>
   8cd44:	e0bffd17 	ldw	r2,-12(fp)
   8cd48:	10c00917 	ldw	r3,36(r2)
   8cd4c:	e0bffd17 	ldw	r2,-12(fp)
   8cd50:	10800117 	ldw	r2,4(r2)
   8cd54:	18bfef36 	bltu	r3,r2,8cd14 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8cd58:	e03fff15 	stw	zero,-4(fp)
   8cd5c:	e0bfff17 	ldw	r2,-4(fp)
}
   8cd60:	e037883a 	mov	sp,fp
   8cd64:	df000017 	ldw	fp,0(sp)
   8cd68:	dec00104 	addi	sp,sp,4
   8cd6c:	f800283a 	ret

0008cd70 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8cd70:	defff804 	addi	sp,sp,-32
   8cd74:	df000715 	stw	fp,28(sp)
   8cd78:	df000704 	addi	fp,sp,28
   8cd7c:	e13ffb15 	stw	r4,-20(fp)
   8cd80:	e17ffc15 	stw	r5,-16(fp)
   8cd84:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8cd88:	00bff9c4 	movi	r2,-25
   8cd8c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   8cd90:	e0bffc17 	ldw	r2,-16(fp)
   8cd94:	e0bfff15 	stw	r2,-4(fp)
   8cd98:	e0ffff17 	ldw	r3,-4(fp)
   8cd9c:	189a8060 	cmpeqi	r2,r3,27137
   8cda0:	1000041e 	bne	r2,zero,8cdb4 <altera_avalon_jtag_uart_ioctl+0x44>
   8cda4:	e0ffff17 	ldw	r3,-4(fp)
   8cda8:	189a80a0 	cmpeqi	r2,r3,27138
   8cdac:	10001b1e 	bne	r2,zero,8ce1c <altera_avalon_jtag_uart_ioctl+0xac>
   8cdb0:	00002706 	br	8ce50 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8cdb4:	e0bffb17 	ldw	r2,-20(fp)
   8cdb8:	10c00117 	ldw	r3,4(r2)
   8cdbc:	00a00034 	movhi	r2,32768
   8cdc0:	10bfffc4 	addi	r2,r2,-1
   8cdc4:	18802226 	beq	r3,r2,8ce50 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   8cdc8:	e0bffd17 	ldw	r2,-12(fp)
   8cdcc:	10800017 	ldw	r2,0(r2)
   8cdd0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8cdd4:	e0bff917 	ldw	r2,-28(fp)
   8cdd8:	10800090 	cmplti	r2,r2,2
   8cddc:	1000071e 	bne	r2,zero,8cdfc <altera_avalon_jtag_uart_ioctl+0x8c>
   8cde0:	e0fff917 	ldw	r3,-28(fp)
   8cde4:	00a00034 	movhi	r2,32768
   8cde8:	10bfffc4 	addi	r2,r2,-1
   8cdec:	18800326 	beq	r3,r2,8cdfc <altera_avalon_jtag_uart_ioctl+0x8c>
   8cdf0:	e0bff917 	ldw	r2,-28(fp)
   8cdf4:	e0bffe15 	stw	r2,-8(fp)
   8cdf8:	00000306 	br	8ce08 <altera_avalon_jtag_uart_ioctl+0x98>
   8cdfc:	00e00034 	movhi	r3,32768
   8ce00:	18ffff84 	addi	r3,r3,-2
   8ce04:	e0fffe15 	stw	r3,-8(fp)
   8ce08:	e0bffb17 	ldw	r2,-20(fp)
   8ce0c:	e0fffe17 	ldw	r3,-8(fp)
   8ce10:	10c00115 	stw	r3,4(r2)
      rc = 0;
   8ce14:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8ce18:	00000d06 	br	8ce50 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8ce1c:	e0bffb17 	ldw	r2,-20(fp)
   8ce20:	10c00117 	ldw	r3,4(r2)
   8ce24:	00a00034 	movhi	r2,32768
   8ce28:	10bfffc4 	addi	r2,r2,-1
   8ce2c:	18800826 	beq	r3,r2,8ce50 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8ce30:	e13ffd17 	ldw	r4,-12(fp)
   8ce34:	e0bffb17 	ldw	r2,-20(fp)
   8ce38:	10c00917 	ldw	r3,36(r2)
   8ce3c:	e0bffb17 	ldw	r2,-20(fp)
   8ce40:	10800117 	ldw	r2,4(r2)
   8ce44:	1885803a 	cmpltu	r2,r3,r2
   8ce48:	20800015 	stw	r2,0(r4)
      rc = 0;
   8ce4c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   8ce50:	e0bffa17 	ldw	r2,-24(fp)
}
   8ce54:	e037883a 	mov	sp,fp
   8ce58:	df000017 	ldw	fp,0(sp)
   8ce5c:	dec00104 	addi	sp,sp,4
   8ce60:	f800283a 	ret

0008ce64 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8ce64:	deffeb04 	addi	sp,sp,-84
   8ce68:	dfc01415 	stw	ra,80(sp)
   8ce6c:	df001315 	stw	fp,76(sp)
   8ce70:	df001304 	addi	fp,sp,76
   8ce74:	e13ffb15 	stw	r4,-20(fp)
   8ce78:	e17ffc15 	stw	r5,-16(fp)
   8ce7c:	e1bffd15 	stw	r6,-12(fp)
   8ce80:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8ce84:	e0bffc17 	ldw	r2,-16(fp)
   8ce88:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   8ce8c:	e0bffb17 	ldw	r2,-20(fp)
   8ce90:	10800a17 	ldw	r2,40(r2)
   8ce94:	e0bff315 	stw	r2,-52(fp)
   8ce98:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   8ce9c:	e17ff40b 	ldhu	r5,-48(fp)
   8cea0:	e1bffa44 	addi	r6,fp,-23
   8cea4:	e13ff317 	ldw	r4,-52(fp)
   8cea8:	0089e880 	call	89e88 <OSSemPend>

  while (space > 0)
   8ceac:	00006406 	br	8d040 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8ceb0:	e0bffb17 	ldw	r2,-20(fp)
   8ceb4:	10800d17 	ldw	r2,52(r2)
   8ceb8:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
   8cebc:	e0bffb17 	ldw	r2,-20(fp)
   8cec0:	10800e17 	ldw	r2,56(r2)
   8cec4:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
   8cec8:	e0fff617 	ldw	r3,-40(fp)
   8cecc:	e0bff517 	ldw	r2,-44(fp)
   8ced0:	18800536 	bltu	r3,r2,8cee8 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
   8ced4:	e0bff617 	ldw	r2,-40(fp)
   8ced8:	e0fff517 	ldw	r3,-44(fp)
   8cedc:	10c5c83a 	sub	r2,r2,r3
   8cee0:	e0bff715 	stw	r2,-36(fp)
   8cee4:	00000406 	br	8cef8 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8cee8:	00820004 	movi	r2,2048
   8ceec:	e0fff517 	ldw	r3,-44(fp)
   8cef0:	10c5c83a 	sub	r2,r2,r3
   8cef4:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   8cef8:	e0bff717 	ldw	r2,-36(fp)
   8cefc:	1005003a 	cmpeq	r2,r2,zero
   8cf00:	10001f1e 	bne	r2,zero,8cf80 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   8cf04:	e0fffd17 	ldw	r3,-12(fp)
   8cf08:	e0bff717 	ldw	r2,-36(fp)
   8cf0c:	1880022e 	bgeu	r3,r2,8cf18 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
   8cf10:	e0bffd17 	ldw	r2,-12(fp)
   8cf14:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8cf18:	e0bffb17 	ldw	r2,-20(fp)
   8cf1c:	10c01104 	addi	r3,r2,68
   8cf20:	e0bff517 	ldw	r2,-44(fp)
   8cf24:	1887883a 	add	r3,r3,r2
   8cf28:	e0bff917 	ldw	r2,-28(fp)
   8cf2c:	1009883a 	mov	r4,r2
   8cf30:	180b883a 	mov	r5,r3
   8cf34:	e1bff717 	ldw	r6,-36(fp)
   8cf38:	008eb940 	call	8eb94 <memcpy>
      ptr   += n;
   8cf3c:	e0fff717 	ldw	r3,-36(fp)
   8cf40:	e0bff917 	ldw	r2,-28(fp)
   8cf44:	10c5883a 	add	r2,r2,r3
   8cf48:	e0bff915 	stw	r2,-28(fp)
      space -= n;
   8cf4c:	e0fffd17 	ldw	r3,-12(fp)
   8cf50:	e0bff717 	ldw	r2,-36(fp)
   8cf54:	1885c83a 	sub	r2,r3,r2
   8cf58:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8cf5c:	e0fff517 	ldw	r3,-44(fp)
   8cf60:	e0bff717 	ldw	r2,-36(fp)
   8cf64:	1885883a 	add	r2,r3,r2
   8cf68:	10c1ffcc 	andi	r3,r2,2047
   8cf6c:	e0bffb17 	ldw	r2,-20(fp)
   8cf70:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   8cf74:	e0bffd17 	ldw	r2,-12(fp)
   8cf78:	10800048 	cmpgei	r2,r2,1
   8cf7c:	103fcc1e 	bne	r2,zero,8ceb0 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
   8cf80:	e0fff917 	ldw	r3,-28(fp)
   8cf84:	e0bffc17 	ldw	r2,-16(fp)
   8cf88:	1880301e 	bne	r3,r2,8d04c <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8cf8c:	e0bffe17 	ldw	r2,-8(fp)
   8cf90:	1090000c 	andi	r2,r2,16384
   8cf94:	1004c03a 	cmpne	r2,r2,zero
   8cf98:	10002c1e 	bne	r2,zero,8d04c <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   8cf9c:	00800274 	movhi	r2,9
   8cfa0:	10885b44 	addi	r2,r2,8557
   8cfa4:	10800003 	ldbu	r2,0(r2)
   8cfa8:	10803fcc 	andi	r2,r2,255
   8cfac:	10800058 	cmpnei	r2,r2,1
   8cfb0:	1000161e 	bne	r2,zero,8d00c <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   8cfb4:	e0bffb17 	ldw	r2,-20(fp)
   8cfb8:	10800c17 	ldw	r2,48(r2)
   8cfbc:	e0bff015 	stw	r2,-64(fp)
   8cfc0:	00800144 	movi	r2,5
   8cfc4:	e0bff10d 	sth	r2,-60(fp)
   8cfc8:	00bfe0c4 	movi	r2,-125
   8cfcc:	e0bff185 	stb	r2,-58(fp)
   8cfd0:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   8cfd4:	00800274 	movhi	r2,9
   8cfd8:	10885b44 	addi	r2,r2,8557
   8cfdc:	10800003 	ldbu	r2,0(r2)
   8cfe0:	10803fcc 	andi	r2,r2,255
   8cfe4:	1005003a 	cmpeq	r2,r2,zero
   8cfe8:	1000111e 	bne	r2,zero,8d030 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   8cfec:	e17ff10b 	ldhu	r5,-60(fp)
   8cff0:	e1bff183 	ldbu	r6,-58(fp)
   8cff4:	e1fff20b 	ldhu	r7,-56(fp)
   8cff8:	e0bffa04 	addi	r2,fp,-24
   8cffc:	d8800015 	stw	r2,0(sp)
   8d000:	e13ff017 	ldw	r4,-64(fp)
   8d004:	0086f480 	call	86f48 <OSFlagPend>
    return err;
   8d008:	00000906 	br	8d030 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8d00c:	e0bffb17 	ldw	r2,-20(fp)
   8d010:	10c00d17 	ldw	r3,52(r2)
   8d014:	e0bff617 	ldw	r2,-40(fp)
   8d018:	1880051e 	bne	r3,r2,8d030 <altera_avalon_jtag_uart_read+0x1cc>
   8d01c:	e0bffb17 	ldw	r2,-20(fp)
   8d020:	10c00917 	ldw	r3,36(r2)
   8d024:	e0bffb17 	ldw	r2,-20(fp)
   8d028:	10800117 	ldw	r2,4(r2)
   8d02c:	18bff736 	bltu	r3,r2,8d00c <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8d030:	e0bffb17 	ldw	r2,-20(fp)
   8d034:	10c00d17 	ldw	r3,52(r2)
   8d038:	e0bff617 	ldw	r2,-40(fp)
   8d03c:	18800326 	beq	r3,r2,8d04c <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8d040:	e0bffd17 	ldw	r2,-12(fp)
   8d044:	10800048 	cmpgei	r2,r2,1
   8d048:	103f991e 	bne	r2,zero,8ceb0 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   8d04c:	e0bffb17 	ldw	r2,-20(fp)
   8d050:	11000a17 	ldw	r4,40(r2)
   8d054:	008a2800 	call	8a280 <OSSemPost>

  if (ptr != buffer)
   8d058:	e0fff917 	ldw	r3,-28(fp)
   8d05c:	e0bffc17 	ldw	r2,-16(fp)
   8d060:	18801926 	beq	r3,r2,8d0c8 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d064:	0005303a 	rdctl	r2,status
   8d068:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d06c:	e0ffef17 	ldw	r3,-68(fp)
   8d070:	00bfff84 	movi	r2,-2
   8d074:	1884703a 	and	r2,r3,r2
   8d078:	1001703a 	wrctl	status,r2
  
  return context;
   8d07c:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8d080:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8d084:	e0bffb17 	ldw	r2,-20(fp)
   8d088:	10800817 	ldw	r2,32(r2)
   8d08c:	10c00054 	ori	r3,r2,1
   8d090:	e0bffb17 	ldw	r2,-20(fp)
   8d094:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8d098:	e0bffb17 	ldw	r2,-20(fp)
   8d09c:	10800017 	ldw	r2,0(r2)
   8d0a0:	11000104 	addi	r4,r2,4
   8d0a4:	e0bffb17 	ldw	r2,-20(fp)
   8d0a8:	10800817 	ldw	r2,32(r2)
   8d0ac:	1007883a 	mov	r3,r2
   8d0b0:	2005883a 	mov	r2,r4
   8d0b4:	10c00035 	stwio	r3,0(r2)
   8d0b8:	e0bff817 	ldw	r2,-32(fp)
   8d0bc:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d0c0:	e0bfee17 	ldw	r2,-72(fp)
   8d0c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8d0c8:	e0fff917 	ldw	r3,-28(fp)
   8d0cc:	e0bffc17 	ldw	r2,-16(fp)
   8d0d0:	18800526 	beq	r3,r2,8d0e8 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
   8d0d4:	e0fff917 	ldw	r3,-28(fp)
   8d0d8:	e0bffc17 	ldw	r2,-16(fp)
   8d0dc:	1887c83a 	sub	r3,r3,r2
   8d0e0:	e0ffff15 	stw	r3,-4(fp)
   8d0e4:	00000906 	br	8d10c <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   8d0e8:	e0bffe17 	ldw	r2,-8(fp)
   8d0ec:	1090000c 	andi	r2,r2,16384
   8d0f0:	1005003a 	cmpeq	r2,r2,zero
   8d0f4:	1000031e 	bne	r2,zero,8d104 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
   8d0f8:	00bffd44 	movi	r2,-11
   8d0fc:	e0bfff15 	stw	r2,-4(fp)
   8d100:	00000206 	br	8d10c <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   8d104:	00bffec4 	movi	r2,-5
   8d108:	e0bfff15 	stw	r2,-4(fp)
   8d10c:	e0bfff17 	ldw	r2,-4(fp)
}
   8d110:	e037883a 	mov	sp,fp
   8d114:	dfc00117 	ldw	ra,4(sp)
   8d118:	df000017 	ldw	fp,0(sp)
   8d11c:	dec00204 	addi	sp,sp,8
   8d120:	f800283a 	ret

0008d124 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8d124:	deffeb04 	addi	sp,sp,-84
   8d128:	dfc01415 	stw	ra,80(sp)
   8d12c:	df001315 	stw	fp,76(sp)
   8d130:	df001304 	addi	fp,sp,76
   8d134:	e13ffb15 	stw	r4,-20(fp)
   8d138:	e17ffc15 	stw	r5,-16(fp)
   8d13c:	e1bffd15 	stw	r6,-12(fp)
   8d140:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8d144:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8d148:	e0bffc17 	ldw	r2,-16(fp)
   8d14c:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   8d150:	e0bffb17 	ldw	r2,-20(fp)
   8d154:	10800b17 	ldw	r2,44(r2)
   8d158:	e0bff315 	stw	r2,-52(fp)
   8d15c:	e03ff40d 	sth	zero,-48(fp)
   8d160:	e17ff40b 	ldhu	r5,-48(fp)
   8d164:	e1bffa04 	addi	r6,fp,-24
   8d168:	e13ff317 	ldw	r4,-52(fp)
   8d16c:	0089e880 	call	89e88 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8d170:	00003a06 	br	8d25c <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8d174:	e0bffb17 	ldw	r2,-20(fp)
   8d178:	10800f17 	ldw	r2,60(r2)
   8d17c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   8d180:	e0bffb17 	ldw	r2,-20(fp)
   8d184:	10801017 	ldw	r2,64(r2)
   8d188:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
   8d18c:	e0fff917 	ldw	r3,-28(fp)
   8d190:	e0bff817 	ldw	r2,-32(fp)
   8d194:	1880062e 	bgeu	r3,r2,8d1b0 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
   8d198:	e0fff817 	ldw	r3,-32(fp)
   8d19c:	e0bff917 	ldw	r2,-28(fp)
   8d1a0:	1885c83a 	sub	r2,r3,r2
   8d1a4:	10bfffc4 	addi	r2,r2,-1
   8d1a8:	e0bff715 	stw	r2,-36(fp)
   8d1ac:	00000c06 	br	8d1e0 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
   8d1b0:	e0bff817 	ldw	r2,-32(fp)
   8d1b4:	1005003a 	cmpeq	r2,r2,zero
   8d1b8:	1000051e 	bne	r2,zero,8d1d0 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8d1bc:	00820004 	movi	r2,2048
   8d1c0:	e0fff917 	ldw	r3,-28(fp)
   8d1c4:	10c5c83a 	sub	r2,r2,r3
   8d1c8:	e0bff715 	stw	r2,-36(fp)
   8d1cc:	00000406 	br	8d1e0 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8d1d0:	0081ffc4 	movi	r2,2047
   8d1d4:	e0fff917 	ldw	r3,-28(fp)
   8d1d8:	10c5c83a 	sub	r2,r2,r3
   8d1dc:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   8d1e0:	e0bff717 	ldw	r2,-36(fp)
   8d1e4:	1005003a 	cmpeq	r2,r2,zero
   8d1e8:	10001f1e 	bne	r2,zero,8d268 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
   8d1ec:	e0fffd17 	ldw	r3,-12(fp)
   8d1f0:	e0bff717 	ldw	r2,-36(fp)
   8d1f4:	1880022e 	bgeu	r3,r2,8d200 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   8d1f8:	e0bffd17 	ldw	r2,-12(fp)
   8d1fc:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8d200:	e0bffb17 	ldw	r2,-20(fp)
   8d204:	10c21104 	addi	r3,r2,2116
   8d208:	e0bff917 	ldw	r2,-28(fp)
   8d20c:	1885883a 	add	r2,r3,r2
   8d210:	e0fffc17 	ldw	r3,-16(fp)
   8d214:	1009883a 	mov	r4,r2
   8d218:	180b883a 	mov	r5,r3
   8d21c:	e1bff717 	ldw	r6,-36(fp)
   8d220:	008eb940 	call	8eb94 <memcpy>
      ptr   += n;
   8d224:	e0fff717 	ldw	r3,-36(fp)
   8d228:	e0bffc17 	ldw	r2,-16(fp)
   8d22c:	10c5883a 	add	r2,r2,r3
   8d230:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8d234:	e0fffd17 	ldw	r3,-12(fp)
   8d238:	e0bff717 	ldw	r2,-36(fp)
   8d23c:	1885c83a 	sub	r2,r3,r2
   8d240:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8d244:	e0fff917 	ldw	r3,-28(fp)
   8d248:	e0bff717 	ldw	r2,-36(fp)
   8d24c:	1885883a 	add	r2,r3,r2
   8d250:	10c1ffcc 	andi	r3,r2,2047
   8d254:	e0bffb17 	ldw	r2,-20(fp)
   8d258:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8d25c:	e0bffd17 	ldw	r2,-12(fp)
   8d260:	10800048 	cmpgei	r2,r2,1
   8d264:	103fc31e 	bne	r2,zero,8d174 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d268:	0005303a 	rdctl	r2,status
   8d26c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d270:	e0fff217 	ldw	r3,-56(fp)
   8d274:	00bfff84 	movi	r2,-2
   8d278:	1884703a 	and	r2,r3,r2
   8d27c:	1001703a 	wrctl	status,r2
  
  return context;
   8d280:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8d284:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8d288:	e0bffb17 	ldw	r2,-20(fp)
   8d28c:	10800817 	ldw	r2,32(r2)
   8d290:	10c00094 	ori	r3,r2,2
   8d294:	e0bffb17 	ldw	r2,-20(fp)
   8d298:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8d29c:	e0bffb17 	ldw	r2,-20(fp)
   8d2a0:	10800017 	ldw	r2,0(r2)
   8d2a4:	11000104 	addi	r4,r2,4
   8d2a8:	e0bffb17 	ldw	r2,-20(fp)
   8d2ac:	10800817 	ldw	r2,32(r2)
   8d2b0:	1007883a 	mov	r3,r2
   8d2b4:	2005883a 	mov	r2,r4
   8d2b8:	10c00035 	stwio	r3,0(r2)
   8d2bc:	e0bff617 	ldw	r2,-40(fp)
   8d2c0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d2c4:	e0bff117 	ldw	r2,-60(fp)
   8d2c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8d2cc:	e0bffd17 	ldw	r2,-12(fp)
   8d2d0:	10800050 	cmplti	r2,r2,1
   8d2d4:	10002d1e 	bne	r2,zero,8d38c <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
   8d2d8:	e0bffe17 	ldw	r2,-8(fp)
   8d2dc:	1090000c 	andi	r2,r2,16384
   8d2e0:	1004c03a 	cmpne	r2,r2,zero
   8d2e4:	10002c1e 	bne	r2,zero,8d398 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   8d2e8:	00800274 	movhi	r2,9
   8d2ec:	10885b44 	addi	r2,r2,8557
   8d2f0:	10800003 	ldbu	r2,0(r2)
   8d2f4:	10803fcc 	andi	r2,r2,255
   8d2f8:	10800058 	cmpnei	r2,r2,1
   8d2fc:	1000161e 	bne	r2,zero,8d358 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
   8d300:	e0bffb17 	ldw	r2,-20(fp)
   8d304:	10800c17 	ldw	r2,48(r2)
   8d308:	e0bfee15 	stw	r2,-72(fp)
   8d30c:	00800184 	movi	r2,6
   8d310:	e0bfef0d 	sth	r2,-68(fp)
   8d314:	00bfe0c4 	movi	r2,-125
   8d318:	e0bfef85 	stb	r2,-66(fp)
   8d31c:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   8d320:	00800274 	movhi	r2,9
   8d324:	10885b44 	addi	r2,r2,8557
   8d328:	10800003 	ldbu	r2,0(r2)
   8d32c:	10803fcc 	andi	r2,r2,255
   8d330:	1005003a 	cmpeq	r2,r2,zero
   8d334:	1000111e 	bne	r2,zero,8d37c <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   8d338:	e17fef0b 	ldhu	r5,-68(fp)
   8d33c:	e1bfef83 	ldbu	r6,-66(fp)
   8d340:	e1fff00b 	ldhu	r7,-64(fp)
   8d344:	e0bffa44 	addi	r2,fp,-23
   8d348:	d8800015 	stw	r2,0(sp)
   8d34c:	e13fee17 	ldw	r4,-72(fp)
   8d350:	0086f480 	call	86f48 <OSFlagPend>
    return err;
   8d354:	00000906 	br	8d37c <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8d358:	e0bffb17 	ldw	r2,-20(fp)
   8d35c:	10c01017 	ldw	r3,64(r2)
   8d360:	e0bff817 	ldw	r2,-32(fp)
   8d364:	1880051e 	bne	r3,r2,8d37c <altera_avalon_jtag_uart_write+0x258>
   8d368:	e0bffb17 	ldw	r2,-20(fp)
   8d36c:	10c00917 	ldw	r3,36(r2)
   8d370:	e0bffb17 	ldw	r2,-20(fp)
   8d374:	10800117 	ldw	r2,4(r2)
   8d378:	18bff736 	bltu	r3,r2,8d358 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8d37c:	e0bffb17 	ldw	r2,-20(fp)
   8d380:	10c01017 	ldw	r3,64(r2)
   8d384:	e0bff817 	ldw	r2,-32(fp)
   8d388:	18800326 	beq	r3,r2,8d398 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
   8d38c:	e0bffd17 	ldw	r2,-12(fp)
   8d390:	10800048 	cmpgei	r2,r2,1
   8d394:	103fb11e 	bne	r2,zero,8d25c <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   8d398:	e0bffb17 	ldw	r2,-20(fp)
   8d39c:	11000b17 	ldw	r4,44(r2)
   8d3a0:	008a2800 	call	8a280 <OSSemPost>

  if (ptr != start)
   8d3a4:	e0fffc17 	ldw	r3,-16(fp)
   8d3a8:	e0bff517 	ldw	r2,-44(fp)
   8d3ac:	18800526 	beq	r3,r2,8d3c4 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
   8d3b0:	e0fffc17 	ldw	r3,-16(fp)
   8d3b4:	e0bff517 	ldw	r2,-44(fp)
   8d3b8:	1887c83a 	sub	r3,r3,r2
   8d3bc:	e0ffff15 	stw	r3,-4(fp)
   8d3c0:	00000906 	br	8d3e8 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
   8d3c4:	e0bffe17 	ldw	r2,-8(fp)
   8d3c8:	1090000c 	andi	r2,r2,16384
   8d3cc:	1005003a 	cmpeq	r2,r2,zero
   8d3d0:	1000031e 	bne	r2,zero,8d3e0 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
   8d3d4:	00bffd44 	movi	r2,-11
   8d3d8:	e0bfff15 	stw	r2,-4(fp)
   8d3dc:	00000206 	br	8d3e8 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
   8d3e0:	00bffec4 	movi	r2,-5
   8d3e4:	e0bfff15 	stw	r2,-4(fp)
   8d3e8:	e0bfff17 	ldw	r2,-4(fp)
}
   8d3ec:	e037883a 	mov	sp,fp
   8d3f0:	dfc00117 	ldw	ra,4(sp)
   8d3f4:	df000017 	ldw	fp,0(sp)
   8d3f8:	dec00204 	addi	sp,sp,8
   8d3fc:	f800283a 	ret

0008d400 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8d400:	defffa04 	addi	sp,sp,-24
   8d404:	dfc00515 	stw	ra,20(sp)
   8d408:	df000415 	stw	fp,16(sp)
   8d40c:	df000404 	addi	fp,sp,16
   8d410:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   8d414:	e0bfff17 	ldw	r2,-4(fp)
   8d418:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8d41c:	e0bfff17 	ldw	r2,-4(fp)
   8d420:	10800104 	addi	r2,r2,4
   8d424:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d428:	0005303a 	rdctl	r2,status
   8d42c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d430:	e0fffd17 	ldw	r3,-12(fp)
   8d434:	00bfff84 	movi	r2,-2
   8d438:	1884703a 	and	r2,r3,r2
   8d43c:	1001703a 	wrctl	status,r2
  
  return context;
   8d440:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   8d444:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   8d448:	008e2040 	call	8e204 <alt_tick>
   8d44c:	e0bffe17 	ldw	r2,-8(fp)
   8d450:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d454:	e0bffc17 	ldw	r2,-16(fp)
   8d458:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   8d45c:	e037883a 	mov	sp,fp
   8d460:	dfc00117 	ldw	ra,4(sp)
   8d464:	df000017 	ldw	fp,0(sp)
   8d468:	dec00204 	addi	sp,sp,8
   8d46c:	f800283a 	ret

0008d470 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   8d470:	defff804 	addi	sp,sp,-32
   8d474:	dfc00715 	stw	ra,28(sp)
   8d478:	df000615 	stw	fp,24(sp)
   8d47c:	df000604 	addi	fp,sp,24
   8d480:	e13ffc15 	stw	r4,-16(fp)
   8d484:	e17ffd15 	stw	r5,-12(fp)
   8d488:	e1bffe15 	stw	r6,-8(fp)
   8d48c:	e1ffff15 	stw	r7,-4(fp)
   8d490:	e0bfff17 	ldw	r2,-4(fp)
   8d494:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   8d498:	00800274 	movhi	r2,9
   8d49c:	10887104 	addi	r2,r2,8644
   8d4a0:	10800017 	ldw	r2,0(r2)
   8d4a4:	1004c03a 	cmpne	r2,r2,zero
   8d4a8:	1000041e 	bne	r2,zero,8d4bc <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   8d4ac:	00c00274 	movhi	r3,9
   8d4b0:	18c87104 	addi	r3,r3,8644
   8d4b4:	e0bffb17 	ldw	r2,-20(fp)
   8d4b8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8d4bc:	e0bffc17 	ldw	r2,-16(fp)
   8d4c0:	10800104 	addi	r2,r2,4
   8d4c4:	1007883a 	mov	r3,r2
   8d4c8:	008001c4 	movi	r2,7
   8d4cc:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8d4d0:	d8000015 	stw	zero,0(sp)
   8d4d4:	e13ffd17 	ldw	r4,-12(fp)
   8d4d8:	e17ffe17 	ldw	r5,-8(fp)
   8d4dc:	01800274 	movhi	r6,9
   8d4e0:	31b50004 	addi	r6,r6,-11264
   8d4e4:	e1fffc17 	ldw	r7,-16(fp)
   8d4e8:	008d9f40 	call	8d9f4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8d4ec:	e037883a 	mov	sp,fp
   8d4f0:	dfc00117 	ldw	ra,4(sp)
   8d4f4:	df000017 	ldw	fp,0(sp)
   8d4f8:	dec00204 	addi	sp,sp,8
   8d4fc:	f800283a 	ret

0008d500 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8d500:	defff404 	addi	sp,sp,-48
   8d504:	df000b15 	stw	fp,44(sp)
   8d508:	df000b04 	addi	fp,sp,44
   8d50c:	e13ffb15 	stw	r4,-20(fp)
   8d510:	e17ffc15 	stw	r5,-16(fp)
   8d514:	e1bffd15 	stw	r6,-12(fp)
   8d518:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8d51c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8d520:	00800274 	movhi	r2,9
   8d524:	10887104 	addi	r2,r2,8644
   8d528:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8d52c:	1005003a 	cmpeq	r2,r2,zero
   8d530:	1000411e 	bne	r2,zero,8d638 <alt_alarm_start+0x138>
  {
    if (alarm)
   8d534:	e0bffb17 	ldw	r2,-20(fp)
   8d538:	1005003a 	cmpeq	r2,r2,zero
   8d53c:	10003b1e 	bne	r2,zero,8d62c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8d540:	e0fffb17 	ldw	r3,-20(fp)
   8d544:	e0bffd17 	ldw	r2,-12(fp)
   8d548:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   8d54c:	e0fffb17 	ldw	r3,-20(fp)
   8d550:	e0bffe17 	ldw	r2,-8(fp)
   8d554:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d558:	0005303a 	rdctl	r2,status
   8d55c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d560:	e0fff817 	ldw	r3,-32(fp)
   8d564:	00bfff84 	movi	r2,-2
   8d568:	1884703a 	and	r2,r3,r2
   8d56c:	1001703a 	wrctl	status,r2
  
  return context;
   8d570:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8d574:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8d578:	00800274 	movhi	r2,9
   8d57c:	10887204 	addi	r2,r2,8648
   8d580:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8d584:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8d588:	e0fffc17 	ldw	r3,-16(fp)
   8d58c:	e0bff917 	ldw	r2,-28(fp)
   8d590:	1885883a 	add	r2,r3,r2
   8d594:	10c00044 	addi	r3,r2,1
   8d598:	e0bffb17 	ldw	r2,-20(fp)
   8d59c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8d5a0:	e0bffb17 	ldw	r2,-20(fp)
   8d5a4:	10c00217 	ldw	r3,8(r2)
   8d5a8:	e0bff917 	ldw	r2,-28(fp)
   8d5ac:	1880042e 	bgeu	r3,r2,8d5c0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8d5b0:	e0fffb17 	ldw	r3,-20(fp)
   8d5b4:	00800044 	movi	r2,1
   8d5b8:	18800405 	stb	r2,16(r3)
   8d5bc:	00000206 	br	8d5c8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8d5c0:	e0bffb17 	ldw	r2,-20(fp)
   8d5c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8d5c8:	e0fffb17 	ldw	r3,-20(fp)
   8d5cc:	00800274 	movhi	r2,9
   8d5d0:	10829604 	addi	r2,r2,2648
   8d5d4:	e0bff615 	stw	r2,-40(fp)
   8d5d8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8d5dc:	e0fff717 	ldw	r3,-36(fp)
   8d5e0:	e0bff617 	ldw	r2,-40(fp)
   8d5e4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8d5e8:	e0bff617 	ldw	r2,-40(fp)
   8d5ec:	10c00017 	ldw	r3,0(r2)
   8d5f0:	e0bff717 	ldw	r2,-36(fp)
   8d5f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8d5f8:	e0bff617 	ldw	r2,-40(fp)
   8d5fc:	10c00017 	ldw	r3,0(r2)
   8d600:	e0bff717 	ldw	r2,-36(fp)
   8d604:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8d608:	e0fff617 	ldw	r3,-40(fp)
   8d60c:	e0bff717 	ldw	r2,-36(fp)
   8d610:	18800015 	stw	r2,0(r3)
   8d614:	e0bffa17 	ldw	r2,-24(fp)
   8d618:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d61c:	e0bff517 	ldw	r2,-44(fp)
   8d620:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8d624:	e03fff15 	stw	zero,-4(fp)
   8d628:	00000506 	br	8d640 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   8d62c:	00bffa84 	movi	r2,-22
   8d630:	e0bfff15 	stw	r2,-4(fp)
   8d634:	00000206 	br	8d640 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   8d638:	00bfde84 	movi	r2,-134
   8d63c:	e0bfff15 	stw	r2,-4(fp)
   8d640:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8d644:	e037883a 	mov	sp,fp
   8d648:	df000017 	ldw	fp,0(sp)
   8d64c:	dec00104 	addi	sp,sp,4
   8d650:	f800283a 	ret

0008d654 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8d654:	defff804 	addi	sp,sp,-32
   8d658:	dfc00715 	stw	ra,28(sp)
   8d65c:	df000615 	stw	fp,24(sp)
   8d660:	df000604 	addi	fp,sp,24
   8d664:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8d668:	e0bffc17 	ldw	r2,-16(fp)
   8d66c:	1004803a 	cmplt	r2,r2,zero
   8d670:	1000091e 	bne	r2,zero,8d698 <close+0x44>
   8d674:	e13ffc17 	ldw	r4,-16(fp)
   8d678:	01400304 	movi	r5,12
   8d67c:	00837500 	call	83750 <__mulsi3>
   8d680:	1007883a 	mov	r3,r2
   8d684:	00800274 	movhi	r2,9
   8d688:	10820d04 	addi	r2,r2,2100
   8d68c:	1887883a 	add	r3,r3,r2
   8d690:	e0ffff15 	stw	r3,-4(fp)
   8d694:	00000106 	br	8d69c <close+0x48>
   8d698:	e03fff15 	stw	zero,-4(fp)
   8d69c:	e0bfff17 	ldw	r2,-4(fp)
   8d6a0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8d6a4:	e0bffb17 	ldw	r2,-20(fp)
   8d6a8:	1005003a 	cmpeq	r2,r2,zero
   8d6ac:	10001d1e 	bne	r2,zero,8d724 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8d6b0:	e0bffb17 	ldw	r2,-20(fp)
   8d6b4:	10800017 	ldw	r2,0(r2)
   8d6b8:	10800417 	ldw	r2,16(r2)
   8d6bc:	1005003a 	cmpeq	r2,r2,zero
   8d6c0:	1000071e 	bne	r2,zero,8d6e0 <close+0x8c>
   8d6c4:	e0bffb17 	ldw	r2,-20(fp)
   8d6c8:	10800017 	ldw	r2,0(r2)
   8d6cc:	10800417 	ldw	r2,16(r2)
   8d6d0:	e13ffb17 	ldw	r4,-20(fp)
   8d6d4:	103ee83a 	callr	r2
   8d6d8:	e0bffe15 	stw	r2,-8(fp)
   8d6dc:	00000106 	br	8d6e4 <close+0x90>
   8d6e0:	e03ffe15 	stw	zero,-8(fp)
   8d6e4:	e0bffe17 	ldw	r2,-8(fp)
   8d6e8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8d6ec:	e13ffc17 	ldw	r4,-16(fp)
   8d6f0:	008e0f40 	call	8e0f4 <alt_release_fd>
    if (rval < 0)
   8d6f4:	e0bffa17 	ldw	r2,-24(fp)
   8d6f8:	1004403a 	cmpge	r2,r2,zero
   8d6fc:	1000071e 	bne	r2,zero,8d71c <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8d700:	008d7540 	call	8d754 <alt_get_errno>
   8d704:	e0fffa17 	ldw	r3,-24(fp)
   8d708:	00c7c83a 	sub	r3,zero,r3
   8d70c:	10c00015 	stw	r3,0(r2)
      return -1;
   8d710:	00bfffc4 	movi	r2,-1
   8d714:	e0bffd15 	stw	r2,-12(fp)
   8d718:	00000806 	br	8d73c <close+0xe8>
    }
    return 0;
   8d71c:	e03ffd15 	stw	zero,-12(fp)
   8d720:	00000606 	br	8d73c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8d724:	008d7540 	call	8d754 <alt_get_errno>
   8d728:	1007883a 	mov	r3,r2
   8d72c:	00801444 	movi	r2,81
   8d730:	18800015 	stw	r2,0(r3)
    return -1;
   8d734:	00bfffc4 	movi	r2,-1
   8d738:	e0bffd15 	stw	r2,-12(fp)
   8d73c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8d740:	e037883a 	mov	sp,fp
   8d744:	dfc00117 	ldw	ra,4(sp)
   8d748:	df000017 	ldw	fp,0(sp)
   8d74c:	dec00204 	addi	sp,sp,8
   8d750:	f800283a 	ret

0008d754 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d754:	defffd04 	addi	sp,sp,-12
   8d758:	dfc00215 	stw	ra,8(sp)
   8d75c:	df000115 	stw	fp,4(sp)
   8d760:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8d764:	00800274 	movhi	r2,9
   8d768:	10829404 	addi	r2,r2,2640
   8d76c:	10800017 	ldw	r2,0(r2)
   8d770:	1005003a 	cmpeq	r2,r2,zero
   8d774:	1000061e 	bne	r2,zero,8d790 <alt_get_errno+0x3c>
   8d778:	00800274 	movhi	r2,9
   8d77c:	10829404 	addi	r2,r2,2640
   8d780:	10800017 	ldw	r2,0(r2)
   8d784:	103ee83a 	callr	r2
   8d788:	e0bfff15 	stw	r2,-4(fp)
   8d78c:	00000306 	br	8d79c <alt_get_errno+0x48>
   8d790:	00800274 	movhi	r2,9
   8d794:	10887304 	addi	r2,r2,8652
   8d798:	e0bfff15 	stw	r2,-4(fp)
   8d79c:	e0bfff17 	ldw	r2,-4(fp)
}
   8d7a0:	e037883a 	mov	sp,fp
   8d7a4:	dfc00117 	ldw	ra,4(sp)
   8d7a8:	df000017 	ldw	fp,0(sp)
   8d7ac:	dec00204 	addi	sp,sp,8
   8d7b0:	f800283a 	ret

0008d7b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8d7b4:	deffff04 	addi	sp,sp,-4
   8d7b8:	df000015 	stw	fp,0(sp)
   8d7bc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8d7c0:	e037883a 	mov	sp,fp
   8d7c4:	df000017 	ldw	fp,0(sp)
   8d7c8:	dec00104 	addi	sp,sp,4
   8d7cc:	f800283a 	ret

0008d7d0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8d7d0:	defffc04 	addi	sp,sp,-16
   8d7d4:	df000315 	stw	fp,12(sp)
   8d7d8:	df000304 	addi	fp,sp,12
   8d7dc:	e13ffd15 	stw	r4,-12(fp)
   8d7e0:	e17ffe15 	stw	r5,-8(fp)
   8d7e4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8d7e8:	e0bfff17 	ldw	r2,-4(fp)
}
   8d7ec:	e037883a 	mov	sp,fp
   8d7f0:	df000017 	ldw	fp,0(sp)
   8d7f4:	dec00104 	addi	sp,sp,4
   8d7f8:	f800283a 	ret

0008d7fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8d7fc:	defff904 	addi	sp,sp,-28
   8d800:	dfc00615 	stw	ra,24(sp)
   8d804:	df000515 	stw	fp,20(sp)
   8d808:	df000504 	addi	fp,sp,20
   8d80c:	e13ffd15 	stw	r4,-12(fp)
   8d810:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8d814:	e0bffd17 	ldw	r2,-12(fp)
   8d818:	1005003a 	cmpeq	r2,r2,zero
   8d81c:	1000041e 	bne	r2,zero,8d830 <alt_dev_llist_insert+0x34>
   8d820:	e0bffd17 	ldw	r2,-12(fp)
   8d824:	10800217 	ldw	r2,8(r2)
   8d828:	1004c03a 	cmpne	r2,r2,zero
   8d82c:	1000071e 	bne	r2,zero,8d84c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   8d830:	008d8b00 	call	8d8b0 <alt_get_errno>
   8d834:	1007883a 	mov	r3,r2
   8d838:	00800584 	movi	r2,22
   8d83c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8d840:	00bffa84 	movi	r2,-22
   8d844:	e0bfff15 	stw	r2,-4(fp)
   8d848:	00001306 	br	8d898 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8d84c:	e0fffd17 	ldw	r3,-12(fp)
   8d850:	e0bffe17 	ldw	r2,-8(fp)
   8d854:	e0bffb15 	stw	r2,-20(fp)
   8d858:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8d85c:	e0fffc17 	ldw	r3,-16(fp)
   8d860:	e0bffb17 	ldw	r2,-20(fp)
   8d864:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8d868:	e0bffb17 	ldw	r2,-20(fp)
   8d86c:	10c00017 	ldw	r3,0(r2)
   8d870:	e0bffc17 	ldw	r2,-16(fp)
   8d874:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8d878:	e0bffb17 	ldw	r2,-20(fp)
   8d87c:	10c00017 	ldw	r3,0(r2)
   8d880:	e0bffc17 	ldw	r2,-16(fp)
   8d884:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8d888:	e0fffb17 	ldw	r3,-20(fp)
   8d88c:	e0bffc17 	ldw	r2,-16(fp)
   8d890:	18800015 	stw	r2,0(r3)

  return 0;  
   8d894:	e03fff15 	stw	zero,-4(fp)
   8d898:	e0bfff17 	ldw	r2,-4(fp)
}
   8d89c:	e037883a 	mov	sp,fp
   8d8a0:	dfc00117 	ldw	ra,4(sp)
   8d8a4:	df000017 	ldw	fp,0(sp)
   8d8a8:	dec00204 	addi	sp,sp,8
   8d8ac:	f800283a 	ret

0008d8b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d8b0:	defffd04 	addi	sp,sp,-12
   8d8b4:	dfc00215 	stw	ra,8(sp)
   8d8b8:	df000115 	stw	fp,4(sp)
   8d8bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8d8c0:	00800274 	movhi	r2,9
   8d8c4:	10829404 	addi	r2,r2,2640
   8d8c8:	10800017 	ldw	r2,0(r2)
   8d8cc:	1005003a 	cmpeq	r2,r2,zero
   8d8d0:	1000061e 	bne	r2,zero,8d8ec <alt_get_errno+0x3c>
   8d8d4:	00800274 	movhi	r2,9
   8d8d8:	10829404 	addi	r2,r2,2640
   8d8dc:	10800017 	ldw	r2,0(r2)
   8d8e0:	103ee83a 	callr	r2
   8d8e4:	e0bfff15 	stw	r2,-4(fp)
   8d8e8:	00000306 	br	8d8f8 <alt_get_errno+0x48>
   8d8ec:	00800274 	movhi	r2,9
   8d8f0:	10887304 	addi	r2,r2,8652
   8d8f4:	e0bfff15 	stw	r2,-4(fp)
   8d8f8:	e0bfff17 	ldw	r2,-4(fp)
}
   8d8fc:	e037883a 	mov	sp,fp
   8d900:	dfc00117 	ldw	ra,4(sp)
   8d904:	df000017 	ldw	fp,0(sp)
   8d908:	dec00204 	addi	sp,sp,8
   8d90c:	f800283a 	ret

0008d910 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8d910:	defffd04 	addi	sp,sp,-12
   8d914:	dfc00215 	stw	ra,8(sp)
   8d918:	df000115 	stw	fp,4(sp)
   8d91c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8d920:	00bfff04 	movi	r2,-4
   8d924:	00c00274 	movhi	r3,9
   8d928:	18fc2604 	addi	r3,r3,-3944
   8d92c:	1885883a 	add	r2,r3,r2
   8d930:	e0bfff15 	stw	r2,-4(fp)
   8d934:	00000606 	br	8d950 <_do_ctors+0x40>
        (*ctor) (); 
   8d938:	e0bfff17 	ldw	r2,-4(fp)
   8d93c:	10800017 	ldw	r2,0(r2)
   8d940:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8d944:	e0bfff17 	ldw	r2,-4(fp)
   8d948:	10bfff04 	addi	r2,r2,-4
   8d94c:	e0bfff15 	stw	r2,-4(fp)
   8d950:	e0ffff17 	ldw	r3,-4(fp)
   8d954:	00800274 	movhi	r2,9
   8d958:	10bc2504 	addi	r2,r2,-3948
   8d95c:	18bff62e 	bgeu	r3,r2,8d938 <_do_ctors+0x28>
        (*ctor) (); 
}
   8d960:	e037883a 	mov	sp,fp
   8d964:	dfc00117 	ldw	ra,4(sp)
   8d968:	df000017 	ldw	fp,0(sp)
   8d96c:	dec00204 	addi	sp,sp,8
   8d970:	f800283a 	ret

0008d974 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8d974:	defffd04 	addi	sp,sp,-12
   8d978:	dfc00215 	stw	ra,8(sp)
   8d97c:	df000115 	stw	fp,4(sp)
   8d980:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8d984:	00bfff04 	movi	r2,-4
   8d988:	00c00274 	movhi	r3,9
   8d98c:	18fc2604 	addi	r3,r3,-3944
   8d990:	1885883a 	add	r2,r3,r2
   8d994:	e0bfff15 	stw	r2,-4(fp)
   8d998:	00000606 	br	8d9b4 <_do_dtors+0x40>
        (*dtor) (); 
   8d99c:	e0bfff17 	ldw	r2,-4(fp)
   8d9a0:	10800017 	ldw	r2,0(r2)
   8d9a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8d9a8:	e0bfff17 	ldw	r2,-4(fp)
   8d9ac:	10bfff04 	addi	r2,r2,-4
   8d9b0:	e0bfff15 	stw	r2,-4(fp)
   8d9b4:	e0ffff17 	ldw	r3,-4(fp)
   8d9b8:	00800274 	movhi	r2,9
   8d9bc:	10bc2604 	addi	r2,r2,-3944
   8d9c0:	18bff62e 	bgeu	r3,r2,8d99c <_do_dtors+0x28>
        (*dtor) (); 
}
   8d9c4:	e037883a 	mov	sp,fp
   8d9c8:	dfc00117 	ldw	ra,4(sp)
   8d9cc:	df000017 	ldw	fp,0(sp)
   8d9d0:	dec00204 	addi	sp,sp,8
   8d9d4:	f800283a 	ret

0008d9d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8d9d8:	deffff04 	addi	sp,sp,-4
   8d9dc:	df000015 	stw	fp,0(sp)
   8d9e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8d9e4:	e037883a 	mov	sp,fp
   8d9e8:	df000017 	ldw	fp,0(sp)
   8d9ec:	dec00104 	addi	sp,sp,4
   8d9f0:	f800283a 	ret

0008d9f4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8d9f4:	defff904 	addi	sp,sp,-28
   8d9f8:	dfc00615 	stw	ra,24(sp)
   8d9fc:	df000515 	stw	fp,20(sp)
   8da00:	df000504 	addi	fp,sp,20
   8da04:	e13ffc15 	stw	r4,-16(fp)
   8da08:	e17ffd15 	stw	r5,-12(fp)
   8da0c:	e1bffe15 	stw	r6,-8(fp)
   8da10:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8da14:	e0800217 	ldw	r2,8(fp)
   8da18:	d8800015 	stw	r2,0(sp)
   8da1c:	e13ffc17 	ldw	r4,-16(fp)
   8da20:	e17ffd17 	ldw	r5,-12(fp)
   8da24:	e1bffe17 	ldw	r6,-8(fp)
   8da28:	e1ffff17 	ldw	r7,-4(fp)
   8da2c:	008dbc80 	call	8dbc8 <alt_iic_isr_register>
}  
   8da30:	e037883a 	mov	sp,fp
   8da34:	dfc00117 	ldw	ra,4(sp)
   8da38:	df000017 	ldw	fp,0(sp)
   8da3c:	dec00204 	addi	sp,sp,8
   8da40:	f800283a 	ret

0008da44 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8da44:	defff904 	addi	sp,sp,-28
   8da48:	df000615 	stw	fp,24(sp)
   8da4c:	df000604 	addi	fp,sp,24
   8da50:	e13ffe15 	stw	r4,-8(fp)
   8da54:	e17fff15 	stw	r5,-4(fp)
   8da58:	e0bfff17 	ldw	r2,-4(fp)
   8da5c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8da60:	0005303a 	rdctl	r2,status
   8da64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8da68:	e0fffb17 	ldw	r3,-20(fp)
   8da6c:	00bfff84 	movi	r2,-2
   8da70:	1884703a 	and	r2,r3,r2
   8da74:	1001703a 	wrctl	status,r2
  
  return context;
   8da78:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8da7c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   8da80:	e0fffc17 	ldw	r3,-16(fp)
   8da84:	00800044 	movi	r2,1
   8da88:	10c4983a 	sll	r2,r2,r3
   8da8c:	1007883a 	mov	r3,r2
   8da90:	00800274 	movhi	r2,9
   8da94:	10887004 	addi	r2,r2,8640
   8da98:	10800017 	ldw	r2,0(r2)
   8da9c:	1886b03a 	or	r3,r3,r2
   8daa0:	00800274 	movhi	r2,9
   8daa4:	10887004 	addi	r2,r2,8640
   8daa8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8daac:	00800274 	movhi	r2,9
   8dab0:	10887004 	addi	r2,r2,8640
   8dab4:	10800017 	ldw	r2,0(r2)
   8dab8:	100170fa 	wrctl	ienable,r2
   8dabc:	e0bffd17 	ldw	r2,-12(fp)
   8dac0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8dac4:	e0bffa17 	ldw	r2,-24(fp)
   8dac8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8dacc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8dad0:	e037883a 	mov	sp,fp
   8dad4:	df000017 	ldw	fp,0(sp)
   8dad8:	dec00104 	addi	sp,sp,4
   8dadc:	f800283a 	ret

0008dae0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8dae0:	defff904 	addi	sp,sp,-28
   8dae4:	df000615 	stw	fp,24(sp)
   8dae8:	df000604 	addi	fp,sp,24
   8daec:	e13ffe15 	stw	r4,-8(fp)
   8daf0:	e17fff15 	stw	r5,-4(fp)
   8daf4:	e0bfff17 	ldw	r2,-4(fp)
   8daf8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8dafc:	0005303a 	rdctl	r2,status
   8db00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8db04:	e0fffb17 	ldw	r3,-20(fp)
   8db08:	00bfff84 	movi	r2,-2
   8db0c:	1884703a 	and	r2,r3,r2
   8db10:	1001703a 	wrctl	status,r2
  
  return context;
   8db14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8db18:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   8db1c:	e0fffc17 	ldw	r3,-16(fp)
   8db20:	00800044 	movi	r2,1
   8db24:	10c4983a 	sll	r2,r2,r3
   8db28:	0084303a 	nor	r2,zero,r2
   8db2c:	1007883a 	mov	r3,r2
   8db30:	00800274 	movhi	r2,9
   8db34:	10887004 	addi	r2,r2,8640
   8db38:	10800017 	ldw	r2,0(r2)
   8db3c:	1886703a 	and	r3,r3,r2
   8db40:	00800274 	movhi	r2,9
   8db44:	10887004 	addi	r2,r2,8640
   8db48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8db4c:	00800274 	movhi	r2,9
   8db50:	10887004 	addi	r2,r2,8640
   8db54:	10800017 	ldw	r2,0(r2)
   8db58:	100170fa 	wrctl	ienable,r2
   8db5c:	e0bffd17 	ldw	r2,-12(fp)
   8db60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8db64:	e0bffa17 	ldw	r2,-24(fp)
   8db68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8db6c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8db70:	e037883a 	mov	sp,fp
   8db74:	df000017 	ldw	fp,0(sp)
   8db78:	dec00104 	addi	sp,sp,4
   8db7c:	f800283a 	ret

0008db80 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8db80:	defffc04 	addi	sp,sp,-16
   8db84:	df000315 	stw	fp,12(sp)
   8db88:	df000304 	addi	fp,sp,12
   8db8c:	e13ffe15 	stw	r4,-8(fp)
   8db90:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8db94:	000530fa 	rdctl	r2,ienable
   8db98:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8db9c:	e0ffff17 	ldw	r3,-4(fp)
   8dba0:	00800044 	movi	r2,1
   8dba4:	10c4983a 	sll	r2,r2,r3
   8dba8:	1007883a 	mov	r3,r2
   8dbac:	e0bffd17 	ldw	r2,-12(fp)
   8dbb0:	1884703a 	and	r2,r3,r2
   8dbb4:	1004c03a 	cmpne	r2,r2,zero
}
   8dbb8:	e037883a 	mov	sp,fp
   8dbbc:	df000017 	ldw	fp,0(sp)
   8dbc0:	dec00104 	addi	sp,sp,4
   8dbc4:	f800283a 	ret

0008dbc8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8dbc8:	defff404 	addi	sp,sp,-48
   8dbcc:	dfc00b15 	stw	ra,44(sp)
   8dbd0:	df000a15 	stw	fp,40(sp)
   8dbd4:	df000a04 	addi	fp,sp,40
   8dbd8:	e13ffb15 	stw	r4,-20(fp)
   8dbdc:	e17ffc15 	stw	r5,-16(fp)
   8dbe0:	e1bffd15 	stw	r6,-12(fp)
   8dbe4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   8dbe8:	00bffa84 	movi	r2,-22
   8dbec:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8dbf0:	e0bffc17 	ldw	r2,-16(fp)
   8dbf4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8dbf8:	e0bff917 	ldw	r2,-28(fp)
   8dbfc:	10800808 	cmpgei	r2,r2,32
   8dc00:	1000291e 	bne	r2,zero,8dca8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8dc04:	0005303a 	rdctl	r2,status
   8dc08:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8dc0c:	e0fff717 	ldw	r3,-36(fp)
   8dc10:	00bfff84 	movi	r2,-2
   8dc14:	1884703a 	and	r2,r3,r2
   8dc18:	1001703a 	wrctl	status,r2
  
  return context;
   8dc1c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8dc20:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   8dc24:	e0bff917 	ldw	r2,-28(fp)
   8dc28:	00c002b4 	movhi	r3,10
   8dc2c:	18e51504 	addi	r3,r3,-27564
   8dc30:	100490fa 	slli	r2,r2,3
   8dc34:	10c7883a 	add	r3,r2,r3
   8dc38:	e0bffd17 	ldw	r2,-12(fp)
   8dc3c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   8dc40:	e0bff917 	ldw	r2,-28(fp)
   8dc44:	00c002b4 	movhi	r3,10
   8dc48:	18e51504 	addi	r3,r3,-27564
   8dc4c:	100490fa 	slli	r2,r2,3
   8dc50:	10c5883a 	add	r2,r2,r3
   8dc54:	10c00104 	addi	r3,r2,4
   8dc58:	e0bffe17 	ldw	r2,-8(fp)
   8dc5c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8dc60:	e0bffd17 	ldw	r2,-12(fp)
   8dc64:	1005003a 	cmpeq	r2,r2,zero
   8dc68:	1000051e 	bne	r2,zero,8dc80 <alt_iic_isr_register+0xb8>
   8dc6c:	e17ff917 	ldw	r5,-28(fp)
   8dc70:	e13ffb17 	ldw	r4,-20(fp)
   8dc74:	008da440 	call	8da44 <alt_ic_irq_enable>
   8dc78:	e0bfff15 	stw	r2,-4(fp)
   8dc7c:	00000406 	br	8dc90 <alt_iic_isr_register+0xc8>
   8dc80:	e17ff917 	ldw	r5,-28(fp)
   8dc84:	e13ffb17 	ldw	r4,-20(fp)
   8dc88:	008dae00 	call	8dae0 <alt_ic_irq_disable>
   8dc8c:	e0bfff15 	stw	r2,-4(fp)
   8dc90:	e0bfff17 	ldw	r2,-4(fp)
   8dc94:	e0bffa15 	stw	r2,-24(fp)
   8dc98:	e0bff817 	ldw	r2,-32(fp)
   8dc9c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8dca0:	e0bff617 	ldw	r2,-40(fp)
   8dca4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8dca8:	e0bffa17 	ldw	r2,-24(fp)
}
   8dcac:	e037883a 	mov	sp,fp
   8dcb0:	dfc00117 	ldw	ra,4(sp)
   8dcb4:	df000017 	ldw	fp,0(sp)
   8dcb8:	dec00204 	addi	sp,sp,8
   8dcbc:	f800283a 	ret

0008dcc0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8dcc0:	defff804 	addi	sp,sp,-32
   8dcc4:	dfc00715 	stw	ra,28(sp)
   8dcc8:	df000615 	stw	fp,24(sp)
   8dccc:	dc000515 	stw	r16,20(sp)
   8dcd0:	df000504 	addi	fp,sp,20
   8dcd4:	e13ffc15 	stw	r4,-16(fp)
   8dcd8:	e17ffd15 	stw	r5,-12(fp)
   8dcdc:	e1bffe15 	stw	r6,-8(fp)
   8dce0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8dce4:	e13ffd17 	ldw	r4,-12(fp)
   8dce8:	e17ffe17 	ldw	r5,-8(fp)
   8dcec:	e1bfff17 	ldw	r6,-4(fp)
   8dcf0:	008df080 	call	8df08 <open>
   8dcf4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8dcf8:	e0bffb17 	ldw	r2,-20(fp)
   8dcfc:	1004803a 	cmplt	r2,r2,zero
   8dd00:	10001f1e 	bne	r2,zero,8dd80 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   8dd04:	e13ffb17 	ldw	r4,-20(fp)
   8dd08:	04000274 	movhi	r16,9
   8dd0c:	84020d04 	addi	r16,r16,2100
   8dd10:	01400304 	movi	r5,12
   8dd14:	00837500 	call	83750 <__mulsi3>
   8dd18:	1405883a 	add	r2,r2,r16
   8dd1c:	10c00017 	ldw	r3,0(r2)
   8dd20:	e0bffc17 	ldw	r2,-16(fp)
   8dd24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8dd28:	e13ffb17 	ldw	r4,-20(fp)
   8dd2c:	04000274 	movhi	r16,9
   8dd30:	84020d04 	addi	r16,r16,2100
   8dd34:	01400304 	movi	r5,12
   8dd38:	00837500 	call	83750 <__mulsi3>
   8dd3c:	1405883a 	add	r2,r2,r16
   8dd40:	10800104 	addi	r2,r2,4
   8dd44:	10c00017 	ldw	r3,0(r2)
   8dd48:	e0bffc17 	ldw	r2,-16(fp)
   8dd4c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8dd50:	e13ffb17 	ldw	r4,-20(fp)
   8dd54:	04000274 	movhi	r16,9
   8dd58:	84020d04 	addi	r16,r16,2100
   8dd5c:	01400304 	movi	r5,12
   8dd60:	00837500 	call	83750 <__mulsi3>
   8dd64:	1405883a 	add	r2,r2,r16
   8dd68:	10800204 	addi	r2,r2,8
   8dd6c:	10c00017 	ldw	r3,0(r2)
   8dd70:	e0bffc17 	ldw	r2,-16(fp)
   8dd74:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8dd78:	e13ffb17 	ldw	r4,-20(fp)
   8dd7c:	008e0f40 	call	8e0f4 <alt_release_fd>
  }
} 
   8dd80:	e037883a 	mov	sp,fp
   8dd84:	dfc00217 	ldw	ra,8(sp)
   8dd88:	df000117 	ldw	fp,4(sp)
   8dd8c:	dc000017 	ldw	r16,0(sp)
   8dd90:	dec00304 	addi	sp,sp,12
   8dd94:	f800283a 	ret

0008dd98 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8dd98:	defffb04 	addi	sp,sp,-20
   8dd9c:	dfc00415 	stw	ra,16(sp)
   8dda0:	df000315 	stw	fp,12(sp)
   8dda4:	df000304 	addi	fp,sp,12
   8dda8:	e13ffd15 	stw	r4,-12(fp)
   8ddac:	e17ffe15 	stw	r5,-8(fp)
   8ddb0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8ddb4:	01000274 	movhi	r4,9
   8ddb8:	21021004 	addi	r4,r4,2112
   8ddbc:	e17ffd17 	ldw	r5,-12(fp)
   8ddc0:	01800044 	movi	r6,1
   8ddc4:	01c07fc4 	movi	r7,511
   8ddc8:	008dcc00 	call	8dcc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8ddcc:	01000274 	movhi	r4,9
   8ddd0:	21020d04 	addi	r4,r4,2100
   8ddd4:	e17ffe17 	ldw	r5,-8(fp)
   8ddd8:	000d883a 	mov	r6,zero
   8dddc:	01c07fc4 	movi	r7,511
   8dde0:	008dcc00 	call	8dcc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8dde4:	01000274 	movhi	r4,9
   8dde8:	21021304 	addi	r4,r4,2124
   8ddec:	e17fff17 	ldw	r5,-4(fp)
   8ddf0:	01800044 	movi	r6,1
   8ddf4:	01c07fc4 	movi	r7,511
   8ddf8:	008dcc00 	call	8dcc0 <alt_open_fd>
}  
   8ddfc:	e037883a 	mov	sp,fp
   8de00:	dfc00117 	ldw	ra,4(sp)
   8de04:	df000017 	ldw	fp,0(sp)
   8de08:	dec00204 	addi	sp,sp,8
   8de0c:	f800283a 	ret

0008de10 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8de10:	defffa04 	addi	sp,sp,-24
   8de14:	dfc00515 	stw	ra,20(sp)
   8de18:	df000415 	stw	fp,16(sp)
   8de1c:	dc000315 	stw	r16,12(sp)
   8de20:	df000304 	addi	fp,sp,12
   8de24:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8de28:	e0bffe17 	ldw	r2,-8(fp)
   8de2c:	10800217 	ldw	r2,8(r2)
   8de30:	10d00034 	orhi	r3,r2,16384
   8de34:	e0bffe17 	ldw	r2,-8(fp)
   8de38:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8de3c:	e03ffd15 	stw	zero,-12(fp)
   8de40:	00002306 	br	8ded0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8de44:	e13ffd17 	ldw	r4,-12(fp)
   8de48:	04000274 	movhi	r16,9
   8de4c:	84020d04 	addi	r16,r16,2100
   8de50:	01400304 	movi	r5,12
   8de54:	00837500 	call	83750 <__mulsi3>
   8de58:	1405883a 	add	r2,r2,r16
   8de5c:	10c00017 	ldw	r3,0(r2)
   8de60:	e0bffe17 	ldw	r2,-8(fp)
   8de64:	10800017 	ldw	r2,0(r2)
   8de68:	1880161e 	bne	r3,r2,8dec4 <alt_file_locked+0xb4>
   8de6c:	e13ffd17 	ldw	r4,-12(fp)
   8de70:	04000274 	movhi	r16,9
   8de74:	84020d04 	addi	r16,r16,2100
   8de78:	01400304 	movi	r5,12
   8de7c:	00837500 	call	83750 <__mulsi3>
   8de80:	1405883a 	add	r2,r2,r16
   8de84:	10800204 	addi	r2,r2,8
   8de88:	10800017 	ldw	r2,0(r2)
   8de8c:	1004403a 	cmpge	r2,r2,zero
   8de90:	10000c1e 	bne	r2,zero,8dec4 <alt_file_locked+0xb4>
   8de94:	e13ffd17 	ldw	r4,-12(fp)
   8de98:	01400304 	movi	r5,12
   8de9c:	00837500 	call	83750 <__mulsi3>
   8dea0:	1007883a 	mov	r3,r2
   8dea4:	00800274 	movhi	r2,9
   8dea8:	10820d04 	addi	r2,r2,2100
   8deac:	1887883a 	add	r3,r3,r2
   8deb0:	e0bffe17 	ldw	r2,-8(fp)
   8deb4:	18800326 	beq	r3,r2,8dec4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8deb8:	00bffcc4 	movi	r2,-13
   8debc:	e0bfff15 	stw	r2,-4(fp)
   8dec0:	00000a06 	br	8deec <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8dec4:	e0bffd17 	ldw	r2,-12(fp)
   8dec8:	10800044 	addi	r2,r2,1
   8decc:	e0bffd15 	stw	r2,-12(fp)
   8ded0:	00800274 	movhi	r2,9
   8ded4:	10829304 	addi	r2,r2,2636
   8ded8:	10800017 	ldw	r2,0(r2)
   8dedc:	1007883a 	mov	r3,r2
   8dee0:	e0bffd17 	ldw	r2,-12(fp)
   8dee4:	18bfd72e 	bgeu	r3,r2,8de44 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8dee8:	e03fff15 	stw	zero,-4(fp)
   8deec:	e0bfff17 	ldw	r2,-4(fp)
}
   8def0:	e037883a 	mov	sp,fp
   8def4:	dfc00217 	ldw	ra,8(sp)
   8def8:	df000117 	ldw	fp,4(sp)
   8defc:	dc000017 	ldw	r16,0(sp)
   8df00:	dec00304 	addi	sp,sp,12
   8df04:	f800283a 	ret

0008df08 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8df08:	defff404 	addi	sp,sp,-48
   8df0c:	dfc00b15 	stw	ra,44(sp)
   8df10:	df000a15 	stw	fp,40(sp)
   8df14:	df000a04 	addi	fp,sp,40
   8df18:	e13ffb15 	stw	r4,-20(fp)
   8df1c:	e17ffc15 	stw	r5,-16(fp)
   8df20:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8df24:	00bfffc4 	movi	r2,-1
   8df28:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8df2c:	00bffb44 	movi	r2,-19
   8df30:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   8df34:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8df38:	e13ffb17 	ldw	r4,-20(fp)
   8df3c:	01400274 	movhi	r5,9
   8df40:	29429104 	addi	r5,r5,2628
   8df44:	008e81c0 	call	8e81c <alt_find_dev>
   8df48:	e0bffa15 	stw	r2,-24(fp)
   8df4c:	e0bffa17 	ldw	r2,-24(fp)
   8df50:	1004c03a 	cmpne	r2,r2,zero
   8df54:	1000051e 	bne	r2,zero,8df6c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8df58:	e13ffb17 	ldw	r4,-20(fp)
   8df5c:	008e8b00 	call	8e8b0 <alt_find_file>
   8df60:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   8df64:	00800044 	movi	r2,1
   8df68:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8df6c:	e0bffa17 	ldw	r2,-24(fp)
   8df70:	1005003a 	cmpeq	r2,r2,zero
   8df74:	1000311e 	bne	r2,zero,8e03c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8df78:	e13ffa17 	ldw	r4,-24(fp)
   8df7c:	008e9d00 	call	8e9d0 <alt_get_fd>
   8df80:	e0bff815 	stw	r2,-32(fp)
   8df84:	e0bff817 	ldw	r2,-32(fp)
   8df88:	1004403a 	cmpge	r2,r2,zero
   8df8c:	1000031e 	bne	r2,zero,8df9c <open+0x94>
    {
      status = index;
   8df90:	e0bff817 	ldw	r2,-32(fp)
   8df94:	e0bff715 	stw	r2,-36(fp)
   8df98:	00002a06 	br	8e044 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   8df9c:	e13ff817 	ldw	r4,-32(fp)
   8dfa0:	01400304 	movi	r5,12
   8dfa4:	00837500 	call	83750 <__mulsi3>
   8dfa8:	1007883a 	mov	r3,r2
   8dfac:	00800274 	movhi	r2,9
   8dfb0:	10820d04 	addi	r2,r2,2100
   8dfb4:	1885883a 	add	r2,r3,r2
   8dfb8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8dfbc:	e0fffc17 	ldw	r3,-16(fp)
   8dfc0:	00900034 	movhi	r2,16384
   8dfc4:	10bfffc4 	addi	r2,r2,-1
   8dfc8:	1886703a 	and	r3,r3,r2
   8dfcc:	e0bff917 	ldw	r2,-28(fp)
   8dfd0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8dfd4:	e0bff617 	ldw	r2,-40(fp)
   8dfd8:	1004c03a 	cmpne	r2,r2,zero
   8dfdc:	1000061e 	bne	r2,zero,8dff8 <open+0xf0>
   8dfe0:	e13ff917 	ldw	r4,-28(fp)
   8dfe4:	008de100 	call	8de10 <alt_file_locked>
   8dfe8:	e0bff715 	stw	r2,-36(fp)
   8dfec:	e0bff717 	ldw	r2,-36(fp)
   8dff0:	1004803a 	cmplt	r2,r2,zero
   8dff4:	1000131e 	bne	r2,zero,8e044 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8dff8:	e0bffa17 	ldw	r2,-24(fp)
   8dffc:	10800317 	ldw	r2,12(r2)
   8e000:	1005003a 	cmpeq	r2,r2,zero
   8e004:	1000091e 	bne	r2,zero,8e02c <open+0x124>
   8e008:	e0bffa17 	ldw	r2,-24(fp)
   8e00c:	10800317 	ldw	r2,12(r2)
   8e010:	e13ff917 	ldw	r4,-28(fp)
   8e014:	e17ffb17 	ldw	r5,-20(fp)
   8e018:	e1bffc17 	ldw	r6,-16(fp)
   8e01c:	e1fffd17 	ldw	r7,-12(fp)
   8e020:	103ee83a 	callr	r2
   8e024:	e0bfff15 	stw	r2,-4(fp)
   8e028:	00000106 	br	8e030 <open+0x128>
   8e02c:	e03fff15 	stw	zero,-4(fp)
   8e030:	e0bfff17 	ldw	r2,-4(fp)
   8e034:	e0bff715 	stw	r2,-36(fp)
   8e038:	00000206 	br	8e044 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8e03c:	00bffb44 	movi	r2,-19
   8e040:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8e044:	e0bff717 	ldw	r2,-36(fp)
   8e048:	1004403a 	cmpge	r2,r2,zero
   8e04c:	1000091e 	bne	r2,zero,8e074 <open+0x16c>
  {
    alt_release_fd (index);  
   8e050:	e13ff817 	ldw	r4,-32(fp)
   8e054:	008e0f40 	call	8e0f4 <alt_release_fd>
    ALT_ERRNO = -status;
   8e058:	008e0940 	call	8e094 <alt_get_errno>
   8e05c:	e0fff717 	ldw	r3,-36(fp)
   8e060:	00c7c83a 	sub	r3,zero,r3
   8e064:	10c00015 	stw	r3,0(r2)
    return -1;
   8e068:	00bfffc4 	movi	r2,-1
   8e06c:	e0bffe15 	stw	r2,-8(fp)
   8e070:	00000206 	br	8e07c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   8e074:	e0bff817 	ldw	r2,-32(fp)
   8e078:	e0bffe15 	stw	r2,-8(fp)
   8e07c:	e0bffe17 	ldw	r2,-8(fp)
}
   8e080:	e037883a 	mov	sp,fp
   8e084:	dfc00117 	ldw	ra,4(sp)
   8e088:	df000017 	ldw	fp,0(sp)
   8e08c:	dec00204 	addi	sp,sp,8
   8e090:	f800283a 	ret

0008e094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e094:	defffd04 	addi	sp,sp,-12
   8e098:	dfc00215 	stw	ra,8(sp)
   8e09c:	df000115 	stw	fp,4(sp)
   8e0a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8e0a4:	00800274 	movhi	r2,9
   8e0a8:	10829404 	addi	r2,r2,2640
   8e0ac:	10800017 	ldw	r2,0(r2)
   8e0b0:	1005003a 	cmpeq	r2,r2,zero
   8e0b4:	1000061e 	bne	r2,zero,8e0d0 <alt_get_errno+0x3c>
   8e0b8:	00800274 	movhi	r2,9
   8e0bc:	10829404 	addi	r2,r2,2640
   8e0c0:	10800017 	ldw	r2,0(r2)
   8e0c4:	103ee83a 	callr	r2
   8e0c8:	e0bfff15 	stw	r2,-4(fp)
   8e0cc:	00000306 	br	8e0dc <alt_get_errno+0x48>
   8e0d0:	00800274 	movhi	r2,9
   8e0d4:	10887304 	addi	r2,r2,8652
   8e0d8:	e0bfff15 	stw	r2,-4(fp)
   8e0dc:	e0bfff17 	ldw	r2,-4(fp)
}
   8e0e0:	e037883a 	mov	sp,fp
   8e0e4:	dfc00117 	ldw	ra,4(sp)
   8e0e8:	df000017 	ldw	fp,0(sp)
   8e0ec:	dec00204 	addi	sp,sp,8
   8e0f0:	f800283a 	ret

0008e0f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8e0f4:	defffc04 	addi	sp,sp,-16
   8e0f8:	dfc00315 	stw	ra,12(sp)
   8e0fc:	df000215 	stw	fp,8(sp)
   8e100:	dc000115 	stw	r16,4(sp)
   8e104:	df000104 	addi	fp,sp,4
   8e108:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8e10c:	e0bfff17 	ldw	r2,-4(fp)
   8e110:	108000d0 	cmplti	r2,r2,3
   8e114:	10000f1e 	bne	r2,zero,8e154 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8e118:	e13fff17 	ldw	r4,-4(fp)
   8e11c:	04000274 	movhi	r16,9
   8e120:	84020d04 	addi	r16,r16,2100
   8e124:	01400304 	movi	r5,12
   8e128:	00837500 	call	83750 <__mulsi3>
   8e12c:	1405883a 	add	r2,r2,r16
   8e130:	10800204 	addi	r2,r2,8
   8e134:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8e138:	e13fff17 	ldw	r4,-4(fp)
   8e13c:	04000274 	movhi	r16,9
   8e140:	84020d04 	addi	r16,r16,2100
   8e144:	01400304 	movi	r5,12
   8e148:	00837500 	call	83750 <__mulsi3>
   8e14c:	1405883a 	add	r2,r2,r16
   8e150:	10000015 	stw	zero,0(r2)
  }
}
   8e154:	e037883a 	mov	sp,fp
   8e158:	dfc00217 	ldw	ra,8(sp)
   8e15c:	df000117 	ldw	fp,4(sp)
   8e160:	dc000017 	ldw	r16,0(sp)
   8e164:	dec00304 	addi	sp,sp,12
   8e168:	f800283a 	ret

0008e16c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8e16c:	defffa04 	addi	sp,sp,-24
   8e170:	df000515 	stw	fp,20(sp)
   8e174:	df000504 	addi	fp,sp,20
   8e178:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e17c:	0005303a 	rdctl	r2,status
   8e180:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e184:	e0fffd17 	ldw	r3,-12(fp)
   8e188:	00bfff84 	movi	r2,-2
   8e18c:	1884703a 	and	r2,r3,r2
   8e190:	1001703a 	wrctl	status,r2
  
  return context;
   8e194:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8e198:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   8e19c:	e0bfff17 	ldw	r2,-4(fp)
   8e1a0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8e1a4:	e0bffc17 	ldw	r2,-16(fp)
   8e1a8:	10c00017 	ldw	r3,0(r2)
   8e1ac:	e0bffc17 	ldw	r2,-16(fp)
   8e1b0:	10800117 	ldw	r2,4(r2)
   8e1b4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   8e1b8:	e0bffc17 	ldw	r2,-16(fp)
   8e1bc:	10c00117 	ldw	r3,4(r2)
   8e1c0:	e0bffc17 	ldw	r2,-16(fp)
   8e1c4:	10800017 	ldw	r2,0(r2)
   8e1c8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8e1cc:	e0fffc17 	ldw	r3,-16(fp)
   8e1d0:	e0bffc17 	ldw	r2,-16(fp)
   8e1d4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   8e1d8:	e0fffc17 	ldw	r3,-16(fp)
   8e1dc:	e0bffc17 	ldw	r2,-16(fp)
   8e1e0:	18800015 	stw	r2,0(r3)
   8e1e4:	e0bffe17 	ldw	r2,-8(fp)
   8e1e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e1ec:	e0bffb17 	ldw	r2,-20(fp)
   8e1f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8e1f4:	e037883a 	mov	sp,fp
   8e1f8:	df000017 	ldw	fp,0(sp)
   8e1fc:	dec00104 	addi	sp,sp,4
   8e200:	f800283a 	ret

0008e204 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8e204:	defffb04 	addi	sp,sp,-20
   8e208:	dfc00415 	stw	ra,16(sp)
   8e20c:	df000315 	stw	fp,12(sp)
   8e210:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8e214:	d0a02917 	ldw	r2,-32604(gp)
   8e218:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8e21c:	d0a60517 	ldw	r2,-26604(gp)
   8e220:	10800044 	addi	r2,r2,1
   8e224:	d0a60515 	stw	r2,-26604(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8e228:	00003106 	br	8e2f0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   8e22c:	e0bffe17 	ldw	r2,-8(fp)
   8e230:	10800017 	ldw	r2,0(r2)
   8e234:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8e238:	e0bffe17 	ldw	r2,-8(fp)
   8e23c:	10800403 	ldbu	r2,16(r2)
   8e240:	10803fcc 	andi	r2,r2,255
   8e244:	1005003a 	cmpeq	r2,r2,zero
   8e248:	1000051e 	bne	r2,zero,8e260 <alt_tick+0x5c>
   8e24c:	d0a60517 	ldw	r2,-26604(gp)
   8e250:	1004c03a 	cmpne	r2,r2,zero
   8e254:	1000021e 	bne	r2,zero,8e260 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   8e258:	e0bffe17 	ldw	r2,-8(fp)
   8e25c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8e260:	e0bffe17 	ldw	r2,-8(fp)
   8e264:	10c00217 	ldw	r3,8(r2)
   8e268:	d0a60517 	ldw	r2,-26604(gp)
   8e26c:	10c01e36 	bltu	r2,r3,8e2e8 <alt_tick+0xe4>
   8e270:	e0bffe17 	ldw	r2,-8(fp)
   8e274:	10800403 	ldbu	r2,16(r2)
   8e278:	10803fcc 	andi	r2,r2,255
   8e27c:	1004c03a 	cmpne	r2,r2,zero
   8e280:	1000191e 	bne	r2,zero,8e2e8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8e284:	e0bffe17 	ldw	r2,-8(fp)
   8e288:	10c00317 	ldw	r3,12(r2)
   8e28c:	e0bffe17 	ldw	r2,-8(fp)
   8e290:	11000517 	ldw	r4,20(r2)
   8e294:	183ee83a 	callr	r3
   8e298:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8e29c:	e0bffd17 	ldw	r2,-12(fp)
   8e2a0:	1004c03a 	cmpne	r2,r2,zero
   8e2a4:	1000031e 	bne	r2,zero,8e2b4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   8e2a8:	e13ffe17 	ldw	r4,-8(fp)
   8e2ac:	008e16c0 	call	8e16c <alt_alarm_stop>
   8e2b0:	00000d06 	br	8e2e8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8e2b4:	e0bffe17 	ldw	r2,-8(fp)
   8e2b8:	10c00217 	ldw	r3,8(r2)
   8e2bc:	e0bffd17 	ldw	r2,-12(fp)
   8e2c0:	1887883a 	add	r3,r3,r2
   8e2c4:	e0bffe17 	ldw	r2,-8(fp)
   8e2c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8e2cc:	e0bffe17 	ldw	r2,-8(fp)
   8e2d0:	10c00217 	ldw	r3,8(r2)
   8e2d4:	d0a60517 	ldw	r2,-26604(gp)
   8e2d8:	1880032e 	bgeu	r3,r2,8e2e8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   8e2dc:	e0fffe17 	ldw	r3,-8(fp)
   8e2e0:	00800044 	movi	r2,1
   8e2e4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   8e2e8:	e0bfff17 	ldw	r2,-4(fp)
   8e2ec:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8e2f0:	d0e02904 	addi	r3,gp,-32604
   8e2f4:	e0bffe17 	ldw	r2,-8(fp)
   8e2f8:	10ffcc1e 	bne	r2,r3,8e22c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   8e2fc:	00850680 	call	85068 <OSTimeTick>
}
   8e300:	e037883a 	mov	sp,fp
   8e304:	dfc00117 	ldw	ra,4(sp)
   8e308:	df000017 	ldw	fp,0(sp)
   8e30c:	dec00204 	addi	sp,sp,8
   8e310:	f800283a 	ret

0008e314 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8e314:	deffff04 	addi	sp,sp,-4
   8e318:	df000015 	stw	fp,0(sp)
   8e31c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8e320:	000170fa 	wrctl	ienable,zero
}
   8e324:	e037883a 	mov	sp,fp
   8e328:	df000017 	ldw	fp,0(sp)
   8e32c:	dec00104 	addi	sp,sp,4
   8e330:	f800283a 	ret

0008e334 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   8e334:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   8e338:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   8e33c:	d125fd17 	ldw	r4,-26636(gp)

      stw ra,  0(sp)
   8e340:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   8e344:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   8e348:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   8e34c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   8e350:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   8e354:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   8e358:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   8e35c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   8e360:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   8e364:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   8e368:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   8e36c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   8e370:	008e7540 	call	8e754 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   8e374:	d125f817 	ldw	r4,-26656(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   8e378:	d165f007 	ldb	r5,-26688(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   8e37c:	d125fd15 	stw	r4,-26636(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   8e380:	d165f045 	stb	r5,-26687(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   8e384:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   8e388:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   8e38c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   8e390:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   8e394:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   8e398:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   8e39c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   8e3a0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   8e3a4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   8e3a8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   8e3ac:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   8e3b0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   8e3b4:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   8e3b8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   8e3bc:	f800283a 	ret

0008e3c0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   8e3c0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   8e3c4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   8e3c8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   8e3cc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   8e3d0:	008e7540 	call	8e754 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   8e3d4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   8e3d8:	d4a5ee45 	stb	r18,-26695(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   8e3dc:	003fe506 	br	8e374 <OSCtxSw+0x40>

0008e3e0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   8e3e0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   8e3e4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   8e3e8:	10800054 	ori	r2,r2,1
      wrctl status, r2
   8e3ec:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   8e3f0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   8e3f4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   8e3f8:	dec00204 	addi	sp,sp,8

      callr r2
   8e3fc:	103ee83a 	callr	r2

      nop
   8e400:	0001883a 	nop

0008e404 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   8e404:	defff704 	addi	sp,sp,-36
   8e408:	dfc00815 	stw	ra,32(sp)
   8e40c:	df000715 	stw	fp,28(sp)
   8e410:	df000704 	addi	fp,sp,28
   8e414:	e13ffc15 	stw	r4,-16(fp)
   8e418:	e17ffd15 	stw	r5,-12(fp)
   8e41c:	e1bffe15 	stw	r6,-8(fp)
   8e420:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   8e424:	e0bffe17 	ldw	r2,-8(fp)
   8e428:	1007883a 	mov	r3,r2
   8e42c:	00bfff04 	movi	r2,-4
   8e430:	1884703a 	and	r2,r3,r2
   8e434:	10bf0004 	addi	r2,r2,-1024
   8e438:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   8e43c:	e0bff917 	ldw	r2,-28(fp)
   8e440:	10000015 	stw	zero,0(r2)
   8e444:	e0bff917 	ldw	r2,-28(fp)
   8e448:	10c0bb04 	addi	r3,r2,748
   8e44c:	e0bff917 	ldw	r2,-28(fp)
   8e450:	10c00115 	stw	r3,4(r2)
   8e454:	e0bff917 	ldw	r2,-28(fp)
   8e458:	1080bb04 	addi	r2,r2,748
   8e45c:	10c01704 	addi	r3,r2,92
   8e460:	e0bff917 	ldw	r2,-28(fp)
   8e464:	10c00215 	stw	r3,8(r2)
   8e468:	e0bff917 	ldw	r2,-28(fp)
   8e46c:	1080bb04 	addi	r2,r2,748
   8e470:	10c02e04 	addi	r3,r2,184
   8e474:	e0bff917 	ldw	r2,-28(fp)
   8e478:	10c00315 	stw	r3,12(r2)
   8e47c:	e0bff917 	ldw	r2,-28(fp)
   8e480:	10000415 	stw	zero,16(r2)
   8e484:	e0bff917 	ldw	r2,-28(fp)
   8e488:	10800504 	addi	r2,r2,20
   8e48c:	1009883a 	mov	r4,r2
   8e490:	01800644 	movi	r6,25
   8e494:	000b883a 	mov	r5,zero
   8e498:	008ec340 	call	8ec34 <memset>
   8e49c:	e0bff917 	ldw	r2,-28(fp)
   8e4a0:	10000c15 	stw	zero,48(r2)
   8e4a4:	e0fff917 	ldw	r3,-28(fp)
   8e4a8:	00800274 	movhi	r2,9
   8e4ac:	10bcdb04 	addi	r2,r2,-3220
   8e4b0:	18800d15 	stw	r2,52(r3)
   8e4b4:	e0bff917 	ldw	r2,-28(fp)
   8e4b8:	10000e15 	stw	zero,56(r2)
   8e4bc:	e0bff917 	ldw	r2,-28(fp)
   8e4c0:	10000f15 	stw	zero,60(r2)
   8e4c4:	e0bff917 	ldw	r2,-28(fp)
   8e4c8:	10001015 	stw	zero,64(r2)
   8e4cc:	e0bff917 	ldw	r2,-28(fp)
   8e4d0:	10001115 	stw	zero,68(r2)
   8e4d4:	e0bff917 	ldw	r2,-28(fp)
   8e4d8:	10001215 	stw	zero,72(r2)
   8e4dc:	e0bff917 	ldw	r2,-28(fp)
   8e4e0:	10001315 	stw	zero,76(r2)
   8e4e4:	e0bff917 	ldw	r2,-28(fp)
   8e4e8:	10001415 	stw	zero,80(r2)
   8e4ec:	e0bff917 	ldw	r2,-28(fp)
   8e4f0:	10001515 	stw	zero,84(r2)
   8e4f4:	e0bff917 	ldw	r2,-28(fp)
   8e4f8:	10001615 	stw	zero,88(r2)
   8e4fc:	e0bff917 	ldw	r2,-28(fp)
   8e500:	10001715 	stw	zero,92(r2)
   8e504:	e0bff917 	ldw	r2,-28(fp)
   8e508:	10001805 	stb	zero,96(r2)
   8e50c:	e0bff917 	ldw	r2,-28(fp)
   8e510:	10801f04 	addi	r2,r2,124
   8e514:	10000015 	stw	zero,0(r2)
   8e518:	10000115 	stw	zero,4(r2)
   8e51c:	10000215 	stw	zero,8(r2)
   8e520:	10000315 	stw	zero,12(r2)
   8e524:	10000415 	stw	zero,16(r2)
   8e528:	10000515 	stw	zero,20(r2)
   8e52c:	10000615 	stw	zero,24(r2)
   8e530:	10000715 	stw	zero,28(r2)
   8e534:	10000815 	stw	zero,32(r2)
   8e538:	e0bff917 	ldw	r2,-28(fp)
   8e53c:	10002815 	stw	zero,160(r2)
   8e540:	e0fff917 	ldw	r3,-28(fp)
   8e544:	00800044 	movi	r2,1
   8e548:	18802915 	stw	r2,164(r3)
   8e54c:	18002a15 	stw	zero,168(r3)
   8e550:	e0fff917 	ldw	r3,-28(fp)
   8e554:	008cc384 	movi	r2,13070
   8e558:	18802b0d 	sth	r2,172(r3)
   8e55c:	e0fff917 	ldw	r3,-28(fp)
   8e560:	00aaf344 	movi	r2,-21555
   8e564:	18802b8d 	sth	r2,174(r3)
   8e568:	e0fff917 	ldw	r3,-28(fp)
   8e56c:	00848d04 	movi	r2,4660
   8e570:	18802c0d 	sth	r2,176(r3)
   8e574:	e0fff917 	ldw	r3,-28(fp)
   8e578:	00b99b44 	movi	r2,-6547
   8e57c:	18802c8d 	sth	r2,178(r3)
   8e580:	e0fff917 	ldw	r3,-28(fp)
   8e584:	00b7bb04 	movi	r2,-8468
   8e588:	18802d0d 	sth	r2,180(r3)
   8e58c:	e0fff917 	ldw	r3,-28(fp)
   8e590:	00800144 	movi	r2,5
   8e594:	18802d8d 	sth	r2,182(r3)
   8e598:	e0fff917 	ldw	r3,-28(fp)
   8e59c:	008002c4 	movi	r2,11
   8e5a0:	18802e0d 	sth	r2,184(r3)
   8e5a4:	e0bff917 	ldw	r2,-28(fp)
   8e5a8:	10002f15 	stw	zero,188(r2)
   8e5ac:	e0bff917 	ldw	r2,-28(fp)
   8e5b0:	10003015 	stw	zero,192(r2)
   8e5b4:	e0bff917 	ldw	r2,-28(fp)
   8e5b8:	10003115 	stw	zero,196(r2)
   8e5bc:	e0bff917 	ldw	r2,-28(fp)
   8e5c0:	10003215 	stw	zero,200(r2)
   8e5c4:	e0bff917 	ldw	r2,-28(fp)
   8e5c8:	10003315 	stw	zero,204(r2)
   8e5cc:	e0bff917 	ldw	r2,-28(fp)
   8e5d0:	10003415 	stw	zero,208(r2)
   8e5d4:	e0bff917 	ldw	r2,-28(fp)
   8e5d8:	10003e15 	stw	zero,248(r2)
   8e5dc:	e0bff917 	ldw	r2,-28(fp)
   8e5e0:	10003f15 	stw	zero,252(r2)
   8e5e4:	e0bff917 	ldw	r2,-28(fp)
   8e5e8:	10004015 	stw	zero,256(r2)
   8e5ec:	e0bff917 	ldw	r2,-28(fp)
   8e5f0:	10004115 	stw	zero,260(r2)
   8e5f4:	e0bff917 	ldw	r2,-28(fp)
   8e5f8:	10004215 	stw	zero,264(r2)
   8e5fc:	e0bff917 	ldw	r2,-28(fp)
   8e600:	10004315 	stw	zero,268(r2)
   8e604:	e0bff917 	ldw	r2,-28(fp)
   8e608:	10004415 	stw	zero,272(r2)
   8e60c:	e0bff917 	ldw	r2,-28(fp)
   8e610:	10004515 	stw	zero,276(r2)
   8e614:	e0bff917 	ldw	r2,-28(fp)
   8e618:	10004615 	stw	zero,280(r2)
   8e61c:	e0bff917 	ldw	r2,-28(fp)
   8e620:	10004715 	stw	zero,284(r2)
   8e624:	e0bff917 	ldw	r2,-28(fp)
   8e628:	10003505 	stb	zero,212(r2)
   8e62c:	e0bff917 	ldw	r2,-28(fp)
   8e630:	10003705 	stb	zero,220(r2)
   8e634:	e0bff917 	ldw	r2,-28(fp)
   8e638:	10003d15 	stw	zero,244(r2)
   8e63c:	e0bff917 	ldw	r2,-28(fp)
   8e640:	10005215 	stw	zero,328(r2)
   8e644:	e0bff917 	ldw	r2,-28(fp)
   8e648:	10005315 	stw	zero,332(r2)
   8e64c:	e0bff917 	ldw	r2,-28(fp)
   8e650:	10005415 	stw	zero,336(r2)
   8e654:	e0bff917 	ldw	r2,-28(fp)
   8e658:	10005515 	stw	zero,340(r2)
   8e65c:	e0bff917 	ldw	r2,-28(fp)
   8e660:	1000b515 	stw	zero,724(r2)
   8e664:	e0bff917 	ldw	r2,-28(fp)
   8e668:	10007515 	stw	zero,468(r2)
   8e66c:	e0bff917 	ldw	r2,-28(fp)
   8e670:	1000b715 	stw	zero,732(r2)
   8e674:	e0bff917 	ldw	r2,-28(fp)
   8e678:	1000b815 	stw	zero,736(r2)
   8e67c:	e0bff917 	ldw	r2,-28(fp)
   8e680:	1000b915 	stw	zero,740(r2)
   8e684:	e0bff917 	ldw	r2,-28(fp)
   8e688:	1000ba15 	stw	zero,744(r2)
   8e68c:	e0bff917 	ldw	r2,-28(fp)
   8e690:	1080bb04 	addi	r2,r2,748
   8e694:	1009883a 	mov	r4,r2
   8e698:	01804504 	movi	r6,276
   8e69c:	000b883a 	mov	r5,zero
   8e6a0:	008ec340 	call	8ec34 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   8e6a4:	e0bff917 	ldw	r2,-28(fp)
   8e6a8:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   8e6ac:	e0bffb17 	ldw	r2,-20(fp)
   8e6b0:	10bff304 	addi	r2,r2,-52
   8e6b4:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   8e6b8:	e0bffa17 	ldw	r2,-24(fp)
   8e6bc:	10c00c04 	addi	r3,r2,48
   8e6c0:	e0bffc17 	ldw	r2,-16(fp)
   8e6c4:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   8e6c8:	e0bffa17 	ldw	r2,-24(fp)
   8e6cc:	10c00b04 	addi	r3,r2,44
   8e6d0:	e0bffd17 	ldw	r2,-12(fp)
   8e6d4:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   8e6d8:	e0bffa17 	ldw	r2,-24(fp)
   8e6dc:	10c00a04 	addi	r3,r2,40
   8e6e0:	e0bff917 	ldw	r2,-28(fp)
   8e6e4:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   8e6e8:	00800274 	movhi	r2,9
   8e6ec:	10b8f804 	addi	r2,r2,-7200
   8e6f0:	10c00104 	addi	r3,r2,4
   8e6f4:	e0bffa17 	ldw	r2,-24(fp)
   8e6f8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   8e6fc:	e0bffa17 	ldw	r2,-24(fp)
}
   8e700:	e037883a 	mov	sp,fp
   8e704:	dfc00117 	ldw	ra,4(sp)
   8e708:	df000017 	ldw	fp,0(sp)
   8e70c:	dec00204 	addi	sp,sp,8
   8e710:	f800283a 	ret

0008e714 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   8e714:	defffe04 	addi	sp,sp,-8
   8e718:	df000115 	stw	fp,4(sp)
   8e71c:	df000104 	addi	fp,sp,4
   8e720:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   8e724:	e037883a 	mov	sp,fp
   8e728:	df000017 	ldw	fp,0(sp)
   8e72c:	dec00104 	addi	sp,sp,4
   8e730:	f800283a 	ret

0008e734 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   8e734:	defffe04 	addi	sp,sp,-8
   8e738:	df000115 	stw	fp,4(sp)
   8e73c:	df000104 	addi	fp,sp,4
   8e740:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   8e744:	e037883a 	mov	sp,fp
   8e748:	df000017 	ldw	fp,0(sp)
   8e74c:	dec00104 	addi	sp,sp,4
   8e750:	f800283a 	ret

0008e754 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   8e754:	deffff04 	addi	sp,sp,-4
   8e758:	df000015 	stw	fp,0(sp)
   8e75c:	d839883a 	mov	fp,sp
}
   8e760:	e037883a 	mov	sp,fp
   8e764:	df000017 	ldw	fp,0(sp)
   8e768:	dec00104 	addi	sp,sp,4
   8e76c:	f800283a 	ret

0008e770 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   8e770:	deffff04 	addi	sp,sp,-4
   8e774:	df000015 	stw	fp,0(sp)
   8e778:	d839883a 	mov	fp,sp
}
   8e77c:	e037883a 	mov	sp,fp
   8e780:	df000017 	ldw	fp,0(sp)
   8e784:	dec00104 	addi	sp,sp,4
   8e788:	f800283a 	ret

0008e78c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   8e78c:	deffff04 	addi	sp,sp,-4
   8e790:	df000015 	stw	fp,0(sp)
   8e794:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   8e798:	e037883a 	mov	sp,fp
   8e79c:	df000017 	ldw	fp,0(sp)
   8e7a0:	dec00104 	addi	sp,sp,4
   8e7a4:	f800283a 	ret

0008e7a8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   8e7a8:	deffff04 	addi	sp,sp,-4
   8e7ac:	df000015 	stw	fp,0(sp)
   8e7b0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   8e7b4:	e037883a 	mov	sp,fp
   8e7b8:	df000017 	ldw	fp,0(sp)
   8e7bc:	dec00104 	addi	sp,sp,4
   8e7c0:	f800283a 	ret

0008e7c4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   8e7c4:	deffff04 	addi	sp,sp,-4
   8e7c8:	df000015 	stw	fp,0(sp)
   8e7cc:	d839883a 	mov	fp,sp
}
   8e7d0:	e037883a 	mov	sp,fp
   8e7d4:	df000017 	ldw	fp,0(sp)
   8e7d8:	dec00104 	addi	sp,sp,4
   8e7dc:	f800283a 	ret

0008e7e0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   8e7e0:	deffff04 	addi	sp,sp,-4
   8e7e4:	df000015 	stw	fp,0(sp)
   8e7e8:	d839883a 	mov	fp,sp
}
   8e7ec:	e037883a 	mov	sp,fp
   8e7f0:	df000017 	ldw	fp,0(sp)
   8e7f4:	dec00104 	addi	sp,sp,4
   8e7f8:	f800283a 	ret

0008e7fc <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   8e7fc:	defffe04 	addi	sp,sp,-8
   8e800:	df000115 	stw	fp,4(sp)
   8e804:	df000104 	addi	fp,sp,4
   8e808:	e13fff15 	stw	r4,-4(fp)
}
   8e80c:	e037883a 	mov	sp,fp
   8e810:	df000017 	ldw	fp,0(sp)
   8e814:	dec00104 	addi	sp,sp,4
   8e818:	f800283a 	ret

0008e81c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8e81c:	defff904 	addi	sp,sp,-28
   8e820:	dfc00615 	stw	ra,24(sp)
   8e824:	df000515 	stw	fp,20(sp)
   8e828:	df000504 	addi	fp,sp,20
   8e82c:	e13ffd15 	stw	r4,-12(fp)
   8e830:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8e834:	e0bffe17 	ldw	r2,-8(fp)
   8e838:	10800017 	ldw	r2,0(r2)
   8e83c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8e840:	e13ffd17 	ldw	r4,-12(fp)
   8e844:	008eccc0 	call	8eccc <strlen>
   8e848:	10800044 	addi	r2,r2,1
   8e84c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8e850:	00000d06 	br	8e888 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8e854:	e0bffc17 	ldw	r2,-16(fp)
   8e858:	11000217 	ldw	r4,8(r2)
   8e85c:	e1bffb17 	ldw	r6,-20(fp)
   8e860:	e17ffd17 	ldw	r5,-12(fp)
   8e864:	008eb200 	call	8eb20 <memcmp>
   8e868:	1004c03a 	cmpne	r2,r2,zero
   8e86c:	1000031e 	bne	r2,zero,8e87c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8e870:	e0bffc17 	ldw	r2,-16(fp)
   8e874:	e0bfff15 	stw	r2,-4(fp)
   8e878:	00000706 	br	8e898 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8e87c:	e0bffc17 	ldw	r2,-16(fp)
   8e880:	10800017 	ldw	r2,0(r2)
   8e884:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8e888:	e0fffe17 	ldw	r3,-8(fp)
   8e88c:	e0bffc17 	ldw	r2,-16(fp)
   8e890:	10fff01e 	bne	r2,r3,8e854 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8e894:	e03fff15 	stw	zero,-4(fp)
   8e898:	e0bfff17 	ldw	r2,-4(fp)
}
   8e89c:	e037883a 	mov	sp,fp
   8e8a0:	dfc00117 	ldw	ra,4(sp)
   8e8a4:	df000017 	ldw	fp,0(sp)
   8e8a8:	dec00204 	addi	sp,sp,8
   8e8ac:	f800283a 	ret

0008e8b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8e8b0:	defffa04 	addi	sp,sp,-24
   8e8b4:	dfc00515 	stw	ra,20(sp)
   8e8b8:	df000415 	stw	fp,16(sp)
   8e8bc:	df000404 	addi	fp,sp,16
   8e8c0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8e8c4:	00800274 	movhi	r2,9
   8e8c8:	10828f04 	addi	r2,r2,2620
   8e8cc:	10800017 	ldw	r2,0(r2)
   8e8d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8e8d4:	00003306 	br	8e9a4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   8e8d8:	e0bffd17 	ldw	r2,-12(fp)
   8e8dc:	11000217 	ldw	r4,8(r2)
   8e8e0:	008eccc0 	call	8eccc <strlen>
   8e8e4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   8e8e8:	e0bffd17 	ldw	r2,-12(fp)
   8e8ec:	10c00217 	ldw	r3,8(r2)
   8e8f0:	e0bffc17 	ldw	r2,-16(fp)
   8e8f4:	1885883a 	add	r2,r3,r2
   8e8f8:	10bfffc4 	addi	r2,r2,-1
   8e8fc:	10800003 	ldbu	r2,0(r2)
   8e900:	10803fcc 	andi	r2,r2,255
   8e904:	1080201c 	xori	r2,r2,128
   8e908:	10bfe004 	addi	r2,r2,-128
   8e90c:	10800bd8 	cmpnei	r2,r2,47
   8e910:	1000031e 	bne	r2,zero,8e920 <alt_find_file+0x70>
    {
      len -= 1;
   8e914:	e0bffc17 	ldw	r2,-16(fp)
   8e918:	10bfffc4 	addi	r2,r2,-1
   8e91c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8e920:	e0bffc17 	ldw	r2,-16(fp)
   8e924:	1007883a 	mov	r3,r2
   8e928:	e0bffe17 	ldw	r2,-8(fp)
   8e92c:	1885883a 	add	r2,r3,r2
   8e930:	10800003 	ldbu	r2,0(r2)
   8e934:	10803fcc 	andi	r2,r2,255
   8e938:	1080201c 	xori	r2,r2,128
   8e93c:	10bfe004 	addi	r2,r2,-128
   8e940:	10800be0 	cmpeqi	r2,r2,47
   8e944:	10000a1e 	bne	r2,zero,8e970 <alt_find_file+0xc0>
   8e948:	e0bffc17 	ldw	r2,-16(fp)
   8e94c:	1007883a 	mov	r3,r2
   8e950:	e0bffe17 	ldw	r2,-8(fp)
   8e954:	1885883a 	add	r2,r3,r2
   8e958:	10800003 	ldbu	r2,0(r2)
   8e95c:	10803fcc 	andi	r2,r2,255
   8e960:	1080201c 	xori	r2,r2,128
   8e964:	10bfe004 	addi	r2,r2,-128
   8e968:	1004c03a 	cmpne	r2,r2,zero
   8e96c:	10000a1e 	bne	r2,zero,8e998 <alt_find_file+0xe8>
   8e970:	e0bffd17 	ldw	r2,-12(fp)
   8e974:	11000217 	ldw	r4,8(r2)
   8e978:	e1bffc17 	ldw	r6,-16(fp)
   8e97c:	e17ffe17 	ldw	r5,-8(fp)
   8e980:	008eb200 	call	8eb20 <memcmp>
   8e984:	1004c03a 	cmpne	r2,r2,zero
   8e988:	1000031e 	bne	r2,zero,8e998 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8e98c:	e0bffd17 	ldw	r2,-12(fp)
   8e990:	e0bfff15 	stw	r2,-4(fp)
   8e994:	00000806 	br	8e9b8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   8e998:	e0bffd17 	ldw	r2,-12(fp)
   8e99c:	10800017 	ldw	r2,0(r2)
   8e9a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8e9a4:	00c00274 	movhi	r3,9
   8e9a8:	18c28f04 	addi	r3,r3,2620
   8e9ac:	e0bffd17 	ldw	r2,-12(fp)
   8e9b0:	10ffc91e 	bne	r2,r3,8e8d8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8e9b4:	e03fff15 	stw	zero,-4(fp)
   8e9b8:	e0bfff17 	ldw	r2,-4(fp)
}
   8e9bc:	e037883a 	mov	sp,fp
   8e9c0:	dfc00117 	ldw	ra,4(sp)
   8e9c4:	df000017 	ldw	fp,0(sp)
   8e9c8:	dec00204 	addi	sp,sp,8
   8e9cc:	f800283a 	ret

0008e9d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8e9d0:	defff704 	addi	sp,sp,-36
   8e9d4:	dfc00815 	stw	ra,32(sp)
   8e9d8:	df000715 	stw	fp,28(sp)
   8e9dc:	dc000615 	stw	r16,24(sp)
   8e9e0:	df000604 	addi	fp,sp,24
   8e9e4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8e9e8:	00bffa04 	movi	r2,-24
   8e9ec:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   8e9f0:	00800274 	movhi	r2,9
   8e9f4:	10886f04 	addi	r2,r2,8636
   8e9f8:	10800017 	ldw	r2,0(r2)
   8e9fc:	e0bffa15 	stw	r2,-24(fp)
   8ea00:	e03ffb0d 	sth	zero,-20(fp)
   8ea04:	e17ffb0b 	ldhu	r5,-20(fp)
   8ea08:	e1bffe04 	addi	r6,fp,-8
   8ea0c:	e13ffa17 	ldw	r4,-24(fp)
   8ea10:	0089e880 	call	89e88 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8ea14:	e03ffd15 	stw	zero,-12(fp)
   8ea18:	00002006 	br	8ea9c <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
   8ea1c:	e13ffd17 	ldw	r4,-12(fp)
   8ea20:	04000274 	movhi	r16,9
   8ea24:	84020d04 	addi	r16,r16,2100
   8ea28:	01400304 	movi	r5,12
   8ea2c:	00837500 	call	83750 <__mulsi3>
   8ea30:	1405883a 	add	r2,r2,r16
   8ea34:	10800017 	ldw	r2,0(r2)
   8ea38:	1004c03a 	cmpne	r2,r2,zero
   8ea3c:	1000141e 	bne	r2,zero,8ea90 <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
   8ea40:	e13ffd17 	ldw	r4,-12(fp)
   8ea44:	04000274 	movhi	r16,9
   8ea48:	84020d04 	addi	r16,r16,2100
   8ea4c:	01400304 	movi	r5,12
   8ea50:	00837500 	call	83750 <__mulsi3>
   8ea54:	1407883a 	add	r3,r2,r16
   8ea58:	e0bfff17 	ldw	r2,-4(fp)
   8ea5c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   8ea60:	00800274 	movhi	r2,9
   8ea64:	10829304 	addi	r2,r2,2636
   8ea68:	10c00017 	ldw	r3,0(r2)
   8ea6c:	e0bffd17 	ldw	r2,-12(fp)
   8ea70:	1880040e 	bge	r3,r2,8ea84 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
   8ea74:	00c00274 	movhi	r3,9
   8ea78:	18c29304 	addi	r3,r3,2636
   8ea7c:	e0bffd17 	ldw	r2,-12(fp)
   8ea80:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8ea84:	e0bffd17 	ldw	r2,-12(fp)
   8ea88:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   8ea8c:	00000606 	br	8eaa8 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8ea90:	e0bffd17 	ldw	r2,-12(fp)
   8ea94:	10800044 	addi	r2,r2,1
   8ea98:	e0bffd15 	stw	r2,-12(fp)
   8ea9c:	e0bffd17 	ldw	r2,-12(fp)
   8eaa0:	10800810 	cmplti	r2,r2,32
   8eaa4:	103fdd1e 	bne	r2,zero,8ea1c <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   8eaa8:	00800274 	movhi	r2,9
   8eaac:	10886f04 	addi	r2,r2,8636
   8eab0:	11000017 	ldw	r4,0(r2)
   8eab4:	008a2800 	call	8a280 <OSSemPost>

  return rc;
   8eab8:	e0bffc17 	ldw	r2,-16(fp)
}
   8eabc:	e037883a 	mov	sp,fp
   8eac0:	dfc00217 	ldw	ra,8(sp)
   8eac4:	df000117 	ldw	fp,4(sp)
   8eac8:	dc000017 	ldw	r16,0(sp)
   8eacc:	dec00304 	addi	sp,sp,12
   8ead0:	f800283a 	ret

0008ead4 <atexit>:
   8ead4:	200b883a 	mov	r5,r4
   8ead8:	000d883a 	mov	r6,zero
   8eadc:	0009883a 	mov	r4,zero
   8eae0:	000f883a 	mov	r7,zero
   8eae4:	008ed401 	jmpi	8ed40 <__register_exitproc>

0008eae8 <exit>:
   8eae8:	defffe04 	addi	sp,sp,-8
   8eaec:	000b883a 	mov	r5,zero
   8eaf0:	dc000015 	stw	r16,0(sp)
   8eaf4:	dfc00115 	stw	ra,4(sp)
   8eaf8:	2021883a 	mov	r16,r4
   8eafc:	008ee780 	call	8ee78 <__call_exitprocs>
   8eb00:	00800274 	movhi	r2,9
   8eb04:	10826f04 	addi	r2,r2,2492
   8eb08:	11000017 	ldw	r4,0(r2)
   8eb0c:	20800f17 	ldw	r2,60(r4)
   8eb10:	10000126 	beq	r2,zero,8eb18 <exit+0x30>
   8eb14:	103ee83a 	callr	r2
   8eb18:	8009883a 	mov	r4,r16
   8eb1c:	008f0680 	call	8f068 <_exit>

0008eb20 <memcmp>:
   8eb20:	00c000c4 	movi	r3,3
   8eb24:	1980032e 	bgeu	r3,r6,8eb34 <memcmp+0x14>
   8eb28:	2144b03a 	or	r2,r4,r5
   8eb2c:	10c4703a 	and	r2,r2,r3
   8eb30:	10000f26 	beq	r2,zero,8eb70 <memcmp+0x50>
   8eb34:	31ffffc4 	addi	r7,r6,-1
   8eb38:	3000061e 	bne	r6,zero,8eb54 <memcmp+0x34>
   8eb3c:	00000a06 	br	8eb68 <memcmp+0x48>
   8eb40:	39ffffc4 	addi	r7,r7,-1
   8eb44:	00bfffc4 	movi	r2,-1
   8eb48:	21000044 	addi	r4,r4,1
   8eb4c:	29400044 	addi	r5,r5,1
   8eb50:	38800526 	beq	r7,r2,8eb68 <memcmp+0x48>
   8eb54:	20c00003 	ldbu	r3,0(r4)
   8eb58:	28800003 	ldbu	r2,0(r5)
   8eb5c:	18bff826 	beq	r3,r2,8eb40 <memcmp+0x20>
   8eb60:	1885c83a 	sub	r2,r3,r2
   8eb64:	f800283a 	ret
   8eb68:	0005883a 	mov	r2,zero
   8eb6c:	f800283a 	ret
   8eb70:	180f883a 	mov	r7,r3
   8eb74:	20c00017 	ldw	r3,0(r4)
   8eb78:	28800017 	ldw	r2,0(r5)
   8eb7c:	18bfed1e 	bne	r3,r2,8eb34 <memcmp+0x14>
   8eb80:	31bfff04 	addi	r6,r6,-4
   8eb84:	21000104 	addi	r4,r4,4
   8eb88:	29400104 	addi	r5,r5,4
   8eb8c:	39bff936 	bltu	r7,r6,8eb74 <memcmp+0x54>
   8eb90:	003fe806 	br	8eb34 <memcmp+0x14>

0008eb94 <memcpy>:
   8eb94:	01c003c4 	movi	r7,15
   8eb98:	2007883a 	mov	r3,r4
   8eb9c:	3980032e 	bgeu	r7,r6,8ebac <memcpy+0x18>
   8eba0:	2904b03a 	or	r2,r5,r4
   8eba4:	108000cc 	andi	r2,r2,3
   8eba8:	10000926 	beq	r2,zero,8ebd0 <memcpy+0x3c>
   8ebac:	30000626 	beq	r6,zero,8ebc8 <memcpy+0x34>
   8ebb0:	30cd883a 	add	r6,r6,r3
   8ebb4:	28800003 	ldbu	r2,0(r5)
   8ebb8:	29400044 	addi	r5,r5,1
   8ebbc:	18800005 	stb	r2,0(r3)
   8ebc0:	18c00044 	addi	r3,r3,1
   8ebc4:	30fffb1e 	bne	r6,r3,8ebb4 <memcpy+0x20>
   8ebc8:	2005883a 	mov	r2,r4
   8ebcc:	f800283a 	ret
   8ebd0:	3811883a 	mov	r8,r7
   8ebd4:	200f883a 	mov	r7,r4
   8ebd8:	28c00017 	ldw	r3,0(r5)
   8ebdc:	31bffc04 	addi	r6,r6,-16
   8ebe0:	38c00015 	stw	r3,0(r7)
   8ebe4:	28800117 	ldw	r2,4(r5)
   8ebe8:	38800115 	stw	r2,4(r7)
   8ebec:	28c00217 	ldw	r3,8(r5)
   8ebf0:	38c00215 	stw	r3,8(r7)
   8ebf4:	28800317 	ldw	r2,12(r5)
   8ebf8:	29400404 	addi	r5,r5,16
   8ebfc:	38800315 	stw	r2,12(r7)
   8ec00:	39c00404 	addi	r7,r7,16
   8ec04:	41bff436 	bltu	r8,r6,8ebd8 <memcpy+0x44>
   8ec08:	008000c4 	movi	r2,3
   8ec0c:	1180072e 	bgeu	r2,r6,8ec2c <memcpy+0x98>
   8ec10:	1007883a 	mov	r3,r2
   8ec14:	28800017 	ldw	r2,0(r5)
   8ec18:	31bfff04 	addi	r6,r6,-4
   8ec1c:	29400104 	addi	r5,r5,4
   8ec20:	38800015 	stw	r2,0(r7)
   8ec24:	39c00104 	addi	r7,r7,4
   8ec28:	19bffa36 	bltu	r3,r6,8ec14 <memcpy+0x80>
   8ec2c:	3807883a 	mov	r3,r7
   8ec30:	003fde06 	br	8ebac <memcpy+0x18>

0008ec34 <memset>:
   8ec34:	008000c4 	movi	r2,3
   8ec38:	29403fcc 	andi	r5,r5,255
   8ec3c:	2007883a 	mov	r3,r4
   8ec40:	1180022e 	bgeu	r2,r6,8ec4c <memset+0x18>
   8ec44:	2084703a 	and	r2,r4,r2
   8ec48:	10000826 	beq	r2,zero,8ec6c <memset+0x38>
   8ec4c:	30000526 	beq	r6,zero,8ec64 <memset+0x30>
   8ec50:	2805883a 	mov	r2,r5
   8ec54:	30cd883a 	add	r6,r6,r3
   8ec58:	18800005 	stb	r2,0(r3)
   8ec5c:	18c00044 	addi	r3,r3,1
   8ec60:	19bffd1e 	bne	r3,r6,8ec58 <memset+0x24>
   8ec64:	2005883a 	mov	r2,r4
   8ec68:	f800283a 	ret
   8ec6c:	2804923a 	slli	r2,r5,8
   8ec70:	020003c4 	movi	r8,15
   8ec74:	200f883a 	mov	r7,r4
   8ec78:	2884b03a 	or	r2,r5,r2
   8ec7c:	1006943a 	slli	r3,r2,16
   8ec80:	10c6b03a 	or	r3,r2,r3
   8ec84:	41800a2e 	bgeu	r8,r6,8ecb0 <memset+0x7c>
   8ec88:	4005883a 	mov	r2,r8
   8ec8c:	31bffc04 	addi	r6,r6,-16
   8ec90:	38c00015 	stw	r3,0(r7)
   8ec94:	38c00115 	stw	r3,4(r7)
   8ec98:	38c00215 	stw	r3,8(r7)
   8ec9c:	38c00315 	stw	r3,12(r7)
   8eca0:	39c00404 	addi	r7,r7,16
   8eca4:	11bff936 	bltu	r2,r6,8ec8c <memset+0x58>
   8eca8:	008000c4 	movi	r2,3
   8ecac:	1180052e 	bgeu	r2,r6,8ecc4 <memset+0x90>
   8ecb0:	31bfff04 	addi	r6,r6,-4
   8ecb4:	008000c4 	movi	r2,3
   8ecb8:	38c00015 	stw	r3,0(r7)
   8ecbc:	39c00104 	addi	r7,r7,4
   8ecc0:	11bffb36 	bltu	r2,r6,8ecb0 <memset+0x7c>
   8ecc4:	3807883a 	mov	r3,r7
   8ecc8:	003fe006 	br	8ec4c <memset+0x18>

0008eccc <strlen>:
   8eccc:	208000cc 	andi	r2,r4,3
   8ecd0:	2011883a 	mov	r8,r4
   8ecd4:	1000161e 	bne	r2,zero,8ed30 <strlen+0x64>
   8ecd8:	20c00017 	ldw	r3,0(r4)
   8ecdc:	017fbff4 	movhi	r5,65279
   8ece0:	297fbfc4 	addi	r5,r5,-257
   8ece4:	01e02074 	movhi	r7,32897
   8ece8:	39e02004 	addi	r7,r7,-32640
   8ecec:	1945883a 	add	r2,r3,r5
   8ecf0:	11c4703a 	and	r2,r2,r7
   8ecf4:	00c6303a 	nor	r3,zero,r3
   8ecf8:	1886703a 	and	r3,r3,r2
   8ecfc:	18000c1e 	bne	r3,zero,8ed30 <strlen+0x64>
   8ed00:	280d883a 	mov	r6,r5
   8ed04:	380b883a 	mov	r5,r7
   8ed08:	21000104 	addi	r4,r4,4
   8ed0c:	20800017 	ldw	r2,0(r4)
   8ed10:	1187883a 	add	r3,r2,r6
   8ed14:	1946703a 	and	r3,r3,r5
   8ed18:	0084303a 	nor	r2,zero,r2
   8ed1c:	10c4703a 	and	r2,r2,r3
   8ed20:	103ff926 	beq	r2,zero,8ed08 <strlen+0x3c>
   8ed24:	20800007 	ldb	r2,0(r4)
   8ed28:	10000326 	beq	r2,zero,8ed38 <strlen+0x6c>
   8ed2c:	21000044 	addi	r4,r4,1
   8ed30:	20800007 	ldb	r2,0(r4)
   8ed34:	103ffd1e 	bne	r2,zero,8ed2c <strlen+0x60>
   8ed38:	2205c83a 	sub	r2,r4,r8
   8ed3c:	f800283a 	ret

0008ed40 <__register_exitproc>:
   8ed40:	defffa04 	addi	sp,sp,-24
   8ed44:	00800274 	movhi	r2,9
   8ed48:	10826f04 	addi	r2,r2,2492
   8ed4c:	dc000015 	stw	r16,0(sp)
   8ed50:	14000017 	ldw	r16,0(r2)
   8ed54:	dd000415 	stw	r20,16(sp)
   8ed58:	2829883a 	mov	r20,r5
   8ed5c:	81405217 	ldw	r5,328(r16)
   8ed60:	dcc00315 	stw	r19,12(sp)
   8ed64:	dc800215 	stw	r18,8(sp)
   8ed68:	dc400115 	stw	r17,4(sp)
   8ed6c:	dfc00515 	stw	ra,20(sp)
   8ed70:	2023883a 	mov	r17,r4
   8ed74:	3027883a 	mov	r19,r6
   8ed78:	3825883a 	mov	r18,r7
   8ed7c:	28002526 	beq	r5,zero,8ee14 <__register_exitproc+0xd4>
   8ed80:	29000117 	ldw	r4,4(r5)
   8ed84:	008007c4 	movi	r2,31
   8ed88:	11002716 	blt	r2,r4,8ee28 <__register_exitproc+0xe8>
   8ed8c:	8800101e 	bne	r17,zero,8edd0 <__register_exitproc+0x90>
   8ed90:	2105883a 	add	r2,r4,r4
   8ed94:	1085883a 	add	r2,r2,r2
   8ed98:	20c00044 	addi	r3,r4,1
   8ed9c:	1145883a 	add	r2,r2,r5
   8eda0:	0009883a 	mov	r4,zero
   8eda4:	15000215 	stw	r20,8(r2)
   8eda8:	28c00115 	stw	r3,4(r5)
   8edac:	2005883a 	mov	r2,r4
   8edb0:	dfc00517 	ldw	ra,20(sp)
   8edb4:	dd000417 	ldw	r20,16(sp)
   8edb8:	dcc00317 	ldw	r19,12(sp)
   8edbc:	dc800217 	ldw	r18,8(sp)
   8edc0:	dc400117 	ldw	r17,4(sp)
   8edc4:	dc000017 	ldw	r16,0(sp)
   8edc8:	dec00604 	addi	sp,sp,24
   8edcc:	f800283a 	ret
   8edd0:	29802204 	addi	r6,r5,136
   8edd4:	00800044 	movi	r2,1
   8edd8:	110e983a 	sll	r7,r2,r4
   8eddc:	30c04017 	ldw	r3,256(r6)
   8ede0:	2105883a 	add	r2,r4,r4
   8ede4:	1085883a 	add	r2,r2,r2
   8ede8:	1185883a 	add	r2,r2,r6
   8edec:	19c6b03a 	or	r3,r3,r7
   8edf0:	14802015 	stw	r18,128(r2)
   8edf4:	14c00015 	stw	r19,0(r2)
   8edf8:	00800084 	movi	r2,2
   8edfc:	30c04015 	stw	r3,256(r6)
   8ee00:	88bfe31e 	bne	r17,r2,8ed90 <__register_exitproc+0x50>
   8ee04:	30804117 	ldw	r2,260(r6)
   8ee08:	11c4b03a 	or	r2,r2,r7
   8ee0c:	30804115 	stw	r2,260(r6)
   8ee10:	003fdf06 	br	8ed90 <__register_exitproc+0x50>
   8ee14:	008002b4 	movhi	r2,10
   8ee18:	10a55504 	addi	r2,r2,-27308
   8ee1c:	100b883a 	mov	r5,r2
   8ee20:	80805215 	stw	r2,328(r16)
   8ee24:	003fd606 	br	8ed80 <__register_exitproc+0x40>
   8ee28:	00800034 	movhi	r2,0
   8ee2c:	10800004 	addi	r2,r2,0
   8ee30:	1000021e 	bne	r2,zero,8ee3c <__register_exitproc+0xfc>
   8ee34:	013fffc4 	movi	r4,-1
   8ee38:	003fdc06 	br	8edac <__register_exitproc+0x6c>
   8ee3c:	01006404 	movi	r4,400
   8ee40:	103ee83a 	callr	r2
   8ee44:	1007883a 	mov	r3,r2
   8ee48:	103ffa26 	beq	r2,zero,8ee34 <__register_exitproc+0xf4>
   8ee4c:	80805217 	ldw	r2,328(r16)
   8ee50:	180b883a 	mov	r5,r3
   8ee54:	18000115 	stw	zero,4(r3)
   8ee58:	18800015 	stw	r2,0(r3)
   8ee5c:	80c05215 	stw	r3,328(r16)
   8ee60:	18006215 	stw	zero,392(r3)
   8ee64:	18006315 	stw	zero,396(r3)
   8ee68:	0009883a 	mov	r4,zero
   8ee6c:	883fc826 	beq	r17,zero,8ed90 <__register_exitproc+0x50>
   8ee70:	003fd706 	br	8edd0 <__register_exitproc+0x90>

0008ee74 <register_fini>:
   8ee74:	f800283a 	ret

0008ee78 <__call_exitprocs>:
   8ee78:	00800274 	movhi	r2,9
   8ee7c:	10826f04 	addi	r2,r2,2492
   8ee80:	10800017 	ldw	r2,0(r2)
   8ee84:	defff304 	addi	sp,sp,-52
   8ee88:	df000b15 	stw	fp,44(sp)
   8ee8c:	d8800115 	stw	r2,4(sp)
   8ee90:	00800034 	movhi	r2,0
   8ee94:	10800004 	addi	r2,r2,0
   8ee98:	1005003a 	cmpeq	r2,r2,zero
   8ee9c:	d8800215 	stw	r2,8(sp)
   8eea0:	d8800117 	ldw	r2,4(sp)
   8eea4:	dd400815 	stw	r21,32(sp)
   8eea8:	dd000715 	stw	r20,28(sp)
   8eeac:	10805204 	addi	r2,r2,328
   8eeb0:	dfc00c15 	stw	ra,48(sp)
   8eeb4:	ddc00a15 	stw	r23,40(sp)
   8eeb8:	dd800915 	stw	r22,36(sp)
   8eebc:	dcc00615 	stw	r19,24(sp)
   8eec0:	dc800515 	stw	r18,20(sp)
   8eec4:	dc400415 	stw	r17,16(sp)
   8eec8:	dc000315 	stw	r16,12(sp)
   8eecc:	282b883a 	mov	r21,r5
   8eed0:	2039883a 	mov	fp,r4
   8eed4:	d8800015 	stw	r2,0(sp)
   8eed8:	2829003a 	cmpeq	r20,r5,zero
   8eedc:	d8800117 	ldw	r2,4(sp)
   8eee0:	14405217 	ldw	r17,328(r2)
   8eee4:	88001026 	beq	r17,zero,8ef28 <__call_exitprocs+0xb0>
   8eee8:	ddc00017 	ldw	r23,0(sp)
   8eeec:	88800117 	ldw	r2,4(r17)
   8eef0:	8c802204 	addi	r18,r17,136
   8eef4:	143fffc4 	addi	r16,r2,-1
   8eef8:	80000916 	blt	r16,zero,8ef20 <__call_exitprocs+0xa8>
   8eefc:	05bfffc4 	movi	r22,-1
   8ef00:	a000151e 	bne	r20,zero,8ef58 <__call_exitprocs+0xe0>
   8ef04:	8409883a 	add	r4,r16,r16
   8ef08:	2105883a 	add	r2,r4,r4
   8ef0c:	1485883a 	add	r2,r2,r18
   8ef10:	10c02017 	ldw	r3,128(r2)
   8ef14:	a8c01126 	beq	r21,r3,8ef5c <__call_exitprocs+0xe4>
   8ef18:	843fffc4 	addi	r16,r16,-1
   8ef1c:	85bff81e 	bne	r16,r22,8ef00 <__call_exitprocs+0x88>
   8ef20:	d8800217 	ldw	r2,8(sp)
   8ef24:	10003126 	beq	r2,zero,8efec <__call_exitprocs+0x174>
   8ef28:	dfc00c17 	ldw	ra,48(sp)
   8ef2c:	df000b17 	ldw	fp,44(sp)
   8ef30:	ddc00a17 	ldw	r23,40(sp)
   8ef34:	dd800917 	ldw	r22,36(sp)
   8ef38:	dd400817 	ldw	r21,32(sp)
   8ef3c:	dd000717 	ldw	r20,28(sp)
   8ef40:	dcc00617 	ldw	r19,24(sp)
   8ef44:	dc800517 	ldw	r18,20(sp)
   8ef48:	dc400417 	ldw	r17,16(sp)
   8ef4c:	dc000317 	ldw	r16,12(sp)
   8ef50:	dec00d04 	addi	sp,sp,52
   8ef54:	f800283a 	ret
   8ef58:	8409883a 	add	r4,r16,r16
   8ef5c:	88c00117 	ldw	r3,4(r17)
   8ef60:	2105883a 	add	r2,r4,r4
   8ef64:	1445883a 	add	r2,r2,r17
   8ef68:	18ffffc4 	addi	r3,r3,-1
   8ef6c:	11800217 	ldw	r6,8(r2)
   8ef70:	1c001526 	beq	r3,r16,8efc8 <__call_exitprocs+0x150>
   8ef74:	10000215 	stw	zero,8(r2)
   8ef78:	303fe726 	beq	r6,zero,8ef18 <__call_exitprocs+0xa0>
   8ef7c:	00c00044 	movi	r3,1
   8ef80:	1c06983a 	sll	r3,r3,r16
   8ef84:	90804017 	ldw	r2,256(r18)
   8ef88:	8cc00117 	ldw	r19,4(r17)
   8ef8c:	1884703a 	and	r2,r3,r2
   8ef90:	10001426 	beq	r2,zero,8efe4 <__call_exitprocs+0x16c>
   8ef94:	90804117 	ldw	r2,260(r18)
   8ef98:	1884703a 	and	r2,r3,r2
   8ef9c:	10000c1e 	bne	r2,zero,8efd0 <__call_exitprocs+0x158>
   8efa0:	2105883a 	add	r2,r4,r4
   8efa4:	1485883a 	add	r2,r2,r18
   8efa8:	11400017 	ldw	r5,0(r2)
   8efac:	e009883a 	mov	r4,fp
   8efb0:	303ee83a 	callr	r6
   8efb4:	88800117 	ldw	r2,4(r17)
   8efb8:	98bfc81e 	bne	r19,r2,8eedc <__call_exitprocs+0x64>
   8efbc:	b8800017 	ldw	r2,0(r23)
   8efc0:	147fd526 	beq	r2,r17,8ef18 <__call_exitprocs+0xa0>
   8efc4:	003fc506 	br	8eedc <__call_exitprocs+0x64>
   8efc8:	8c000115 	stw	r16,4(r17)
   8efcc:	003fea06 	br	8ef78 <__call_exitprocs+0x100>
   8efd0:	2105883a 	add	r2,r4,r4
   8efd4:	1485883a 	add	r2,r2,r18
   8efd8:	11000017 	ldw	r4,0(r2)
   8efdc:	303ee83a 	callr	r6
   8efe0:	003ff406 	br	8efb4 <__call_exitprocs+0x13c>
   8efe4:	303ee83a 	callr	r6
   8efe8:	003ff206 	br	8efb4 <__call_exitprocs+0x13c>
   8efec:	88800117 	ldw	r2,4(r17)
   8eff0:	1000081e 	bne	r2,zero,8f014 <__call_exitprocs+0x19c>
   8eff4:	89000017 	ldw	r4,0(r17)
   8eff8:	20000726 	beq	r4,zero,8f018 <__call_exitprocs+0x1a0>
   8effc:	b9000015 	stw	r4,0(r23)
   8f000:	8809883a 	mov	r4,r17
   8f004:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   8f008:	bc400017 	ldw	r17,0(r23)
   8f00c:	883fb71e 	bne	r17,zero,8eeec <__call_exitprocs+0x74>
   8f010:	003fc506 	br	8ef28 <__call_exitprocs+0xb0>
   8f014:	89000017 	ldw	r4,0(r17)
   8f018:	882f883a 	mov	r23,r17
   8f01c:	2023883a 	mov	r17,r4
   8f020:	883fb21e 	bne	r17,zero,8eeec <__call_exitprocs+0x74>
   8f024:	003fc006 	br	8ef28 <__call_exitprocs+0xb0>

0008f028 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   8f028:	defffd04 	addi	sp,sp,-12
   8f02c:	df000215 	stw	fp,8(sp)
   8f030:	df000204 	addi	fp,sp,8
   8f034:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   8f038:	e0bfff17 	ldw	r2,-4(fp)
   8f03c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8f040:	e0bffe17 	ldw	r2,-8(fp)
   8f044:	1005003a 	cmpeq	r2,r2,zero
   8f048:	1000021e 	bne	r2,zero,8f054 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   8f04c:	002af070 	cmpltui	zero,zero,43969
   8f050:	00000106 	br	8f058 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   8f054:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   8f058:	e037883a 	mov	sp,fp
   8f05c:	df000017 	ldw	fp,0(sp)
   8f060:	dec00104 	addi	sp,sp,4
   8f064:	f800283a 	ret

0008f068 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8f068:	defffd04 	addi	sp,sp,-12
   8f06c:	dfc00215 	stw	ra,8(sp)
   8f070:	df000115 	stw	fp,4(sp)
   8f074:	df000104 	addi	fp,sp,4
   8f078:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   8f07c:	00800274 	movhi	r2,9
   8f080:	10885b44 	addi	r2,r2,8557
   8f084:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   8f088:	e13fff17 	ldw	r4,-4(fp)
   8f08c:	008f0280 	call	8f028 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8f090:	003fff06 	br	8f090 <_exit+0x28>
   8f094:	0008ee74 	movhi	zero,9145
